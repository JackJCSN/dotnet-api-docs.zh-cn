<Type Name="SignedXml" FullName="System.Security.Cryptography.Xml.SignedXml">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e630aa2ce3476b00ce50bed3c2270f34369059c5" /><Meta Name="ms.sourcegitcommit" Value="6b9d64332f31de312efea785fbb19e4d80f544d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/12/2019" /><Meta Name="ms.locfileid" Value="67027250" /></Metadata><TypeSignature Language="C#" Value="public class SignedXml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SignedXml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Xml.SignedXml" />
  <TypeSignature Language="VB.NET" Value="Public Class SignedXml" />
  <TypeSignature Language="C++ CLI" Value="public ref class SignedXml" />
  <TypeSignature Language="F#" Value="type SignedXml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>在核心 XML 签名对象上提供包装器，以便创建 XML 签名。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml>类是万维网联合会 (W3C) 的.NET 实现[XML 签名语法和处理规范](https://www.w3.org/TR/xmldsig-core/)，也称为 XMLDSIG （XML 数字签名）。 XMLDSIG 是基于标准的、 可互操作的方式进行签名并验证所有或部分 XML 文档或可从统一资源标识符 (URI) 寻址的其他数据。
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml>类无论何时需要共享签名 XML 数据应用程序或组织之间以标准方式。 可以通过 XMLDSIG W3C 规范的任何一致性实现验证签名使用此类的任何数据。
  
 <xref:System.Security.Cryptography.Xml.SignedXml>类使您可以创建 XML 数字签名的以下三种：  
  
|签名类型|描述|  
|--------------------|-----------------|  
|封装的签名|签名包含在正被签名的 XML 元素。|  
|包封签名|签名的 XML 包含在`<Signature>`元素。|  
|内部分离的签名|签名和签名的 XML 是在同一文档中，但两个元素中包含其他。|  
  
 此外，还有第四种调用时的数据和签名是在单独的 XML 文档中的外部分离的签名的签名。 不支持外部分离的签名<xref:System.Security.Cryptography.Xml.SignedXml>类。  
  
## <a name="the-structure-of-an-xml-signature"></a>XML 签名的结构  

XMLDSIG 创建`<Signature>`元素，它包含的数字签名的 XML 文档或其他可从 URI 寻址的数据。 `<Signature>`元素可以选择包含有关在何处可以找到将验证此签名的密钥信息和哪种加密算法用于签名。 基本结构是按如下所示：  
  
```xml
<Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">  
    <SignedInfo>  
      <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>  
      <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>  
      <Reference URI="">  
        <Transforms>  
          <Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>  
        </Transforms>  
        <DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>  
        <DigestValue>Base64EncodedValue==</DigestValue>  
      </Reference>  
    </SignedInfo>  
    <SignatureValue>AnotherBase64EncodedValue===</SignatureValue>  
</Signature>
```  
  
此结构的主要部分是：  
  
- `<CanonicalizationMethod>` 元素

    指定用于重写规则`Signature`从 XML/文本元素插入签名验证的字节数。 在.NET 中的默认值是<http://www.w3.org/TR/2001/REC-xml-c14n-20010315>，用于标识可信的算法。 此元素表示由<xref:System.Security.Cryptography.Xml.SignedInfo.CanonicalizationMethod%2A?displayProperty=nameWithType>属性。  
  
- `<SignatureMethod>` 元素

   指定用于签名生成和验证，已应用到的算法`<Signature>`元素以生成中的值`<SignatureValue>`。 在上一示例中，值<http://www.w3.org/2000/09/xmldsig#rsa-sha1>标识的 RSA PKCS1 sha-1 签名。 此元素表示由<xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A>属性。  
  
- `<SignatureValue>` 元素

   指定的加密签名`<Signature>`元素。 如果此签名不验证，然后的某些部分`<Signature>`块已被篡改，并且该文档将被视为无效。 只要`<CanonicalizationMethod>`值是可信任，则该值为有效防止篡改。 此元素表示由<xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A>属性。  
  
- `URI`属性的`<Reference>`元素  

   指定使用的 URI 引用的数据对象。 此属性由<xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=nameWithType>属性。  
  
   - 未指定`URI`属性，即，设置<xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=nameWithType>属性设置为`null`，意味着接收应用程序需要知道对象的标识。 在大多数情况下， `null` URI 会导致引发异常。 不要使用`null`URI，除非你的应用程序进行交互操作与需要它的协议。  
  
   - 设置`URI`属性为空字符串指示，该文档的根元素正进行签名，被包封签名的一种形式。  
  
   - 如果的值`URI`属性开头 #，则值必须解析为当前文档中的元素。 此窗体可用于任何受支持的签名类型 （被包封签名、 包封签名或内部分离的签名）。  
  
   - 任何其他内容被视为外部资源拆离签名和不受<xref:System.Security.Cryptography.Xml.SignedXml>类。  
  
- `<Transforms>` 元素  

   包含的排序的列表`<Transform>`描述如何签名者获取的数据对象的元素融会贯通。 转换算法是类似于规范化方法，但无需重写`<Signature>`元素，它将重写由标识的内容`URI`属性的`<Reference>`元素。 `<Transforms>`元素表示由<xref:System.Security.Cryptography.Xml.TransformChain>类。  
  
   - 每个转换算法定义为采用 XML (一个 XPath 节点集) 或字节数作为输入。 如果当前数据的格式不同于转换的输入要求，应用转换规则。  
  
   - 每个转换算法被定义为作为输出生成 XML 或字节数。  
  
   - 如果以字节为单位未定义的最后一个转换算法的输出 （或指定不转换），则[规范化方法](https://www.w3.org/TR/2001/REC-xml-c14n-20010315)用作隐式转换 (即使中指定了不同的算法`<CanonicalizationMethod>`元素)。  
  
   - 值为<http://www.w3.org/2000/09/xmldsig#enveloped-signature>转换算法进行编码的规则将被解释为删除`<Signature>`从文档元素。 否则为被包封签名的验证程序将摘要式文档，包括签名，但签名人会有融会贯通文档之前应用签名，从而导致不同的答案。  

- `<DigestMethod>` 元素
 
   标识要在转换后的内容由标识应用的摘要 （加密哈希） 方法`URI`属性的`<Reference>`元素。 这由<xref:System.Security.Cryptography.Xml.Reference.DigestMethod%2A?displayProperty=nameWithType>属性。  
  
## <a name="choosing-a-canonicalization-method"></a>选择规范化方法  
 除非需要使用不同的值的规范与进行互操作，否则我们建议使用默认.NET 规范化方法，这是 XML C14N 1.0 算法，其值是<http://www.w3.org/TR/2001/REC-xml-c14n-20010315>。 XML C14N 1.0 算法需要支持的所有实现的 XMLDSIG，特别是因为它是隐式的最后一个转换以将应用。  
  
 有版本支持保留注释规范化算法。 不建议保留注释的规范化方法，因为他们违反"签名所看到的内容"原则。 也就是说中的注释`<Signature>`元素不会更改处理逻辑的签名的执行方式，只是哪些签名值。 与弱签名算法，从而为包含的提供的注释允许攻击者不必要可以自由地强制执行哈希冲突，结合使用时进行篡改的文档显示合法。  在.NET Framework 中，默认情况下支持仅内置 canonicalizers。 若要支持其他或自定义 canonicalizers，请参阅<xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A>属性。 如果文档是否使用不是由表示集合中的规范化方法<xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A>属性，则<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法将返回`false`。  
  
> [!NOTE]
>  极防御性的应用程序可以删除不需要签名者中要使用的任何值<xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A>集合。  
  
## <a name="are-the-reference-values-safe-from-tampering"></a>是引用值被篡改安全？  
 是的`<Reference>`值是安全被篡改。 .NET 验证`<SignatureValue>`计算之前处理的任何`<Reference>`值和其关联转换，并将提前中止以避免潜在的恶意的处理指令。  
  
## <a name="choosing-the-elements-to-sign"></a>选择要签名的元素  
 我们建议你使用的值""对于`URI`属性 (或设置<xref:System.Security.Cryptography.Xml.Reference.Uri%2A>属性为空字符串)，在可能的情况。 这意味着整个文档视为摘要计算，这意味着整个文档保护不被篡改。  
  
 它是很常见，若要查看`URI`如 #foo，其 ID 属性为"foo"的元素引用的定位点的窗体中的值。 遗憾的是，很容易使此选项会被篡改，因为其中包括仅目标元素，而不是用上下文的内容。 滥用这一区别就是通常作为 XML 签名包装 (XSW)。  
  
 如果你的应用程序认为注释，以进行语义 （这不常见时处理 XML），则应使用"#xpointer(/)"而不是""，并"#xpointer(id('foo'))"而不是"#foo"。 #Xpointer 版本被解释为包括注释，而为短名称为窗体将不包括注释。  
  
 如果您需要接受仅部分受保护的文档，并且你想要确保您阅读的内容相同的受保护的签名，请使用<xref:System.Security.Cryptography.Xml.SignedXml.GetIdElement%2A>方法。  
  
## <a name="security-considerations-about-the-keyinfo-element"></a>有关 KeyInfo 元素的安全注意事项  
 在可选的数据`<KeyInfo>`元素 (即，<xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>属性)，其中包含的密钥来验证签名，不应为受信任。  
  
 特别地，当<xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>值表示裸机 RSA、 DSA 或 ECDSA 公钥，该文档可能已被篡改，尽管<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>报告该签名有效的方法。  这可能是因为执行被篡改的只该实体必须生成新密钥并使用该新密钥重新签名被篡改的文档。 因此，除非你的应用程序验证的公钥为预期值，就像它已篡改应被视为文档。 这需要你的应用程序检查文档中嵌入的公钥，并验证其与文档上下文的已知值的列表。 例如，如果文档无法理解颁发者已知用户，会检查针对的用户所使用的已知键列表的键。  
  
 你还可以使用来处理该文档后验证密钥<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey%2A>方法，而不是使用<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法。 但是，为获得最佳安全性，您应验证的密钥事先。  
  
 或者，请考虑尝试用户的注册公共密钥，而不是读取新增`<KeyInfo>`元素。  
  
## <a name="security-considerations-about-the-x509data-element"></a>有关 X509Data 元素的安全注意事项  
 可选`<X509Data>`元素是子元素的`<KeyInfo>`元素且包含一个或多个 X509 证书或标识符的 X509 证书。 中的数据`<X509Data>`元素也不应继承方式受到信任。  
  
 验证具有嵌入的文档时`<X509Data>`元素中，.NET 仅验证数据解析为 X509 证书可以成功使用其公钥来验证文档签名。 与调用不同<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法替换`verifySignatureOnly`参数设置为`false`、 执行不进行吊销检查、 检查没有链信任关系，和验证不会过期。 即使你的应用程序提取证书本身，并将其传递给<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法替换`verifySignatureOnly`参数设置为`false`，它仍不充分的验证，以防止文档被篡改。 仍需要为适用于正被签名的文档验证该证书。  
  
 使用嵌入的签名证书可以是否提供有用的密钥轮换策略，在`<X509Data>`部分或在文档内容中。 使用此方法时应用程序应手动提取证书，并执行验证类似于：  
  
-   证书已颁发直接或通过链由证书颁发机构 (CA) 的公共证书嵌入到应用程序。  
  
     使用 OS 提供信任列表，无需进行其他检查，例如已知的使用者名称，并不足以防止篡改的<xref:System.Security.Cryptography.Xml.SignedXml>。  
  
-   验证该证书尚未过期的文档签名时 （或"立即"的近乎实时的文档处理）。  
  
-   它支持吊销特定 CA 颁发的生存期较长的证书，验证未吊销该证书。  
  
-   证书使用者验证为适用于当前文档中。  
  
## <a name="choosing-the-transform-algorithm"></a>选择转换算法  
 如果进行互操作使用的具有指定特定值 （如 XrML) 规范，然后您需要遵循规范。 如果必须被包封的签名 (例如，当对整个文档的签名)，则需要使用<http://www.w3.org/2000/09/xmldsig#enveloped-signature>(由<xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform>类)。 您可以指定隐式的 XML C14N 转换，但不需要。  对于在封装或已分离签名，没有转换是必需的。 隐式的 XML C14N 转换负责的所有内容。  
  
 与安全更新引起[Microsoft 安全公告 MS16-035](https://docs.microsoft.com/security-updates/securitybulletins/2016/ms16-035)，.NET 已限制转换可以是在文档验证中使用默认情况下，使用不受信任的转换导致<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>始终返回`false`。 具体而言，这需要额外的输入 （指定为 XML 中的子元素） 的转换，不再允许使用由于其滥用的可能性被恶意用户。 W3C 建议避免 XPath 和 XSLT 转换，都受到这些限制的两个主要转换。  
  
## <a name="the-problem-with-external-references"></a>使用外部引用问题  
 如果应用程序不会验证外部引用都不适合于当前上下文，它们可能会被滥用中提供的很多安全漏洞 （包括拒绝的服务，反射的分布式拒绝服务，信息的方式泄露、 签名跳过和远程执行代码）。 即使应用程序来验证外部引用 URI，仍两次加载资源的问题： 一旦您的应用程序时读取它，并后时<xref:System.Security.Cryptography.Xml.SignedXml>读取它。 由于没有应用程序读取和文档验证步骤具有相同的内容不能保证，签名不提供可信赖性。  
  
 给定的外部引用，风险<xref:System.Security.Cryptography.Xml.SignedXml>遇到的外部引用时将引发异常。  有关此问题的详细信息，请参阅[知识库文章 3148821](https://support.microsoft.com/kb/3148821)。  
  
   
  
## Examples  
 下面的代码示例演示如何进行签名和验证使用被包封的签名的整个 XML 文档。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用包封签名的 XML 文档的单一元素。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://www.w3.org/TR/xmldsig-bestpractices">XML 签名的最佳实践</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何进行签名和验证使用被包封的签名的整个 XML 文档。  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用分离的签名通过统一资源标识符 (URI) 查找的对象。  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用包封签名的 XML 文档的单一元素。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml (System.Xml.XmlDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlDocument document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (document As XmlDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml(System::Xml::XmlDocument ^ document);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Xml.SignedXml : System.Xml.XmlDocument -&gt; System.Security.Cryptography.Xml.SignedXml" Usage="new System.Security.Cryptography.Xml.SignedXml document" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
      </Parameters>
      <Docs>
        <param name="document">用于初始化 <see cref="T:System.Xml.XmlDocument" /> 的新实例的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象。</param>
        <summary>从指定的 XML 文档初始化 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何进行签名和验证使用被包封的签名的整个 XML 文档。  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用分离的签名通过统一资源标识符 (URI) 查找的对象。  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用包封签名的 XML 文档的单一元素。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="document" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="document" /> 参数含有 null <see cref="P:System.Xml.XmlDocument.DocumentElement" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedXml (System.Xml.XmlElement elem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlElement elem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elem As XmlElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignedXml(System::Xml::XmlElement ^ elem);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Xml.SignedXml : System.Xml.XmlElement -&gt; System.Security.Cryptography.Xml.SignedXml" Usage="new System.Security.Cryptography.Xml.SignedXml elem" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elem" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="elem">用于初始化 <see cref="T:System.Xml.XmlElement" /> 的新实例的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象。</param>
        <summary>从指定的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象初始化 <see cref="T:System.Xml.XmlElement" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="elem" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddObject">
      <MemberSignature Language="C#" Value="public void AddObject (System.Security.Cryptography.Xml.DataObject dataObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddObject(class System.Security.Cryptography.Xml.DataObject dataObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.AddObject(System.Security.Cryptography.Xml.DataObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddObject(System::Security::Cryptography::Xml::DataObject ^ dataObject);" />
      <MemberSignature Language="F#" Value="member this.AddObject : System.Security.Cryptography.Xml.DataObject -&gt; unit" Usage="signedXml.AddObject dataObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataObject" Type="System.Security.Cryptography.Xml.DataObject" />
      </Parameters>
      <Docs>
        <param name="dataObject">要添加到要签名对象列表中的 <see cref="T:System.Security.Cryptography.Xml.DataObject" /> 对象。</param>
        <summary>将 <see cref="T:System.Security.Cryptography.Xml.DataObject" /> 对象添加到要签名的对象的列表中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddObject%2A>方法将添加`<Object>`表示的对象到要签名的元素`<Signature>`元素的 XML 数字签名。  
  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddObject%2A>方法在内部调用<xref:System.Security.Cryptography.Xml.Signature.AddObject%2A>方法<xref:System.Security.Cryptography.Xml.Signature>对象由封装<xref:System.Security.Cryptography.Xml.SignedXml>对象。  您还可以添加<xref:System.Security.Cryptography.Xml.DataObject>通过直接调用的对象<xref:System.Security.Cryptography.Xml.Signature.AddObject%2A>方法从<xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A>属性。  
  
 有关 XML 数字签名的详细信息，请参阅[XMLDSIG 规范](https://www.w3.org/TR/xmldsig-core/)。  
  
   
  
## Examples  
 以下代码示例的计算资源和 XML 签名。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/CPP/example.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/CS/example.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml-AddObject-AddReference/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddReference">
      <MemberSignature Language="C#" Value="public void AddReference (System.Security.Cryptography.Xml.Reference reference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddReference(class System.Security.Cryptography.Xml.Reference reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.AddReference(System.Security.Cryptography.Xml.Reference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddReference(System::Security::Cryptography::Xml::Reference ^ reference);" />
      <MemberSignature Language="F#" Value="member this.AddReference : System.Security.Cryptography.Xml.Reference -&gt; unit" Usage="signedXml.AddReference reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.Security.Cryptography.Xml.Reference" />
      </Parameters>
      <Docs>
        <param name="reference">描述用于创建 XML 数字签名的摘要方法、摘要值和转换的 <see cref="T:System.Security.Cryptography.Xml.Reference" /> 对象。</param>
        <summary>将 <see cref="T:System.Security.Cryptography.Xml.Reference" /> 对象添加到描述用于创建 XML 数字签名的摘要方法、摘要值和转换的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddReference%2A>方法将添加`<Reference>`元素<xref:System.Security.Cryptography.Xml.SignedXml>介绍摘要方法、 摘要值和转换要用于创建 XML 数字签名的对象。  `<Reference>`元素是子元素的`<SignedInfo>`元素。  
  
 <xref:System.Security.Cryptography.Xml.SignedXml.AddReference%2A>方法在内部调用<xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A>方法<xref:System.Security.Cryptography.Xml.SignedInfo>对象由封装<xref:System.Security.Cryptography.Xml.SignedXml>对象。  您还可以添加<xref:System.Security.Cryptography.Xml.Reference>通过直接调用的对象<xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A>方法从<xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A>属性。  
  
 有关 XML 数字签名的详细信息，请参阅[XMLDSIG 规范](https://www.w3.org/TR/xmldsig-core/)。  
  
   
  
## Examples  
 下面的代码示例演示如何进行签名和验证使用被包封的签名的整个 XML 文档。  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用分离的签名通过统一资源标识符 (URI) 查找的对象。  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用包封签名的 XML 文档的单一元素。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CheckSignature">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性是否进行验证。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature();" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : unit -&gt; bool" Usage="signedXml.CheckSignature " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性是否使用签名中的公钥进行验证。</summary>
        <returns>如果 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性验证，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法还会计算引用的摘要和签名的值。  
  
 如果 XML 文档进行签名的 X.509 签名与<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法将适用于验证的证书"通讯簿"应用商店中搜索。 例如，如果证书引用由使用者密钥标识符 (SKI)，<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法将选择具有此 SKI 证书并将尝试一个接一个直到它可以验证的证书。  
  
   
  
## Examples  
 下面的代码示例演示如何进行签名和验证使用被包封的签名的整个 XML 文档。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用分离的签名通过统一资源标识符 (URI) 查找的对象。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用包封签名的 XML 文档的单一元素。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">签名中的公钥的 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> 属性与 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> 属性不匹配。  
  
- 或 - 
未能创建签名说明。  
  
- 或 - 
未能创建哈希算法。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.AsymmetricAlgorithm key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.AsymmetricAlgorithm key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.AsymmetricAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (key As AsymmetricAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::AsymmetricAlgorithm ^ key);" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : System.Security.Cryptography.AsymmetricAlgorithm -&gt; bool" Usage="signedXml.CheckSignature key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.AsymmetricAlgorithm" />
      </Parameters>
      <Docs>
        <param name="key">保存有将用于验证 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 属性的密钥的 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性实现。</param>
        <summary>确定 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性是否对指定密钥进行验证。</summary>
        <returns>如果 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性对指定密钥进行验证，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何进行签名和验证使用分离的签名通过统一资源标识符 (URI) 查找的对象。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用被包封的签名的整个 XML 文档。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="key" /> 参数的 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> 属性与 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> 属性不匹配。  
  
- 或 - 
未能创建签名说明。  
  
- 或 - 
未能创建哈希算法。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.KeyedHashAlgorithm macAlg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.KeyedHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (macAlg As KeyedHashAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::KeyedHashAlgorithm ^ macAlg);" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : System.Security.Cryptography.KeyedHashAlgorithm -&gt; bool" Usage="signedXml.CheckSignature macAlg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="macAlg" Type="System.Security.Cryptography.KeyedHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="macAlg">保存将用于验证 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 属性的 MAC 的 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 的实现。</param>
        <summary>确定 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性是否对指定的消息身份验证代码 (MAC) 算法进行验证。</summary>
        <returns>如果 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性对指定的 MAC 进行验证，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何进行签名和验证使用分离的签名通过统一资源标识符 (URI) 查找的对象。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CPP/xmldsigdetachedkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CS/xmldsigdetachedkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/VB/xmldsigdetachedkeyedhashalg.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用包封签名的整个 XML 文档。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CPP/xmldsigenvkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CS/xmldsigenvkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/VB/xmldsigenvkeyedhashalg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="macAlg" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">指定的 <see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" /> 对象的 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 属性无效。  
  
- 或 - 
<see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性为 <see langword="null" />。  
  
- 或 - 
未能创建用于检查签名的加密转换。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public bool CheckSignature (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool verifySignatureOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignature(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool verifySignatureOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignature (certificate As X509Certificate2, verifySignatureOnly As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignature(System::Security::Cryptography::X509Certificates::X509Certificate2 ^ certificate, bool verifySignatureOnly);" />
      <MemberSignature Language="F#" Value="member this.CheckSignature : System.Security.Cryptography.X509Certificates.X509Certificate2 * bool -&gt; bool" Usage="signedXml.CheckSignature (certificate, verifySignatureOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="verifySignatureOnly" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="certificate">用于验证 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 属性的 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 对象。</param>
        <param name="verifySignatureOnly"><see langword="true" /> 表示仅验证签名；<see langword="false" /> 表示同时验证签名和证书。</param>
        <summary>确定 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性是否验证指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象，并确定该证书是否有效（可选）。</summary>
        <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。  
  
- 或 - 
 如果签名和证书都有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在.NET framework 版本 1.1 中，未验证的 X.509 证书。  在版本 2.0 及更高版本中，验证 X.509 证书。  
  
 在版本 2.0 及更高版本的.NET Framework 中，<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法将适用于验证的证书"通讯簿"应用商店中搜索。 例如，如果证书引用由使用者密钥标识符 (SKI)，<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>方法将选择具有此 SKI 证书并将尝试一个接一个直到它可以验证的证书。  
  
   
  
## Examples  
 下面的代码示例使用从证书存储的 X.509 证书进行签名和验证 XML 文档。  
  
 [!code-csharp[Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1](~/samples/snippets/csharp/VS_Snippets_CLR/Security.Cryptography.Xml.SignedXml.CheckSignature/cs/sample.cs#1)]
 [!code-vb[Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Security.Cryptography.Xml.SignedXml.CheckSignature/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="certificate" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">未能为 <paramref name="certificate" /> 参数创建签名说明。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignatureReturningKey">
      <MemberSignature Language="C#" Value="public bool CheckSignatureReturningKey (out System.Security.Cryptography.AsymmetricAlgorithm signingKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckSignatureReturningKey([out] class System.Security.Cryptography.AsymmetricAlgorithm&amp; signingKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(System.Security.Cryptography.AsymmetricAlgorithm@)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSignatureReturningKey (ByRef signingKey As AsymmetricAlgorithm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckSignatureReturningKey([Runtime::InteropServices::Out] System::Security::Cryptography::AsymmetricAlgorithm ^ % signingKey);" />
      <MemberSignature Language="F#" Value="member this.CheckSignatureReturningKey :  -&gt; bool" Usage="signedXml.CheckSignatureReturningKey signingKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signingKey" Type="System.Security.Cryptography.AsymmetricAlgorithm" RefType="out" />
      </Parameters>
      <Docs>
        <param name="signingKey">当此方法返回时，将包含保存签名中的公钥的 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 的实现。 此参数未经初始化即被传递。</param>
        <summary>确定 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性是否使用签名中的公钥进行验证。</summary>
        <returns>如果 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性使用签名中的公钥进行验证，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何进行签名和验证使用分离的签名通过统一资源标识符 (URI) 查找的对象。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached/VB/exampledetached.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用包封签名的整个 XML 文档。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope/VB/exampleenvelope.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="signingKey" /> 参数为 null。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">签名中的公钥的 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" /> 属性与 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" /> 属性不匹配。  
  
- 或 - 
未能创建签名说明。  
  
- 或 - 
未能创建哈希算法。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ComputeSignature">
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>计算 XML 数字签名。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ComputeSignature">
      <MemberSignature Language="C#" Value="public void ComputeSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.ComputeSignature" />
      <MemberSignature Language="VB.NET" Value="Public Sub ComputeSignature ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ComputeSignature();" />
      <MemberSignature Language="F#" Value="member this.ComputeSignature : unit -&gt; unit" Usage="signedXml.ComputeSignature " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算 XML 数字签名。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A>方法创建 XML 数字签名，并构造任意多的所需的 XML 元素。  
  
 必须设置的数据进行签名和<xref:System.Security.Cryptography.Xml.SignedXml.SigningKey%2A>之前调用此方法的属性。  
  
   
  
## Examples  
 下面的代码示例演示如何进行签名和验证使用分离的签名通过统一资源标识符 (URI) 查找的对象。  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用包封签名的整个 XML 文档。  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CPP/xmldsigenv.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CS/xmldsigenv.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/VB/xmldsigenv.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" /> 属性为 <see langword="null" />。  
  
- 或 - 
<see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" /> 属性既不是 <see cref="T:System.Security.Cryptography.DSA" /> 对象，也不是 <see cref="T:System.Security.Cryptography.RSA" /> 对象。  
  
- 或 - 
未能加载密钥。</exception>
      </Docs>
    </Member>
    <Member MemberName="ComputeSignature">
      <MemberSignature Language="C#" Value="public void ComputeSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeSignature(class System.Security.Cryptography.KeyedHashAlgorithm macAlg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.ComputeSignature(System.Security.Cryptography.KeyedHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ComputeSignature (macAlg As KeyedHashAlgorithm)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ComputeSignature(System::Security::Cryptography::KeyedHashAlgorithm ^ macAlg);" />
      <MemberSignature Language="F#" Value="member this.ComputeSignature : System.Security.Cryptography.KeyedHashAlgorithm -&gt; unit" Usage="signedXml.ComputeSignature macAlg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="macAlg" Type="System.Security.Cryptography.KeyedHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="macAlg"><see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 对象，它保存将用于计算 <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" /> 属性值的 MAC。</param>
        <summary>使用指定的消息身份验证代码 (MAC) 算法计算 XML 数字签名。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A>方法创建 XML 数字签名使用指定的 MAC 算法，并构造任意多的所需的 XML 元素。  
  
 必须设置要调用此方法之前进行签名的数据。  
  
   
  
## Examples  
 下面的代码示例演示如何进行签名和验证使用分离的签名通过统一资源标识符 (URI) 查找的对象。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CPP/xmldsigdetachedkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/CS/xmldsigdetachedkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached/VB/xmldsigdetachedkeyedhashalg.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用包封签名的整个 XML 文档。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CPP/xmldsigenvkeyedhashalg.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/CS/xmldsigenvkeyedhashalg.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope/VB/xmldsigenvkeyedhashalg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="macAlg" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">由 <paramref name="macAlg" /> 参数指定的 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 对象不是 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 的实例。  
  
- 或 - 
指定的 <see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" /> 对象的 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 属性无效。  
  
- 或 - 
未能创建用于检查签名的加密转换。</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptedXml">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.EncryptedXml EncryptedXml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.EncryptedXml EncryptedXml" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.EncryptedXml" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptedXml As EncryptedXml" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::EncryptedXml ^ EncryptedXml { System::Security::Cryptography::Xml::EncryptedXml ^ get(); void set(System::Security::Cryptography::Xml::EncryptedXml ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptedXml : System.Security.Cryptography.Xml.EncryptedXml with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.EncryptedXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.EncryptedXml</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置定义 XML 加密处理规则的 <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 对象。</summary>
        <value>定义 XML 加密处理规则的 <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> 对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIdElement">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement GetIdElement (System.Xml.XmlDocument document, string idValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlElement GetIdElement(class System.Xml.XmlDocument document, string idValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetIdElement(System.Xml.XmlDocument,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIdElement (document As XmlDocument, idValue As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlElement ^ GetIdElement(System::Xml::XmlDocument ^ document, System::String ^ idValue);" />
      <MemberSignature Language="F#" Value="abstract member GetIdElement : System.Xml.XmlDocument * string -&gt; System.Xml.XmlElement&#xA;override this.GetIdElement : System.Xml.XmlDocument * string -&gt; System.Xml.XmlElement" Usage="signedXml.GetIdElement (document, idValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
        <Parameter Name="idValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="document">要从中检索 <see cref="T:System.Xml.XmlDocument" /> 对象的 <see cref="T:System.Xml.XmlElement" /> 对象。</param>
        <param name="idValue">要从 <see cref="T:System.Xml.XmlElement" /> 对象中检索的 <see cref="T:System.Xml.XmlDocument" /> 对象的 ID。</param>
        <summary>从指定的 <see cref="T:System.Xml.XmlElement" /> 对象返回具有指定 ID 的 <see cref="T:System.Xml.XmlDocument" /> 对象。</summary>
        <returns>指定的 <see cref="T:System.Xml.XmlElement" /> 对象中具有指定 ID 的 <see cref="T:System.Xml.XmlDocument" /> 对象；或者，如果未能找到它，则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPublicKey">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Cryptography.AsymmetricAlgorithm GetPublicKey ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Security.Cryptography.AsymmetricAlgorithm GetPublicKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetPublicKey" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetPublicKey () As AsymmetricAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Security::Cryptography::AsymmetricAlgorithm ^ GetPublicKey();" />
      <MemberSignature Language="F#" Value="abstract member GetPublicKey : unit -&gt; System.Security.Cryptography.AsymmetricAlgorithm&#xA;override this.GetPublicKey : unit -&gt; System.Security.Cryptography.AsymmetricAlgorithm" Usage="signedXml.GetPublicKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回签名的公钥。</summary>
        <returns>包含签名公钥的 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象；如果未能找到该公钥，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.GetPublicKey%2A>方法将返回<xref:System.Security.Cryptography.AsymmetricAlgorithm>对象，其中包含可以用于验证 XML 数字签名的公钥。  
  
 密钥必须是<xref:System.Security.Cryptography.DSA>或<xref:System.Security.Cryptography.RSA>密钥。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="P:System.Security.Cryptography.Xml.SignedXml.KeyInfo" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlElement GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlElement ^ GetXml();" />
      <MemberSignature Language="F#" Value="member this.GetXml : unit -&gt; System.Xml.XmlElement" Usage="signedXml.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象的 XML 表示形式。</summary>
        <returns><see cref="T:System.Security.Cryptography.Xml.Signature" /> 对象的 XML 表示形式。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" /> 属性为 <see langword="null" />。  
  
- 或 - 
<see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="KeyInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.KeyInfo KeyInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.KeyInfo KeyInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.KeyInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyInfo As KeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::KeyInfo ^ KeyInfo { System::Security::Cryptography::Xml::KeyInfo ^ get(); void set(System::Security::Cryptography::Xml::KeyInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.KeyInfo : System.Security.Cryptography.Xml.KeyInfo with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.KeyInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.KeyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 对象的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象。</summary>
        <value>当前 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 对象的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>属性表示`<KeyInfo>`元素的 XML 数字签名使用<xref:System.Security.Cryptography.Xml.KeyInfo>属性中包含的对象。  `<KeyInfo>`元素是子元素的`<Signature>`元素。  
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>属性嵌入密钥相关的信息专门用于帮助标识所必需的验证 XML 文档密钥。  
  
 有关详细信息`<KeyInfo>`元素，请参阅[XMLDSIG 规范](https://www.w3.org/TR/xmldsig-core/)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Security.Cryptography.Xml.KeyInfo>时签名由统一资源标识符 (URI) 表示的资源对象。  此示例中将签名保存在一个新的文件。  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#1)]  
  
 下面的代码示例使用<xref:System.Security.Cryptography.Xml.KeyInfo>时对 XML 文档的签名对象。  此示例中将签名保存在一个新的文件。  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CPP/xmldsigenv.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/CS/xmldsigenv.cs#1)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigEnvelope/VB/xmldsigenv.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public void LoadXml (System.Xml.XmlElement value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadXml(class System.Xml.XmlElement value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.SignedXml.LoadXml(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadXml (value As XmlElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadXml(System::Xml::XmlElement ^ value);" />
      <MemberSignature Language="F#" Value="member this.LoadXml : System.Xml.XmlElement -&gt; unit" Usage="signedXml.LoadXml value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="value">要从其加载 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 状态的 XML 元素。</param>
        <summary>从 XML 元素加载 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Security.Cryptography.Xml.SignedXml.LoadXml%2A>方法以验证 XML 文档。  
  
 [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CPP/xmldsigdetach.cpp#3)]
 [!code-csharp[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/CS/xmldsigdetach.cs#3)]
 [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML-XMLDsigDetached/VB/xmldsigdetach.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="value" /> 参数不包含有效的 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" /> 属性。  
  
- 或 - 
<paramref name="value" /> 参数不包含有效的 <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="m_signature">
      <MemberSignature Language="C#" Value="protected System.Security.Cryptography.Xml.Signature m_signature;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Security.Cryptography.Xml.Signature m_signature" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.m_signature" />
      <MemberSignature Language="VB.NET" Value="Protected m_signature As Signature " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Security::Cryptography::Xml::Signature ^ m_signature;" />
      <MemberSignature Language="F#" Value="val mutable m_signature : System.Security.Cryptography.Xml.Signature" Usage="System.Security.Cryptography.Xml.SignedXml.m_signature" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.Signature</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示当前 <see cref="T:System.Security.Cryptography.Xml.Signature" /> 对象的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="m_strSigningKeyName">
      <MemberSignature Language="C#" Value="protected string m_strSigningKeyName;" />
      <MemberSignature Language="ILAsm" Value=".field family string m_strSigningKeyName" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName" />
      <MemberSignature Language="VB.NET" Value="Protected m_strSigningKeyName As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ m_strSigningKeyName;" />
      <MemberSignature Language="F#" Value="val mutable m_strSigningKeyName : string" Usage="System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示将用于对 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象进行签名的已安装密钥的名称。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver Resolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver Resolver" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.Resolver" />
      <MemberSignature Language="VB.NET" Value="Public Property Resolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ Resolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resolver : System.Xml.XmlResolver" Usage="System.Security.Cryptography.Xml.SignedXml.Resolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置当前的 <see cref="T:System.Xml.XmlResolver" /> 对象。</summary>
        <value>当前的 <see cref="T:System.Xml.XmlResolver" /> 对象。 默认为 <see cref="T:System.Xml.XmlSecureResolver" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver>类解析由统一资源标识符 (URI) 命名的外部 XML 资源。 如果不信任的 XML 文件的源，可能不想要允许访问由 URI 命名的计算机资源的 XML 文件。 可以使用<xref:System.Security.Cryptography.Xml.SignedXml.Resolver%2A>属性控制的 XML 文件必须通过指定不同的计算机资源的访问级别<xref:System.Xml.XmlResolver>对象。 如果您不想要允许任何访问权限，可以将此属性设置为`null`(`Nothing`在 Visual Basic 中)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SafeCanonicalizationMethods">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; SafeCanonicalizationMethods { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; SafeCanonicalizationMethods" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeCanonicalizationMethods As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ SafeCanonicalizationMethods { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SafeCanonicalizationMethods : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已显式允许其规范化算法的方法的名称。</summary>
        <value>一个安全生成规范 XML 的方法的名称集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 规范化方法将 XML 文档转换为它的规范化形式。 有关规范 XML 的详细信息，请参阅[规范化 XML](https://www.w3.org/TR/xml-c14n) W3C 网站上。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Signature">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.Signature Signature { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.Signature Signature" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Signature As Signature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::Signature ^ Signature { System::Security::Cryptography::Xml::Signature ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Signature : System.Security.Cryptography.Xml.Signature" Usage="System.Security.Cryptography.Xml.SignedXml.Signature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.Signature</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Security.Cryptography.Xml.Signature" /> 对象的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象。</summary>
        <value>当前 <see cref="T:System.Security.Cryptography.Xml.Signature" /> 对象的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A>属性表示`<Signature>`元素的 XML 数字签名使用<xref:System.Security.Cryptography.Xml.Signature>属性中包含的对象。  `<Signature>`元素是用于创建 XML 数字签名和验证的根元素。  
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A>属性来检索<xref:System.Security.Cryptography.Xml.Signature>对象，由<xref:System.Security.Cryptography.Xml.SignedXml>对象。  
  
 有关详细信息`<Signature>`元素，请参阅[XMLDSIG 规范](https://www.w3.org/TR/xmldsig-core/)。
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A>属性进行签名和验证使用被包封的签名的整个 XML 文档。  
  
 [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.Signature - Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.Signature - Envelope/VB/sample.vb#1)]  
  
 下面的代码示例使用<xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A>进行签名和验证使用分离的签名的统一资源标识符 (URI) 寻址对象的属性。  
  
 [!code-cpp[XMLDSIG - Signature - Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CPP/sample.cpp#1)]
 [!code-csharp[XMLDSIG - Signature - Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR/XMLDSIG - Signature - Detached/CS/sample.cs#1)]
 [!code-vb[XMLDSIG - Signature - Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/XMLDSIG - Signature - Detached/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureFormatValidator">
      <MemberSignature Language="C#" Value="public Func&lt;System.Security.Cryptography.Xml.SignedXml,bool&gt; SignatureFormatValidator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Security.Cryptography.Xml.SignedXml, bool&gt; SignatureFormatValidator" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator" />
      <MemberSignature Language="VB.NET" Value="Public Property SignatureFormatValidator As Func(Of SignedXml, Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ SignatureFormatValidator { Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ get(); void set(Func&lt;System::Security::Cryptography::Xml::SignedXml ^, bool&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SignatureFormatValidator : Func&lt;System.Security.Cryptography.Xml.SignedXml, bool&gt; with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Security.Cryptography.Xml.SignedXml,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个委托，将调用此委托以验证 XML 签名的格式（而非加密安全性）。</summary>
        <value>如果此格式是可接受的，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此方法，以确保使用了仅某些转换，或签名使用某些哈希算法和等等。  
  
 将属性设置为`null`删除所有签名格式验证从<xref:System.Security.Cryptography.Xml.SignedXml>对象。  
  
 如果你想，还可以读取该对象的当前委托和它的链。  
  
 如果您设置了格式验证器，您提供的委托将收到作为输入参数<xref:System.Security.Cryptography.Xml.SignedXml>对象正在验证并返回一个布尔值-`true`的格式是可接受的如果`false`如果不是。 如果在委托返回`false`出于任何原因<xref:System.Security.Cryptography.Xml.SignedXml>对象将报告 XML 签名无效。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureLength">
      <MemberSignature Language="C#" Value="public string SignatureLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureLength" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureLength As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignatureLength { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureLength : string" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象的签名长度。</summary>
        <value>当前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象的签名长度。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureMethod">
      <MemberSignature Language="C#" Value="public string SignatureMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureMethod" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignatureMethod { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureMethod : string" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象的签名方法。</summary>
        <value>当前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象的签名方法。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A>属性表示`<SignatureMethod>`使用统一资源标识符 (URI) 字符串属性中包含的 XML 数字签名的元素。 `<SignatureMethod>`元素是子元素的`<SignedInfo>`元素。  
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A>属性来检索`<SignatureMethod>`使用 URI<xref:System.Security.Cryptography.Xml.SignedXml>对象。 此属性为只读属性。 有关以编程方式指定的 URI 的详细信息`<SignatureMethod>`元素，请参阅<xref:System.Security.Cryptography.Xml.SignedInfo.SignatureMethod%2A>属性。  
  
 有关详细信息`<SignatureMethod>`元素，请参阅[XMLDSIG 规范](https://www.w3.org/TR/xmldsig-core/)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureValue">
      <MemberSignature Language="C#" Value="public byte[] SignatureValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SignatureValue" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureValue As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SignatureValue { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureValue : byte[]" Usage="System.Security.Cryptography.Xml.SignedXml.SignatureValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象的签名值。</summary>
        <value>一个字节数组，其中包含当前 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象的签名值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A>属性表示`<SignatureValue>`XML 数字签名使用该属性中所包含的字节数组的元素。  `<SignatureValue>`元素是子元素的`<Signature>`元素。  
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A>属性来检索 XML 数字签名的值。  请在成功调用时，将自动填充此属性<xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A>方法。  
  
 有关详细信息`<SignatureValue>`元素，请参阅[XMLDSIG 规范](https://www.w3.org/TR/xmldsig-core/)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignedInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Xml.SignedInfo SignedInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Xml.SignedInfo SignedInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignedInfo As SignedInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::Xml::SignedInfo ^ SignedInfo { System::Security::Cryptography::Xml::SignedInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignedInfo : System.Security.Cryptography.Xml.SignedInfo" Usage="System.Security.Cryptography.Xml.SignedXml.SignedInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Xml.SignedInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> 对象的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象。</summary>
        <value>当前 <see cref="T:System.Security.Cryptography.Xml.SignedInfo" /> 对象的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A>属性表示`<SignedInfo>`XML 数字签名使用该属性中所包含的字节数组的元素。  `<SignedInfo>`元素是子元素的`<Signature>`元素。  
  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A>属性来检索<xref:System.Security.Cryptography.Xml.SignedInfo>对象，它由<xref:System.Security.Cryptography.Xml.SignedXml>对象来创建 XML 数字签名。  
  
 有关详细信息`<SignedInfo>`元素，请参阅[XMLDSIG 规范](https://www.w3.org/TR/xmldsig-core/)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningKey">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.AsymmetricAlgorithm SigningKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.AsymmetricAlgorithm SigningKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SigningKey As AsymmetricAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::AsymmetricAlgorithm ^ SigningKey { System::Security::Cryptography::AsymmetricAlgorithm ^ get(); void set(System::Security::Cryptography::AsymmetricAlgorithm ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SigningKey : System.Security.Cryptography.AsymmetricAlgorithm with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.SigningKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于对 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象进行签名的不对称算法密钥。</summary>
        <value>用于对  <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象进行签名的不对称算法密钥。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Security.Cryptography.Xml.SignedXml.SigningKey%2A>属性指定的非对称密钥你想要用于创建 XML 数字签名。  
  
   
  
## Examples  
 下面的代码示例演示如何进行签名和验证使用被包封的签名的整个 XML 文档。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CPP/exampleenvelope.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/CS/exampleenvelope.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope/VB/exampleenvelope.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用分离的签名通过统一资源标识符 (URI) 查找的对象。  
  
 [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CPP/exampledetached.cpp#1)]
 [!code-csharp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/CS/exampledetached.cs#1)]
 [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached/VB/exampledetached.vb#1)]  
  
 下面的代码示例演示如何进行签名和验证使用包封签名的 XML 文档的单一元素。  
  
 [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/CS/sample.cs#1)]
 [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.SignVerifyEnvelope - Specify Element/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningKeyName">
      <MemberSignature Language="C#" Value="public string SigningKeyName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SigningKeyName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.SignedXml.SigningKeyName" />
      <MemberSignature Language="VB.NET" Value="Public Property SigningKeyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SigningKeyName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SigningKeyName : string with get, set" Usage="System.Security.Cryptography.Xml.SignedXml.SigningKeyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置将用于对 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象进行签名的已安装密钥的名称。</summary>
        <value>将用于对 <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> 对象进行签名的已安装密钥的名称。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDecryptionTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDecryptionTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDecryptionTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDecryptionTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDecryptionTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDecryptionTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与 XML 模式解密转换对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl>字段是<http://www.w3.org/2002/07/decrypt#XML>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/2002/07/decrypt#XML)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigBase64TransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigBase64TransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigBase64TransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigBase64TransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigBase64TransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigBase64TransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与 base 64 转换对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl>字段是<http://www.w3.org/2000/09/xmldsig#base64>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigBase64Transform>类实现所描述的转换<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl>字段。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 架构](https://www.w3.org/2000/09/xmldsig#base64)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用的成员<xref:System.Security.Cryptography.Xml.XmlDsigBase64Transform>类。  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigBase64Transform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigC14NTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigC14NTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigC14NTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigC14NTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigC14NTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigC14NTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与规范化 XML 转换对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>字段是<http://www.w3.org/TR/2001/REC-xml-c14n-20010315>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform>类实现所描述的转换<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>字段。  
  
 有关详细信息，请参阅 World Wide Web 联合会 (W3C)[规范化 XML](https://www.w3.org/TR/2001/REC-xml-c14n-20010315)规范。  
  
 此字段的长度相同的值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl>字段。  
  
   
  
## Examples  
 下面的代码示例演示如何调用的成员<xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform>类。  
  
 [!code-cpp[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigC14NTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigC14NWithCommentsTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigC14NWithCommentsTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigC14NWithCommentsTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigC14NWithCommentsTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与规范化 XML 转换对应的统一资源标识符 (URI)（包含注释）。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl>字段是<http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform>类实现所描述的转换<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl>字段。  
  
 有关详细信息，请参阅 World Wide Web 联合会 (W3C)[规范化 XML](https://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments)规范。  
  
 此字段的长度相同的值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl>字段。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigCanonicalizationUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigCanonicalizationUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigCanonicalizationUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigCanonicalizationUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigCanonicalizationUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigCanonicalizationUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与 XML 数字签名的标准规范化算法对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl>字段是<http://www.w3.org/TR/2001/REC-xml-c14n-20010315>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform>类实现所描述的转换<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl>字段。  
  
 有关详细信息，请参阅 World Wide Web 联合会 (W3C)[规范化 XML](https://www.w3.org/TR/2001/REC-xml-c14n-20010315)规范。  
  
 此字段的长度相同的值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>字段。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigCanonicalizationWithCommentsUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigCanonicalizationWithCommentsUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigCanonicalizationWithCommentsUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigCanonicalizationWithCommentsUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigCanonicalizationWithCommentsUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigCanonicalizationWithCommentsUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与 XML 数字签名的标准规范化算法对应的统一资源标识符 (URI) 并且包括注释。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl>字段是<http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform>类实现所描述的转换<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl>字段。  
  
 有关详细信息，请参阅 World Wide Web 联合会 (W3C)[规范化 XML](https://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments)规范。  
  
 此字段的长度相同的值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl>字段。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigDSAUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigDSAUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigDSAUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigDSAUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigDSAUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigDSAUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与 XML 数字签名的标准 <see cref="T:System.Security.Cryptography.DSA" /> 算法对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl>字段是<http://www.w3.org/2000/09/xmldsig#dsa-sha1>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 架构](https://www.w3.org/2000/09/xmldsig#dsa-sha1)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigEnvelopedSignatureTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigEnvelopedSignatureTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigEnvelopedSignatureTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigEnvelopedSignatureTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigEnvelopedSignatureTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigEnvelopedSignatureTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与被包封签名转换对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl>字段是<http://www.w3.org/2000/09/xmldsig#enveloped-signature>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform>类实现所描述的转换<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl>字段。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 架构](https://www.w3.org/2000/09/xmldsig#enveloped-signature)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用的成员<xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform>类。  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/cpp/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigExcC14NTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigExcC14NTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigExcC14NTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigExcC14NTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigExcC14NTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigExcC14NTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与专用 XML 规范化对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl>字段是<http://www.w3.org/2001/10/xml-exc-c14n#>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform>类实现所描述的转换<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl>字段。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/2001/10/xml-exc-c14n)。  
  
   
  
## Examples  
 下面的代码示例演示如何进行签名和验证 XML 文档使用<xref:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform>类。  此示例创建一个封装签名。  
  
 [!code-cpp[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/CPP/example.cpp#1)]
 [!code-csharp[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/CS/example.cs#1)]
 [!code-vb[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NTransform/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigExcC14NWithCommentsTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigExcC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigExcC14NWithCommentsTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigExcC14NWithCommentsTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigExcC14NWithCommentsTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigExcC14NWithCommentsTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与专用 XML 规范化对应的统一资源标识符 (URI)（包含注释）。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl>字段是<http://www.w3.org/2001/10/xml-exc-c14n#WithComments>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform>类实现所描述的转换<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl>字段。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/2001/10/xml-exc-c14n#WithComments)。  
  
   
  
## Examples  
 下面的代码示例演示如何进行签名和验证 XML 文档使用<xref:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform>类。  此示例创建一个封装签名。  
  
 [!code-cpp[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/CS/sample.cs#1)]
 [!code-vb[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XmlDsigExcC14NWithCommentsTransform/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigHMACSHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigHMACSHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigHMACSHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigHMACSHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigHMACSHA1Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigHMACSHA1Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与 XML 数字签名的标准 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 算法对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url>字段是<http://www.w3.org/2000/09/xmldsig#hmac-sha1>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/2000/09/xmldsig#hmac-sha1)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigMinimalCanonicalizationUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigMinimalCanonicalizationUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigMinimalCanonicalizationUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigMinimalCanonicalizationUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigMinimalCanonicalizationUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigMinimalCanonicalizationUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与 XML 数字签名的标准最低规范化算法对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl>字段是<http://www.w3.org/2000/09/xmldsig#minimal>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/2000/09/xmldsig#minimal)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigNamespaceUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigNamespaceUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigNamespaceUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigNamespaceUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigNamespaceUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigNamespaceUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与 XML 数字签名的标准命名空间对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl>字段是<http://www.w3.org/2000/09/xmldsig#>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 架构](https://www.w3.org/2000/09/xmldsig)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA1Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA1Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与 XML 数字签名的标准 <see cref="T:System.Security.Cryptography.RSA" /> 签名方法对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url>字段是<http://www.w3.org/2000/09/xmldsig#rsa-sha1>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 架构](https://www.w3.org/2000/09/xmldsig#rsa-sha1)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA256Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA256Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA256Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA256Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA256Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA256Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 XML 数字签名的 <see cref="T:System.Security.Cryptography.RSA" /> SHA-256 签名方法变量的统一资源标识符。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url>字段是<http://www.w3.org/2001/04/xmldsig-more#rsa-sha256>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/2001/04/xmldsig-more#rsa-sha256)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA384Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA384Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA384Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA384Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA384Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA384Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 XML 数字签名的 <see cref="T:System.Security.Cryptography.RSA" /> SHA-384 签名方法变量的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url>字段是<http://www.w3.org/2001/04/xmldsig-more#rsa-sha384>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/2001/04/xmldsig-more#rsa-sha384)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigRSASHA512Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigRSASHA512Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigRSASHA512Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigRSASHA512Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigRSASHA512Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigRSASHA512Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 XML 数字签名的 <see cref="T:System.Security.Cryptography.RSA" /> SHA-512 签名方法变量的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url>字段是<http://www.w3.org/2001/04/xmldsig-more#rsa-sha512>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/2001/04/xmldsig-more#rsa-sha512)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA1Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA1Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA1Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA1Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA1Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA1Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 XML 数字签名的标准 <see cref="T:System.Security.Cryptography.SHA1" /> 摘要方法的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url>字段是<http://www.w3.org/2000/09/xmldsig#sha1>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 架构](https://www.w3.org/2000/09/xmldsig#sha1)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA256Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA256Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA256Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA256Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA256Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA256Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 XML 数字签名的标准 <see cref="T:System.Security.Cryptography.SHA256" /> 摘要方法的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url>字段是<http://www.w3.org/2001/04/xmlenc#sha256>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/2001/04/xmlenc#sha256)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA384Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA384Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA384Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA384Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA384Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA384Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 XML 数字签名的标准 <see cref="T:System.Security.Cryptography.SHA384" /> 摘要方法的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url>字段是<http://www.w3.org/2001/04/xmldsig-more#sha384>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/2001/04/xmldsig-more#sha384)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigSHA512Url">
      <MemberSignature Language="C#" Value="public const string XmlDsigSHA512Url;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigSHA512Url" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigSHA512Url As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigSHA512Url;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigSHA512Url : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表 XML 数字签名的标准 <see cref="T:System.Security.Cryptography.SHA512" /> 摘要方法的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url>字段是<http://www.w3.org/2001/04/xmlenc#sha512>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/2001/04/xmlenc#sha512)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigXPathTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigXPathTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigXPathTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigXPathTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigXPathTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigXPathTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与 XML 路径语言 (XPath) 对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl>字段是<http://www.w3.org/TR/1999/REC-xpath-19991116>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform>类实现所描述的转换<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl>字段。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/TR/1999/REC-xpath-19991116)。  
  
   
  
## Examples  
 下面的代码示例演示如何调用的成员<xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform>类。  
  
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXPathTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXPathTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXPathTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXPathTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDsigXsltTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlDsigXsltTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlDsigXsltTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlDsigXsltTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlDsigXsltTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlDsigXsltTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与 XSLT 转换对应的统一资源标识符 (URI)。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl>字段是<http://www.w3.org/TR/1999/REC-xslt-19991116>。  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform>类实现所描述的转换<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl>字段。  
  
 有关详细信息，请参阅[World Wide Web 联合会 (W3C) 规范](https://www.w3.org/TR/1999/REC-xslt-19991116)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用的成员<xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform>类。  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/VB/members.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlLicenseTransformUrl">
      <MemberSignature Language="C#" Value="public const string XmlLicenseTransformUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string XmlLicenseTransformUrl" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl" />
      <MemberSignature Language="VB.NET" Value="Public Const XmlLicenseTransformUrl As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ XmlLicenseTransformUrl;" />
      <MemberSignature Language="F#" Value="val mutable XmlLicenseTransformUrl : string" Usage="System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示与用于对签名的 XrML 许可证进行标准化的许可证转换算法对应的统一资源标识符 (URI)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl>字段是"urn: mpeg:mpeg21:2003:01-REL-R-NS:licenseTransform"  
  
 使用此字段来方便地提供到使用 XMLDSIG 的元素的 URI 属性之一的值。  
  
 <xref:System.Security.Cryptography.Xml.XmlLicenseTransform>类实现所描述的转换<xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl>字段。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

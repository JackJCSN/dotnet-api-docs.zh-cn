<Type Name="MemoryMarshal" FullName="System.Runtime.InteropServices.MemoryMarshal">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8cfead5e087ab21f7e8e4c8f331b45d0f8299cc3" /><Meta Name="ms.sourcegitcommit" Value="a9b8eb12d69b131f7c0de74d471798e44e863282" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/04/2019" /><Meta Name="ms.locfileid" Value="66501988" /></Metadata><TypeSignature Language="C#" Value="public static class MemoryMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.MemoryMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class MemoryMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryMarshal abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a4c1e-101">提供与 <see cref="T:System.Memory`1" />、<see cref="T:System.ReadOnlyMemory`1" />、<see cref="T:System.Span`1" /> 和 <see cref="T:System.ReadOnlySpan`1" /> 进行交互操作的方法。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-101">Provides methods to interoperate with <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />,  <see cref="T:System.Span`1" />, and  <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (ReadOnlySpan&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static ReadOnlySpan&lt;System::Byte&gt; AsBytes(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; ReadOnlySpan&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-102">只读的范围中的项的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-102">The type of items in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="a4c1e-103">要转换的源切片。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-103">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="a4c1e-104">将一种基元类型 <paramref name="T" /> 的 <see cref="T:System.ReadOnlySpan`1" /> 强制转换为 <see langword="ReadOnlySpan&lt;Byte&gt;" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-104">Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type, <paramref name="T" />, to a <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-105">类型 <see cref="T:System.Byte" /> 的只读范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-105">A read-only span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-106">`T` 不能包含指针或引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-106">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="a4c1e-107">`T` 在运行时以保持类型安全性检查。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-107">`T` is checked at runtime in order to preserve type safety.</span></span>  

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4c1e-108"><paramref name="T" /> 包含引用或指针。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-108"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a4c1e-109">新 <see cref="T:System.ReadOnlySpan`1" /> 的 <see cref="P:System.ReadOnlySpan`1.Length" /> 属性将超过 <see cref="F:System.Int32.MaxValue" /></span><span class="sxs-lookup"><span data-stu-id="a4c1e-109">The <see cref="P:System.ReadOnlySpan`1.Length" /> property of the new <see cref="T:System.ReadOnlySpan`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;byte&gt; AsBytes&lt;T&gt; (Span&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As Span(Of T)) As Span(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static Span&lt;System::Byte&gt; AsBytes(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : Span&lt;'T (requires 'T : struct)&gt; -&gt; Span&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-110">范围中的项的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-110">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="a4c1e-111">要转换的源切片。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-111">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="a4c1e-112">将一种基元类型 <paramref name="T" /> 的 <see cref="T:System.Span`1" /> 强制转换为 <see langword="Span&lt;Byte&gt;" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-112">Casts a <see cref="T:System.Span`1" /> of one primitive type, <paramref name="T" />, to a <see langword="Span&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-113">类型 <see cref="T:System.Byte" /> 的范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-113">A span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-114">`T` 不能包含指针或引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-114">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="a4c1e-115">`T` 在运行时以保持类型安全性检查。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-115">`T` is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4c1e-116"><paramref name="T" /> 包含引用或指针。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-116"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="a4c1e-117">新 <see cref="T:System.Span`1" /> 的 <see cref="P:System.Span`1.Length" /> 属性将超过 <see cref="F:System.Int32.MaxValue" /></span><span class="sxs-lookup"><span data-stu-id="a4c1e-117">The <see cref="P:System.Span`1.Length" /> property of the new <see cref="T:System.Span`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsMemory(Of T) (memory As ReadOnlyMemory(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; AsMemory(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ReadOnlyMemory&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.AsMemory memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-118">只读内存缓冲区中的项的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-118">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="a4c1e-119">只读内存缓冲区。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-119">The read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="a4c1e-120">通过 <see cref="T:System.Memory`1" /> 创建 <see cref="T:System.ReadOnlyMemory`1" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-120">Creates a <see cref="T:System.Memory`1" /> instance from a <see cref="T:System.ReadOnlyMemory`1" />.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-121">表示与 <see cref="T:System.ReadOnlyMemory`1" /> 相同的内存的内存块。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-121">A memory block that represents the same memory as the <see cref="T:System.ReadOnlyMemory`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-122">必须格外谨慎使用此方法。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-122">This method must be used with extreme caution.</span></span> <span data-ttu-id="a4c1e-123"><xref:System.ReadOnlyMemory%601> 用于表示不可变的数据和其他不是为了写入到的内存。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-123"><xref:System.ReadOnlyMemory%601> is used to represent immutable data and other memory that is not meant to be written to.</span></span> <span data-ttu-id="a4c1e-124"><xref:System.Memory%601> 不应写入此方法创建的实例。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-124"><xref:System.Memory%601> instances created by this method should not be written to.</span></span> <span data-ttu-id="a4c1e-125">此方法的用途是允许变量类型化为<xref:System.Memory%601>但仅用于读取存储<xref:System.ReadOnlyMemory%601>。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-125">The purpose of this method is to allow variables typed as <xref:System.Memory%601> but only used for reading to store a <xref:System.ReadOnlyMemory%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref readonly T&amp; AsRef&lt;T&gt; (ReadOnlySpan&lt;byte&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig T&amp; modreq(System.Runtime.InteropServices.InAttribute) AsRef&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T As Structure) (span As ReadOnlySpan(Of Byte)) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T&amp; ^ AsRef(ReadOnlySpan&lt;System::Byte&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsRef : ReadOnlySpan&lt;byte&gt; -&gt; T&amp; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsRef span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-3.0">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-126">返回的引用的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-126">The type of the returned reference.</span></span></typeparam>
        <param name="span"><span data-ttu-id="a4c1e-127">要重新解释的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-127">The read-only span to reinterpret.</span></span></param>
        <summary><span data-ttu-id="a4c1e-128">将字节的只读跨度重新解释为对 <paramref name="T" /> 类型结构的只读引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-128">Reinterprets a read-only span of bytes as a read-only reference to the structure of type <paramref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-129">对 <paramref name="T" /> 类型结构的只读引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-129">The read-only reference to the structure of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-130">`T` 不能包含指针或引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-130">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="a4c1e-131">它在运行时检查以保持类型安全性。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-131">It is checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="a4c1e-132">仅在支持未对齐的内存访问的平台上支持此方法或内存的阻止时通过其他方式对齐。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-132">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T AsRef&lt;T&gt; (Span&lt;byte&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T As Structure) (span As Span(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T % AsRef(Span&lt;System::Byte&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsRef : Span&lt;byte&gt; -&gt;  (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsRef span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-133">返回的引用的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-133">The type of the returned reference.</span></span></typeparam>
        <param name="span"><span data-ttu-id="a4c1e-134">要重新解释的跨度。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-134">The span to reinterpret.</span></span></param>
        <summary><span data-ttu-id="a4c1e-135">将字节跨度重新解释为对 <paramref name="T" /> 类型结构的引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-135">Reinterprets a span of bytes as a reference to the structure of type <paramref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-136">对 <paramref name="T" /> 类型结构的引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-136">The reference to the structure of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-137">`T` 不能包含指针或引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-137">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="a4c1e-138">它在运行时检查以保持类型安全性。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-138">It is checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="a4c1e-139">仅在支持未对齐的内存访问的平台上支持此方法或内存的阻止时通过其他方式对齐。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-139">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (ReadOnlySpan&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.ReadOnlySpan`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static ReadOnlySpan&lt;TTo&gt; Cast(ReadOnlySpan&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : ReadOnlySpan&lt;'From (requires 'From : struct)&gt; -&gt; ReadOnlySpan&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="a4c1e-140">源跨度类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-140">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="a4c1e-141">目标跨度的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-141">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="a4c1e-142">要转换的源切片。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-142">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="a4c1e-143">将一种基元类型的只读范围强制转换为另一种基元类型的只读范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-143">Casts a read-only span of one primitive type to a read-only span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-144">转换后的只读范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-144">The converted read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-145">既不`TFrom`也不`TTo`可以包含指针或引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-145">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="a4c1e-146">`TFrom` 和`TTo`要在运行时检查以保持类型安全性。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-146">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="a4c1e-147">仅在支持未对齐的内存访问的平台上支持此方法或内存的阻止时通过其他方式对齐。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-147">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4c1e-148"><paramref name="TFrom" /> 或 <paramref name="TTo" /> 包含引用或指针。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-148"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (Span&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.Span`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As Span(Of TFrom)) As Span(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static Span&lt;TTo&gt; Cast(Span&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : Span&lt;'From (requires 'From : struct)&gt; -&gt; Span&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="a4c1e-149">源跨度类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-149">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="a4c1e-150">目标跨度的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-150">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="a4c1e-151">要转换的源切片。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-151">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="a4c1e-152">将一种基元类型的范围强制转换为另一种基元类型的范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-152">Casts a span of one primitive type to a span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-153">转换后的范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-153">The converted span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-154">既不`TFrom`也不`TTo`可以包含指针或引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-154">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="a4c1e-155">`TFrom` 和`TTo`要在运行时检查以保持类型安全性。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-155">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="a4c1e-156">强制转换发生在未检查的上下文中。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-156">The cast occurs in an unchecked context.</span></span> <span data-ttu-id="a4c1e-157">如果范围`TTo`小于的范围`TFrom`，会发生数据丢失。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-157">If the range of `TTo` is less than the range of `TFrom`, data loss can occur.</span></span> <span data-ttu-id="a4c1e-158">例如，如果`TFrom`是<xref:System.Int64>、 利用某个的`ReadOnlySpan<Int32>`值是 0x100001111110F0F，和`TTo`是<xref:System.Int32>，生成的值是 11110F0F。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-158">For example, if `TFrom` is <xref:System.Int64>, one of the `ReadOnlySpan<Int32>` values is 0x100001111110F0F, and `TTo` is <xref:System.Int32>, the resulting value is 11110F0F.</span></span>

<span data-ttu-id="a4c1e-159">仅在支持未对齐的内存访问的平台上支持此方法或内存的阻止时通过其他方式对齐。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-159">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4c1e-160"><paramref name="TFrom" /> 或 <paramref name="TTo" /> 包含引用或指针。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-160"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromPinnedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; CreateFromPinnedArray&lt;T&gt; (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; CreateFromPinnedArray&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromPinnedArray(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; CreateFromPinnedArray(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member CreateFromPinnedArray : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-161">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-161">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="a4c1e-162">预固定的源数组。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-162">The pre-pinned source array.</span></span></param>
        <param name="start"><span data-ttu-id="a4c1e-163">开始内存块的 <paramref name="array" /> 的索引。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-163">The index of <paramref name="array" /> at which to begin the memory block.</span></span></param>
        <param name="length"><span data-ttu-id="a4c1e-164">要包括在内存块中的项数。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-164">The number of items to include in the memory block.</span></span></param>
        <summary><span data-ttu-id="a4c1e-165">从 <paramref name="start" /> 索引开始并包含 <paramref name="length" /> 项，在预固定目标数组的一部分之上创建新的内存缓冲区。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-165">Creates a new memory buffer over the portion of the pre-pinned target array beginning at the <paramref name="start" /> index and consisting of <paramref name="length" /> items.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-166"><paramref name="array" /> 的指定元素之上的内存块。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-166">A block of memory over the specified elements of <paramref name="array" />.</span></span> <span data-ttu-id="a4c1e-167">如果 <paramref name="array" /> 是 <see langword="null" />，或者如果 <paramref name="start" /> 和 <paramref name="length" /> 为 0，则此方法将返回 <see cref="System.Memory`1.Length" /> 为零的 <see cref="T:System.Memory`1" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-167">If <paramref name="array" /> is <see langword="null" />, or if <paramref name="start" /> and <paramref name="length" /> are 0, the method returns a <see cref="T:System.Memory`1" /> instance of <see cref="System.Memory`1.Length" /> zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-168">之前调用此方法，且该数组不能已取消固定时，必须已固定数组<xref:System.Memory%601>它将返回的缓冲区是仍在使用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-168">The array must already be pinned before this method is called, and that array must not be unpinned while the <xref:System.Memory%601> buffer that it returns is still in use.</span></span> <span data-ttu-id="a4c1e-169">已取消固定数组上调用此方法可能导致内存损坏。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-169">Calling this method on an unpinned array could result in memory corruption.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="a4c1e-170"><paramref name="array" /> 是协变，<paramref name="array" /> 的类型并不是 <paramref name="T[]" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-170"><paramref name="array" /> is covariant, and the type of <paramref name="array" /> is not exactly <paramref name="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a4c1e-171"><paramref name="start" /> 或结束索引不在 0 到 <see cref="P:System.Array.Length" /> 的范围内。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-171">The <paramref name="start" /> or the end index is not in the range of 0 to <see cref="P:System.Array.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReadOnlySpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; CreateReadOnlySpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateReadOnlySpan(Of T) (ByRef reference As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateReadOnlySpan :  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-172">数据项目的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-172">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="a4c1e-173">对数据的引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-173">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="a4c1e-174"><paramref name="reference" /> 包含的 <paramref name="T" /> 元素数。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-174">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="a4c1e-175">在常规托管对象的一个部分上创建新的只读范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-175">Creates a new read-only span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-176">只读范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-176">A read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-177">此方法会很有用，如果托管对象的一部分表示固定的数组。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-177">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="a4c1e-178">应谨慎使用此方法。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-178">This method should be used with caution.</span></span> <span data-ttu-id="a4c1e-179">这非常危险，因为`length`不检查自变量。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-179">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="a4c1e-180">此外，返回跨度的生存期不验证为安全起见识别跨度的语言。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-180">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; CreateSpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; CreateSpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpan(Of T) (ByRef reference As T, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Span&lt;T&gt; CreateSpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateSpan :  * int -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateSpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-181">数据项目的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-181">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="a4c1e-182">对数据的引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-182">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="a4c1e-183"><paramref name="reference" /> 包含的 <paramref name="T" /> 元素数。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-183">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="a4c1e-184">在常规托管对象的一个部分上创建新的范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-184">Creates a new span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-185">范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-185">A span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-186">此方法会很有用，如果托管对象的一部分表示固定的数组。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-186">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="a4c1e-187">应谨慎使用此方法。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-187">This method should be used with caution.</span></span> <span data-ttu-id="a4c1e-188">这非常危险，因为`length`不检查自变量。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-188">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="a4c1e-189">此外，返回跨度的生存期不验证为安全起见识别跨度的语言。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-189">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T GetReference&lt;T&gt; (ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As ReadOnlySpan(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : ReadOnlySpan&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-190">范围中的项的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-190">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="a4c1e-191">从中检索引用的只读范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-191">The read-only span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="a4c1e-192">返回对索引为 0 处只读范围元素的引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-192">Returns a reference to the element of the read-only span at index 0.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-193">对索引为 0 处元素的引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-193">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-194">如果只读的范围为空，则此方法返回对其中索引 0 处的元素将存储的位置的引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-194">If the read-only span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="a4c1e-195">此类引用可能会或可能不是`null`。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-195">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="a4c1e-196">返回的引用可以用于固定，但它必须永远不会被取消引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-196">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T GetReference&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As Span(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : Span&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-197">范围中的项的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-197">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="a4c1e-198">从中检索引用的范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-198">The span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="a4c1e-199">返回对索引为 0 处范围元素的引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-199">Returns a reference to the element of the span at index 0.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-200">对索引为 0 处元素的引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-200">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-201">如果跨度为空，则此方法返回对其中索引 0 处的元素将存储的位置的引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-201">If the span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="a4c1e-202">此类引用可能会或可能不是`null`。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-202">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="a4c1e-203">返回的引用可以用于固定，但它必须永远不会被取消引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-203">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Structure) (source As ReadOnlySpan(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Read(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member Read : ReadOnlySpan&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-204">要从只读范围检索的项的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-204">The type of the item to retrieve from the read-only span.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a4c1e-205">只读范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-205">A read-only span.</span></span></param>
        <summary><span data-ttu-id="a4c1e-206">读取类型的结构</span><span class="sxs-lookup"><span data-stu-id="a4c1e-206">Reads a structure of type</span></span> <param name="T" /> <span data-ttu-id="a4c1e-207">字节的只读范围之外。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-207">out of a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-208">从只读范围中检索的结构。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-208">The structure retrieved from the read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-209">`T` 不能包含指针或引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-209">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="a4c1e-210">它在运行时检查以保持类型安全性。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-210">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4c1e-211"><paramref name="T" /> 包含引用或指针。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-211"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a4c1e-212"><paramref name="source" /> 小于 <paramref name="T" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-212"><paramref name="source" /> is smaller than <paramref name="T" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; ToEnumerable&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; ToEnumerable&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToEnumerable(Of T) (memory As ReadOnlyMemory(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ ToEnumerable(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member ToEnumerable : ReadOnlyMemory&lt;'T&gt; -&gt; seq&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.ToEnumerable memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-213">只读内存缓冲区中的项的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-213">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="a4c1e-214">只读内存缓冲区。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-214">A read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="a4c1e-215">创建给定的只读内存缓冲区的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 视图。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-215">Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> view of the given read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-216"><paramref name="memory" /> 的可枚举视图。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-216">An enumerable view of <paramref name="memory" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-217">此方法，用于在需要的类型参数的现有 Api 中使用的只读内存缓冲区<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-217">This method allows a read-only memory buffer to be used in existing APIs that require a parameter of type <xref:System.Collections.Generic.IEnumerable%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetArray&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] valuetype System.ArraySegment`1&lt;!!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetArray(Of T) (memory As ReadOnlyMemory(Of T), ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetArray(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="static member TryGetArray : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetArray (memory, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-218">只读内存缓冲区中的项的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-218">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="a4c1e-219">只读内存缓冲区。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-219">A read-only memory buffer.</span></span></param>
        <param name="segment"><span data-ttu-id="a4c1e-220">此方法返回时，将包含从基础只读内存缓冲区中检索的数组段。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-220">When this method returns, contains the array segment retrieved from the underlying read-only memory buffer.</span></span> <span data-ttu-id="a4c1e-221">如果此方法失败，则将返回默认数组段。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-221">If the method fails, the method returns a default array segment.</span></span></param>
        <summary><span data-ttu-id="a4c1e-222">尝试从基础内存缓冲区获取数组段。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-222">Tries to get an array segment from the underlying memory buffer.</span></span> <span data-ttu-id="a4c1e-223">返回值指示操作是否成功。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-223">The return value indicates the success of the operation.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-224">如果方法调用成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-224"><see langword="true" /> if the method call succeeds; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="manager" Type="TManager" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-225">只读内存缓冲区中的项的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-225">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="a4c1e-226">类型<see cref="T:System.Buffers.MemoryManager`1" />来检索。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-226">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="a4c1e-227">为其获取内存管理器的只读内存缓冲区。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-227">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="a4c1e-228">此方法返回时，为 <paramref name="memory" /> 管理器。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-228">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <summary><span data-ttu-id="a4c1e-229">尝试从基础只读内存缓冲区中检索 <see cref="T:System.Buffers.MemoryManager`1" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-229">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" /> from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-230">如果此方法检索到内存管理器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-230"><see langword="true" /> if the method retrieved the memory manager; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager, out int start, out int length) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  *  *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="manager" Type="TManager" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="start" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="length" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-231">只读内存缓冲区中的项的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-231">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="a4c1e-232">类型<see cref="T:System.Buffers.MemoryManager`1" />来检索。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-232">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="a4c1e-233">为其获取内存管理器的只读内存缓冲区。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-233">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="a4c1e-234">此方法返回时，为 <paramref name="memory" /> 管理器。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-234">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <param name="start"><span data-ttu-id="a4c1e-235">此方法返回时，距离 <paramref name="memory" /> 表示的 <paramref name="manager" /> 的开头的偏移量。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-235">When the method returns, the offset from the start of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <param name="length"><span data-ttu-id="a4c1e-236">此方法返回时，<paramref name="memory" /> 表示的 <paramref name="manager" /> 的长度。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-236">When the method returns, the length of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <summary><span data-ttu-id="a4c1e-237">尝试从基础只读内存缓冲区中检索 <see cref="T:System.Buffers.MemoryManager`1" />、起始索引和长度。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-237">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" />, start index, and length from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-238">如果此方法成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-238"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetString">
      <MemberSignature Language="C#" Value="public static bool TryGetString (ReadOnlyMemory&lt;char&gt; memory, out string text, out int start, out int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetString(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, [out] string&amp; text, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetString (memory As ReadOnlyMemory(Of Char), ByRef text As String, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetString(ReadOnlyMemory&lt;char&gt; memory, [Runtime::InteropServices::Out] System::String ^ % text, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetString : ReadOnlyMemory&lt;char&gt; *  *  *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetString (memory, text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="text" Type="System.String" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="a4c1e-239">包含字符块的只读内存。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-239">Read-only memory containing a block of characters.</span></span></param>
        <param name="text"><span data-ttu-id="a4c1e-240">此方法返回时，字符串将包含在内存缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-240">When the method returns, the string contained in the memory buffer.</span></span></param>
        <param name="start"><span data-ttu-id="a4c1e-241"><paramref name="text" /> 中的起始位置。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-241">The starting location in <paramref name="text" />.</span></span></param>
        <param name="length"><span data-ttu-id="a4c1e-242"><paramref name="text" /> 中的字符数。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-242">The number of characters in <paramref name="text" />.</span></span></param>
        <summary><span data-ttu-id="a4c1e-243">尝试从 <see langword="System.ReadOnlyMemory&lt;Char&gt;" /> 中获取基础字符串。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-243">Tries to get the underlying string from a <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-244">如果此方法成功检索到基础字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-244"><see langword="true" /> if the method successfully retrieves the underlying string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source, out T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRead(Of T As Structure) (source As ReadOnlySpan(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryRead(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryRead : ReadOnlySpan&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryRead (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-245">要检索的结构的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-245">The type of the structure to retrieve.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a4c1e-246">字节的只读范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-246">A read-only span of bytes.</span></span></param>
        <param name="value"><span data-ttu-id="a4c1e-247">此方法返回时，为 <paramref name="T" /> 的实例。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-247">When the method returns, an instance of <paramref name="T" />.</span></span></param>
        <summary><span data-ttu-id="a4c1e-248">尝试从字节的只读范围中读取 <paramref name="T" /> 类型的结构。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-248">Tries to read a structure of type <paramref name="T" /> from a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-249">如果此方法成功检索到结构的实例，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-249"><see langword="true" /> if the method succeeds in retrieving an instance of the structure; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-250">`T` 不能包含指针或引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-250">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="a4c1e-251">它在运行时检查以保持类型安全性。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-251">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4c1e-252"><paramref name="T" /> 包含引用或指针。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-252"><paramref name="T" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryWrite&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryWrite&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite(Of T As Structure) (destination As Span(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryWrite(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member TryWrite : Span&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryWrite (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-253">结构的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-253">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="a4c1e-254">要包含结构的字节范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-254">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="a4c1e-255">要写入到范围的结构。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-255">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="a4c1e-256">尝试将类型为 <paramref name="T" /> 的结构写入到字节的跨度中。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-256">Tries to write a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <returns><span data-ttu-id="a4c1e-257">如果写入操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-257"><see langword="true" /> if the write operation succeeded; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4c1e-258">如果范围太小无法包含 <paramref name="T" />，则此方法返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-258">The method returns <see langword="false" /> if the span is too small to contain <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-259">`T` 不能包含指针或引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-259">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="a4c1e-260">它在运行时检查以保持类型安全性。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-260">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4c1e-261"><paramref name="TFrom" /> 或 <paramref name="TTo" /> 包含引用或指针。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-261"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Structure) (destination As Span(Of Byte), ByRef value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static void Write(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member Write : Span&lt;byte&gt; *  -&gt; unit (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a4c1e-262">结构的类型。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-262">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="a4c1e-263">要包含结构的字节范围。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-263">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="a4c1e-264">要写入到范围的结构。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-264">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="a4c1e-265">将 <paramref name="T" /> 类型的结构写入字节范围内。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-265">Writes a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a4c1e-266">`T` 不能包含指针或引用。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-266">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="a4c1e-267">它在运行时检查以保持类型安全性。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-267">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4c1e-268"><paramref name="T" /> 包含引用或指针。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-268"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a4c1e-269"><paramref name="destination" /> 太小，无法包含 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="a4c1e-269"><paramref name="destination" /> is too small to contain <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

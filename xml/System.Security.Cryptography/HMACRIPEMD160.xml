<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <Metadata><Meta Name="ms.openlocfilehash" Value="147a283352b0a1a1f4dfdb25f0440b435ed7cb37" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64110109" /></Metadata><TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <TypeSignature Language="F#" Value="type HMACRIPEMD160 = class&#xA;    inherit HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="79fc6-101">使用 <see cref="T:System.Security.Cryptography.RIPEMD160" /> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。</span><span class="sxs-lookup"><span data-stu-id="79fc6-101">Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash function.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79fc6-102"><xref:System.Security.Cryptography.HMACRIPEMD160> 是一种加密哈希算法，它是从 RIPEMD-160 哈希函数构造并用作基于哈希的消息身份验证代码 (hmac)。</span><span class="sxs-lookup"><span data-stu-id="79fc6-102"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="79fc6-103">HMAC 过程将机密密钥与消息数据、 哈希的哈希函数的结果，同样，将该哈希值混合使用机密密钥，然后第二次应用哈希函数。</span><span class="sxs-lookup"><span data-stu-id="79fc6-103">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="79fc6-104">输出哈希为 160 位的长度。</span><span class="sxs-lookup"><span data-stu-id="79fc6-104">The output hash is 160 bits in length.</span></span>  
  
 <span data-ttu-id="79fc6-105">HMAC 可以用于确定是否通过不安全通道发送的消息已被篡改，前提是在发送方和接收方共享机密密钥。</span><span class="sxs-lookup"><span data-stu-id="79fc6-105">An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="79fc6-106">发件人计算原始数据的哈希值，并将原始数据和哈希值作为一条消息发送。</span><span class="sxs-lookup"><span data-stu-id="79fc6-106">The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</span></span> <span data-ttu-id="79fc6-107">接收方重新计算对收到的消息的哈希值，并检查计算的 HMAC 与传输的 HMAC 相匹配。</span><span class="sxs-lookup"><span data-stu-id="79fc6-107">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="79fc6-108">对数据或哈希值进行任何更改会导致不匹配，因为更改消息和重新生成的正确哈希值需要机密密钥。</span><span class="sxs-lookup"><span data-stu-id="79fc6-108">Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span> <span data-ttu-id="79fc6-109">因此，如果原始和计算所得的哈希值匹配，该消息进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="79fc6-109">Therefore, if the original and computed hash values match, the message is authenticated.</span></span>  
  
 <span data-ttu-id="79fc6-110"><xref:System.Security.Cryptography.HMACRIPEMD160> 接受任何大小的密钥，并生成长度为 160 位哈希序列。</span><span class="sxs-lookup"><span data-stu-id="79fc6-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accepts keys of any size, and produces a hash sequence that is 160 bits long.</span></span>  
  
 <span data-ttu-id="79fc6-111">由欧洲的时机已经成熟的项目开发 RIPEMD 哈希算法和其后续任务。</span><span class="sxs-lookup"><span data-stu-id="79fc6-111">The RIPEMD hash algorithm and its successors were developed by the European RIPE project.</span></span> <span data-ttu-id="79fc6-112">原始 RIPEMD 算法旨在替换 MD4 和 MD5 和更高版本加强，重命名 RIPEMD-160。</span><span class="sxs-lookup"><span data-stu-id="79fc6-112">The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.</span></span> <span data-ttu-id="79fc6-113">RIPEMD-160 哈希算法生成一个 160 位哈希值。</span><span class="sxs-lookup"><span data-stu-id="79fc6-113">The RIPEMD-160 hash algorithm produces a 160-bit hash value.</span></span> <span data-ttu-id="79fc6-114">算法的设计器已将它放在公共域中。</span><span class="sxs-lookup"><span data-stu-id="79fc6-114">The algorithm's designers have placed it in the public domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79fc6-115">下面的示例演示如何使用签名文件<xref:System.Security.Cryptography.HMACRIPEMD160>对象以及如何验证该文件。</span><span class="sxs-lookup"><span data-stu-id="79fc6-115">The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACRIPEMD160> object and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="79fc6-116">加密服务</span><span class="sxs-lookup"><span data-stu-id="79fc6-116">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="79fc6-117">初始化 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="79fc6-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="79fc6-118">用随机生成的 64 字节密钥初始化 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="79fc6-118">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with a randomly generated 64-byte key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79fc6-119"><xref:System.Security.Cryptography.HMACRIPEMD160> 是一种加密哈希算法，它是从 RIPEMD-160 哈希函数构造并用作基于哈希的消息身份验证代码 (hmac)。</span><span class="sxs-lookup"><span data-stu-id="79fc6-119"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="79fc6-120">HMAC 过程将机密密钥与消息数据、 哈希的哈希函数的结果，同样，将该哈希值混合使用机密密钥，然后第二次应用哈希函数。</span><span class="sxs-lookup"><span data-stu-id="79fc6-120">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="79fc6-121">输出哈希为 160 个字节的长度。</span><span class="sxs-lookup"><span data-stu-id="79fc6-121">The output hash is 160 bytes in length.</span></span>  
  
 <span data-ttu-id="79fc6-122">此构造函数使用的 64 字节的随机生成密钥。</span><span class="sxs-lookup"><span data-stu-id="79fc6-122">This constructor uses a 64-byte, randomly generated key.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="79fc6-123">加密服务</span><span class="sxs-lookup"><span data-stu-id="79fc6-123">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACRIPEMD160 : byte[] -&gt; System.Security.Cryptography.HMACRIPEMD160" Usage="new System.Security.Cryptography.HMACRIPEMD160 key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="79fc6-124"><see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 加密的机密密钥。</span><span class="sxs-lookup"><span data-stu-id="79fc6-124">The secret key for <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> encryption.</span></span> <span data-ttu-id="79fc6-125">密钥的长度不限，但如果该密钥是 64 个字节，就会经过散列处理（使用 SHA-1）以派生一个 64 个字节的密钥。</span><span class="sxs-lookup"><span data-stu-id="79fc6-125">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span></span> <span data-ttu-id="79fc6-126">因此，建议的密钥大小为 64 个字节。</span><span class="sxs-lookup"><span data-stu-id="79fc6-126">Therefore, the recommended size of the secret key is 64 bytes.</span></span></param>
        <summary><span data-ttu-id="79fc6-127">使用指定的密钥数据初始化 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="79fc6-127">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with the specified key data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79fc6-128"><xref:System.Security.Cryptography.HMACRIPEMD160> 是一种加密哈希算法，它是从 RIPEMD-160 哈希函数构造并用作基于哈希的消息身份验证代码 (hmac)。</span><span class="sxs-lookup"><span data-stu-id="79fc6-128"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="79fc6-129">HMAC 过程将机密密钥与消息数据、 哈希的哈希函数的结果，同样，将该哈希值混合使用机密密钥，然后第二次应用哈希函数。</span><span class="sxs-lookup"><span data-stu-id="79fc6-129">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="79fc6-130">输出哈希为 160 个字节的长度。</span><span class="sxs-lookup"><span data-stu-id="79fc6-130">The output hash is 160 bytes in length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79fc6-131">有关如何使用此构造函数的示例，请参阅<xref:System.Security.Cryptography.HMACRIPEMD160>类。</span><span class="sxs-lookup"><span data-stu-id="79fc6-131">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="79fc6-132"><paramref name="key" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="79fc6-132">The <paramref name="key" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="79fc6-133">加密服务</span><span class="sxs-lookup"><span data-stu-id="79fc6-133">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IQueryAmbient" FullName="System.Windows.Markup.IQueryAmbient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7412669d16ca6897e348def6cc8c79c20d146f1f" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64202295" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryAmbient" />
  <TypeSignature Language="C++ CLI" Value="public interface class IQueryAmbient" />
  <TypeSignature Language="F#" Value="type IQueryAmbient = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>查询是否应将指定的属性视为当前范围中的环境属性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 环境属性机制的目的是通过告知 XAML 对象编写器，以避免实例化某些对象，其中已知的对象是典型的运行时间是临时的而且不是有用的值的情况下缩短分析时间应用程序。 通常情况下，XAML 查找或 XAML 处理的属性 get 访问器需要实例化此类对象来填充对象图表示形式使用随时可用值。  
  
 <xref:System.Windows.Markup.IQueryAmbient> 一个成员： <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>。  
  
 <xref:System.Windows.Markup.IQueryAmbient> 是为并行机制<xref:System.Windows.Markup.AmbientAttribute>。 <xref:System.Windows.Markup.IQueryAmbient> 是专用的机制，可避免使用反射来确定的信息，并且还可以包含 act 情况 (给定的对象可以选择报表`true`或`false`为<xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>)，而该属性是实质上是静态的分析）。 <xref:System.Windows.Markup.AmbientAttribute> 是 XAML 对象编写器都可以使用的和，通常关联到专用的 XAML 类型系统属性的常规机制<xref:System.Xaml.XamlMember.IsAmbient%2A>和<xref:System.Xaml.XamlType.IsAmbient%2A>。  
  
## <a name="wpf-implementations-of-iqueryambient"></a>IQueryAmbient 的 WPF 实现  
 在 WPF 中，<xref:System.Windows.Markup.IQueryAmbient>用于资源字典查找过程。 查找过程获取连续`Resources`整个 WPF 逻辑树的值，找到致力于资源作用域的根直到密钥或密钥确定在作用域中不存在。 通常情况下，执行此操作需要实例化<xref:System.Windows.ResourceDictionary>每次接收结果。 声明的内容`Resources`环境，只要`Resources`存在来优化此查找过程。 在 WPF 中，在以下情况下实现此接口：  
  
-   <xref:System.Windows.FrameworkElement> 实现<xref:System.Windows.FrameworkElement.System%23Windows%23Markup%23IQueryAmbient%23IsAmbientPropertyAvailable%2A>以返回`true`的所有属性名称包含的现有<xref:System.Windows.ResourceDictionary>有关<xref:System.Windows.FrameworkElement.Resources%2A>，和，只要该查询不为<xref:System.Windows.FrameworkElement.Resources%2A>属性本身。  
  
-   <xref:System.Windows.Style> 实现的相同模式及其<xref:System.Windows.Style.Resources%2A>。  
  
-   <xref:System.Windows.Application> 实现的相同模式及其<xref:System.Windows.Application.Resources%2A>。  
  
-   <xref:System.Windows.FrameworkContentElement> 实现的相同模式及其<xref:System.Windows.FrameworkContentElement.Resources%2A>。  
  
-   <xref:System.Windows.FrameworkTemplate> 实现的相同模式及其<xref:System.Windows.FrameworkTemplate.Resources%2A>。 它还报告<xref:System.Windows.FrameworkTemplate.Template%2A>环境，但是返回的内容`false`如果查询<xref:System.Windows.FrameworkTemplate.Template%2A>本身。  
  
-   在这些情况下，相关的每个`Resources`属性 (和<xref:System.Windows.FrameworkTemplate.Template%2A>) 经过属性化， <xref:System.Windows.Markup.AmbientAttribute>。 典型的用法是查询不是属性<xref:System.Windows.Markup.AmbientAttribute>特性化定义的接口的对象的属性。 换而言之，只要资源字典存在是为了提供潜在的运行的时间值，创建对象图时，除了资源字典属性容器以外的任何其他属性可视为环境。  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
  </Docs>
  <Members>
    <Member MemberName="IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="public bool IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAmbientPropertyAvailable (propertyName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbientPropertyAvailable(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member IsAmbientPropertyAvailable : string -&gt; bool" Usage="iQueryAmbient.IsAmbientPropertyAvailable propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">要检查其环境状态的属性的名称。</param>
        <summary>查询可否将指定的命名属性视为当前范围中的环境属性。</summary>
        <returns>如果所请求的属性可视为环境属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
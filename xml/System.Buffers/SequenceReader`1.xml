<Type Name="SequenceReader&lt;T&gt;" FullName="System.Buffers.SequenceReader&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e6b0da6a2a67233632a5384d83b9df455e5dbef6" /><Meta Name="ms.sourcegitcommit" Value="727af77f0b7ae2636efa3bc47000697540084461" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/15/2019" /><Meta Name="ms.locfileid" Value="67877013" /></Metadata><TypeSignature Language="C#" Value="public struct SequenceReader&lt;T&gt; where T : struct" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SequenceReader`1&lt;struct .ctor (class System.ValueType, class System.IEquatable`1&lt;!T&gt;) T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.SequenceReader`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure SequenceReader(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA; where T : value classpublic value class SequenceReader" />
  <TypeSignature Language="F#" Value="type SequenceReader&lt;'T (requires 'T : struct)&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
        <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SequenceReader (System.Buffers.ReadOnlySequence&lt;T&gt; sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt; sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.#ctor(System.Buffers.ReadOnlySequence{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sequence As ReadOnlySequence(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SequenceReader(System::Buffers::ReadOnlySequence&lt;T&gt; sequence);" />
      <MemberSignature Language="F#" Value="new System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt; : System.Buffers.ReadOnlySequence&lt;'T (requires 'T : struct)&gt; -&gt; System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;" Usage="new System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt; sequence" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="e0925-101">用于创建 <see cref="T:System.Buffers.SequenceReader`1" /> 的只读序列。</span><span class="sxs-lookup"><span data-stu-id="e0925-101">The read-only sequence over which to create the <see cref="T:System.Buffers.SequenceReader`1" />.</span></span></param>
        <summary><span data-ttu-id="e0925-102">根据给定 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 创建 <see cref="T:System.Buffers.SequenceReader`1" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-102">Creates a <see cref="T:System.Buffers.SequenceReader`1" /> over a given <see cref="T:System.Buffers.ReadOnlySequence`1" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Advance">
      <MemberSignature Language="C#" Value="public void Advance (long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Advance(int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.Advance(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Advance (count As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Advance(long count);" />
      <MemberSignature Language="F#" Value="member this.Advance : int64 -&gt; unit" Usage="sequenceReader.Advance count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="count"><span data-ttu-id="e0925-103">要前进的项数。</span><span class="sxs-lookup"><span data-stu-id="e0925-103">The number of items to advance.</span></span></param>
        <summary><span data-ttu-id="e0925-104">将读取器向前移动指定的项数。</span><span class="sxs-lookup"><span data-stu-id="e0925-104">Moves the reader ahead a specified number of items.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePast">
      <MemberSignature Language="C#" Value="public long AdvancePast (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePast(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePast(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePast (value As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePast(T value);" />
      <MemberSignature Language="F#" Value="member this.AdvancePast : 'T -&gt; int64" Usage="sequenceReader.AdvancePast value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e0925-105">读取器要向前越过的值。</span><span class="sxs-lookup"><span data-stu-id="e0925-105">The value past which the reader is to advance.</span></span></param>
        <summary><span data-ttu-id="e0925-106">向前跳过具有给定 <paramref name="value" /> 的连续实例。</span><span class="sxs-lookup"><span data-stu-id="e0925-106">Advances past consecutive instances of the given <paramref name="value" />.</span></span></summary>
        <returns><span data-ttu-id="e0925-107">读取器前进的位置数。</span><span class="sxs-lookup"><span data-stu-id="e0925-107">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(valuetype System.ReadOnlySpan`1&lt;!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (values As ReadOnlySpan(Of T)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; int64" Usage="sequenceReader.AdvancePastAny values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="e0925-108">要跳过的值。</span><span class="sxs-lookup"><span data-stu-id="e0925-108">The values to be skipped.</span></span></param>
        <summary><span data-ttu-id="e0925-109">跳过具有任何指定 <paramref name="values" /> 的连续实例。</span><span class="sxs-lookup"><span data-stu-id="e0925-109">Skips consecutive instances of any of the specified <paramref name="values" />.</span></span></summary>
        <returns><span data-ttu-id="e0925-110">读取器前进的位置数。</span><span class="sxs-lookup"><span data-stu-id="e0925-110">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0"><span data-ttu-id="e0925-111">要跳过的第一个值。</span><span class="sxs-lookup"><span data-stu-id="e0925-111">The first value to skip.</span></span></param>
        <param name="value1"><span data-ttu-id="e0925-112">要跳过的第二个值。</span><span class="sxs-lookup"><span data-stu-id="e0925-112">The second value to skip.</span></span></param>
        <summary><span data-ttu-id="e0925-113">向前跳过具有两个指定值之一的连续实例。</span><span class="sxs-lookup"><span data-stu-id="e0925-113">Advances past consecutive instances of either of two specified values.</span></span></summary>
        <returns><span data-ttu-id="e0925-114">读取器前进的位置数。</span><span class="sxs-lookup"><span data-stu-id="e0925-114">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1, T value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1, !T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T, value2 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0"><span data-ttu-id="e0925-115">要跳过的第一个值。</span><span class="sxs-lookup"><span data-stu-id="e0925-115">The first value to skip.</span></span></param>
        <param name="value1"><span data-ttu-id="e0925-116">要跳过的第二个值。</span><span class="sxs-lookup"><span data-stu-id="e0925-116">The second value to skip.</span></span></param>
        <param name="value2"><span data-ttu-id="e0925-117">要跳过的第三个值。</span><span class="sxs-lookup"><span data-stu-id="e0925-117">The third value to skip.</span></span></param>
        <summary><span data-ttu-id="e0925-118">向前跳过具有三个指定值之一的连续实例。</span><span class="sxs-lookup"><span data-stu-id="e0925-118">Advances past consecutive instances of any of three specified values.</span></span></summary>
        <returns><span data-ttu-id="e0925-119">读取器前进的位置数。</span><span class="sxs-lookup"><span data-stu-id="e0925-119">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1, T value2, T value3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1, !T value2, !T value3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T, value2 As T, value3 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1, T value2, T value3);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T * 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1, value2, value3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
        <Parameter Name="value3" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0">To be added.</param>
        <param name="value1"><span data-ttu-id="e0925-120">要跳过的第二个值。</span><span class="sxs-lookup"><span data-stu-id="e0925-120">The second value to skip.</span></span></param>
        <param name="value2"><span data-ttu-id="e0925-121">要跳过的第三个值。</span><span class="sxs-lookup"><span data-stu-id="e0925-121">The third value to skip.</span></span></param>
        <param name="value3"><span data-ttu-id="e0925-122">要跳过的第四个值。</span><span class="sxs-lookup"><span data-stu-id="e0925-122">The fourth value to skip.</span></span></param>
        <summary><span data-ttu-id="e0925-123">向前跳过具有四个指定值之一的连续实例。</span><span class="sxs-lookup"><span data-stu-id="e0925-123">Advances past consecutive instances of any of four specified values.</span></span></summary>
        <returns><span data-ttu-id="e0925-124">读取器前进的位置数。</span><span class="sxs-lookup"><span data-stu-id="e0925-124">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Consumed">
      <MemberSignature Language="C#" Value="public long Consumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Consumed" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Consumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Consumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumed : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Consumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0925-125">获取由读取器处理的 <typeparamref name="T" /> 值总数。</span><span class="sxs-lookup"><span data-stu-id="e0925-125">Gets the total number of <typeparamref name="T" /> values processed by the reader.</span></span></summary>
        <value><span data-ttu-id="e0925-126">读取器处理的值的总数。</span><span class="sxs-lookup"><span data-stu-id="e0925-126">The total number of values processed by the reader.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; CurrentSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;!T&gt; CurrentSpan" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.CurrentSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentSpan As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;T&gt; CurrentSpan { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentSpan : ReadOnlySpan&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.CurrentSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0925-127">获取 <see cref="T:System.Span`1" />，它包含 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的当前段。</span><span class="sxs-lookup"><span data-stu-id="e0925-127">Gets a <see cref="T:System.Span`1" /> that contains the current segment in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="e0925-128">包含序列中的当前段范围。</span><span class="sxs-lookup"><span data-stu-id="e0925-128">A span that contains the current segment in the sequence.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentSpanIndex">
      <MemberSignature Language="C#" Value="public int CurrentSpanIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentSpanIndex" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.CurrentSpanIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentSpanIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentSpanIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentSpanIndex : int" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.CurrentSpanIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0925-129">获取 <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> 中的索引。</span><span class="sxs-lookup"><span data-stu-id="e0925-129">Gets the index in the <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span></span></summary>
        <value><span data-ttu-id="e0925-130">中的索引<see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-130">The index in the <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public bool End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool End" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.End" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property End As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool End { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.End : bool" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.End" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0925-131">获取一个值，该值指示 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中是否不再有数据。</span><span class="sxs-lookup"><span data-stu-id="e0925-131">Gets a value that indicates whether there is no more data in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="e0925-132"><see langword="true" /> 在没有更多数据时<see cref="P:System.Buffers.SequenceReader`1.Sequence" />; 否则为<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-132"><see langword="true" /> when there is no more data in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNext">
      <MemberSignature Language="C#" Value="public bool IsNext (ReadOnlySpan&lt;T&gt; next, bool advancePast = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNext(valuetype System.ReadOnlySpan`1&lt;!T&gt; next, bool advancePast) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNext (next As ReadOnlySpan(Of T), Optional advancePast As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNext : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.IsNext (next, advancePast)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePast" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="next"><span data-ttu-id="e0925-133">要与下一项进行比较的范围。</span><span class="sxs-lookup"><span data-stu-id="e0925-133">The span to compare the next items to.</span></span></param>
        <param name="advancePast"><span data-ttu-id="e0925-134">若要越过 <paramref name="next" /> 值（如果发现了这些值），则为 <see langword="true" />，若不越过这些值，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-134"><see langword="true" /> to move past the <paramref name="next" /> values if they are found, or <see langword="false" /> to not move past them.</span></span></param>
        <summary><span data-ttu-id="e0925-135">检查在只读范围中指定的值是否是序列中的下一个值。</span><span class="sxs-lookup"><span data-stu-id="e0925-135">Checks whether the values specified in a read-only span are next in the sequence.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNext">
      <MemberSignature Language="C#" Value="public bool IsNext (T next, bool advancePast = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNext(!T next, bool advancePast) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.IsNext(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNext (next As T, Optional advancePast As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNext : 'T * bool -&gt; bool" Usage="sequenceReader.IsNext (next, advancePast)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="T" />
        <Parameter Name="advancePast" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="next"><span data-ttu-id="e0925-136">要与下一项进行比较的值。</span><span class="sxs-lookup"><span data-stu-id="e0925-136">The value to compare the next items to.</span></span></param>
        <param name="advancePast"><span data-ttu-id="e0925-137">若要越过 <paramref name="next" /> 值（如果发现了这些值），则为 <see langword="true" />，若不越过这些值，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-137"><see langword="true" /> to move past the <paramref name="next" /> values if they are found, or <see langword="false" /> to not move past them.</span></span></param>
        <summary><span data-ttu-id="e0925-138">检查指定值是否是序列中的下一个值。</span><span class="sxs-lookup"><span data-stu-id="e0925-138">Checks whether a specified value is next in the sequence.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0925-139">获取读取器的 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的项数。</span><span class="sxs-lookup"><span data-stu-id="e0925-139">Gets the count of items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="e0925-140">在读取器中的项的计数<see cref="P:System.Buffers.SequenceReader`1.Sequence" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-140">The count of items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0925-141">获取 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的当前位置。</span><span class="sxs-lookup"><span data-stu-id="e0925-141">Gets the current position in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="e0925-142">中的当前位置<see cref="P:System.Buffers.SequenceReader`1.Sequence" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-142">The current position in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public long Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Remaining As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Remaining { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0925-143">获取读取器的 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的剩余项。</span><span class="sxs-lookup"><span data-stu-id="e0925-143">Gets  the remaining items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="e0925-144">读取器的中剩余项 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /></span><span class="sxs-lookup"><span data-stu-id="e0925-144">The remaining items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" /></span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind (long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind(int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.Rewind(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rewind (count As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rewind(long count);" />
      <MemberSignature Language="F#" Value="member this.Rewind : int64 -&gt; unit" Usage="sequenceReader.Rewind count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="count"><span data-ttu-id="e0925-145">项数。</span><span class="sxs-lookup"><span data-stu-id="e0925-145">The number of items.</span></span></param>
        <summary><span data-ttu-id="e0925-146">将读取器向后移动指定的项数。</span><span class="sxs-lookup"><span data-stu-id="e0925-146">Moves the reader back the specified number of items.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e0925-147"><paramref name="count" /> 为负数或大于 <see cref="P:System.Buffers.SequenceReader`1.Consumed" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-147"><paramref name="count" /> is negative or greater than <see cref="P:System.Buffers.SequenceReader`1.Consumed" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;T&gt; Sequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt; Sequence" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Sequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sequence As ReadOnlySequence(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;T&gt; Sequence { System::Buffers::ReadOnlySequence&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Sequence : System.Buffers.ReadOnlySequence&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Sequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0925-148">获取读取器的基础 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-148">Gets the underlying <see cref="T:System.Buffers.ReadOnlySequence`1" /> for the reader.</span></span></summary>
        <value><span data-ttu-id="e0925-149">读取器基础只读的序列。</span><span class="sxs-lookup"><span data-stu-id="e0925-149">The underlying read-only sequence for the reader.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdvanceTo">
      <MemberSignature Language="C#" Value="public bool TryAdvanceTo (T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAdvanceTo(!T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryAdvanceTo(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryAdvanceTo (delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryAdvanceTo : 'T * bool -&gt; bool" Usage="sequenceReader.TryAdvanceTo (delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="delimiter"><span data-ttu-id="e0925-150">要搜索的分隔符。</span><span class="sxs-lookup"><span data-stu-id="e0925-150">The delimiter to search for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="e0925-151">若要越过 <paramref name="delimiter" />（如果已发现），则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-151"><see langword="true" /> to move past the <paramref name="delimiter" /> if it is found; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e0925-152">搜索指定的分隔符，并在找到该分隔符后向前越过它（可选）。</span><span class="sxs-lookup"><span data-stu-id="e0925-152">Searches for a specified delimiter and optionally advances past it if it is found.</span></span></summary>
        <returns><span data-ttu-id="e0925-153">如果发现了给定 <paramref name="delimiter" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-153"><see langword="true" /> if the given <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdvanceToAny">
      <MemberSignature Language="C#" Value="public bool TryAdvanceToAny (ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAdvanceToAny(valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryAdvanceToAny(System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryAdvanceToAny (delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryAdvanceToAny : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryAdvanceToAny (delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="delimiters"><span data-ttu-id="e0925-154">要搜索的分隔符。</span><span class="sxs-lookup"><span data-stu-id="e0925-154">The delimiters to search for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="e0925-155">若要越过具有任意给定 <paramref name="delimiters" /> 的第一个实例，则为 &gt;see langword="true" /&gt;；若不越过分隔符，则为 <see lanword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-155">&gt;see langword="true" /&gt; to move past the first instance of any of the given <paramref name="delimiters" />; <see lanword="false" /> to not move past the delimiter.</span></span></param>
        <summary><span data-ttu-id="e0925-156">搜索大量指定分隔符中的任意分隔符，并向前越过找到的第一个分隔符（可选）。</span><span class="sxs-lookup"><span data-stu-id="e0925-156">Searches for any of a number of specified delimiters and optionally advances past the first one to be found.</span></span></summary>
        <returns><span data-ttu-id="e0925-157">如果发现了任意给定 <paramref name="delimiters" />，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-157"><see langword="true" /> if any of the given <paramref name="delimiters" /> was found.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T (requires 'T : struct)&gt; -&gt; bool" Usage="sequenceReader.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e0925-158">要复制到的目标范围。</span><span class="sxs-lookup"><span data-stu-id="e0925-158">Destination span to copy to.</span></span></param>
        <summary><span data-ttu-id="e0925-159">如果有足够的数据来填充目标范围，则将当前位置的数据复制到目标范围。</span><span class="sxs-lookup"><span data-stu-id="e0925-159">Copies data from the current position to the given destination span if there is enough data to fill it.</span></span></summary>
        <returns><span data-ttu-id="e0925-160">如果有足够的数据来完全填充 <paramref name="destination" /> 范围，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-160"><see langword="true" /> if there is enough data to completely fill the <paramref name="destination" /> span; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
<span data-ttu-id="e0925-161">如果可能，此方法复制固定的顺序不正确的数据量。</span><span class="sxs-lookup"><span data-stu-id="e0925-161">This method copies a fixed amount of data out of the sequence if possible.</span></span> <span data-ttu-id="e0925-162">它不再处理读取器。</span><span class="sxs-lookup"><span data-stu-id="e0925-162">It does not advance the reader.</span></span> <span data-ttu-id="e0925-163">若要继续查看为特定流的数据，请使用<xref:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)>。</span><span class="sxs-lookup"><span data-stu-id="e0925-163">To look ahead for a specific stream of data, use  <xref:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)>.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="sequenceReader.TryPeek value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e0925-164">下一个值，或默认值（如果在读取器末尾）。</span><span class="sxs-lookup"><span data-stu-id="e0925-164">The next value, or the default value if at the end of the reader.</span></span></param>
        <summary><span data-ttu-id="e0925-165">查看下一个值，而不前移读取器。</span><span class="sxs-lookup"><span data-stu-id="e0925-165">Peeks at the next value without advancing the reader.</span></span></summary>
        <returns><span data-ttu-id="e0925-166">如果读取器未在其末尾且查看操作成功，则为 <see langword="true" />；如果在读取器末尾，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-166"><see langword="true" /> if the reader is not at its end and the peek operation succeeded; <see langword="false" /> if at the end of the reader.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead">
      <MemberSignature Language="C#" Value="public bool TryRead (out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryRead([out] !T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryRead(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryRead (ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryRead([Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="member this.TryRead :  -&gt; bool" Usage="sequenceReader.TryRead value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e0925-167">下一个值，或默认值（如果在读取器末尾）。</span><span class="sxs-lookup"><span data-stu-id="e0925-167">The next value, or the default value if at the end of the reader.</span></span></param>
        <summary><span data-ttu-id="e0925-168">读取下一个值，并前移读取器。</span><span class="sxs-lookup"><span data-stu-id="e0925-168">Reads the next value and advance the reader.</span></span></summary>
        <returns><span data-ttu-id="e0925-169">如果读取器未在其末尾且读取操作成功，则为 <see langword="true" />；如果在读取器末尾，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-169"><see langword="true" /> if the reader is not at its end and the read operation succeeded; <see langword="false" /> if at the end of the reader.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, ReadOnlySpan&lt;T&gt; delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo :  * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="e0925-170">当方法返回时，包含读取的数据（如果有）。</span><span class="sxs-lookup"><span data-stu-id="e0925-170">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="e0925-171">一个只读范围，包含一个或多个分隔符。</span><span class="sxs-lookup"><span data-stu-id="e0925-171">A read-only span that contains one or more delimiters.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="e0925-172">若要越过 <paramref name="delimiter" />（如果找到），则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-172"><see langword="true" /> to move past the <paramref name="delimiter" /> if found.</span></span></param>
        <summary><span data-ttu-id="e0925-173">尝试读取数据，直到指定为只读范围的整个分隔符匹配。</span><span class="sxs-lookup"><span data-stu-id="e0925-173">Tries to read data until the entire delimiter specified as a read-only span matches.</span></span></summary>
        <returns><span data-ttu-id="e0925-174">如果发现了 <paramref name="delimiter" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-174"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, !T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo :  * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="e0925-175">当方法返回时，包含读取的数据（如果有）。</span><span class="sxs-lookup"><span data-stu-id="e0925-175">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="e0925-176">要查找的分隔符。</span><span class="sxs-lookup"><span data-stu-id="e0925-176">The delimiter to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="e0925-177">若要越过 <paramref name="delimiter" />（如果找到），则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-177"><see langword="true" /> to move past the <paramref name="delimiter" /> if found.</span></span></param>
        <summary><span data-ttu-id="e0925-178">尝试读取给定 <paramref name="delimiter" /> 之前的所有内容。</span><span class="sxs-lookup"><span data-stu-id="e0925-178">Tries to read everything up to the given <paramref name="delimiter" />.</span></span></summary>
        <returns><span data-ttu-id="e0925-179">如果发现了 <paramref name="delimiter" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-179"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out ReadOnlySpan&lt;T&gt; span, T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, !T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef span As ReadOnlySpan(Of T), delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo :  * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (span, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="e0925-180">当方法返回时，包含读取的数据（如果有）。</span><span class="sxs-lookup"><span data-stu-id="e0925-180">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="e0925-181">要查找的分隔符。</span><span class="sxs-lookup"><span data-stu-id="e0925-181">The delimiter to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="e0925-182">若要越过 <paramref name="delimiter" />（如果找到），则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-182"><see langword="true" /> to move past the <paramref name="delimiter" /> if found.</span></span></param>
        <summary><span data-ttu-id="e0925-183">尝试读取给定 <paramref name="delimiter" /> 之前的所有内容。</span><span class="sxs-lookup"><span data-stu-id="e0925-183">Tries to read everything up to the given <paramref name="delimiter" />.</span></span></summary>
        <returns><span data-ttu-id="e0925-184">如果发现了 <paramref name="delimiter" />，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-184"><see langword="true" /> if the <paramref name="delimiter" /> was found.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, T delimiter, T delimiterEscape, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, !T delimiter, !T delimiterEscape, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As T, delimiterEscape As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo :  * 'T * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, delimiterEscape, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="delimiterEscape" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="e0925-185">当方法返回时，包含读取的数据（如果有）。</span><span class="sxs-lookup"><span data-stu-id="e0925-185">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="e0925-186">要查找的分隔符。</span><span class="sxs-lookup"><span data-stu-id="e0925-186">The delimiter to look for.</span></span></param>
        <param name="delimiterEscape"><span data-ttu-id="e0925-187">一个值，指示将跳过紧跟 <paramref name="delimiter" /> 之后的项。</span><span class="sxs-lookup"><span data-stu-id="e0925-187">A value that indicates that an immediately following <paramref name="delimiter" /> is to be skipped.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="e0925-188">若要越过 <paramref name="delimiter" />（如果找到），则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-188"><see langword="true" /> to move past the <paramref name="delimiter" /> if found.</span></span></param>
        <summary><span data-ttu-id="e0925-189">尝试读取给定 <paramref name="delimiter" /> 之前的所有内容，忽略前面为 <paramref name="delimiterEscape" /> 的分隔符。</span><span class="sxs-lookup"><span data-stu-id="e0925-189">Tries to read everything up to the given <paramref name="delimiter" />, ignoring delimiters that are preceded by <paramref name="delimiterEscape" />.</span></span></summary>
        <returns><span data-ttu-id="e0925-190">如果发现了 <paramref name="delimiter" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-190"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out ReadOnlySpan&lt;T&gt; span, T delimiter, T delimiterEscape, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, !T delimiter, !T delimiterEscape, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef span As ReadOnlySpan(Of T), delimiter As T, delimiterEscape As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo :  * 'T * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (span, delimiter, delimiterEscape, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="delimiterEscape" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="e0925-191">当方法返回时，包含读取的数据（如果有）。</span><span class="sxs-lookup"><span data-stu-id="e0925-191">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="e0925-192">要查找的分隔符。</span><span class="sxs-lookup"><span data-stu-id="e0925-192">The delimiter to look for.</span></span></param>
        <param name="delimiterEscape"><span data-ttu-id="e0925-193">&gt;一个值，指示将跳过紧跟 <paramref name="delimiter" /> 之后的项。</span><span class="sxs-lookup"><span data-stu-id="e0925-193">&gt;A value that indicates that an immediately following <paramref name="delimiter" /> is to be skipped.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="e0925-194">若要越过 <paramref name="delimiter" />（如果找到），则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-194"><see langword="true" /> to move past the <paramref name="delimiter" /> if found.</span></span></param>
        <summary><span data-ttu-id="e0925-195">尝试读取给定 <paramref name="delimiter" /> 之前的所有内容，忽略前面为 <paramref name="delimiterEscape" /> 的分隔符。</span><span class="sxs-lookup"><span data-stu-id="e0925-195">Tries to read everything up to the given <paramref name="delimiter" />, ignoring delimiters that are preceded by <paramref name="delimiterEscape" />.</span></span></summary>
        <returns><span data-ttu-id="e0925-196">如果发现了 <paramref name="delimiter" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-196"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadToAny">
      <MemberSignature Language="C#" Value="public bool TryReadToAny (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadToAny([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadToAny(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadToAny (ByRef sequence As ReadOnlySequence(Of T), delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadToAny :  * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadToAny (sequence, delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="e0925-197">当方法返回时，包含读取的数据（如果有）。</span><span class="sxs-lookup"><span data-stu-id="e0925-197">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiters"><span data-ttu-id="e0925-198">要查找的分隔符。</span><span class="sxs-lookup"><span data-stu-id="e0925-198">The delimiters to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="e0925-199">若要越过找到的第一个具有给定 <paramref name="delimiters" /> 的实例，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-199"><see langword="true" /> to move past the first found instance of any of the given <paramref name="delimiters" />.</span></span></param>
        <summary><span data-ttu-id="e0925-200">尝试读取指定的任意 <paramref name="delimiters" /> 之前的所有内容。</span><span class="sxs-lookup"><span data-stu-id="e0925-200">Tries to read everything up to any of the specified <paramref name="delimiters" />.</span></span></summary>
        <returns><span data-ttu-id="e0925-201">如果发现任何 <see langword="false" />，则为 <see langword="true" />；否则为 <paramref name="delimiters" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-201"><see langword="true" /> if any of the <paramref name="delimiters" /> were found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadToAny">
      <MemberSignature Language="C#" Value="public bool TryReadToAny (out ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadToAny([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadToAny(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadToAny (ByRef span As ReadOnlySpan(Of T), delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadToAny :  * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadToAny (span, delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="e0925-202">当方法返回时，包含读取的数据（如果有）。</span><span class="sxs-lookup"><span data-stu-id="e0925-202">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiters"><span data-ttu-id="e0925-203">要查找的分隔符。</span><span class="sxs-lookup"><span data-stu-id="e0925-203">The delimiters to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="e0925-204">若要越过找到的第一个具有给定 <paramref name="delimiters" /> 的实例，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-204"><see langword="true" /> to move past the first found instance of any of the given <paramref name="delimiters" />.</span></span></param>
        <summary><span data-ttu-id="e0925-205">尝试读取指定的任意 <paramref name="delimiters" /> 之前的所有内容。</span><span class="sxs-lookup"><span data-stu-id="e0925-205">Tries to read everything up to any of the specified <paramref name="delimiters" />.</span></span></summary>
        <returns><span data-ttu-id="e0925-206">如果发现任何 <see langword="false" />，则为 <see langword="true" />；否则为 <paramref name="delimiters" />。</span><span class="sxs-lookup"><span data-stu-id="e0925-206"><see langword="true" /> if any of the <paramref name="delimiters" /> were found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnreadSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; UnreadSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;!T&gt; UnreadSpan" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.UnreadSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnreadSpan As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;T&gt; UnreadSpan { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.UnreadSpan : ReadOnlySpan&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.UnreadSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0925-207">获取 <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> 的未读取部分。</span><span class="sxs-lookup"><span data-stu-id="e0925-207">Gets the unread portion of the <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

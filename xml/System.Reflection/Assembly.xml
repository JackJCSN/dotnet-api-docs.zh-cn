<Type Name="Assembly" FullName="System.Reflection.Assembly">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4ac23652968dc974ff0291047b4bcfb067aedcb9" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67248967" /></Metadata><TypeSignature Language="C#" Value="public abstract class Assembly : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._Assembly, System.Runtime.Serialization.ISerializable, System.Security.IEvidenceFactory" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Assembly extends System.Object implements class System.Reflection.ICustomAttributeProvider, class System.Runtime.InteropServices._Assembly, class System.Runtime.Serialization.ISerializable, class System.Security.IEvidenceFactory" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Assembly" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Assembly&#xA;Implements _Assembly, ICustomAttributeProvider, IEvidenceFactory, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Assembly abstract : System::Reflection::ICustomAttributeProvider, System::Runtime::InteropServices::_Assembly, System::Runtime::Serialization::ISerializable, System::Security::IEvidenceFactory" />
  <TypeSignature Language="F#" Value="type Assembly = class&#xA;    interface ICustomAttributeProvider&#xA;    interface _Assembly&#xA;    interface IEvidenceFactory&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.ICustomAttributeProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Assembly</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IEvidenceFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Assembly))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="97ca7-101">表示一个程序集，它是一个可重用、无版本冲突并且可自我描述的公共语言运行时应用程序构建基块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-101">Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-102">使用<xref:System.Reflection.Assembly>类加载程序集，若要浏览的元数据和构成部分的程序集，发现的类型包含在程序集中，并创建这些类型的实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-102">Use the <xref:System.Reflection.Assembly> class to load assemblies, to explore the metadata and constituent parts of assemblies, to discover the types contained in assemblies, and to create instances of those types.</span></span>  
  
 <span data-ttu-id="97ca7-103">若要获取的数组<xref:System.Reflection.Assembly>对象表示当前程序集加载到应用程序域 （例如，默认应用程序域的一个简单的项目），使用<xref:System.AppDomain.GetAssemblies%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-103">To get an array of <xref:System.Reflection.Assembly> objects representing the assemblies currently loaded into an application domain (for example, the default application domain of a simple project), use the <xref:System.AppDomain.GetAssemblies%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="97ca7-104">若要动态，加载程序集<xref:System.Reflection.Assembly>类提供了以下静态方法 (`Shared`方法在 Visual Basic 中的)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-104">To load assemblies dynamically, the <xref:System.Reflection.Assembly> class provides the following static methods (`Shared` methods in Visual Basic).</span></span> <span data-ttu-id="97ca7-105">程序集都加载到应用程序域加载操作出现的位置。</span><span class="sxs-lookup"><span data-stu-id="97ca7-105">Assemblies are loaded into the application domain where the load operation occurs.</span></span>  
  
-   <span data-ttu-id="97ca7-106">加载程序集的建议的方法是使用<xref:System.AppDomain.Load%2A>方法，它标识要按其显示名称加载的程序集 (例如，"System.Windows.Forms、 版本 = 2.0.0.0，区域性 = 中性，PublicKeyToken = b77a5c561934e089")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-106">The recommended way to load assemblies is to use the <xref:System.AppDomain.Load%2A> method, which identifies the assembly to be loaded by its display name (for example, "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089").</span></span> <span data-ttu-id="97ca7-107">程序集搜索遵循中所述的规则[运行时如何定位程序集](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-107">The search for the assembly follows the rules described in [How the Runtime Locates Assemblies](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md).</span></span>  
  
-   <span data-ttu-id="97ca7-108"><xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>和<xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A>方法可加载为反射，而不是执行程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-108">The <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods enable you to load an assembly for reflection, but not for execution.</span></span> <span data-ttu-id="97ca7-109">例如，面向 64 位平台的程序集可以由 32 位平台运行的代码进行检查。</span><span class="sxs-lookup"><span data-stu-id="97ca7-109">For example, an assembly that targets a 64-bit platform can be examined by code that is running on a 32-bit platform.</span></span>  
  
-   <span data-ttu-id="97ca7-110"><xref:System.Reflection.Assembly.LoadFile%2A>和<xref:System.Reflection.Assembly.LoadFrom%2A>方法为在其中必须由路径标识程序集的极少数情况下提供。</span><span class="sxs-lookup"><span data-stu-id="97ca7-110">The <xref:System.Reflection.Assembly.LoadFile%2A> and <xref:System.Reflection.Assembly.LoadFrom%2A> methods are provided for rare scenarios in which an assembly must be identified by path.</span></span>  
  
 <span data-ttu-id="97ca7-111">若要获取<xref:System.Reflection.Assembly>对于当前正在执行的程序集，使用对象<xref:System.Reflection.Assembly.GetExecutingAssembly%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-111">To get an <xref:System.Reflection.Assembly> object for the currently executing assembly, use the <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> method.</span></span>  
  
 <span data-ttu-id="97ca7-112">很多成员的<xref:System.Reflection.Assembly>类提供有关程序集信息。</span><span class="sxs-lookup"><span data-stu-id="97ca7-112">Many members of the <xref:System.Reflection.Assembly> class provide information about an assembly.</span></span> <span data-ttu-id="97ca7-113">例如:</span><span class="sxs-lookup"><span data-stu-id="97ca7-113">For example:</span></span>  
  
-   <span data-ttu-id="97ca7-114"><xref:System.Reflection.Assembly.GetName%2A>方法将返回<xref:System.Reflection.AssemblyName>对象，它提供访问的程序集显示名称部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-114">The <xref:System.Reflection.Assembly.GetName%2A> method returns an <xref:System.Reflection.AssemblyName> object that provides access to the parts of the assembly display name.</span></span>  
  
-   <span data-ttu-id="97ca7-115"><xref:System.Reflection.Assembly.GetCustomAttributes%2A>方法列出了应用于程序集的属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-115">The <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method lists the attributes applied to the assembly.</span></span>  
  
-   <span data-ttu-id="97ca7-116"><xref:System.Reflection.Assembly.GetFiles%2A>方法提供对程序集清单中的文件的访问。</span><span class="sxs-lookup"><span data-stu-id="97ca7-116">The <xref:System.Reflection.Assembly.GetFiles%2A> method provides access to the files in the assembly manifest.</span></span>  
  
-   <span data-ttu-id="97ca7-117"><xref:System.Reflection.Assembly.GetManifestResourceNames%2A>方法提供了程序集清单中的资源的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-117">The <xref:System.Reflection.Assembly.GetManifestResourceNames%2A> method provides the names of the resources in the assembly manifest.</span></span>  
  
 <span data-ttu-id="97ca7-118"><xref:System.Reflection.Assembly.GetTypes%2A>方法列出的程序集中的所有类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-118">The <xref:System.Reflection.Assembly.GetTypes%2A> method lists all the types in the assembly.</span></span> <span data-ttu-id="97ca7-119"><xref:System.Reflection.Assembly.GetExportedTypes%2A>方法列出了对调用方在程序集外部可见的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-119">The <xref:System.Reflection.Assembly.GetExportedTypes%2A> method lists the types that are visible to callers outside the assembly.</span></span> <span data-ttu-id="97ca7-120"><xref:System.Reflection.Assembly.GetType%2A>方法可用于搜索的程序集中的特定类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-120">The <xref:System.Reflection.Assembly.GetType%2A> method can be used to search for a particular type in the assembly.</span></span> <span data-ttu-id="97ca7-121"><xref:System.Reflection.Assembly.CreateInstance%2A>方法可用于搜索并在程序集中创建类型的实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-121">The <xref:System.Reflection.Assembly.CreateInstance%2A> method can be used to search for and create instances of types in the assembly.</span></span>  
  
 <span data-ttu-id="97ca7-122">程序集的详细信息，请参阅中的"应用程序域和程序集"一节[应用程序域](~/docs/framework/app-domains/application-domains.md)主题。</span><span class="sxs-lookup"><span data-stu-id="97ca7-122">For more information on assemblies, see the "Application Domains and Assemblies" section in the [Application Domains](~/docs/framework/app-domains/application-domains.md) topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-123">下面的代码示例演示如何获取当前正在执行的程序集，创建包含该程序集的某个类型的实例并调用其中一个使用后期绑定的类型的方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-123">The following code example shows how to obtain the currently executing assembly, create an instance of a type contained in that assembly, and invoke one of the type's methods with late binding.</span></span> <span data-ttu-id="97ca7-124">为此，该代码示例定义一个名为类`Example`，使用一个名为方法`SampleMethod`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-124">For this purpose, the code example defines a class named `Example`, with a method named `SampleMethod`.</span></span> <span data-ttu-id="97ca7-125">类的构造函数接受一个整数，用于计算方法的返回值。</span><span class="sxs-lookup"><span data-stu-id="97ca7-125">The constructor of the class accepts an integer, which is used to compute the return value of the method.</span></span>  
  
 <span data-ttu-id="97ca7-126">代码示例还演示如何将<xref:System.Reflection.Assembly.GetName%2A>方法来获取<xref:System.Reflection.AssemblyName>可用于分析的程序集的完整名称的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-126">The code example also demonstrates the use of the <xref:System.Reflection.Assembly.GetName%2A> method to obtain an <xref:System.Reflection.AssemblyName> object that can be used to parse the full name of the assembly.</span></span> <span data-ttu-id="97ca7-127">该示例显示的程序集的版本号<xref:System.Reflection.Assembly.CodeBase%2A>属性，并<xref:System.Reflection.Assembly.EntryPoint%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-127">The example displays the version number of the assembly, the <xref:System.Reflection.Assembly.CodeBase%2A> property, and the <xref:System.Reflection.Assembly.EntryPoint%2A> property.</span></span>  
  
 [!code-cpp[AssemblyClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyClass/cpp/source.cpp#1)]
 [!code-csharp[AssemblyClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyClass/cs/source.cs#1)]
 [!code-vb[AssemblyClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyClass/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="97ca7-128">继承者完全信任。</span><span class="sxs-lookup"><span data-stu-id="97ca7-128">for full trust for inheritors.</span></span> <span data-ttu-id="97ca7-129">不能由部分受信任代码继承此类。</span><span class="sxs-lookup"><span data-stu-id="97ca7-129">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="97ca7-130">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-130">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.AppDomain" />
    <altmember cref="T:System.Reflection.AssemblyName" />
    <related type="Article" href="~/docs/framework/app-domains/application-domains.md"><span data-ttu-id="97ca7-131">应用程序域</span><span class="sxs-lookup"><span data-stu-id="97ca7-131">Application Domains</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Assembly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Assembly();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-132">初始化 <see cref="T:System.Reflection.Assembly" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-132">Initializes a new instance of the <see cref="T:System.Reflection.Assembly" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-133">此构造函数由派生类调用的构造期间<xref:System.Reflection.Assembly>对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-133">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Assembly> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeBase">
      <MemberSignature Language="C#" Value="public virtual string CodeBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CodeBase" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.CodeBase" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CodeBase As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CodeBase { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBase : string" Usage="System.Reflection.Assembly.CodeBase" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.CodeBase</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-134">获取最初指定的程序集的位置，例如，在 <see cref="T:System.Reflection.AssemblyName" /> 对象中指定的位置。</span><span class="sxs-lookup"><span data-stu-id="97ca7-134">Gets the location of the assembly as specified originally, for example, in an <see cref="T:System.Reflection.AssemblyName" /> object.</span></span></summary>
        <value><span data-ttu-id="97ca7-135">程序集的位置（按照最初的指定）。</span><span class="sxs-lookup"><span data-stu-id="97ca7-135">The location of the assembly as specified originally.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-136">若要获取已加载的清单包含文件的绝对路径，请使用<xref:System.Reflection.Assembly.Location%2A?displayProperty=nameWithType>属性改为。</span><span class="sxs-lookup"><span data-stu-id="97ca7-136">To get the absolute path to the loaded manifest-containing file, use the <xref:System.Reflection.Assembly.Location%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 <span data-ttu-id="97ca7-137">如果程序集被加载为字节数组，使用的重载<xref:System.Reflection.Assembly.Load%2A>采用字节数组的方法，此属性返回的方法，不加载的程序集的位置的调用方的位置。</span><span class="sxs-lookup"><span data-stu-id="97ca7-137">If the assembly was loaded as a byte array, using an overload of the <xref:System.Reflection.Assembly.Load%2A> method that takes an array of bytes, this property returns the location of the caller of the method, not the location of the loaded assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-138">下面的示例使用<xref:System.Reflection.Assembly.CodeBase%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-138">The following example uses the <xref:System.Reflection.Assembly.CodeBase%2A> property.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/codebase1.cpp#1)]
 [!code-csharp[System.Reflection.Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/codebase1.cs#1)]
 [!code-vb[System.Reflection.Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/codebase1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-139">用于访问该路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-139">for access to the path.</span></span> <span data-ttu-id="97ca7-140">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-140">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-141">从此程序集中查找某个类型，然后使用系统激活器创建它的实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-141">Locates a type from this assembly and creates an instance of it using the system activator.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public object CreateInstance (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.CreateInstance(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstance (typeName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string -&gt; obj&#xA;override this.CreateInstance : string -&gt; obj" Usage="assembly.CreateInstance typeName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="97ca7-142">要查找类型的 <see cref="P:System.Type.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-142">The <see cref="P:System.Type.FullName" /> of the type to locate.</span></span></param>
        <summary><span data-ttu-id="97ca7-143">使用区分大小写的搜索，从此程序集中查找指定的类型，然后使用系统激活器创建它的实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-143">Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.</span></span></summary>
        <returns><span data-ttu-id="97ca7-144">使用默认构造函数创建的指定类型的实例；如果未找到 <see langword="null" /> 则为 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-144">An instance of the specified type created with the default constructor; or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="97ca7-145">该类型使用默认联编程序解析，而无需指定区域性或激活属性，并将 <see cref="T:System.Reflection.BindingFlags" /> 设置为 <see langword="Public" /> 或 <see langword="Instance" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-145">The type is resolved using the default binder, without specifying culture or activation attributes, and with <see cref="T:System.Reflection.BindingFlags" /> set to <see langword="Public" /> or <see langword="Instance" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-146">如果运行时找不到`typeName`中<xref:System.Reflection.Assembly>实例，它将返回`null`而不是引发异常。</span><span class="sxs-lookup"><span data-stu-id="97ca7-146">If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception.</span></span> <span data-ttu-id="97ca7-147">这可能是因为：</span><span class="sxs-lookup"><span data-stu-id="97ca7-147">This might happen because:</span></span>  
  
-   <span data-ttu-id="97ca7-148">尚未指定类型的完全限定的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-148">You haven't specified the fully qualified name of the type.</span></span>  
  
-   <span data-ttu-id="97ca7-149">已指定完全限定的类型名称，但其大小写不匹配的类型的大小写<xref:System.Type.FullName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-149">You've specified the fully qualified type name, but its case doesn't match the case of the type's <xref:System.Type.FullName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="97ca7-150">有关不区分大小写的比较`typeName`类型的完整名称，以及调用<xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29>重载，并指定`true`为`ignoreCase`参数。</span><span class="sxs-lookup"><span data-stu-id="97ca7-150">For a case-insensitive comparison of `typeName` with the type's full name, call the <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> overload and specify `true` for the `ignoreCase` argument.</span></span>  
  
-   <span data-ttu-id="97ca7-151">中当前不存在类型<xref:System.Reflection.Assembly>实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-151">The type doesn't exist in the current <xref:System.Reflection.Assembly> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-152">下面的示例定义`Person`类并调用<xref:System.Reflection.Assembly.CreateInstance%28System.String%29>方法来实例化。</span><span class="sxs-lookup"><span data-stu-id="97ca7-152">The following example defines a `Person` class and calls the <xref:System.Reflection.Assembly.CreateInstance%28System.String%29> method to instantiate it.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.CreateInstance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/cs/createinstance1.cs#1)]
 [!code-vb[System.Reflection.Assembly.CreateInstance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/vb/createinstance1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-153"><paramref name="typeName" /> 为空字符串 ("") 或以空字符开头的字符串。</span><span class="sxs-lookup"><span data-stu-id="97ca7-153"><paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.</span></span>  
  
<span data-ttu-id="97ca7-154">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-154">-or-</span></span> 
<span data-ttu-id="97ca7-155">当前程序集已加载到仅反射上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-155">The current assembly was loaded into the reflection-only context.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-156"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-156"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="97ca7-157">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="97ca7-157">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-158"><paramref name="typeName" /> 所需的从属程序集无法找到。</span><span class="sxs-lookup"><span data-stu-id="97ca7-158"><paramref name="typeName" /> requires a dependent assembly that could not be found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-159"><paramref name="typeName" /> 所需的从属程序集已找到，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-159"><paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.</span></span>  
  
<span data-ttu-id="97ca7-160">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-160">-or-</span></span> 
<span data-ttu-id="97ca7-161">当前程序集被加载到仅反射上下文中，并且 <paramref name="typeName" /> 所需的从属程序集未预先加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-161">The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-162"><paramref name="typeName" /> 需要一个从属程序集，但该文件不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-162"><paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-163">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-163">-or-</span></span> 
 <span data-ttu-id="97ca7-164"><paramref name="typeName" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</span><span class="sxs-lookup"><span data-stu-id="97ca7-164"><paramref name="typeName" /> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="97ca7-165">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-165">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="97ca7-166">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-166">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public object CreateInstance (string typeName, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(string typeName, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstance (typeName As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(System::String ^ typeName, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string * bool -&gt; obj&#xA;override this.CreateInstance : string * bool -&gt; obj" Usage="assembly.CreateInstance (typeName, ignoreCase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="97ca7-167">要查找类型的 <see cref="P:System.Type.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-167">The <see cref="P:System.Type.FullName" /> of the type to locate.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="97ca7-168">如果为 <see langword="true" />，则忽略类型名的大小写；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-168"><see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97ca7-169">使用可选的区分大小写搜索，从此程序集中查找指定的类型，然后使用系统激活器创建它的实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-169">Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.</span></span></summary>
        <returns><span data-ttu-id="97ca7-170">使用默认构造函数创建的指定类型的实例；如果未找到 <see langword="null" /> 则为 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-170">An instance of the specified type created with the default constructor; or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="97ca7-171">该类型使用默认联编程序解析，而无需指定区域性或激活属性，并将 <see cref="T:System.Reflection.BindingFlags" /> 设置为 <see langword="Public" /> 或 <see langword="Instance" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-171">The type is resolved using the default binder, without specifying culture or activation attributes, and with <see cref="T:System.Reflection.BindingFlags" /> set to <see langword="Public" /> or <see langword="Instance" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-172">如果运行时找不到`typeName`中<xref:System.Reflection.Assembly>实例，它将返回`null`而不是引发异常。</span><span class="sxs-lookup"><span data-stu-id="97ca7-172">If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception.</span></span> <span data-ttu-id="97ca7-173">这可能是因为：</span><span class="sxs-lookup"><span data-stu-id="97ca7-173">This might happen because:</span></span>  
  
-   <span data-ttu-id="97ca7-174">尚未指定类型的完全限定的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-174">You haven't specified the fully qualified name of the type.</span></span>  
  
-   <span data-ttu-id="97ca7-175">中当前不存在类型<xref:System.Reflection.Assembly>实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-175">The type doesn't exist in the current <xref:System.Reflection.Assembly> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-176">下面的示例定义`Person`类。</span><span class="sxs-lookup"><span data-stu-id="97ca7-176">The following example defines a `Person` class.</span></span> <span data-ttu-id="97ca7-177">然后，它调用<xref:System.Reflection.Assembly.CreateInstance%28System.String%29>方法来实例化，但是，由于的大小写`typeName`参数不匹配的类型<xref:System.Type.FullName%2A>属性，该方法将返回`null`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-177">It then calls the <xref:System.Reflection.Assembly.CreateInstance%28System.String%29> method to instantiate it, but because the casing of the `typeName` argument doesn't match that of the type's <xref:System.Type.FullName%2A> property, the method returns `null`.</span></span> <span data-ttu-id="97ca7-178">该示例时将传递到相同的字符串<xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29>重载，并指定在比较应区分大小写，`Person`找到该类，和一个`Person`对象已成功实例化。</span><span class="sxs-lookup"><span data-stu-id="97ca7-178">When the example passes the same string to the <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> overload and specifies that the comparison should be case-insensitive, the `Person` class is found, and a `Person` object is successfully instantiated.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.CreateInstance#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/cs/createinstance2.cs#2)]
 [!code-vb[System.Reflection.Assembly.CreateInstance#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/vb/createinstance2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-179"><paramref name="typeName" /> 为空字符串 ("") 或以空字符开头的字符串。</span><span class="sxs-lookup"><span data-stu-id="97ca7-179"><paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.</span></span>  
  
<span data-ttu-id="97ca7-180">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-180">-or-</span></span> 
<span data-ttu-id="97ca7-181">当前程序集已加载到仅反射上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-181">The current assembly was loaded into the reflection-only context.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="97ca7-182">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="97ca7-182">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-183"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-183"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-184"><paramref name="typeName" /> 所需的从属程序集无法找到。</span><span class="sxs-lookup"><span data-stu-id="97ca7-184"><paramref name="typeName" /> requires a dependent assembly that could not be found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-185"><paramref name="typeName" /> 所需的从属程序集已找到，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-185"><paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.</span></span>  
  
<span data-ttu-id="97ca7-186">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-186">-or-</span></span> 
<span data-ttu-id="97ca7-187">当前程序集被加载到仅反射上下文中，并且 <paramref name="typeName" /> 所需的从属程序集未预先加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-187">The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-188"><paramref name="typeName" /> 需要一个从属程序集，但该文件不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-188"><paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-189">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-189">-or-</span></span> 
 <span data-ttu-id="97ca7-190"><paramref name="typeName" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</span><span class="sxs-lookup"><span data-stu-id="97ca7-190"><paramref name="typeName" /> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="97ca7-191">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-191">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="97ca7-192">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-192">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; obj&#xA;override this.CreateInstance : string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; obj" Usage="assembly.CreateInstance (typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="args" Type="System.Object[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="activationAttributes" Type="System.Object[]" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="97ca7-193">要查找类型的 <see cref="P:System.Type.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-193">The <see cref="P:System.Type.FullName" /> of the type to locate.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="97ca7-194">如果为 <see langword="true" />，则忽略类型名的大小写；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-194"><see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" />.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="97ca7-195">影响执行搜索的方式的位掩码。</span><span class="sxs-lookup"><span data-stu-id="97ca7-195">A bitmask that affects the way in which the search is conducted.</span></span> <span data-ttu-id="97ca7-196">此值是 <see cref="T:System.Reflection.BindingFlags" /> 中的位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="97ca7-196">The value is a combination of bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span></span></param>
        <param name="binder"><span data-ttu-id="97ca7-197">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see langword="MemberInfo" /> 对象的检索。</span><span class="sxs-lookup"><span data-stu-id="97ca7-197">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection.</span></span> <span data-ttu-id="97ca7-198">如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="97ca7-198">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="97ca7-199">包含要传递给构造函数的自变量的数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-199">An array that contains the arguments to be passed to the constructor.</span></span> <span data-ttu-id="97ca7-200">此参数数组在数量、顺序和类型方面必须与要调用的构造函数的参数匹配。</span><span class="sxs-lookup"><span data-stu-id="97ca7-200">This array of arguments must match in number, order, and type the parameters of the constructor to be invoked.</span></span> <span data-ttu-id="97ca7-201">如果需要默认的构造函数，则 <paramref name="args" /> 必须是空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-201">If the default constructor is desired, <paramref name="args" /> must be an empty array or <see langword="null" />.</span></span></param>
        <param name="culture"><span data-ttu-id="97ca7-202">用于控制类型强制的 <see langword="CultureInfo" /> 的实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-202">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="97ca7-203">如果这是 <see langword="null" />，则使用当前线程的 <see langword="CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-203">If this is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="97ca7-204">（例如，这对于将表示 1000 的 <see langword="String" /> 转换为 <see langword="Double" /> 值是必需的，因为不同的区域性以不同的方式表示 1000。）</span><span class="sxs-lookup"><span data-stu-id="97ca7-204">(This is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, for example, since 1000 is represented differently by different cultures.)</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="97ca7-205">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-205">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="97ca7-206">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="97ca7-206">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  <span data-ttu-id="97ca7-207">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="97ca7-207">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="97ca7-208">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="97ca7-208">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="97ca7-209">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="97ca7-209">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="97ca7-210">使用可选的区分大小写搜索并具有指定的区域性、参数和绑定及激活特性，从此程序集中查找指定的类型，并使用系统激活器创建它的实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-210">Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.</span></span></summary>
        <returns><span data-ttu-id="97ca7-211">如果未找到 <see langword="null" />，则为指定的类型实例或 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-211">An instance of the specified type, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="97ca7-212">所提供的参数用于解析类型，以及绑定用于创建实例的构造函数。</span><span class="sxs-lookup"><span data-stu-id="97ca7-212">The supplied arguments are used to resolve the type, and to bind the constructor that is used to create the instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-213"><paramref name="typeName" /> 为空字符串 ("") 或以空字符开头的字符串。</span><span class="sxs-lookup"><span data-stu-id="97ca7-213"><paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.</span></span>  
  
<span data-ttu-id="97ca7-214">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-214">-or-</span></span> 
<span data-ttu-id="97ca7-215">当前程序集已加载到仅反射上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-215">The current assembly was loaded into the reflection-only context.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-216"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-216"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="97ca7-217">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="97ca7-217">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="97ca7-218">非空激活属性数组被传递给不是继承自 <see cref="T:System.MarshalByRefObject" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-218">A non-empty activation attributes array is passed to a type that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-219"><paramref name="typeName" /> 所需的从属程序集无法找到。</span><span class="sxs-lookup"><span data-stu-id="97ca7-219"><paramref name="typeName" /> requires a dependent assembly that could not be found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-220"><paramref name="typeName" /> 所需的从属程序集已找到，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-220"><paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.</span></span>  
  
<span data-ttu-id="97ca7-221">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-221">-or-</span></span> 
<span data-ttu-id="97ca7-222">当前程序集被加载到仅反射上下文中，并且 <paramref name="typeName" /> 所需的从属程序集未预先加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-222">The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-223"><paramref name="typeName" /> 需要一个从属程序集，但该文件不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-223"><paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-224">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-224">-or-</span></span> 
 <span data-ttu-id="97ca7-225"><paramref name="typeName" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</span><span class="sxs-lookup"><span data-stu-id="97ca7-225"><paramref name="typeName" /> requires a dependent assembly which that was compiled for a version of the runtime that is later than the currently loaded version.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="97ca7-226">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-226">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="97ca7-227">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-227">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-228">若要创建的委托实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-228">to create an instance of a delegate.</span></span> <span data-ttu-id="97ca7-229">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-229">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateQualifiedName">
      <MemberSignature Language="C#" Value="public static string CreateQualifiedName (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CreateQualifiedName(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateQualifiedName (assemblyName As String, typeName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CreateQualifiedName(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member CreateQualifiedName : string * string -&gt; string" Usage="System.Reflection.Assembly.CreateQualifiedName (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="typeName" Type="System.String" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="97ca7-230">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-230">The display name of an assembly.</span></span></param>
        <param name="typeName"><span data-ttu-id="97ca7-231">类型的全名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-231">The full name of a type.</span></span></param>
        <summary><span data-ttu-id="97ca7-232">创建由类型的程序集的显示名称限定的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-232">Creates the name of a type qualified by the display name of its assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-233">由程序集的显示名称限定的类型的完整名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-233">The full name of the type qualified by the display name of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-234">返回字符串的格式为：</span><span class="sxs-lookup"><span data-stu-id="97ca7-234">The format of the returned string is:</span></span>  
  
 <span data-ttu-id="97ca7-235">\<FullTypeName >， \<AssemblyDisplayName ></span><span class="sxs-lookup"><span data-stu-id="97ca7-235">\<FullTypeName>, \<AssemblyDisplayName></span></span>  
  
 <span data-ttu-id="97ca7-236">请参阅<xref:System.Reflection.AssemblyName>有关程序集的显示名称的格式的说明。</span><span class="sxs-lookup"><span data-stu-id="97ca7-236">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
 <span data-ttu-id="97ca7-237">若要适应的公共语言运行时版本中的更改，请使用此方法，而不是无需自行构造的限定的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-237">To accommodate changes in versions of the common language runtime, use this method rather than constructing the qualified name yourself.</span></span>  <span data-ttu-id="97ca7-238">有关限定的程序集名称的信息，请参阅<xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-238">For information about qualified assembly names, see <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt; CustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.CustomAttributeData&gt; CustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.CustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ CustomAttributes { System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomAttributes : seq&lt;System.Reflection.CustomAttributeData&gt;" Usage="System.Reflection.Assembly.CustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-239">获取包含此程序集自定义属性的集合。</span><span class="sxs-lookup"><span data-stu-id="97ca7-239">Gets a collection that contains this assembly's custom attributes.</span></span></summary>
        <value><span data-ttu-id="97ca7-240">包含此程序集自定义属性的集合。</span><span class="sxs-lookup"><span data-stu-id="97ca7-240">A collection that contains this assembly's custom attributes.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefinedTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt; DefinedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.TypeInfo&gt; DefinedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.DefinedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DefinedTypes As IEnumerable(Of TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::TypeInfo ^&gt; ^ DefinedTypes { System::Collections::Generic::IEnumerable&lt;System::Reflection::TypeInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefinedTypes : seq&lt;System.Reflection.TypeInfo&gt;" Usage="System.Reflection.Assembly.DefinedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-241">获取定义在此程序集中的类型的集合。</span><span class="sxs-lookup"><span data-stu-id="97ca7-241">Gets a collection of the types defined in this assembly.</span></span></summary>
        <value><span data-ttu-id="97ca7-242">定义在此程序集中的类型的集合。</span><span class="sxs-lookup"><span data-stu-id="97ca7-242">A collection of the types defined in this assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-243"><xref:System.Reflection.Assembly.DefinedTypes%2A>属性相当于<xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>方法，不同之处在于<xref:System.Reflection.Assembly.DefinedTypes%2A>属性返回的集合<xref:System.Reflection.TypeInfo>对象，并且<xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>方法返回的数组<xref:System.Type>对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-243">The <xref:System.Reflection.Assembly.DefinedTypes%2A> property is comparable to the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> method, except that the <xref:System.Reflection.Assembly.DefinedTypes%2A> property returns a collection of <xref:System.Reflection.TypeInfo> objects, and the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> method returns an array of <xref:System.Type> objects.</span></span>  
  
 <span data-ttu-id="97ca7-244">返回的数组包含嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-244">The returned array includes nested types.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Assembly.GetTypes" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo EntryPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo EntryPoint" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EntryPoint As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ EntryPoint { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryPoint : System.Reflection.MethodInfo" Usage="System.Reflection.Assembly.EntryPoint" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.EntryPoint</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-245">获取此程序集的入口点。</span><span class="sxs-lookup"><span data-stu-id="97ca7-245">Gets the entry point of this assembly.</span></span></summary>
        <value><span data-ttu-id="97ca7-246">表示此程序集入口点的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-246">An object that represents the entry point of this assembly.</span></span> <span data-ttu-id="97ca7-247">如果没有找到入口点（例如，此程序集是一个 DLL），则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-247">If no entry point is found (for example, the assembly is a DLL), <see langword="null" /> is returned.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="assembly.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="97ca7-248">与该实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-248">The object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="97ca7-249">确定此程序集和指定的对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="97ca7-249">Determines whether this assembly and the specified object are equal.</span></span></summary>
        <returns><span data-ttu-id="97ca7-250">如果 <see langword="true" /> 与此实例相等，则为 <paramref name="o" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-250"><see langword="true" /> if <paramref name="o" /> is equal to this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-251"><xref:System.Reflection.Assembly.Equals%2A>方法执行引用相等性来确定测试是否当前实例和`o`是否相等。</span><span class="sxs-lookup"><span data-stu-id="97ca7-251">The <xref:System.Reflection.Assembly.Equals%2A> method performs a test for reference equality to determine whether the current instance and `o` are equal.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EscapedCodeBase">
      <MemberSignature Language="C#" Value="public virtual string EscapedCodeBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EscapedCodeBase" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.EscapedCodeBase" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EscapedCodeBase As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EscapedCodeBase { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EscapedCodeBase : string" Usage="System.Reflection.Assembly.EscapedCodeBase" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.EscapedCodeBase</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-252">获取 URI，包括表示基本代码的转义符。</span><span class="sxs-lookup"><span data-stu-id="97ca7-252">Gets the URI, including escape characters, that represents the codebase.</span></span></summary>
        <value><span data-ttu-id="97ca7-253">带有转义符的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-253">A URI with escape characters.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-254">用于访问该路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-254">for access to the path.</span></span> <span data-ttu-id="97ca7-255">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-255">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public virtual System.Security.Policy.Evidence Evidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Evidence : System.Security.Policy.Evidence" Usage="System.Reflection.Assembly.Evidence" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.Evidence</InterfaceMember>
        <InterfaceMember>P:System.Security.IEvidenceFactory.Evidence</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-256">获取此程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-256">Gets the evidence for this assembly.</span></span></summary>
        <value><span data-ttu-id="97ca7-257">此程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-257">The evidence for this assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-258">证据是输入安全策略决策的一组信息（如代码可授予哪些权限）。</span><span class="sxs-lookup"><span data-stu-id="97ca7-258">Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-259">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-259">to load an assembly with evidence.</span></span> <span data-ttu-id="97ca7-260">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-260">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="ExportedTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; ExportedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; ExportedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.ExportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExportedTypes As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ ExportedTypes { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExportedTypes : seq&lt;Type&gt;" Usage="System.Reflection.Assembly.ExportedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-261">获取此程序集中定义的公共类型的集合，这些公共类型在程序集外可见。</span><span class="sxs-lookup"><span data-stu-id="97ca7-261">Gets a collection of the public types defined in this assembly that are visible outside the assembly.</span></span></summary>
        <value><span data-ttu-id="97ca7-262">此程序集中定义的公共类型的集合，这些公共类型在程序集外可见。</span><span class="sxs-lookup"><span data-stu-id="97ca7-262">A collection of the public types defined in this assembly that are visible outside the assembly.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public virtual string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Reflection.Assembly.FullName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.FullName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-263">获取程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-263">Gets the display name of the assembly.</span></span></summary>
        <value><span data-ttu-id="97ca7-264">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-264">The display name of the assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-265">请参阅<xref:System.Reflection.AssemblyName>有关程序集的显示名称的格式的说明。</span><span class="sxs-lookup"><span data-stu-id="97ca7-265">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-266">不建议编写你自己的代码来分析显示名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-266">Writing your own code to parse display names is not recommended.</span></span> <span data-ttu-id="97ca7-267">相反，将传递到的显示名称<xref:System.Reflection.AssemblyName.%23ctor%2A>构造函数，它对其进行分析，并填充新的相应字段<xref:System.Reflection.AssemblyName>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-267">Instead, pass the display name to the <xref:System.Reflection.AssemblyName.%23ctor%2A> constructor, which parses it and populates the appropriate fields of the new <xref:System.Reflection.AssemblyName>.</span></span>  
  
 <span data-ttu-id="97ca7-268">在.NET Framework 2.0 版中，处理器体系结构添加到程序集标识，并可以指定为程序集名称字符串的一部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-268">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="97ca7-269">但是，不包括在返回的字符串<xref:System.Reflection.Assembly.FullName%2A>属性，出于兼容性原因。</span><span class="sxs-lookup"><span data-stu-id="97ca7-269">However, it is not included in the string returned by the <xref:System.Reflection.Assembly.FullName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="97ca7-270">请参阅 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-270">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-271">以下示例检索当前正在执行的程序集的显示名称和包含的程序集的显示名称<xref:System.Int32>类型 (`int`在 C# 中，`Integer`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-271">The following example retrieves the display name of the currently executing assembly, and the display name of the assembly that contains the <xref:System.Int32> type (`int` in C#, `Integer` in Visual Basic).</span></span>  
  
 [!code-cpp[Assembly.FullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.FullName/CPP/Example.cpp#1)]
 [!code-csharp[Assembly.FullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.FullName/CS/Example.cs#1)]
 [!code-vb[Assembly.FullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.FullName/VB/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="97ca7-272">指定完全限定的类型名称</span><span class="sxs-lookup"><span data-stu-id="97ca7-272">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GetAssembly (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GetAssembly(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GetAssembly(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetAssembly : Type -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.GetAssembly type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="97ca7-273">一个对象，该对象表示将返回的程序集中的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-273">An object representing a type in the assembly that will be returned.</span></span></param>
        <summary><span data-ttu-id="97ca7-274">获取在其中定义指定类型的当前加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-274">Gets the currently loaded assembly in which the specified type is defined.</span></span></summary>
        <returns><span data-ttu-id="97ca7-275">在其中定义指定类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-275">The assembly in which the specified type is defined.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-276">调用此方法等同于检索的值<xref:System.Type.Assembly?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-276">Calling this method is equivalent to retrieving the value of the  <xref:System.Type.Assembly?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="97ca7-277">但是，<xref:System.Type.Assembly?displayProperty=nameWithType>属性通常会提供优异的性能。</span><span class="sxs-lookup"><span data-stu-id="97ca7-277">However, the <xref:System.Type.Assembly?displayProperty=nameWithType> property typically offers superior performance.</span></span>  
  
 <span data-ttu-id="97ca7-278">为了调用此方法，您必须具有<xref:System.Type>对象，这意味着，在其中定义该类的程序集必须已将加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-278">In order to call this method, you must have a <xref:System.Type> object, which means that the assembly in which the class is defined must already be loaded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-279">下面的示例检索包含的程序集<xref:System.Int32>键入，并显示其名称和文件的位置。</span><span class="sxs-lookup"><span data-stu-id="97ca7-279">The following example retrieves the assembly that contains the <xref:System.Int32> type and displays its name and file location.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/GetAssembly1.cpp#12)]
 [!code-csharp[System.Reflection.Assembly#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/GetAssembly1.cs#12)]
 [!code-vb[System.Reflection.Assembly#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/GetAssembly1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-280"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-280"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="97ca7-281">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-281">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="97ca7-282">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-282">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetCallingAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GetCallingAssembly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GetCallingAssembly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetCallingAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCallingAssembly () As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GetCallingAssembly();" />
      <MemberSignature Language="F#" Value="static member GetCallingAssembly : unit -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.GetCallingAssembly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-283">返回方法（该方法调用当前正在执行的方法）的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-283">Returns the <see cref="T:System.Reflection.Assembly" /> of the method that invoked the currently executing method.</span></span></summary>
        <returns><span data-ttu-id="97ca7-284">方法（该方法调用当前正在执行的方法）的 <see langword="Assembly" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-284">The <see langword="Assembly" /> object of the method that invoked the currently executing method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-285">如果该方法的调用<xref:System.Reflection.Assembly.GetCallingAssembly%2A>方法的内联扩展由实时 (JIT) 编译器，或者其调用方是否内联扩展，是该程序集返回<xref:System.Reflection.Assembly.GetCallingAssembly%2A>可能会发生异常。</span><span class="sxs-lookup"><span data-stu-id="97ca7-285">If the method that calls the <xref:System.Reflection.Assembly.GetCallingAssembly%2A> method is expanded inline by the just-in-time (JIT) compiler, or if its caller is expanded inline, the assembly that is returned by <xref:System.Reflection.Assembly.GetCallingAssembly%2A> may differ unexpectedly.</span></span> <span data-ttu-id="97ca7-286">例如，考虑以下方法和程序集：</span><span class="sxs-lookup"><span data-stu-id="97ca7-286">For example, consider the following methods and assemblies:</span></span>  
  
-   <span data-ttu-id="97ca7-287">方法`M1`程序集中`A1`调用<xref:System.Reflection.Assembly.GetCallingAssembly%2A>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-287">Method `M1` in assembly `A1` calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>.</span></span>  
  
-   <span data-ttu-id="97ca7-288">方法`M2`程序集中`A2`调用`M1`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-288">Method `M2` in assembly `A2` calls `M1`.</span></span>  
  
-   <span data-ttu-id="97ca7-289">方法`M3`程序集中`A3`调用`M2`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-289">Method `M3` in assembly `A3` calls `M2`.</span></span>  
  
 <span data-ttu-id="97ca7-290">当`M1`不是内联<xref:System.Reflection.Assembly.GetCallingAssembly%2A>返回`A2`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-290">When `M1` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`.</span></span> <span data-ttu-id="97ca7-291">当`M1`内联，<xref:System.Reflection.Assembly.GetCallingAssembly%2A>返回`A3`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-291">When `M1` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`.</span></span> <span data-ttu-id="97ca7-292">同样，当`M2`不是内联<xref:System.Reflection.Assembly.GetCallingAssembly%2A>返回`A2`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-292">Similarly, when `M2` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`.</span></span> <span data-ttu-id="97ca7-293">当`M2`内联，<xref:System.Reflection.Assembly.GetCallingAssembly%2A>返回`A3`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-293">When `M2` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`.</span></span>  
  
 <span data-ttu-id="97ca7-294">这种效果也会发生时`M1`尾调用从作为执行`M2`，或当`M2`尾调用从作为执行`M3`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-294">This effect also occurs when `M1` executes as a tail call from `M2`, or when `M2` executes as a tail call from `M3`.</span></span> <span data-ttu-id="97ca7-295">您可能会阻止从 JIT 编译器内联调用的方法<xref:System.Reflection.Assembly.GetCallingAssembly%2A>，通过应用<xref:System.Runtime.CompilerServices.MethodImplAttribute>属性与<xref:System.Runtime.CompilerServices.MethodImplOptions.NoInlining?displayProperty=nameWithType>标志，但没有任何类似机制来防止尾调用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-295">You can prevent the JIT compiler from inlining the method that calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>, by applying the <xref:System.Runtime.CompilerServices.MethodImplAttribute> attribute with the <xref:System.Runtime.CompilerServices.MethodImplOptions.NoInlining?displayProperty=nameWithType> flag, but there is no similar mechanism for preventing tail calls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-296">下面的示例获取当前方法的调用程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-296">The following example gets the calling assembly of the current method.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/getcallingassembly1.cpp#4)]
 [!code-csharp[System.Reflection.Assembly#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/getcallingassembly1.cs#4)]
 [!code-vb[System.Reflection.Assembly#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/getcallingassembly1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-297">获取此程序集的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-297">Gets the custom attributes for this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public virtual object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : bool -&gt; obj[]&#xA;override this.GetCustomAttributes : bool -&gt; obj[]" Usage="assembly.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="97ca7-298">对于 <see cref="T:System.Reflection.Assembly" /> 类型的对象，将忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="97ca7-298">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />.</span></span></param>
        <summary><span data-ttu-id="97ca7-299">获取此程序集的所有自定义属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-299">Gets all the custom attributes for this assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-300">包含此程序集自定义属性的数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-300">An array that contains the custom attributes for this assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-301">此方法实现相应<xref:System.Reflection.ICustomAttributeProvider>接口方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-301">This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method.</span></span> <span data-ttu-id="97ca7-302">因此，`inherit`必须指定参数，即使它将被忽略。</span><span class="sxs-lookup"><span data-stu-id="97ca7-302">Therefore, the `inherit` parameter must be specified even though it is ignored.</span></span>  
  
 <span data-ttu-id="97ca7-303">伪特性指示位时存在该属性时，必须设置的核心元数据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-303">A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present.</span></span> <span data-ttu-id="97ca7-304">与不同的扩展类型的元数据，并与类型一起保存的自定义属性，伪属性修改类型的元数据，则将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="97ca7-304">Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded.</span></span> <span data-ttu-id="97ca7-305">不能使用现有的反射 Api 访问某些结果的位。</span><span class="sxs-lookup"><span data-stu-id="97ca7-305">Some of the resulting bits cannot be accessed using existing reflection APIs.</span></span>  
  
 <span data-ttu-id="97ca7-306">下表总结了不同的伪属性和可用于反射的位的访问器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-306">The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.</span></span>  
  
|<span data-ttu-id="97ca7-307">Pseudo-Attribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-307">Pseudo-Attribute</span></span>|<span data-ttu-id="97ca7-308">元数据位</span><span class="sxs-lookup"><span data-stu-id="97ca7-308">Metadata Bits</span></span>|<span data-ttu-id="97ca7-309">反射访问器</span><span class="sxs-lookup"><span data-stu-id="97ca7-309">Reflection Accessor</span></span>|  
|-----------------------|-------------------|-------------------------|  
|<span data-ttu-id="97ca7-310">Sub</span><span class="sxs-lookup"><span data-stu-id="97ca7-310">DllImportAttribute</span></span>|<span data-ttu-id="97ca7-311">CorPInvokeMap</span><span class="sxs-lookup"><span data-stu-id="97ca7-311">CorPInvokeMap</span></span><br /><br /> <span data-ttu-id="97ca7-312">DLL 名称</span><span class="sxs-lookup"><span data-stu-id="97ca7-312">DLL name</span></span>|<span data-ttu-id="97ca7-313">没有访问器 PInvokeMap 普通方法/全局方法属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-313">No accessor for PInvokeMap for ordinary method/global method attributes.</span></span><br /><br /> <span data-ttu-id="97ca7-314">DLL 名称没有访问器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-314">No accessor for DLL name.</span></span>|  
|<span data-ttu-id="97ca7-315">GuidAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-315">GuidAttribute</span></span>|<span data-ttu-id="97ca7-316">存储为实际的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-316">Stored as a real custom attribute.</span></span>|<span data-ttu-id="97ca7-317">作为实际的自定义属性进行访问。</span><span class="sxs-lookup"><span data-stu-id="97ca7-317">Accessed as a real custom attribute.</span></span>|  
|<span data-ttu-id="97ca7-318">ComImportAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-318">ComImportAttribute</span></span>|<span data-ttu-id="97ca7-319">CorTypeAttr.tdImport</span><span class="sxs-lookup"><span data-stu-id="97ca7-319">CorTypeAttr.tdImport</span></span>|<span data-ttu-id="97ca7-320">Type.Attributes.Import</span><span class="sxs-lookup"><span data-stu-id="97ca7-320">Type.Attributes.Import</span></span>|  
|<span data-ttu-id="97ca7-321">SerializableAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-321">SerializableAttribute</span></span>|<span data-ttu-id="97ca7-322">CorTypeAttr.tdSerializable</span><span class="sxs-lookup"><span data-stu-id="97ca7-322">CorTypeAttr.tdSerializable</span></span>|<span data-ttu-id="97ca7-323">Type.Attributes.Serializable</span><span class="sxs-lookup"><span data-stu-id="97ca7-323">Type.Attributes.Serializable</span></span>|  
|<span data-ttu-id="97ca7-324">NonSerializedAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-324">NonSerializedAttribute</span></span>|<span data-ttu-id="97ca7-325">CorFieldAttr.fdNotSerialized</span><span class="sxs-lookup"><span data-stu-id="97ca7-325">CorFieldAttr.fdNotSerialized</span></span>|<span data-ttu-id="97ca7-326">FieldInfo.Attributes.NotSerialized</span><span class="sxs-lookup"><span data-stu-id="97ca7-326">FieldInfo.Attributes.NotSerialized</span></span>|  
|<span data-ttu-id="97ca7-327">MethodImplAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-327">MethodImplAttribute</span></span>|<span data-ttu-id="97ca7-328">CorMethodImpl</span><span class="sxs-lookup"><span data-stu-id="97ca7-328">CorMethodImpl</span></span>|<span data-ttu-id="97ca7-329">MethodInfo.GetMethodImplementationFlags()</span><span class="sxs-lookup"><span data-stu-id="97ca7-329">MethodInfo.GetMethodImplementationFlags()</span></span><br /><br /> <span data-ttu-id="97ca7-330">ConstructorInfo.GetMethodImplementationFlags()</span><span class="sxs-lookup"><span data-stu-id="97ca7-330">ConstructorInfo.GetMethodImplementationFlags()</span></span>|  
|<span data-ttu-id="97ca7-331">MarshalAsAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-331">MarshalAsAttribute</span></span>|<span data-ttu-id="97ca7-332">各种位。</span><span class="sxs-lookup"><span data-stu-id="97ca7-332">Various bits.</span></span>|<span data-ttu-id="97ca7-333">没有访问器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-333">No accessor.</span></span>|  
|<span data-ttu-id="97ca7-334">PreserveSigAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-334">PreserveSigAttribute</span></span>|<span data-ttu-id="97ca7-335">CorMethodImpl.miOLE</span><span class="sxs-lookup"><span data-stu-id="97ca7-335">CorMethodImpl.miOLE</span></span>|<span data-ttu-id="97ca7-336">MethodInfo.GetMethodImplementationFlags().OLE</span><span class="sxs-lookup"><span data-stu-id="97ca7-336">MethodInfo.GetMethodImplementationFlags().OLE</span></span><br /><br /> <span data-ttu-id="97ca7-337">ConstructorInfo.GetMethodImplementationFlags()。OLE</span><span class="sxs-lookup"><span data-stu-id="97ca7-337">ConstructorInfo.GetMethodImplementationFlags().OLE</span></span>|  
|<span data-ttu-id="97ca7-338">InAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-338">InAttribute</span></span>|<span data-ttu-id="97ca7-339">CorParamAttr.pdIn</span><span class="sxs-lookup"><span data-stu-id="97ca7-339">CorParamAttr.pdIn</span></span>|<span data-ttu-id="97ca7-340">ParameterInfo.Attributes.In</span><span class="sxs-lookup"><span data-stu-id="97ca7-340">ParameterInfo.Attributes.In</span></span>|  
|<span data-ttu-id="97ca7-341">OutAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-341">OutAttribute</span></span>|<span data-ttu-id="97ca7-342">CorParamAttr.pdOut</span><span class="sxs-lookup"><span data-stu-id="97ca7-342">CorParamAttr.pdOut</span></span>|<span data-ttu-id="97ca7-343">ParameterInfo.Attributes.Out</span><span class="sxs-lookup"><span data-stu-id="97ca7-343">ParameterInfo.Attributes.Out</span></span>|  
|<span data-ttu-id="97ca7-344">StructLayoutAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-344">StructLayoutAttribute</span></span>|<span data-ttu-id="97ca7-345">CorTypeAttr.tdLayoutSequential</span><span class="sxs-lookup"><span data-stu-id="97ca7-345">CorTypeAttr.tdLayoutSequential</span></span><br /><br /> <span data-ttu-id="97ca7-346">CorTypeAttr.tdExplicitLayout</span><span class="sxs-lookup"><span data-stu-id="97ca7-346">CorTypeAttr.tdExplicitLayout</span></span><br /><br /> <span data-ttu-id="97ca7-347">CorTypeAttr.tdAnsiClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-347">CorTypeAttr.tdAnsiClass</span></span><br /><br /> <span data-ttu-id="97ca7-348">CorTypeAttr.tdUnicodeClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-348">CorTypeAttr.tdUnicodeClass</span></span><br /><br /> <span data-ttu-id="97ca7-349">CorTypeAttr.tdAutoClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-349">CorTypeAttr.tdAutoClass</span></span><br /><br /> <span data-ttu-id="97ca7-350">类封装。</span><span class="sxs-lookup"><span data-stu-id="97ca7-350">Class packing.</span></span>|<span data-ttu-id="97ca7-351">Type.Attributes.LayoutSequential</span><span class="sxs-lookup"><span data-stu-id="97ca7-351">Type.Attributes.LayoutSequential</span></span><br /><br /> <span data-ttu-id="97ca7-352">Type.Attributes.ExplicitLayout</span><span class="sxs-lookup"><span data-stu-id="97ca7-352">Type.Attributes.ExplicitLayout</span></span><br /><br /> <span data-ttu-id="97ca7-353">Type.Attributes.AnsiClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-353">Type.Attributes.AnsiClass</span></span><br /><br /> <span data-ttu-id="97ca7-354">Type.Attributes.UnicodeClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-354">Type.Attributes.UnicodeClass</span></span><br /><br /> <span data-ttu-id="97ca7-355">Type.Attributes.AutoClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-355">Type.Attributes.AutoClass</span></span><br /><br /> <span data-ttu-id="97ca7-356">没有访问器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-356">No accessor.</span></span>|  
|<span data-ttu-id="97ca7-357">FieldOffsetAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-357">FieldOffsetAttribute</span></span>|<span data-ttu-id="97ca7-358">字段偏移量。</span><span class="sxs-lookup"><span data-stu-id="97ca7-358">Field offset.</span></span>|<span data-ttu-id="97ca7-359">没有访问器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-359">No accessor.</span></span>|  
|<span data-ttu-id="97ca7-360">AssemblyLoadAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-360">AssemblyLoadAttribute</span></span>|<span data-ttu-id="97ca7-361">CorAssemblyFlags</span><span class="sxs-lookup"><span data-stu-id="97ca7-361">CorAssemblyFlags</span></span>|<span data-ttu-id="97ca7-362">没有访问器或枚举器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-362">No accessor or enumerator.</span></span>|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="97ca7-363">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-363">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="97ca7-364">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-364">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : Type * bool -&gt; obj[]&#xA;override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="assembly.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="97ca7-365">要为其返回自定义属性的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-365">The type for which the custom attributes are to be returned.</span></span></param>
        <param name="inherit"><span data-ttu-id="97ca7-366">对于 <see cref="T:System.Reflection.Assembly" /> 类型的对象，将忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="97ca7-366">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />.</span></span></param>
        <summary><span data-ttu-id="97ca7-367">获取按类型指定的此程序集的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-367">Gets the custom attributes for this assembly as specified by type.</span></span></summary>
        <returns><span data-ttu-id="97ca7-368">一个数组，它包含由 <paramref name="attributeType" /> 指定的此程序集的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-368">An array that contains the custom attributes for this assembly as specified by <paramref name="attributeType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-369">此方法实现相应<xref:System.Reflection.ICustomAttributeProvider>接口方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-369">This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method.</span></span> <span data-ttu-id="97ca7-370">因此，`inherit`必须指定参数，即使它将被忽略。</span><span class="sxs-lookup"><span data-stu-id="97ca7-370">Therefore, the `inherit` parameter must be specified even though it is ignored.</span></span>  
  
 <span data-ttu-id="97ca7-371">伪特性指示位时存在该属性时，必须设置的核心元数据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-371">A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present.</span></span> <span data-ttu-id="97ca7-372">与不同的扩展类型的元数据，并与类型一起保存的自定义属性，伪属性修改类型的元数据，则将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="97ca7-372">Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded.</span></span> <span data-ttu-id="97ca7-373">不能使用现有的反射 Api 访问某些结果的位。</span><span class="sxs-lookup"><span data-stu-id="97ca7-373">Some of the resulting bits cannot be accessed using existing reflection APIs.</span></span>  
  
 <span data-ttu-id="97ca7-374">下表总结了不同的伪属性和可用于反射的位的访问器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-374">The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.</span></span>  
  
|<span data-ttu-id="97ca7-375">Pseudo-Attribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-375">Pseudo-Attribute</span></span>|<span data-ttu-id="97ca7-376">元数据位</span><span class="sxs-lookup"><span data-stu-id="97ca7-376">Metadata Bits</span></span>|<span data-ttu-id="97ca7-377">反射访问器</span><span class="sxs-lookup"><span data-stu-id="97ca7-377">Reflection Accessor</span></span>|  
|-----------------------|-------------------|-------------------------|  
|<span data-ttu-id="97ca7-378">Sub</span><span class="sxs-lookup"><span data-stu-id="97ca7-378">DllImportAttribute</span></span>|<span data-ttu-id="97ca7-379">CorPInvokeMap</span><span class="sxs-lookup"><span data-stu-id="97ca7-379">CorPInvokeMap</span></span><br /><br /> <span data-ttu-id="97ca7-380">DLL 名称</span><span class="sxs-lookup"><span data-stu-id="97ca7-380">DLL name</span></span>|<span data-ttu-id="97ca7-381">没有访问器 PInvokeMap 普通方法/全局方法属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-381">No accessor for PInvokeMap for ordinary method/global method attributes.</span></span><br /><br /> <span data-ttu-id="97ca7-382">DLL 名称没有访问器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-382">No accessor for DLL name.</span></span>|  
|<span data-ttu-id="97ca7-383">GuidAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-383">GuidAttribute</span></span>|<span data-ttu-id="97ca7-384">存储为实际的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-384">Stored as a real custom attribute.</span></span>|<span data-ttu-id="97ca7-385">作为实际的自定义属性进行访问。</span><span class="sxs-lookup"><span data-stu-id="97ca7-385">Accessed as a real custom attribute.</span></span>|  
|<span data-ttu-id="97ca7-386">ComImportAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-386">ComImportAttribute</span></span>|<span data-ttu-id="97ca7-387">CorTypeAttr.tdImport</span><span class="sxs-lookup"><span data-stu-id="97ca7-387">CorTypeAttr.tdImport</span></span>|<span data-ttu-id="97ca7-388">Type.Attributes.Import</span><span class="sxs-lookup"><span data-stu-id="97ca7-388">Type.Attributes.Import</span></span>|  
|<span data-ttu-id="97ca7-389">SerializableAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-389">SerializableAttribute</span></span>|<span data-ttu-id="97ca7-390">CorTypeAttr.tdSerializable</span><span class="sxs-lookup"><span data-stu-id="97ca7-390">CorTypeAttr.tdSerializable</span></span>|<span data-ttu-id="97ca7-391">Type.Attributes.Serializable</span><span class="sxs-lookup"><span data-stu-id="97ca7-391">Type.Attributes.Serializable</span></span>|  
|<span data-ttu-id="97ca7-392">NonSerializedAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-392">NonSerializedAttribute</span></span>|<span data-ttu-id="97ca7-393">CorFieldAttr.fdNotSerialized</span><span class="sxs-lookup"><span data-stu-id="97ca7-393">CorFieldAttr.fdNotSerialized</span></span>|<span data-ttu-id="97ca7-394">FieldInfo.Attributes.NotSerialized</span><span class="sxs-lookup"><span data-stu-id="97ca7-394">FieldInfo.Attributes.NotSerialized</span></span>|  
|<span data-ttu-id="97ca7-395">MethodImplAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-395">MethodImplAttribute</span></span>|<span data-ttu-id="97ca7-396">CorMethodImpl</span><span class="sxs-lookup"><span data-stu-id="97ca7-396">CorMethodImpl</span></span>|<span data-ttu-id="97ca7-397">MethodInfo.GetMethodImplementationFlags()</span><span class="sxs-lookup"><span data-stu-id="97ca7-397">MethodInfo.GetMethodImplementationFlags()</span></span><br /><br /> <span data-ttu-id="97ca7-398">ConstructorInfo.GetMethodImplementationFlags()</span><span class="sxs-lookup"><span data-stu-id="97ca7-398">ConstructorInfo.GetMethodImplementationFlags()</span></span>|  
|<span data-ttu-id="97ca7-399">MarshalAsAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-399">MarshalAsAttribute</span></span>|<span data-ttu-id="97ca7-400">各种位。</span><span class="sxs-lookup"><span data-stu-id="97ca7-400">Various bits.</span></span>|<span data-ttu-id="97ca7-401">没有访问器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-401">No accessor.</span></span>|  
|<span data-ttu-id="97ca7-402">PreserveSigAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-402">PreserveSigAttribute</span></span>|<span data-ttu-id="97ca7-403">CorMethodImpl.miOLE</span><span class="sxs-lookup"><span data-stu-id="97ca7-403">CorMethodImpl.miOLE</span></span>|<span data-ttu-id="97ca7-404">MethodInfo.GetMethodImplementationFlags().OLE</span><span class="sxs-lookup"><span data-stu-id="97ca7-404">MethodInfo.GetMethodImplementationFlags().OLE</span></span><br /><br /> <span data-ttu-id="97ca7-405">ConstructorInfo.GetMethodImplementationFlags()。OLE</span><span class="sxs-lookup"><span data-stu-id="97ca7-405">ConstructorInfo.GetMethodImplementationFlags().OLE</span></span>|  
|<span data-ttu-id="97ca7-406">InAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-406">InAttribute</span></span>|<span data-ttu-id="97ca7-407">CorParamAttr.pdIn</span><span class="sxs-lookup"><span data-stu-id="97ca7-407">CorParamAttr.pdIn</span></span>|<span data-ttu-id="97ca7-408">ParameterInfo.Attributes.In</span><span class="sxs-lookup"><span data-stu-id="97ca7-408">ParameterInfo.Attributes.In</span></span>|  
|<span data-ttu-id="97ca7-409">OutAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-409">OutAttribute</span></span>|<span data-ttu-id="97ca7-410">CorParamAttr.pdOut</span><span class="sxs-lookup"><span data-stu-id="97ca7-410">CorParamAttr.pdOut</span></span>|<span data-ttu-id="97ca7-411">ParameterInfo.Attributes.Out</span><span class="sxs-lookup"><span data-stu-id="97ca7-411">ParameterInfo.Attributes.Out</span></span>|  
|<span data-ttu-id="97ca7-412">StructLayoutAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-412">StructLayoutAttribute</span></span>|<span data-ttu-id="97ca7-413">CorTypeAttr.tdLayoutSequential</span><span class="sxs-lookup"><span data-stu-id="97ca7-413">CorTypeAttr.tdLayoutSequential</span></span><br /><br /> <span data-ttu-id="97ca7-414">CorTypeAttr.tdExplicitLayout</span><span class="sxs-lookup"><span data-stu-id="97ca7-414">CorTypeAttr.tdExplicitLayout</span></span><br /><br /> <span data-ttu-id="97ca7-415">CorTypeAttr.tdAnsiClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-415">CorTypeAttr.tdAnsiClass</span></span><br /><br /> <span data-ttu-id="97ca7-416">CorTypeAttr.tdUnicodeClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-416">CorTypeAttr.tdUnicodeClass</span></span><br /><br /> <span data-ttu-id="97ca7-417">CorTypeAttr.tdAutoClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-417">CorTypeAttr.tdAutoClass</span></span><br /><br /> <span data-ttu-id="97ca7-418">类封装。</span><span class="sxs-lookup"><span data-stu-id="97ca7-418">Class packing.</span></span>|<span data-ttu-id="97ca7-419">Type.Attributes.LayoutSequential</span><span class="sxs-lookup"><span data-stu-id="97ca7-419">Type.Attributes.LayoutSequential</span></span><br /><br /> <span data-ttu-id="97ca7-420">Type.Attributes.ExplicitLayout</span><span class="sxs-lookup"><span data-stu-id="97ca7-420">Type.Attributes.ExplicitLayout</span></span><br /><br /> <span data-ttu-id="97ca7-421">Type.Attributes.AnsiClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-421">Type.Attributes.AnsiClass</span></span><br /><br /> <span data-ttu-id="97ca7-422">Type.Attributes.UnicodeClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-422">Type.Attributes.UnicodeClass</span></span><br /><br /> <span data-ttu-id="97ca7-423">Type.Attributes.AutoClass</span><span class="sxs-lookup"><span data-stu-id="97ca7-423">Type.Attributes.AutoClass</span></span><br /><br /> <span data-ttu-id="97ca7-424">没有访问器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-424">No accessor.</span></span>|  
|<span data-ttu-id="97ca7-425">FieldOffsetAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-425">FieldOffsetAttribute</span></span>|<span data-ttu-id="97ca7-426">字段偏移量。</span><span class="sxs-lookup"><span data-stu-id="97ca7-426">Field offset.</span></span>|<span data-ttu-id="97ca7-427">没有访问器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-427">No accessor.</span></span>|  
|<span data-ttu-id="97ca7-428">AssemblyLoadAttribute</span><span class="sxs-lookup"><span data-stu-id="97ca7-428">AssemblyLoadAttribute</span></span>|<span data-ttu-id="97ca7-429">CorAssemblyFlags</span><span class="sxs-lookup"><span data-stu-id="97ca7-429">CorAssemblyFlags</span></span>|<span data-ttu-id="97ca7-430">没有访问器或枚举器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-430">No accessor or enumerator.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-431"><paramref name="attributeType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-431"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-432"><paramref name="attributeType" /> 不是运行时类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-432"><paramref name="attributeType" /> is not a runtime type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="97ca7-433">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-433">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="97ca7-434">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-434">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributesData">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributesData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetCustomAttributesData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributesData () As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributesData();" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributesData : unit -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;&#xA;override this.GetCustomAttributesData : unit -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;" Usage="assembly.GetCustomAttributesData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-435">返回有关已应用于当前 <see cref="T:System.Reflection.Assembly" />（表示为 <see cref="T:System.Reflection.CustomAttributeData" /> 对象）的特性的信息。</span><span class="sxs-lookup"><span data-stu-id="97ca7-435">Returns information about the attributes that have been applied to the current <see cref="T:System.Reflection.Assembly" />, expressed as <see cref="T:System.Reflection.CustomAttributeData" /> objects.</span></span></summary>
        <returns><span data-ttu-id="97ca7-436"><see cref="T:System.Reflection.CustomAttributeData" /> 对象的泛型列表，这些对象表示有关已应用于当前程序集的特性的数据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-436">A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-437">此方法用于检查代码中的仅限反射的上下文，在其中加载到仅反射上下文的代码中定义的自定义特性本身的情况下的自定义特性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-437">Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</span></span> <span data-ttu-id="97ca7-438">等方法<xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>和<xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType>能在这种情况下，因为它们创建特性的实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-438">Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> cannot be used in such cases, because they create instances of the attributes.</span></span> <span data-ttu-id="97ca7-439">不能执行仅限反射上下文中的代码。</span><span class="sxs-lookup"><span data-stu-id="97ca7-439">Code in the reflection-only context cannot be executed.</span></span> <span data-ttu-id="97ca7-440">有关详细信息和有关示例代码，请参阅<xref:System.Reflection.CustomAttributeData>类。</span><span class="sxs-lookup"><span data-stu-id="97ca7-440">For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntryAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GetEntryAssembly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GetEntryAssembly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetEntryAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEntryAssembly () As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GetEntryAssembly();" />
      <MemberSignature Language="F#" Value="static member GetEntryAssembly : unit -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.GetEntryAssembly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-441">获取默认应用程序域中的进程可执行文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-441">Gets the process executable in the default application domain.</span></span> <span data-ttu-id="97ca7-442">在其他的应用程序域中，这是由 <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" /> 执行的第一个可执行文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-442">In other application domains, this is the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="97ca7-443">程序集是默认应用程序域中的进程可执行文件，或是由 <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" /> 执行的第一个可执行文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-443">The assembly that is the process executable in the default application domain, or the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />.</span></span> <span data-ttu-id="97ca7-444">当从非托管代码调用时可返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-444">Can return <see langword="null" /> when called from unmanaged code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-445"><xref:System.Reflection.Assembly.GetEntryAssembly%2A>方法可返回`null`托管程序集已从非托管应用程序加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-445">The <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method can return `null` when a managed assembly has been loaded from an unmanaged application.</span></span> <span data-ttu-id="97ca7-446">例如，如果非托管应用程序创建在 C# 中，调用编写的 COM 组件的实例<xref:System.Reflection.Assembly.GetEntryAssembly%2A>从 C# 组件的方法将返回 null，因为非托管的代码而不是托管程序集的进程的入口点。</span><span class="sxs-lookup"><span data-stu-id="97ca7-446">For example, if an unmanaged application creates an instance of a COM component written in C#, a call to the <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method from the C# component returns null, because the entry point for the process was unmanaged code rather than a managed assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExecutingAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GetExecutingAssembly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GetExecutingAssembly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetExecutingAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExecutingAssembly () As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GetExecutingAssembly();" />
      <MemberSignature Language="F#" Value="static member GetExecutingAssembly : unit -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.GetExecutingAssembly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-447">获取包含当前执行的代码的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-447">Gets the assembly that contains the code that is currently executing.</span></span></summary>
        <returns><span data-ttu-id="97ca7-448">包含当前执行的代码的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-448">The assembly that contains the code that is currently executing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-449">出于性能原因，应仅当您不知道在设计时程序集当前正在执行时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-449">For performance reasons, you should call this method only when you do not know at design time what assembly is currently executing.</span></span> <span data-ttu-id="97ca7-450">建议的方法来检索<xref:System.Reflection.Assembly>对象，表示当前程序集是使用<xref:System.Type.Assembly%2A?displayProperty=nameWithType>属性类型的程序集中找到，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="97ca7-450">The recommended way to retrieve an <xref:System.Reflection.Assembly> object that represents the current assembly is to use the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property of a type found in the assembly, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cs/assembly1.cs#1)]
 [!code-vb[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/vb/assembly1.vb#1)]  
  
 <span data-ttu-id="97ca7-451">若要获取包含调用当前正在执行代码的方法的程序集，请使用<xref:System.Reflection.Assembly.GetCallingAssembly%2A>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-451">To get the assembly that contains the method that called the currently executing code, use <xref:System.Reflection.Assembly.GetCallingAssembly%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-452">下面的示例使用<xref:System.Type.Assembly%2A?displayProperty=nameWithType>属性以获取当前正在执行的程序集基于包含在该程序集中的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-452">The following example uses the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property to get the currently executing assembly based on a type contained in that assembly.</span></span> <span data-ttu-id="97ca7-453">它还调用<xref:System.Reflection.Assembly.GetExecutingAssembly%2A>方法来显示它返回<xref:System.Reflection.Assembly>表示同一个程序集的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-453">It also calls the <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> method to show that it returns an <xref:System.Reflection.Assembly> object that represents the same assembly.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cpp/getexecutingassembly1.cpp#5)]
 [!code-csharp[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cs/getexecutingassembly1.cs#5)]
 [!code-vb[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/vb/getexecutingassembly1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportedTypes">
      <MemberSignature Language="C#" Value="public virtual Type[] GetExportedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetExportedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetExportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExportedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetExportedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetExportedTypes : unit -&gt; Type[]&#xA;override this.GetExportedTypes : unit -&gt; Type[]" Usage="assembly.GetExportedTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetExportedTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-454">获取此程序集中定义的公共类型，这些公共类型在程序集外可见。</span><span class="sxs-lookup"><span data-stu-id="97ca7-454">Gets the public types defined in this assembly that are visible outside the assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-455">一个数组，表示此程序集中定义并在程序集外可见的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-455">An array that represents the types defined in this assembly that are visible outside the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-456">程序集外部可见的唯一类型是公共类型和嵌套在其他公共类型的公共类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-456">The only types visible outside an assembly are public types and public types nested within other public types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-457">下面的代码示例定义了多个类提供各种访问级别和调用<xref:System.Reflection.Assembly.GetExportedTypes%2A>以显示从程序集外部可见的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-457">The following code sample defines a number of classes with various access levels, and calls <xref:System.Reflection.Assembly.GetExportedTypes%2A> to display the ones that are visible from outside the assembly.</span></span>  
  
 [!code-cpp[Assembly.GetExportedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.GetExportedTypes/CPP/source.cpp#1)]
 [!code-csharp[Assembly.GetExportedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.GetExportedTypes/CS/source.cs#1)]
 [!code-vb[Assembly.GetExportedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.GetExportedTypes/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="97ca7-458">程序集是动态程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-458">The assembly is a dynamic assembly.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-459">无法加载从属程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-459">Unable to load a dependent assembly.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public virtual System.IO.FileStream GetFile (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.FileStream GetFile(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFile (name As String) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::FileStream ^ GetFile(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetFile : string -&gt; System.IO.FileStream&#xA;override this.GetFile : string -&gt; System.IO.FileStream" Usage="assembly.GetFile name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetFile(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="97ca7-460">指定文件的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-460">The name of the specified file.</span></span> <span data-ttu-id="97ca7-461">不包括文件的路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-461">Do not include the path to the file.</span></span></param>
        <summary><span data-ttu-id="97ca7-462">获取此程序集清单的文件表中指定文件的 <see cref="T:System.IO.FileStream" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-462">Gets a <see cref="T:System.IO.FileStream" /> for the specified file in the file table of the manifest of this assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-463">包含指定文件的流，如果找不到文件则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-463">A stream that contains the specified file, or <see langword="null" /> if the file is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-464">此方法适用于这两个公共和私有资源文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-464">This method works on both public and private resource files.</span></span>  
  
 <span data-ttu-id="97ca7-465">`name`不应包含文件的路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-465">The `name` should not include the path to the file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-466">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-466">A file that was found could not be loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-467"><paramref name="name" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-467">The <paramref name="name" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-468"><paramref name="name" /> 参数为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-468">The <paramref name="name" /> parameter is an empty string ("").</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-469">未找到 <paramref name="name" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-469"><paramref name="name" /> was not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-470"><paramref name="name" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-470"><paramref name="name" /> is not a valid assembly.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-471">访问路径，用于读取指定的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-471">for access to the path and for reading the specified file.</span></span> <span data-ttu-id="97ca7-472">关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-472">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-473">获取程序集清单文件表中的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-473">Gets the files in the file table of an assembly manifest.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public virtual System.IO.FileStream[] GetFiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.FileStream[] GetFiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetFiles" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFiles () As FileStream()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::IO::FileStream ^&gt; ^ GetFiles();" />
      <MemberSignature Language="F#" Value="abstract member GetFiles : unit -&gt; System.IO.FileStream[]&#xA;override this.GetFiles : unit -&gt; System.IO.FileStream[]" Usage="assembly.GetFiles " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetFiles</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-474">获取程序集清单文件表中的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-474">Gets the files in the file table of an assembly manifest.</span></span></summary>
        <returns><span data-ttu-id="97ca7-475">包含这些文件的流数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-475">An array of streams that contain the files.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-476">此方法适用于公共和专用的资源文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-476">This method works on public and private resource files.</span></span>  
  
 <span data-ttu-id="97ca7-477">此重载是等效于调用<xref:System.Reflection.Assembly.GetFiles%28System.Boolean%29>重载并指定`false`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-477">This overload is equivalent to calling the <xref:System.Reflection.Assembly.GetFiles%28System.Boolean%29> overload and specifying `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-478">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-478">A file that was found could not be loaded.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-479">未找到文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-479">A file was not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-480">文件不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-480">A file was not a valid assembly.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public virtual System.IO.FileStream[] GetFiles (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.FileStream[] GetFiles(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetFiles(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFiles (getResourceModules As Boolean) As FileStream()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::IO::FileStream ^&gt; ^ GetFiles(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="abstract member GetFiles : bool -&gt; System.IO.FileStream[]&#xA;override this.GetFiles : bool -&gt; System.IO.FileStream[]" Usage="assembly.GetFiles getResourceModules" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetFiles(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="getResourceModules"><span data-ttu-id="97ca7-481"><see langword="true" /> 则包括资源模块；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-481"><see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97ca7-482">获取程序集清单的文件表中的文件，指定是否包括资源模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-482">Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</span></span></summary>
        <returns><span data-ttu-id="97ca7-483">包含这些文件的流数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-483">An array of streams that contain the files.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-484">此方法适用于公共和专用的资源文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-484">This method works on public and private resource files.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-485">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-485">A file that was found could not be loaded.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-486">未找到文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-486">A file was not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-487">文件不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-487">A file was not a valid assembly.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetForwardedTypes">
      <MemberSignature Language="C#" Value="public virtual Type[] GetForwardedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetForwardedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetForwardedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetForwardedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetForwardedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetForwardedTypes : unit -&gt; Type[]&#xA;override this.GetForwardedTypes : unit -&gt; Type[]" Usage="assembly.GetForwardedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="assembly.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-488">返回此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="97ca7-488">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="97ca7-489">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="97ca7-489">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetLoadedModules">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-490">获取作为此程序集的一部分的所有加载模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-490">Gets all the loaded modules that are part of this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetLoadedModules">
      <MemberSignature Language="C#" Value="public System.Reflection.Module[] GetLoadedModules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module[] GetLoadedModules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetLoadedModules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLoadedModules () As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::Module ^&gt; ^ GetLoadedModules();" />
      <MemberSignature Language="F#" Value="abstract member GetLoadedModules : unit -&gt; System.Reflection.Module[]&#xA;override this.GetLoadedModules : unit -&gt; System.Reflection.Module[]" Usage="assembly.GetLoadedModules " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetLoadedModules</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-491">获取作为此程序集的一部分的所有加载模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-491">Gets all the loaded modules that are part of this assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-492">模块的数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-492">An array of modules.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedModules">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module[] GetLoadedModules (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module[] GetLoadedModules(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLoadedModules (getResourceModules As Boolean) As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::Module ^&gt; ^ GetLoadedModules(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="abstract member GetLoadedModules : bool -&gt; System.Reflection.Module[]&#xA;override this.GetLoadedModules : bool -&gt; System.Reflection.Module[]" Usage="assembly.GetLoadedModules getResourceModules" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetLoadedModules(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="getResourceModules"><span data-ttu-id="97ca7-493"><see langword="true" /> 则包括资源模块；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-493"><see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97ca7-494">获取属于此程序集的所有已加载模块，同时指定是否包括资源模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-494">Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.</span></span></summary>
        <returns><span data-ttu-id="97ca7-495">模块的数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-495">An array of modules.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceInfo">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManifestResourceInfo (resourceName As String) As ManifestResourceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ManifestResourceInfo ^ GetManifestResourceInfo(System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="abstract member GetManifestResourceInfo : string -&gt; System.Reflection.ManifestResourceInfo&#xA;override this.GetManifestResourceInfo : string -&gt; System.Reflection.ManifestResourceInfo" Usage="assembly.GetManifestResourceInfo resourceName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetManifestResourceInfo(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ManifestResourceInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceName"><span data-ttu-id="97ca7-496">区分大小写的资源名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-496">The case-sensitive name of the resource.</span></span></param>
        <summary><span data-ttu-id="97ca7-497">返回关于给定资源如何保持的信息。</span><span class="sxs-lookup"><span data-stu-id="97ca7-497">Returns information about how the given resource has been persisted.</span></span></summary>
        <returns><span data-ttu-id="97ca7-498">用关于资源拓扑的信息填充的对象；如果未找到资源，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-498">An object that is populated with information about the resource's topology, or <see langword="null" /> if the resource is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-499">仅当资源对调用方，可见或调用方必须返回资源信息<xref:System.Security.Permissions.ReflectionPermission>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-499">Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-500"><paramref name="resourceName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-500"><paramref name="resourceName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-501"><paramref name="resourceName" /> 参数为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-501">The <paramref name="resourceName" /> parameter is an empty string ("").</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="97ca7-502">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-502">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="97ca7-503">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-503">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceNames" />
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetManifestResourceNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetManifestResourceNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetManifestResourceNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManifestResourceNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetManifestResourceNames();" />
      <MemberSignature Language="F#" Value="abstract member GetManifestResourceNames : unit -&gt; string[]&#xA;override this.GetManifestResourceNames : unit -&gt; string[]" Usage="assembly.GetManifestResourceNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetManifestResourceNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-504">返回此程序集中的所有资源的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-504">Returns the names of all the resources in this assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-505">包含所有资源名称的数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-505">An array that contains the names of all the resources.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-506">返回此方法，如下所示的数组中，可以使用每个资源名称：</span><span class="sxs-lookup"><span data-stu-id="97ca7-506">You can use each resource name in the array returned by this method as follows:</span></span>  
  
-   <span data-ttu-id="97ca7-507">可以将传递到的资源名称<xref:System.Reflection.Assembly.GetManifestResourceInfo%2A>方法以获取有关资源的其他信息。</span><span class="sxs-lookup"><span data-stu-id="97ca7-507">You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceInfo%2A> method to get additional information about the resource.</span></span>  
  
-   <span data-ttu-id="97ca7-508">如果名称标识的二进制.resources 文件，可以删除其.resources 文件扩展名，并将其传递给<xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29?displayProperty=nameWithType>构造函数实例化资源管理器。</span><span class="sxs-lookup"><span data-stu-id="97ca7-508">If the name identifies a binary .resources file, you can remove its .resources file extension and pass it to the <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29?displayProperty=nameWithType> constructor to instantiate the resource manager.</span></span>  
  
-   <span data-ttu-id="97ca7-509">可以将传递到的资源名称<xref:System.Reflection.Assembly.GetManifestResourceStream%2A>方法来检索<xref:System.IO.Stream>对象，然后，可以将其传递到<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29?displayProperty=nameWithType>构造函数。</span><span class="sxs-lookup"><span data-stu-id="97ca7-509">You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29?displayProperty=nameWithType> constructor.</span></span>  
  
-   <span data-ttu-id="97ca7-510">可以将传递到的资源名称<xref:System.Reflection.Assembly.GetManifestResourceStream%2A>方法来检索<xref:System.IO.Stream>对象，然后，可以将其传递到<xref:System.Resources.ResourceSet.%23ctor%28System.IO.Stream%29?displayProperty=nameWithType>构造函数。</span><span class="sxs-lookup"><span data-stu-id="97ca7-510">You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceSet.%23ctor%28System.IO.Stream%29?displayProperty=nameWithType> constructor.</span></span>  
  
 <span data-ttu-id="97ca7-511">仅当资源对调用方，可见或调用方必须返回资源信息<xref:System.Security.Permissions.ReflectionPermission>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-511">Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="97ca7-512">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-512">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="97ca7-513">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-513">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetManifestResourceStream">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-514">从此程序集加载指定的清单资源。</span><span class="sxs-lookup"><span data-stu-id="97ca7-514">Loads the specified manifest resource from this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetManifestResourceStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream GetManifestResourceStream (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetManifestResourceStream(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManifestResourceStream (name As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ GetManifestResourceStream(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetManifestResourceStream : string -&gt; System.IO.Stream&#xA;override this.GetManifestResourceStream : string -&gt; System.IO.Stream" Usage="assembly.GetManifestResourceStream name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="97ca7-515">所请求的清单资源的名称（区分大小写）。</span><span class="sxs-lookup"><span data-stu-id="97ca7-515">The case-sensitive name of the manifest resource being requested.</span></span></param>
        <summary><span data-ttu-id="97ca7-516">从此程序集加载指定的清单资源。</span><span class="sxs-lookup"><span data-stu-id="97ca7-516">Loads the specified manifest resource from this assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-517">如果在编译期间没有指定任何资源，或者资源对调用方不可见，则为清单资源或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-517">The manifest resource; or <see langword="null" /> if no resources were specified during compilation or if the resource is not visible to the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-518">清单资源是在编译时程序集中嵌入的资源 （例如图像文件）。</span><span class="sxs-lookup"><span data-stu-id="97ca7-518">A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time.</span></span> <span data-ttu-id="97ca7-519">有关清单资源的详细信息，请参阅[Microsoft.NET Framework 资源基础知识](https://go.microsoft.com/fwlink/?LinkId=204554)MSDN 库中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-519">For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](https://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.</span></span>  
  
 <span data-ttu-id="97ca7-520">仅当资源对调用方，可见或调用方必须返回资源信息<xref:System.Security.Permissions.ReflectionPermission>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-520">Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-521">此方法返回`null`如果访问另一个程序集中的专用资源，并且调用方不具有<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="97ca7-521">This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="97ca7-522">如果程序集清单列出了资源文件<xref:System.Reflection.Assembly.GetManifestResourceStream%2A>返回<xref:System.IO.Stream>对象即使资源文件不能在时找到磁盘上。</span><span class="sxs-lookup"><span data-stu-id="97ca7-522">If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time.</span></span> <span data-ttu-id="97ca7-523">如果找不到资源文件，并传递得到<xref:System.IO.Stream>对象传递给<xref:System.Resources.ResourceReader>构造函数导致<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-523">If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-524"><paramref name="name" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-524">The <paramref name="name" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-525"><paramref name="name" /> 参数为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-525">The <paramref name="name" /> parameter is an empty string ("").</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="97ca7-526">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-526">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="97ca7-527">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-527">A file that was found could not be loaded.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-528">未找到 <paramref name="name" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-528"><paramref name="name" /> was not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-529"><paramref name="name" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-529"><paramref name="name" /> is not a valid assembly.</span></span></exception>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="97ca7-530">资源的长度大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-530">Resource length is greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="97ca7-531">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-531">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="97ca7-532">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-532">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceNames" />
        <related type="Article" href="~/docs/framework/app-domains/assembly-manifest.md"><span data-ttu-id="97ca7-533">程序集清单</span><span class="sxs-lookup"><span data-stu-id="97ca7-533">Assembly Manifest</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream GetManifestResourceStream (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetManifestResourceStream(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ GetManifestResourceStream(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetManifestResourceStream : Type * string -&gt; System.IO.Stream&#xA;override this.GetManifestResourceStream : Type * string -&gt; System.IO.Stream" Usage="assembly.GetManifestResourceStream (type, name)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.Type,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="97ca7-534">其命名空间用于确定清单资源名的范围的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-534">The type whose namespace is used to scope the manifest resource name.</span></span></param>
        <param name="name"><span data-ttu-id="97ca7-535">所请求的清单资源的名称（区分大小写）。</span><span class="sxs-lookup"><span data-stu-id="97ca7-535">The case-sensitive name of the manifest resource being requested.</span></span></param>
        <summary><span data-ttu-id="97ca7-536">从此程序集加载指定清单资源，清单资源的范围由指定类型的命名空间确定。</span><span class="sxs-lookup"><span data-stu-id="97ca7-536">Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-537">如果在编译期间没有指定任何资源，或者资源对调用方不可见，则为清单资源或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-537">The manifest resource; or <see langword="null" /> if no resources were specified during compilation or if the resource is not visible to the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-538">例如，如果为指定的全名`type`是"MyNameSpace.MyClasses"和`name`是"Net"，此方法重载搜索名为"MyNameSpace.Net"的资源。</span><span class="sxs-lookup"><span data-stu-id="97ca7-538">For example, if the full name specified for `type` is "MyNameSpace.MyClasses" and `name` is "Net", this method overload searches for a resource named "MyNameSpace.Net".</span></span>  
  
 <span data-ttu-id="97ca7-539">清单资源是在编译时程序集中嵌入的资源 （例如图像文件）。</span><span class="sxs-lookup"><span data-stu-id="97ca7-539">A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time.</span></span> <span data-ttu-id="97ca7-540">有关清单资源的详细信息，请参阅[Microsoft.NET Framework 资源基础知识](https://go.microsoft.com/fwlink/?LinkId=204554)MSDN 库中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-540">For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](https://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.</span></span>  
  
 <span data-ttu-id="97ca7-541">仅当资源对调用方，可见或调用方必须返回资源信息<xref:System.Security.Permissions.ReflectionPermission>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-541">Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-542">此方法返回`null`如果访问另一个程序集中的专用资源，并且调用方不具有<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="97ca7-542">This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="97ca7-543">如果程序集清单列出了资源文件<xref:System.Reflection.Assembly.GetManifestResourceStream%2A>返回<xref:System.IO.Stream>对象即使资源文件不能在时找到磁盘上。</span><span class="sxs-lookup"><span data-stu-id="97ca7-543">If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time.</span></span> <span data-ttu-id="97ca7-544">如果找不到资源文件，并传递得到<xref:System.IO.Stream>对象传递给<xref:System.Resources.ResourceReader>构造函数导致<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-544">If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-545"><paramref name="name" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-545">The <paramref name="name" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-546"><paramref name="name" /> 参数为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-546">The <paramref name="name" /> parameter is an empty string ("").</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-547">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-547">A file that was found could not be loaded.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-548">未找到 <paramref name="name" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-548"><paramref name="name" /> was not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-549"><paramref name="name" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-549"><paramref name="name" /> is not a valid assembly.</span></span></exception>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="97ca7-550">资源的长度大于 <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-550">Resource length is greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="97ca7-551">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-551">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="97ca7-552">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-552">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceNames" />
        <related type="Article" href="~/docs/framework/app-domains/assembly-manifest.md"><span data-ttu-id="97ca7-553">程序集清单</span><span class="sxs-lookup"><span data-stu-id="97ca7-553">Assembly Manifest</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetModule">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module GetModule (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module GetModule(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetModule(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetModule (name As String) As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Module ^ GetModule(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetModule : string -&gt; System.Reflection.Module&#xA;override this.GetModule : string -&gt; System.Reflection.Module" Usage="assembly.GetModule name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetModule(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="97ca7-554">请求的模块的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-554">The name of the module being requested.</span></span></param>
        <summary><span data-ttu-id="97ca7-555">获取此程序集中的指定模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-555">Gets the specified module in this assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-556">所请求的模块，若未找到该模块则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-556">The module being requested, or <see langword="null" /> if the module is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-557">此方法适用于文件的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-557">This method works on file names.</span></span>  
  
 <span data-ttu-id="97ca7-558">中的类`Reflection.Emit`命名空间发出的动态模块的范围名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-558">Classes in the `Reflection.Emit` namespace emit the scope name for a dynamic module.</span></span> <span data-ttu-id="97ca7-559">可通过确定作用域名称<xref:System.Reflection.Module.ScopeName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-559">The scope name can be determined by the <xref:System.Reflection.Module.ScopeName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="97ca7-560">传递到所需的模块类型`Assembly.GetModule`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-560">Pass the kind of module you want to `Assembly.GetModule`.</span></span> <span data-ttu-id="97ca7-561">例如，如果你想包含程序集清单的模块，将传递到模块的范围名称`GetModule`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-561">For example, if you want the module that contains the assembly manifest, pass the scope name of the module to `GetModule`.</span></span> <span data-ttu-id="97ca7-562">否则，将传递该模块的文件名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-562">Otherwise, pass the file name of the module.</span></span> <span data-ttu-id="97ca7-563">程序集加载由一个`Load`具有一个 byte [] 参数的方法具有只有一个模块，且清单模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-563">Assemblies loaded by one of the `Load` methods that have a byte[] parameter have only one module, and that is the manifest module.</span></span> <span data-ttu-id="97ca7-564">始终查找这些模块使用作用域的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-564">Always seek these modules using the scope name.</span></span>  
  
 <span data-ttu-id="97ca7-565">一个类型可以检索从特定的模块使用<xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-565">A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="97ca7-566">调用`Module.GetType`模块包含清单不会启动整个程序集的搜索。</span><span class="sxs-lookup"><span data-stu-id="97ca7-566">Calling `Module.GetType` on the module containing the manifest will not initiate a search of the entire assembly.</span></span> <span data-ttu-id="97ca7-567">若要从程序集，它是在中，而不考虑哪个模块检索类型必须调用<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-567">To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-568"><paramref name="name" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-568">The <paramref name="name" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-569"><paramref name="name" /> 参数为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-569">The <paramref name="name" /> parameter is an empty string ("").</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-570">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-570">A file that was found could not be loaded.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-571">未找到 <paramref name="name" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-571"><paramref name="name" /> was not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-572"><paramref name="name" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-572"><paramref name="name" /> is not a valid assembly.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetModules">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-573">获取作为此程序集的一部分的所有模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-573">Gets all the modules that are part of this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetModules">
      <MemberSignature Language="C#" Value="public System.Reflection.Module[] GetModules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module[] GetModules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetModules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModules () As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::Module ^&gt; ^ GetModules();" />
      <MemberSignature Language="F#" Value="abstract member GetModules : unit -&gt; System.Reflection.Module[]&#xA;override this.GetModules : unit -&gt; System.Reflection.Module[]" Usage="assembly.GetModules " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetModules</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-574">获取作为此程序集的一部分的所有模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-574">Gets all the modules that are part of this assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-575">模块的数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-575">An array of modules.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-576">此方法适用于公共和专用的资源文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-576">This method works on public and private resource files.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-577">模块必须发出具有文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-577">Modules must be emitted with file name extensions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-578">下面的示例显示返回的数组，其中包含程序集清单中的模块的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-578">The following example displays the name of the module in the returned array that contains the assembly manifest.</span></span>  
  
 [!code-cpp[Classic Assembly.GetModules Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Assembly.GetModules Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/CS/source.cs#1)]
 [!code-vb[Classic Assembly.GetModules Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-579">要加载的模块未指定文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-579">The module to be loaded does not specify a file name extension.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetModules">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module[] GetModules (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module[] GetModules(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetModules(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetModules (getResourceModules As Boolean) As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::Module ^&gt; ^ GetModules(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="abstract member GetModules : bool -&gt; System.Reflection.Module[]&#xA;override this.GetModules : bool -&gt; System.Reflection.Module[]" Usage="assembly.GetModules getResourceModules" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetModules(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="getResourceModules"><span data-ttu-id="97ca7-580"><see langword="true" /> 则包括资源模块；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-580"><see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97ca7-581">获取属于此程序集的所有模块，同时指定是否包括资源模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-581">Gets all the modules that are part of this assembly, specifying whether to include resource modules.</span></span></summary>
        <returns><span data-ttu-id="97ca7-582">模块的数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-582">An array of modules.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-583">此方法适用于公共和专用的资源文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-583">This method works on public and private resource files.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-584">模块必须发出具有文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-584">Modules must be emitted with file name extensions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetName">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-585">获取此程序集的 <see cref="T:System.Reflection.AssemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-585">Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.AssemblyName GetName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.AssemblyName GetName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetName () As AssemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::AssemblyName ^ GetName();" />
      <MemberSignature Language="F#" Value="abstract member GetName : unit -&gt; System.Reflection.AssemblyName&#xA;override this.GetName : unit -&gt; System.Reflection.AssemblyName" Usage="assembly.GetName " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-586">获取此程序集的 <see cref="T:System.Reflection.AssemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-586">Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-587">包含此程序集的完全分析的显示名称的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-587">An object that contains the fully parsed display name for this assembly.</span></span></returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-588">用于访问程序集的路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-588">for access to the path of the assembly.</span></span> <span data-ttu-id="97ca7-589">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-589">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.AssemblyName GetName (bool copiedName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.AssemblyName GetName(bool copiedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetName(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetName (copiedName As Boolean) As AssemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::AssemblyName ^ GetName(bool copiedName);" />
      <MemberSignature Language="F#" Value="abstract member GetName : bool -&gt; System.Reflection.AssemblyName&#xA;override this.GetName : bool -&gt; System.Reflection.AssemblyName" Usage="assembly.GetName copiedName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetName(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copiedName" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="copiedName"><span data-ttu-id="97ca7-590">如果为 <see langword="true" />，则将 <see cref="P:System.Reflection.Assembly.CodeBase" /> 设置为程序集被影像复制后的位置；如果为 <see langword="false" />，则将 <see cref="P:System.Reflection.Assembly.CodeBase" /> 设置为原位置。</span><span class="sxs-lookup"><span data-stu-id="97ca7-590"><see langword="true" /> to set the <see cref="P:System.Reflection.Assembly.CodeBase" /> to the location of the assembly after it was shadow copied; <see langword="false" /> to set <see cref="P:System.Reflection.Assembly.CodeBase" /> to the original location.</span></span></param>
        <summary><span data-ttu-id="97ca7-591">获取此程序集的 <see cref="T:System.Reflection.AssemblyName" />，并按 <paramref name="copiedName" /> 指定的那样设置基本代码。</span><span class="sxs-lookup"><span data-stu-id="97ca7-591">Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly, setting the codebase as specified by <paramref name="copiedName" />.</span></span></summary>
        <returns><span data-ttu-id="97ca7-592">包含此程序集的完全分析的显示名称的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-592">An object that contains the fully parsed display name for this assembly.</span></span></returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-593">用于访问程序集的路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-593">for access to the path of the assembly.</span></span> <span data-ttu-id="97ca7-594">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-594">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="assembly.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="97ca7-595">用序列化信息填充的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-595">The object to be populated with serialization information.</span></span></param>
        <param name="context"><span data-ttu-id="97ca7-596">序列化的目标上下文。</span><span class="sxs-lookup"><span data-stu-id="97ca7-596">The destination context of the serialization.</span></span></param>
        <summary><span data-ttu-id="97ca7-597">获取序列化信息，其中包含重新实例化此程序集所需的所有数据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-597">Gets serialization information with all of the data needed to reinstantiate this assembly.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-598"><paramref name="info" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-598"><paramref name="info" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="97ca7-599">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="97ca7-599">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="97ca7-600">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="97ca7-600">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedAssemblies">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.AssemblyName[] GetReferencedAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.AssemblyName[] GetReferencedAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReferencedAssemblies () As AssemblyName()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::AssemblyName ^&gt; ^ GetReferencedAssemblies();" />
      <MemberSignature Language="F#" Value="abstract member GetReferencedAssemblies : unit -&gt; System.Reflection.AssemblyName[]&#xA;override this.GetReferencedAssemblies : unit -&gt; System.Reflection.AssemblyName[]" Usage="assembly.GetReferencedAssemblies " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetReferencedAssemblies</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-601">获取此程序集引用的所有程序集的 <see cref="T:System.Reflection.AssemblyName" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-601">Gets the <see cref="T:System.Reflection.AssemblyName" /> objects for all the assemblies referenced by this assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-602">包含此程序集引用的所有程序集的完全分析的显示名称的数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-602">An array that contains the fully parsed display names of all the assemblies referenced by this assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="97ca7-603">从开始[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，则<xref:System.Reflection.AssemblyName.HashAlgorithm%2A>的属性<xref:System.Reflection.AssemblyName>此方法返回的对象是<xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType>如果引用的程序集，任何哈希算法或不是引用的程序集的哈希算法由标识<xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType>枚举。</span><span class="sxs-lookup"><span data-stu-id="97ca7-603">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property of an <xref:System.Reflection.AssemblyName> object that is returned by this method is <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="97ca7-604">在以前版本的.NET Framework<xref:System.Reflection.AssemblyName.HashAlgorithm%2A>属性返回<xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType>在此情况下。</span><span class="sxs-lookup"><span data-stu-id="97ca7-604">In previous versions of the .NET Framework, the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property returned <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType> in this situation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-605">下面的代码示例演示如何调用<xref:System.Reflection.Assembly.GetReferencedAssemblies%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-605">The following code example demonstrates calling the <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A> method.</span></span> <span data-ttu-id="97ca7-606">此代码示例是为提供一个更大示例的一部分<xref:System.Reflection.Assembly>类。</span><span class="sxs-lookup"><span data-stu-id="97ca7-606">This code example is part of a larger example provided for the <xref:System.Reflection.Assembly> class.</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSatelliteAssembly">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-607">获取附属程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-607">Gets the satellite assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSatelliteAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSatelliteAssembly (culture As CultureInfo) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ GetSatelliteAssembly(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetSatelliteAssembly : System.Globalization.CultureInfo -&gt; System.Reflection.Assembly&#xA;override this.GetSatelliteAssembly : System.Globalization.CultureInfo -&gt; System.Reflection.Assembly" Usage="assembly.GetSatelliteAssembly culture" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="97ca7-608">指定的区域性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-608">The specified culture.</span></span></param>
        <summary><span data-ttu-id="97ca7-609">获取指定区域性的附属程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-609">Gets the satellite assembly for the specified culture.</span></span></summary>
        <returns><span data-ttu-id="97ca7-610">指定的附属程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-610">The specified satellite assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-611">附属程序集包含本地化的资源，不同于主应用程序程序集，其中包含不可本地化的可执行代码和单个区域性作为默认值或非特定区域性的资源。</span><span class="sxs-lookup"><span data-stu-id="97ca7-611">Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.</span></span>  
  
 <span data-ttu-id="97ca7-612">调用此方法以使用当前的程序集版本。</span><span class="sxs-lookup"><span data-stu-id="97ca7-612">Call this method to use your current assembly version.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-613"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-613"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-614">找不到该程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-614">The assembly cannot be found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-615">找到了具有匹配文件名的附属程序集，但 <see langword="CultureInfo" /> 与所指定的不匹配。</span><span class="sxs-lookup"><span data-stu-id="97ca7-615">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> did not match the one specified.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-616">附属程序集不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-616">The satellite assembly is not a valid assembly.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSatelliteAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture, Version version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture, class System.Version version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ GetSatelliteAssembly(System::Globalization::CultureInfo ^ culture, Version ^ version);" />
      <MemberSignature Language="F#" Value="abstract member GetSatelliteAssembly : System.Globalization.CultureInfo * Version -&gt; System.Reflection.Assembly&#xA;override this.GetSatelliteAssembly : System.Globalization.CultureInfo * Version -&gt; System.Reflection.Assembly" Usage="assembly.GetSatelliteAssembly (culture, version)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="version" Type="System.Version" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="97ca7-617">指定的区域性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-617">The specified culture.</span></span></param>
        <param name="version"><span data-ttu-id="97ca7-618">附属程序集的版本。</span><span class="sxs-lookup"><span data-stu-id="97ca7-618">The version of the satellite assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-619">获取指定区域性的附属程序集的指定版本。</span><span class="sxs-lookup"><span data-stu-id="97ca7-619">Gets the specified version of the satellite assembly for the specified culture.</span></span></summary>
        <returns><span data-ttu-id="97ca7-620">指定的附属程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-620">The specified satellite assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-621">附属程序集包含本地化的资源，不同于主应用程序程序集，其中包含不可本地化的可执行代码和单个区域性作为默认值或非特定区域性的资源。</span><span class="sxs-lookup"><span data-stu-id="97ca7-621">Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.</span></span>  
  
 <span data-ttu-id="97ca7-622">调用<xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29>重载来使用你当前的程序集版本。</span><span class="sxs-lookup"><span data-stu-id="97ca7-622">Call the <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> overload to use your current assembly version.</span></span>  
  
 <span data-ttu-id="97ca7-623">如果`version`是`null`，如果资源和主程序集进行签名，则使用当前的程序集版本。</span><span class="sxs-lookup"><span data-stu-id="97ca7-623">If `version` is `null`, the current assembly version is used if both the resource and main assemblies are signed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-624"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-624"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-625">找到了具有匹配的文件名的附属程序集，但 <see langword="CultureInfo" /> 或版本与所指定的不匹配。</span><span class="sxs-lookup"><span data-stu-id="97ca7-625">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> or the version did not match the one specified.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-626">找不到该程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-626">The assembly cannot be found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-627">附属程序集不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-627">The satellite assembly is not a valid assembly.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-628">获取表示指定类型的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-628">Gets the <see cref="T:System.Type" /> object that represents the specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="assembly.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public virtual Type GetType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetType : string -&gt; Type" Usage="assembly.GetType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="97ca7-629">类型的全名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-629">The full name of the type.</span></span></param>
        <summary><span data-ttu-id="97ca7-630">获取程序集实例中具有指定名称的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-630">Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance.</span></span></summary>
        <returns><span data-ttu-id="97ca7-631">表示指定类的对象，若未找到该类则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-631">An object that represents the specified class, or <see langword="null" /> if the class is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-632">此方法仅搜索当前程序集实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-632">This method only searches the current assembly instance.</span></span> <span data-ttu-id="97ca7-633">`name`参数包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-633">The `name` parameter includes the namespace but not the assembly.</span></span> <span data-ttu-id="97ca7-634">若要搜索的一种类型的其他程序集，请使用<xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType>方法重载，它可以选择性地包含程序集显示名称作为类型名称的一部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-634">To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType> method overload, which can optionally include an assembly display name as part of the type name.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-635">如果该类型已转发到另一个程序集，它仍通过此方法返回。</span><span class="sxs-lookup"><span data-stu-id="97ca7-635">If the type has been forwarded to another assembly, it is still returned by this method.</span></span> <span data-ttu-id="97ca7-636">类型转发的信息，请参阅[公共语言运行时中的类型转发](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-636">For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-637">下面的示例定义一个抽象`MeansOfTransportation`类中`Transportation`命名空间。</span><span class="sxs-lookup"><span data-stu-id="97ca7-637">The following example defines an abstract `MeansOfTransportation` class in the `Transportation` namespace.</span></span> <span data-ttu-id="97ca7-638">它将调用<xref:System.Reflection.Assembly.GetType%28System.String%29>方法来检索其<xref:System.Type>对象，调用<xref:System.Type.GetProperties%2A?displayProperty=nameWithType>方法以获取数组的<xref:System.Reflection.PropertyInfo>代表的对象类型的属性，并随后在类型上显示信息的抽象属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-638">It calls the <xref:System.Reflection.Assembly.GetType%28System.String%29> method to retrieve its <xref:System.Type> object, calls the <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.PropertyInfo> objects that represent the type's properties, and then displays information on the type's abstract properties.</span></span> <span data-ttu-id="97ca7-639">请注意，在调用<xref:System.Reflection.Assembly.GetType%28System.String%29>方法使用该类型的完全限定的名称 （即，其类型名称以及其命名空间）。</span><span class="sxs-lookup"><span data-stu-id="97ca7-639">Note that the call to the <xref:System.Reflection.Assembly.GetType%28System.String%29> method uses the type's fully qualified name (that is, its namespace along with its type name).</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.gettype/cs/gettype1.cs#1)]
 [!code-vb[System.Reflection.Assembly.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.gettype/vb/gettype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-640"><paramref name="name" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="97ca7-640"><paramref name="name" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-641"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-641"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-642"><paramref name="name" /> 所需的从属程序集无法找到。</span><span class="sxs-lookup"><span data-stu-id="97ca7-642"><paramref name="name" /> requires a dependent assembly that could not be found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="97ca7-643">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-643">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block><span data-ttu-id="97ca7-644">
          <paramref name="name" /> 所需的从属程序集已找到，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-644">
          <paramref name="name" /> requires a dependent assembly that was found but could not be loaded.</span></span>  
  
<span data-ttu-id="97ca7-645">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-645">-or-</span></span> 
<span data-ttu-id="97ca7-646">当前程序集被加载到仅反射上下文中，并且 <paramref name="name" /> 所需的从属程序集未预先加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-646">The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-647"><paramref name="name" /> 需要一个从属程序集，但该文件不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-647"><paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-648">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-648">-or-</span></span> 
 <span data-ttu-id="97ca7-649"><paramref name="name" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</span><span class="sxs-lookup"><span data-stu-id="97ca7-649"><paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public virtual Type GetType (string name, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetType (name As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name, bool throwOnError);" />
      <MemberSignature Language="F#" Value="override this.GetType : string * bool -&gt; Type" Usage="assembly.GetType (name, throwOnError)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetType(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwOnError" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="97ca7-650">类型的全名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-650">The full name of the type.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="97ca7-651"><see langword="true" /> 表示在找不到该类型时引发异常；<see langword="false" /> 则表示返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-651"><see langword="true" /> to throw an exception if the type is not found; <see langword="false" /> to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="97ca7-652">获取程序集实例中具有指定名称的 <see cref="T:System.Type" /> 对象，并选择在找不到该类型时引发异常。</span><span class="sxs-lookup"><span data-stu-id="97ca7-652">Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.</span></span></summary>
        <returns><span data-ttu-id="97ca7-653">表示指定类的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-653">An object that represents the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-654">此方法仅搜索当前程序集实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-654">This method only searches the current assembly instance.</span></span> <span data-ttu-id="97ca7-655">`name`参数包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-655">The `name` parameter includes the namespace but not the assembly.</span></span> <span data-ttu-id="97ca7-656">若要搜索的一种类型的其他程序集，请使用<xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType>方法重载，它可以选择性地包含程序集显示名称作为类型名称的一部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-656">To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType> method overload, which can optionally include an assembly display name as part of the type name.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-657">如果该类型已转发到另一个程序集，它仍通过此方法返回。</span><span class="sxs-lookup"><span data-stu-id="97ca7-657">If the type has been forwarded to another assembly, it is still returned by this method.</span></span> <span data-ttu-id="97ca7-658">类型转发的信息，请参阅[公共语言运行时中的类型转发](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-658">For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).</span></span>  
  
 <span data-ttu-id="97ca7-659">`throwOnError`参数只影响找不到类型时，会发生什么情况。</span><span class="sxs-lookup"><span data-stu-id="97ca7-659">The `throwOnError` parameter only affects what happens when the type is not found.</span></span> <span data-ttu-id="97ca7-660">它不会影响任何其他可能会引发的异常。</span><span class="sxs-lookup"><span data-stu-id="97ca7-660">It does not affect any other exceptions that might be thrown.</span></span> <span data-ttu-id="97ca7-661">具体而言，如果找到但不能加载，类型<xref:System.TypeLoadException>可能会引发即使`throwOnError`是`false`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-661">In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-662"><paramref name="name" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="97ca7-662"><paramref name="name" /> is invalid.</span></span>  
  
<span data-ttu-id="97ca7-663">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-663">-or-</span></span> 
<span data-ttu-id="97ca7-664"><paramref name="name" /> 的长度超过 1024 个字符。</span><span class="sxs-lookup"><span data-stu-id="97ca7-664">The length of <paramref name="name" /> exceeds 1024 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-665"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-665"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="97ca7-666"><paramref name="throwOnError" /> 为 <see langword="true" />，且找不到此类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-666"><paramref name="throwOnError" /> is <see langword="true" />, and the type cannot be found.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-667"><paramref name="name" /> 所需的从属程序集无法找到。</span><span class="sxs-lookup"><span data-stu-id="97ca7-667"><paramref name="name" /> requires a dependent assembly that could not be found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-668"><paramref name="name" /> 所需的从属程序集已找到，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-668"><paramref name="name" /> requires a dependent assembly that was found but could not be loaded.</span></span>  
  
<span data-ttu-id="97ca7-669">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-669">-or-</span></span> 
<span data-ttu-id="97ca7-670">当前程序集被加载到仅反射上下文中，并且 <paramref name="name" /> 所需的从属程序集未预先加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-670">The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-671"><paramref name="name" /> 需要一个从属程序集，但该文件不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-671"><paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-672">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-672">-or-</span></span> 
 <span data-ttu-id="97ca7-673"><paramref name="name" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</span><span class="sxs-lookup"><span data-stu-id="97ca7-673"><paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public virtual Type GetType (string name, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetType (name As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="override this.GetType : string * bool * bool -&gt; Type" Usage="assembly.GetType (name, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetType(System.String,System.Boolean,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="throwOnError" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="97ca7-674">类型的全名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-674">The full name of the type.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="97ca7-675"><see langword="true" /> 表示在找不到该类型时引发异常；<see langword="false" /> 则表示返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-675"><see langword="true" /> to throw an exception if the type is not found; <see langword="false" /> to return <see langword="null" />.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="97ca7-676">如果为 <see langword="true" />，则忽略类型名的大小写；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-676"><see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97ca7-677">获取程序集实例中具有指定名称的 <see cref="T:System.Type" /> 对象，带有忽略大小写和在找不到该类型时引发异常的选项。</span><span class="sxs-lookup"><span data-stu-id="97ca7-677">Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.</span></span></summary>
        <returns><span data-ttu-id="97ca7-678">表示指定类的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-678">An object that represents the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-679">此方法仅搜索当前程序集实例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-679">This method only searches the current assembly instance.</span></span> <span data-ttu-id="97ca7-680">`name`参数包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-680">The `name` parameter includes the namespace but not the assembly.</span></span> <span data-ttu-id="97ca7-681">若要搜索的一种类型的其他程序集，请使用<xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType>方法重载，它可以选择性地包含程序集显示名称作为类型名称的一部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-681">To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType> method overload, which can optionally include an assembly display name as part of the type name.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-682">如果该类型已转发到另一个程序集，它仍通过此方法返回。</span><span class="sxs-lookup"><span data-stu-id="97ca7-682">If the type has been forwarded to another assembly, it is still returned by this method.</span></span> <span data-ttu-id="97ca7-683">类型转发的信息，请参阅[公共语言运行时中的类型转发](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-683">For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).</span></span>  
  
 <span data-ttu-id="97ca7-684">`throwOnError`参数只影响找不到类型时，会发生什么情况。</span><span class="sxs-lookup"><span data-stu-id="97ca7-684">The `throwOnError` parameter only affects what happens when the type is not found.</span></span> <span data-ttu-id="97ca7-685">它不会影响任何其他可能会引发的异常。</span><span class="sxs-lookup"><span data-stu-id="97ca7-685">It does not affect any other exceptions that might be thrown.</span></span> <span data-ttu-id="97ca7-686">具体而言，如果找到但不能加载，类型<xref:System.TypeLoadException>可能会引发即使`throwOnError`是`false`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-686">In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-687"><paramref name="name" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="97ca7-687"><paramref name="name" /> is invalid.</span></span>  
  
<span data-ttu-id="97ca7-688">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-688">-or-</span></span> 
<span data-ttu-id="97ca7-689"><paramref name="name" /> 的长度超过 1024 个字符。</span><span class="sxs-lookup"><span data-stu-id="97ca7-689">The length of <paramref name="name" /> exceeds 1024 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-690"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-690"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="97ca7-691"><paramref name="throwOnError" /> 为 <see langword="true" />，且找不到此类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-691"><paramref name="throwOnError" /> is <see langword="true" />, and the type cannot be found.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-692"><paramref name="name" /> 所需的从属程序集无法找到。</span><span class="sxs-lookup"><span data-stu-id="97ca7-692"><paramref name="name" /> requires a dependent assembly that could not be found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-693"><paramref name="name" /> 所需的从属程序集已找到，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-693"><paramref name="name" /> requires a dependent assembly that was found but could not be loaded.</span></span>  
  
<span data-ttu-id="97ca7-694">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-694">-or-</span></span> 
<span data-ttu-id="97ca7-695">当前程序集被加载到仅反射上下文中，并且 <paramref name="name" /> 所需的从属程序集未预先加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-695">The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-696"><paramref name="name" /> 需要一个从属程序集，但该文件不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-696"><paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-697">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-697">-or-</span></span> 
 <span data-ttu-id="97ca7-698"><paramref name="name" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</span><span class="sxs-lookup"><span data-stu-id="97ca7-698"><paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypes">
      <MemberSignature Language="C#" Value="public virtual Type[] GetTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetTypes : unit -&gt; Type[]&#xA;override this.GetTypes : unit -&gt; Type[]" Usage="assembly.GetTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-699">获取此程序集中定义的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-699">Gets the types defined in this assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-700">一个数组，包含此程序集中定义的所有类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-700">An array that contains all the types that are defined in this assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-701">返回的数组包含嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-701">The returned array includes nested types.</span></span>  
  
 <span data-ttu-id="97ca7-702">如果<xref:System.Reflection.Assembly.GetTypes%2A>程序集和类型上调用方法，该程序集中依赖于尚未加载 （例如，如果它从第二个集中的类型派生），程序集中类型<xref:System.Reflection.ReflectionTypeLoadException>引发。</span><span class="sxs-lookup"><span data-stu-id="97ca7-702">If the <xref:System.Reflection.Assembly.GetTypes%2A> method is called on an assembly and a type in that assembly is dependent on a type in an assembly that has not been loaded (for example, if it derives from a type in the second assembly), a <xref:System.Reflection.ReflectionTypeLoadException> is thrown.</span></span> <span data-ttu-id="97ca7-703">例如，这可以以加载的第一个程序集是否<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>或<xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A>方法和第二个程序集未加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-703">For example, this can happen if the first assembly was loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> or <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods, and the second assembly was not loaded.</span></span> <span data-ttu-id="97ca7-704">它也会与程序集使用加载<xref:System.Reflection.Assembly.Load%2A>并<xref:System.Reflection.Assembly.LoadFile%2A>方法，如果第二个程序集不能定位时<xref:System.Reflection.Assembly.GetTypes%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-704">It can also happen with assemblies loaded using the <xref:System.Reflection.Assembly.Load%2A> and <xref:System.Reflection.Assembly.LoadFile%2A> methods if the second assembly cannot be located when the <xref:System.Reflection.Assembly.GetTypes%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-705">如果一个类型已转发到另一个程序集，它不是包含在返回的数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-705">If a type has been forwarded to another assembly, it is not included in the returned array.</span></span> <span data-ttu-id="97ca7-706">类型转发的信息，请参阅[公共语言运行时中的类型转发](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-706">For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).</span></span>  
  
 <span data-ttu-id="97ca7-707">若要检索的集合<xref:System.Reflection.TypeInfo>而不是一个数组对象<xref:System.Type>对象，请使用<xref:System.Reflection.Assembly.DefinedTypes%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-707">To retrieve a collection of <xref:System.Reflection.TypeInfo> objects instead of an array of <xref:System.Type> objects, use the <xref:System.Reflection.Assembly.DefinedTypes%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-708">下面的示例显示的一种方法的参数中指定的程序集的类型上。</span><span class="sxs-lookup"><span data-stu-id="97ca7-708">The following example displays parameters of one method on a type in the specified assembly.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#11)]
 [!code-csharp[System.Reflection.Assembly#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#11)]
 [!code-vb[System.Reflection.Assembly#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.ReflectionTypeLoadException"><span data-ttu-id="97ca7-709">该程序集包含一个或多个无法加载的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-709">The assembly contains one or more types that cannot be loaded.</span></span> <span data-ttu-id="97ca7-710">此异常的 <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> 属性返回的数组针对已加载的每个类型包含一个 <see cref="T:System.Type" /> 对象，针对无法加载的每个类型包含一个 <see langword="null" />，而 <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> 属性针对无法加载的每个类型包含一个异常。</span><span class="sxs-lookup"><span data-stu-id="97ca7-710">The array returned by the <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> property of this exception contains a <see cref="T:System.Type" /> object for each type that was loaded and <see langword="null" /> for each type that could not be loaded, while the <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> property contains an exception for each type that could not be loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GlobalAssemblyCache">
      <MemberSignature Language="C#" Value="public virtual bool GlobalAssemblyCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GlobalAssemblyCache" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.GlobalAssemblyCache" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GlobalAssemblyCache As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool GlobalAssemblyCache { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAssemblyCache : bool" Usage="System.Reflection.Assembly.GlobalAssemblyCache" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.GlobalAssemblyCache</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-711">获取一个值，该值指示程序集是否是从全局程序集缓存加载的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-711">Gets a value indicating whether the assembly was loaded from the global assembly cache.</span></span></summary>
        <value><span data-ttu-id="97ca7-712">如果程序集是从全局程序集缓存加载的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-712"><see langword="true" /> if the assembly was loaded from the global assembly cache; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HostContext">
      <MemberSignature Language="C#" Value="public virtual long HostContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 HostContext" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.HostContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HostContext As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long HostContext { long get(); };" />
      <MemberSignature Language="F#" Value="member this.HostContext : int64" Usage="System.Reflection.Assembly.HostContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-713">获取用于加载程序集的主机上下文。</span><span class="sxs-lookup"><span data-stu-id="97ca7-713">Gets the host context with which the assembly was loaded.</span></span></summary>
        <value><span data-ttu-id="97ca7-714">一个 <see cref="T:System.Int64" /> 值，指示用于加载程序集的主机上下文（如果有）。</span><span class="sxs-lookup"><span data-stu-id="97ca7-714">An <see cref="T:System.Int64" /> value that indicates the host context with which the assembly was loaded, if any.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageRuntimeVersion">
      <MemberSignature Language="C#" Value="public virtual string ImageRuntimeVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageRuntimeVersion" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.ImageRuntimeVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImageRuntimeVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ImageRuntimeVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ImageRuntimeVersion : string" Usage="System.Reflection.Assembly.ImageRuntimeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-715">获取表示公共语言运行时 (CLR) 的版本的字符串，该信息保存在包含清单的文件中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-715">Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.</span></span></summary>
        <value><span data-ttu-id="97ca7-716">CLR 版本的文件夹名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-716">The CLR version folder name.</span></span> <span data-ttu-id="97ca7-717">这不是完整路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-717">This is not a full path.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-718">例如，.NET Framework 1.1 版的值将为 v1.1.4322。</span><span class="sxs-lookup"><span data-stu-id="97ca7-718">For example, the value for the .NET Framework version 1.1 would be v1.1.4322.</span></span> <span data-ttu-id="97ca7-719">该版本的二进制文件将位于路径 %windir%\microsoft.net\framework\v1.1.4322。</span><span class="sxs-lookup"><span data-stu-id="97ca7-719">The binary files for that version would be located in the path %windir%\Microsoft.NET\Framework\v1.1.4322.</span></span>  
  
 <span data-ttu-id="97ca7-720">默认情况下，<xref:System.Reflection.Assembly.ImageRuntimeVersion%2A>设置为用于生成程序集的 clr 版本。</span><span class="sxs-lookup"><span data-stu-id="97ca7-720">By default, <xref:System.Reflection.Assembly.ImageRuntimeVersion%2A> is set to the version of the CLR used to build the assembly.</span></span> <span data-ttu-id="97ca7-721">但是，它可能已设置为其他值在编译时。</span><span class="sxs-lookup"><span data-stu-id="97ca7-721">However, it might have been set to another value at compile time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCollectible">
      <MemberSignature Language="C#" Value="public virtual bool IsCollectible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCollectible" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.IsCollectible" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsCollectible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsCollectible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCollectible : bool" Usage="System.Reflection.Assembly.IsCollectible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-722">获取一个值，该值指示此程序集是否保留在可回收的 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-722">Gets a value that indicates whether this assembly is held in a collectible <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />.</span></span></summary>
        <value><span data-ttu-id="97ca7-723"><see langword="true" /> 如果此程序集保留在可回收<see cref="T:System.Runtime.Loader.AssemblyLoadContext" />; 否则为<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-723"><see langword="true" /> if this assembly is held in a collectible <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="97ca7-724">有关详细信息，请参阅[如何使用和调试.NET Core 中的程序集 unloadability](~/docs/standard/assembly/unloadability-howto.md)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-724">For more information, see [How to use and debug assembly unloadability in .NET Core](~/docs/standard/assembly/unloadability-howto.md).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member IsDefined : Type * bool -&gt; bool&#xA;override this.IsDefined : Type * bool -&gt; bool" Usage="assembly.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="97ca7-725">要为此程序集检查的属性类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-725">The type of the attribute to be checked for this assembly.</span></span></param>
        <param name="inherit"><span data-ttu-id="97ca7-726">对于该类型的对象，将忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="97ca7-726">This argument is ignored for objects of this type.</span></span></param>
        <summary><span data-ttu-id="97ca7-727">指示指定的属性是否已应用于该程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-727">Indicates whether or not a specified attribute has been applied to the assembly.</span></span></summary>
        <returns><span data-ttu-id="97ca7-728">如果已将该属性应用于程序集，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-728"><see langword="true" /> if the attribute has been applied to the assembly; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97ca7-729">下面的代码示例适用<xref:System.Reflection.AssemblyTitleAttribute>属性设置为程序集，然后使用<xref:System.Reflection.Assembly.IsDefined%2A>以指示是否已应用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-729">The following code example applies the <xref:System.Reflection.AssemblyTitleAttribute> attribute to an assembly and then uses <xref:System.Reflection.Assembly.IsDefined%2A> to indicate whether it was applied.</span></span> <span data-ttu-id="97ca7-730">该语句还测试未应用的属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-730">It also tests an attribute that was not applied.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.isdefined/CS/isdefined.cs#1)]
 [!code-vb[System.Reflection.Assembly.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.isdefined/VB/isdefined.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-731"><paramref name="attributeType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-731"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-732"><paramref name="attributeType" /> 使用的类型无效。</span><span class="sxs-lookup"><span data-stu-id="97ca7-732"><paramref name="attributeType" /> uses an invalid type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsDynamic">
      <MemberSignature Language="C#" Value="public virtual bool IsDynamic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDynamic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.IsDynamic" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsDynamic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDynamic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDynamic : bool" Usage="System.Reflection.Assembly.IsDynamic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-733">获取一个值，该值指示当前程序集是否是通过使用反射发出在当前进程中动态生成的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-733">Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.</span></span></summary>
        <value><span data-ttu-id="97ca7-734">如果当前程序集是在当前进程中动态生成的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-734"><see langword="true" /> if the current assembly was generated dynamically in the current process; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-735">动态程序集由派生类<xref:System.Reflection.Emit.AssemblyBuilder>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-735">Dynamic assemblies are represented by the derived class <xref:System.Reflection.Emit.AssemblyBuilder>.</span></span>  
  
 <span data-ttu-id="97ca7-736">当动态程序集保存到磁盘上的已保存的程序集不是动态的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-736">When a dynamic assembly is saved to disk, the saved assembly is not dynamic.</span></span> <span data-ttu-id="97ca7-737">如果已保存的程序集加载到另一个应用程序域或过程中，<xref:System.Reflection.Assembly.IsDynamic%2A>属性返回`false`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-737">If the saved assembly is loaded into another application domain or process, the <xref:System.Reflection.Assembly.IsDynamic%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFullyTrusted">
      <MemberSignature Language="C#" Value="public bool IsFullyTrusted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFullyTrusted" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.IsFullyTrusted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFullyTrusted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFullyTrusted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFullyTrusted : bool" Usage="System.Reflection.Assembly.IsFullyTrusted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-738">获取一个值，该值指示当前程序集是否是以完全信任方式加载的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-738">Gets a value that indicates whether the current assembly is loaded with full trust.</span></span></summary>
        <value><span data-ttu-id="97ca7-739">如果当前程序集是以完全信任方式加载的，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-739"><see langword="true" /> if the current assembly is loaded with full trust; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-740">加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-740">Loads an assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (byte[] rawAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(unsigned int8[] rawAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (rawAssembly As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly);" />
      <MemberSignature Language="F#" Value="static member Load : byte[] -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load rawAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="97ca7-741">字节数组，它是包含已发出程序集的基于 COFF 的映像。</span><span class="sxs-lookup"><span data-stu-id="97ca7-741">A byte array that is a COFF-based image containing an emitted assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-742">加载带有基于通用对象文件格式 (COFF) 的映像的程序集，该映像包含已发出的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-742">Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly.</span></span> <span data-ttu-id="97ca7-743">此程序集将会加载到调用方的应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-743">The assembly is loaded into the application domain of the caller.</span></span></summary>
        <returns><span data-ttu-id="97ca7-744">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-744">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-745">使用此方法加载程序集的信任级别是调用程序集的信任级别相同。</span><span class="sxs-lookup"><span data-stu-id="97ca7-745">The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly.</span></span> <span data-ttu-id="97ca7-746">若要从应用程序域的信任级别的字节数组加载程序集，请使用<xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-746">To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload.</span></span> <span data-ttu-id="97ca7-747">详细了解使用的证据的重载<xref:System.Reflection.Assembly.Load%2A>方法采用字节数组，请参阅<xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-747">For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.</span></span>  
  
 <span data-ttu-id="97ca7-748">专用于反映将C++可执行文件可能会引发<xref:System.BadImageFormatException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-748">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="97ca7-749">这是最有可能引起的C++编译器剥离重定位地址或`.reloc`可执行文件中的部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-749">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="97ca7-750">若要保留`.reloc`地址在C++可执行文件，则指定`/fixed:no`在链接时。</span><span class="sxs-lookup"><span data-stu-id="97ca7-750">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="97ca7-751">请注意，此方法的重载始终创建一个新<xref:System.Reflection.Assembly>具有其自己的映射对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-751">Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-752"><paramref name="rawAssembly" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-752"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-753"><paramref name="rawAssembly" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-753"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-754">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-754">-or-</span></span> 
<span data-ttu-id="97ca7-755">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-755">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (assemblyRef As AssemblyName) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(System::Reflection::AssemblyName ^ assemblyRef);" />
      <MemberSignature Language="F#" Value="static member Load : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load assemblyRef" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyRef" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyRef"><span data-ttu-id="97ca7-756">描述要加载的程序集的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-756">The object that describes the assembly to be loaded.</span></span></param>
        <summary><span data-ttu-id="97ca7-757">在给定程序集的 <see cref="T:System.Reflection.AssemblyName" /> 的情况下，加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-757">Loads an assembly given its <see cref="T:System.Reflection.AssemblyName" />.</span></span></summary>
        <returns><span data-ttu-id="97ca7-758">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-758">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-759"><xref:System.IO.FileLoadException> 如果引发`assemblyRef`指定完整的程序集名称和匹配的简单名称的第一个程序集具有不同的版本、 区域性或公钥标记。</span><span class="sxs-lookup"><span data-stu-id="97ca7-759"><xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name and the first assembly that matches the simple name has a different version, culture, or public key token.</span></span> <span data-ttu-id="97ca7-760">加载程序不会继续探测的其他程序集的简单名称相匹配。</span><span class="sxs-lookup"><span data-stu-id="97ca7-760">The loader does not continue probing for other assemblies that match the simple name.</span></span> <span data-ttu-id="97ca7-761">从.NET Framework 4 开始，因为默认情况下，禁用远程程序集中的代码执行<xref:System.IO.FileLoadException>也会引发如果`assemblyRef`指定远程程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-761">Starting with .NET Framework 4, because execution of code in remote assemblies is disabled by default, a <xref:System.IO.FileLoadException> is also thrown if `assemblyRef` specifies a remote assembly.</span></span> <span data-ttu-id="97ca7-762">若要启用从远程位置加载的代码的执行，可以使用[ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md)配置元素。</span><span class="sxs-lookup"><span data-stu-id="97ca7-762">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>     
  
> [!NOTE]
>  <span data-ttu-id="97ca7-763">不要使用<xref:System.Reflection.AssemblyName>仅含<xref:System.Reflection.AssemblyName.CodeBase%2A>属性集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-763">Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set.</span></span> <span data-ttu-id="97ca7-764"><xref:System.Reflection.AssemblyName.CodeBase%2A>属性不提供任何元素 （如名称或版本） 的程序集标识，因此加载不会发生根据负载通过标识规则，正如您期望从<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-764">The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="97ca7-765">相反，使用负载从规则加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-765">Instead, the assembly is loaded using load-from rules.</span></span> <span data-ttu-id="97ca7-766">使用 load-from 上下文的缺点的信息，请参阅<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>方法重载或[程序集加载的最佳实践](~/docs/framework/deployment/best-practices-for-assembly-loading.md)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-766">For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).</span></span>  
  
 <span data-ttu-id="97ca7-767">是否将特定的权限授予程序集是基于证据的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-767">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="97ca7-768">程序集和安全证据的合并的规则如下所示：</span><span class="sxs-lookup"><span data-stu-id="97ca7-768">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="97ca7-769">当你使用<xref:System.Reflection.Assembly.Load%2A>方法没有<xref:System.Security.Policy.Evidence>参数，则加载程序提供的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-769">When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="97ca7-770">当你使用<xref:System.Reflection.Assembly.Load%2A>方法替换<xref:System.Security.Policy.Evidence>参数，证据进行合并。</span><span class="sxs-lookup"><span data-stu-id="97ca7-770">When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="97ca7-771">作为参数提供的证据<xref:System.Reflection.Assembly.Load%2A>方法取代加载程序提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-771">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="97ca7-772">当你使用<xref:System.Reflection.Assembly.Load%2A>方法的重载`Byte[]`参数加载通用对象文件格式 (COFF) 图像，证据继承自调用程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-772">When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.</span></span> <span data-ttu-id="97ca7-773">这适用于.NET Framework 1.1 版 Service Pack 1 (SP1) 和后续版本。</span><span class="sxs-lookup"><span data-stu-id="97ca7-773">This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97ca7-774">在.NET Framework 1.0 版和没有 SP1，当您使用的版本 1.1 中<xref:System.Reflection.Assembly.Load%2A>方法的重载`Byte[]`参数加载 COFF 映像，证据结合使用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-774">In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined.</span></span> <span data-ttu-id="97ca7-775">`Zone``Url`并`Site`继承自调用程序集，并`Hash`和`StrongName`取自 COFF 程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-775">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="97ca7-776">当你使用<xref:System.Reflection.Assembly.Load%2A>方法替换`Byte[]`参数和<xref:System.Security.Policy.Evidence>若要加载的 COFF 映像，请使用提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-776">When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="97ca7-777">将忽略的调用程序集和 COFF 映像的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-777">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 <span data-ttu-id="97ca7-778">专用于反映将C++可执行文件可能会引发<xref:System.BadImageFormatException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-778">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="97ca7-779">这是最有可能引起的C++编译器剥离重定位地址或`.reloc`可执行文件中的部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-779">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="97ca7-780">若要保留`.reloc`地址在C++可执行文件，则指定`/fixed:no`在链接时。</span><span class="sxs-lookup"><span data-stu-id="97ca7-780">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-781">如果这两个<xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType>属性和<xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType>属性设置，第一次尝试加载程序集使用的显示名称 (包括版本、 区域性和等等，所返回的<xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType>属性)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-781">If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property).</span></span> <span data-ttu-id="97ca7-782">如果找不到该文件，<xref:System.Reflection.AssemblyName.CodeBase%2A>用于搜索该程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-782">If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly.</span></span> <span data-ttu-id="97ca7-783">如果使用找到的程序集<xref:System.Reflection.AssemblyName.CodeBase%2A>，与程序集匹配的显示名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-783">If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly.</span></span> <span data-ttu-id="97ca7-784">如果匹配失败，<xref:System.IO.FileLoadException>引发。</span><span class="sxs-lookup"><span data-stu-id="97ca7-784">If the match fails, a <xref:System.IO.FileLoadException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-785">下面的示例实例化<xref:System.Reflection.AssemblyName>对象并使用它来加载`sysglobal.dll`程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-785">The following example instantiates an <xref:System.Reflection.AssemblyName> object and uses it to load the `sysglobal.dll` assembly.</span></span> <span data-ttu-id="97ca7-786">该示例然后显示程序集的公共类型的完整名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-786">The example then displays the full name of the assembly's public types.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.Load#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.load/cs/Load2.cs#2)]
 [!code-vb[System.Reflection.Assembly.Load#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.load/vb/Load2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-787"><paramref name="assemblyRef" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-787"><paramref name="assemblyRef" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-788"><paramref name="assemblyRef" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="97ca7-788"><paramref name="assemblyRef" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="97ca7-789">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-789">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="97ca7-790">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-790">A file that was found could not be loaded.</span></span>

<span data-ttu-id="97ca7-791">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-791">-or-</span></span>

<span data-ttu-id="97ca7-792"><paramref name="assemblyRef" /> 指定远程程序集，但在远程程序集中执行代码的功能已禁用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-792"><paramref name="assemblyRef" /> specifies a remote assembly, but the ability to execute code in remote assemblies is disabled.</span></span> <span data-ttu-id="97ca7-793">请参阅 <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-793">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-794"><paramref name="assemblyRef" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-794"><paramref name="assemblyRef" /> is not a valid assembly.</span></span> <span data-ttu-id="97ca7-795">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-795">-or-</span></span> 
<span data-ttu-id="97ca7-796">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyRef" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-796">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-797">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="97ca7-797">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="97ca7-798">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-798">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="97ca7-799">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-799">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-800">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-800">to load an assembly with evidence.</span></span> <span data-ttu-id="97ca7-801">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-801">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/deployment/how-the-runtime-locates-assemblies.md"><span data-ttu-id="97ca7-802">运行时如何定位程序集</span><span class="sxs-lookup"><span data-stu-id="97ca7-802">How the Runtime Locates Assemblies</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (string assemblyString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(string assemblyString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (assemblyString As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(System::String ^ assemblyString);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load assemblyString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="assemblyString"><span data-ttu-id="97ca7-803">程序集名称的长格式。</span><span class="sxs-lookup"><span data-stu-id="97ca7-803">The long form of the assembly name.</span></span></param>
        <summary><span data-ttu-id="97ca7-804">通过给定程序集的长格式名称加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-804">Loads an assembly given the long form of its name.</span></span></summary>
        <returns><span data-ttu-id="97ca7-805">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-805">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-806">程序集名称的长格式包含其简单名称 （如"系统"的 System.dll 程序集） 以及其版本、 区域性、 公钥标记和 （可选） 它的处理器体系结构。</span><span class="sxs-lookup"><span data-stu-id="97ca7-806">The long form of an assembly name consists of its simple name (such as "System" for the System.dll assembly) along with its version, culture, public key token, and optionally its processor architecture.</span></span> <span data-ttu-id="97ca7-807">它对应于程序集的<xref:System.Reflection.Assembly.FullName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-807">It corresponds to the assembly's <xref:System.Reflection.Assembly.FullName%2A> property.</span></span> <span data-ttu-id="97ca7-808">下面的示例演示如何使用用于加载.NET Framework 4 的 System.dll 程序集的长名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-808">The following example illustrates the use of a long name to load the System.dll assembly for the .NET Framework 4.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.Load#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.load/cs/load1.cs#1)]
 [!code-vb[System.Reflection.Assembly.Load#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.load/vb/load1.vb#1)]  
  
 <span data-ttu-id="97ca7-809"><xref:System.IO.FileLoadException> 如果引发`assemblyString`指定完整的程序集名称和匹配的简单名称的第一个程序集具有不同的版本、 区域性或公钥标记。</span><span class="sxs-lookup"><span data-stu-id="97ca7-809"><xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token.</span></span> <span data-ttu-id="97ca7-810">加载程序不会继续探测的其他程序集的简单名称相匹配。</span><span class="sxs-lookup"><span data-stu-id="97ca7-810">The loader does not continue probing for other assemblies that match the simple name.</span></span>  
  
 <span data-ttu-id="97ca7-811">是否将特定的权限授予程序集是基于证据的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-811">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="97ca7-812">程序集和安全证据的合并的规则如下所示：</span><span class="sxs-lookup"><span data-stu-id="97ca7-812">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="97ca7-813">当你使用<xref:System.Reflection.Assembly.Load%2A>方法没有<xref:System.Security.Policy.Evidence>参数，则加载程序提供的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-813">When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="97ca7-814">当你使用<xref:System.Reflection.Assembly.Load%2A>方法替换<xref:System.Security.Policy.Evidence>参数，证据进行合并。</span><span class="sxs-lookup"><span data-stu-id="97ca7-814">When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="97ca7-815">作为参数提供的证据<xref:System.Reflection.Assembly.Load%2A>方法取代加载程序提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-815">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="97ca7-816">当你使用<xref:System.Reflection.Assembly.Load%2A>方法的重载`Byte[]`参数加载通用对象文件格式 (COFF) 图像，证据继承自调用程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-816">When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.</span></span> <span data-ttu-id="97ca7-817">这适用于.NET Framework 1.1 版 Service Pack 1 (SP1) 和后续版本。</span><span class="sxs-lookup"><span data-stu-id="97ca7-817">This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97ca7-818">在.NET Framework 1.0 版和没有 SP1，当您使用的版本 1.1 中<xref:System.Reflection.Assembly.Load%2A>方法的重载`Byte[]`参数加载 COFF 映像，证据结合使用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-818">In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined.</span></span> <span data-ttu-id="97ca7-819">`Zone``Url`并`Site`继承自调用程序集，并`Hash`和`StrongName`取自 COFF 程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-819">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="97ca7-820">当你使用<xref:System.Reflection.Assembly.Load%2A>方法替换`Byte[]`参数和<xref:System.Security.Policy.Evidence>若要加载的 COFF 映像，请使用提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-820">When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="97ca7-821">将忽略的调用程序集和 COFF 映像的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-821">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 <span data-ttu-id="97ca7-822">专用于反映将C++可执行文件可能会引发<xref:System.BadImageFormatException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-822">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="97ca7-823">这是最有可能引起的C++编译器剥离重定位地址或`.reloc`可执行文件中的部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-823">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="97ca7-824">若要保留`.reloc`地址在C++可执行文件，则指定`/fixed:no`在链接时。</span><span class="sxs-lookup"><span data-stu-id="97ca7-824">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="97ca7-825">在.NET Framework 2.0 版中，处理器体系结构添加到程序集标识，并可以指定为程序集名称字符串的一部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-825">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="97ca7-826">例如，"ProcessorArchitecture = msil"。</span><span class="sxs-lookup"><span data-stu-id="97ca7-826">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="97ca7-827">但是，指定程序集名称的建议的方法是创建<xref:System.Reflection.AssemblyName>对象，并将其传递给适当的重载<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-827">However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="97ca7-828">请参阅 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-828">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-829">下面的示例加载给定其完全限定的名称的程序集，并列出了在指定程序集中包含的所有类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-829">The following example loads an assembly given its fully qualified name, and lists all the types contained in the specified assembly.</span></span> <span data-ttu-id="97ca7-830">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-830">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="97ca7-831">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-831">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[assembly.load1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.Load1/CPP/load1.cpp#1)]
 [!code-csharp[assembly.load1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.Load1/CS/load1.cs#1)]
 [!code-vb[assembly.load1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.Load1/VB/load1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-832"><paramref name="assemblyString" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-832"><paramref name="assemblyString" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-833"><paramref name="assemblyString" /> 是一个长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="97ca7-833"><paramref name="assemblyString" /> is a zero-length string.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-834"><paramref name="assemblyString" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="97ca7-834"><paramref name="assemblyString" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-835">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-835">A file that was found could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-836"><paramref name="assemblyString" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-836"><paramref name="assemblyString" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-837">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-837">-or-</span></span> 
<span data-ttu-id="97ca7-838">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyString" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-838">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-839">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-839">to load an assembly with evidence.</span></span> <span data-ttu-id="97ca7-840">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-840">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <altmember cref="T:System.Reflection.AssemblyName" />
        <altmember cref="M:System.Reflection.Assembly.LoadFrom(System.String)" />
        <related type="Article" href="~/docs/framework/deployment/how-the-runtime-locates-assemblies.md"><span data-ttu-id="97ca7-841">运行时如何定位程序集</span><span class="sxs-lookup"><span data-stu-id="97ca7-841">How the Runtime Locates Assemblies</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (rawAssembly As Byte(), rawSymbolStore As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore);" />
      <MemberSignature Language="F#" Value="static member Load : byte[] * byte[] -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load (rawAssembly, rawSymbolStore)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="97ca7-842">字节数组，它是包含已发出程序集的基于 COFF 的映像。</span><span class="sxs-lookup"><span data-stu-id="97ca7-842">A byte array that is a COFF-based image containing an emitted assembly.</span></span></param>
        <param name="rawSymbolStore"><span data-ttu-id="97ca7-843">包含表示程序集符号的原始字节的字节数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-843">A byte array that contains the raw bytes representing the symbols for the assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-844">加载带有基于通用对象文件格式 (COFF) 的映像的程序集，此映像包含一个已发出的程序集，并且还可以选择包括程序集的符号。</span><span class="sxs-lookup"><span data-stu-id="97ca7-844">Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly.</span></span> <span data-ttu-id="97ca7-845">此程序集将会加载到调用方的应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-845">The assembly is loaded into the application domain of the caller.</span></span></summary>
        <returns><span data-ttu-id="97ca7-846">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-846">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-847">使用此方法加载程序集的信任级别是调用程序集的信任级别相同。</span><span class="sxs-lookup"><span data-stu-id="97ca7-847">The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly.</span></span> <span data-ttu-id="97ca7-848">若要从应用程序域的信任级别的字节数组加载程序集，请使用<xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-848">To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload.</span></span> <span data-ttu-id="97ca7-849">详细了解使用的证据的重载<xref:System.Reflection.Assembly.Load%2A>方法采用字节数组，请参阅<xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-849">For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.</span></span>  
  
 <span data-ttu-id="97ca7-850">专用于反映将C++可执行文件可能会引发<xref:System.BadImageFormatException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-850">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="97ca7-851">这是最有可能引起的C++编译器剥离重定位地址或`.reloc`可执行文件中的部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-851">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="97ca7-852">若要保留`.reloc`地址在C++可执行文件，则指定`/fixed:no`在链接时。</span><span class="sxs-lookup"><span data-stu-id="97ca7-852">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="97ca7-853">请注意，此方法的重载始终创建一个新<xref:System.Reflection.Assembly>具有其自己的映射对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-853">Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-854"><paramref name="rawAssembly" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-854"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-855"><paramref name="rawAssembly" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-855"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-856">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-856">-or-</span></span> 
<span data-ttu-id="97ca7-857">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-857">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (assemblyRef As AssemblyName, assemblySecurity As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(System::Reflection::AssemblyName ^ assemblyRef, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="static member Load : System.Reflection.AssemblyName * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load (assemblyRef, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyRef" Type="System.Reflection.AssemblyName" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="assemblyRef"><span data-ttu-id="97ca7-858">描述要加载的程序集的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-858">The object that describes the assembly to be loaded.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="97ca7-859">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-859">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-860">在给定程序集的 <see cref="T:System.Reflection.AssemblyName" /> 的情况下，加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-860">Loads an assembly given its <see cref="T:System.Reflection.AssemblyName" />.</span></span> <span data-ttu-id="97ca7-861">使用提供的证据将该程序集加载到调用方的域中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-861">The assembly is loaded into the domain of the caller using the supplied evidence.</span></span></summary>
        <returns><span data-ttu-id="97ca7-862">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-862">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-863"><xref:System.IO.FileLoadException> 如果引发`assemblyRef`指定完整的程序集名称和匹配的简单名称的第一个程序集具有不同的版本、 区域性或公钥标记。</span><span class="sxs-lookup"><span data-stu-id="97ca7-863"><xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token.</span></span> <span data-ttu-id="97ca7-864">加载程序不会继续探测的其他程序集的简单名称相匹配。</span><span class="sxs-lookup"><span data-stu-id="97ca7-864">The loader does not continue probing for other assemblies that match the simple name.</span></span>  <span data-ttu-id="97ca7-865">从.NET Framework 4 开始，因为默认情况下，禁用远程程序集中的代码执行<xref:System.IO.FileLoadException>也会引发如果`assemblyRef`指定远程程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-865">Starting with .NET Framework 4, because execution of code in remote assemblies is disabled by default, a <xref:System.IO.FileLoadException> is also thrown if `assemblyRef` specifies a remote assembly.</span></span> <span data-ttu-id="97ca7-866">若要启用从远程位置加载的代码的执行，可以使用[ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md)配置元素。</span><span class="sxs-lookup"><span data-stu-id="97ca7-866">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>   
  
> [!NOTE]
>  <span data-ttu-id="97ca7-867">不要使用<xref:System.Reflection.AssemblyName>仅含<xref:System.Reflection.AssemblyName.CodeBase%2A>属性集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-867">Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set.</span></span> <span data-ttu-id="97ca7-868"><xref:System.Reflection.AssemblyName.CodeBase%2A>属性不提供任何元素 （如名称或版本） 的程序集标识，因此加载不会发生根据负载通过标识规则，正如您期望从<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-868">The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="97ca7-869">相反，使用负载从规则加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-869">Instead, the assembly is loaded using load-from rules.</span></span> <span data-ttu-id="97ca7-870">使用 load-from 上下文的缺点的信息，请参阅<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>方法重载或[程序集加载的最佳实践](~/docs/framework/deployment/best-practices-for-assembly-loading.md)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-870">For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).</span></span>  
  
 <span data-ttu-id="97ca7-871">是否将特定的权限授予程序集是基于证据的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-871">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="97ca7-872">程序集和安全证据的合并的规则如下所示：</span><span class="sxs-lookup"><span data-stu-id="97ca7-872">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="97ca7-873">当你使用<xref:System.Reflection.Assembly.Load%2A>方法没有<xref:System.Security.Policy.Evidence>参数，则加载程序提供的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-873">When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="97ca7-874">当你使用<xref:System.Reflection.Assembly.Load%2A>方法替换<xref:System.Security.Policy.Evidence>参数，证据进行合并。</span><span class="sxs-lookup"><span data-stu-id="97ca7-874">When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="97ca7-875">作为参数提供的证据<xref:System.Reflection.Assembly.Load%2A>方法取代加载程序提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-875">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="97ca7-876">当你使用<xref:System.Reflection.Assembly.Load%2A>方法的重载`Byte[]`参数加载通用对象文件格式 (COFF) 图像，证据继承自调用程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-876">When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.</span></span> <span data-ttu-id="97ca7-877">这适用于.NET Framework 1.1 版 Service Pack 1 (SP1) 和后续版本。</span><span class="sxs-lookup"><span data-stu-id="97ca7-877">This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97ca7-878">在.NET Framework 1.0 版和没有 SP1，当您使用的版本 1.1 中<xref:System.Reflection.Assembly.Load%2A>方法的重载`Byte[]`参数加载 COFF 映像，证据结合使用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-878">In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined.</span></span> <span data-ttu-id="97ca7-879">`Zone``Url`并`Site`继承自调用程序集，并`Hash`和`StrongName`取自 COFF 程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-879">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="97ca7-880">当你使用<xref:System.Reflection.Assembly.Load%2A>方法替换`Byte[]`参数和<xref:System.Security.Policy.Evidence>若要加载的 COFF 映像，请使用提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-880">When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="97ca7-881">将忽略的调用程序集和 COFF 映像的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-881">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 <span data-ttu-id="97ca7-882">专用于反映将C++可执行文件可能会引发<xref:System.BadImageFormatException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-882">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="97ca7-883">这是最有可能引起的C++编译器剥离重定位地址或`.reloc`可执行文件中的部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-883">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="97ca7-884">若要保留`.reloc`地址在C++可执行文件，则指定`/fixed:no`在链接时。</span><span class="sxs-lookup"><span data-stu-id="97ca7-884">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-885">如果这两个<xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType>属性和<xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType>属性设置，第一次尝试加载程序集使用的显示名称 (包括版本、 区域性和等等，所返回的<xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType>属性)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-885">If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property).</span></span> <span data-ttu-id="97ca7-886">如果找不到该文件，<xref:System.Reflection.AssemblyName.CodeBase%2A>用于搜索该程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-886">If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly.</span></span> <span data-ttu-id="97ca7-887">如果使用找到的程序集<xref:System.Reflection.AssemblyName.CodeBase%2A>，与程序集匹配的显示名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-887">If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly.</span></span> <span data-ttu-id="97ca7-888">如果匹配失败，<xref:System.IO.FileLoadException>引发。</span><span class="sxs-lookup"><span data-stu-id="97ca7-888">If the match fails, a <xref:System.IO.FileLoadException> is thrown.</span></span>  
  
 <span data-ttu-id="97ca7-889">如果您调用<xref:System.Reflection.Assembly.Load%2A>方法不是一次在同一个程序集，但指定不同的证据，公共语言运行时不会引发更多<xref:System.IO.FileLoadException>因为相等性和完整性不同的证据规范不能为确定。</span><span class="sxs-lookup"><span data-stu-id="97ca7-889">If you call the <xref:System.Reflection.Assembly.Load%2A> method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined.</span></span> <span data-ttu-id="97ca7-890">第一个成功的证据为使用的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-890">The evidence that first succeeds is the evidence that is used.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-891"><paramref name="assemblyRef" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-891"><paramref name="assemblyRef" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-892"><paramref name="assemblyRef" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="97ca7-892"><paramref name="assemblyRef" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-893"><paramref name="assemblyRef" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-893"><paramref name="assemblyRef" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-894">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-894">-or-</span></span> 
<span data-ttu-id="97ca7-895">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyRef" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-895">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-896">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="97ca7-896">An assembly or module was loaded twice with two different evidences.</span></span>

<span data-ttu-id="97ca7-897">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-897">-or-</span></span>

<span data-ttu-id="97ca7-898"><paramref name="assemblyRef" /> 指定远程程序集，但在远程程序集中执行代码的功能已禁用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-898"><paramref name="assemblyRef" /> specifies a remote assembly, but the ability to execute code in remote assemblies is disabled.</span></span> <span data-ttu-id="97ca7-899">请参阅 <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-899">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-900">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="97ca7-900">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="97ca7-901">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-901">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="97ca7-902">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-902">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-903">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-903">to load an assembly with evidence.</span></span> <span data-ttu-id="97ca7-904">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-904">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
        <related type="Article" href="~/docs/framework/deployment/how-the-runtime-locates-assemblies.md"><span data-ttu-id="97ca7-905">运行时如何定位程序集</span><span class="sxs-lookup"><span data-stu-id="97ca7-905">How the Runtime Locates Assemblies</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(string assemblyString, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (assemblyString As String, assemblySecurity As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(System::String ^ assemblyString, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="static member Load : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load (assemblyString, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="assemblyString"><span data-ttu-id="97ca7-906">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-906">The display name of the assembly.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="97ca7-907">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-907">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-908">通过给定的程序集的显示名称来加载程序集，使用提供的证据将程序集加载到调用方的域中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-908">Loads an assembly given its display name, loading the assembly into the domain of the caller using the supplied evidence.</span></span></summary>
        <returns><span data-ttu-id="97ca7-909">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-909">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-910"><xref:System.IO.FileLoadException> 如果引发`assemblyString`指定完整的程序集名称和匹配的简单名称的第一个程序集具有不同的版本、 区域性或公钥标记。</span><span class="sxs-lookup"><span data-stu-id="97ca7-910"><xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token.</span></span> <span data-ttu-id="97ca7-911">加载程序不会继续探测的其他程序集的简单名称相匹配。</span><span class="sxs-lookup"><span data-stu-id="97ca7-911">The loader does not continue probing for other assemblies that match the simple name.</span></span>  
  
 <span data-ttu-id="97ca7-912">是否将特定的权限授予程序集是基于证据的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-912">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="97ca7-913">程序集和安全证据的合并的规则如下所示：</span><span class="sxs-lookup"><span data-stu-id="97ca7-913">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="97ca7-914">当你使用<xref:System.Reflection.Assembly.Load%2A>方法没有<xref:System.Security.Policy.Evidence>参数，则加载程序提供的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-914">When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="97ca7-915">当你使用<xref:System.Reflection.Assembly.Load%2A>方法替换<xref:System.Security.Policy.Evidence>参数，证据进行合并。</span><span class="sxs-lookup"><span data-stu-id="97ca7-915">When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="97ca7-916">作为参数提供的证据<xref:System.Reflection.Assembly.Load%2A>方法取代加载程序提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-916">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="97ca7-917">当你使用<xref:System.Reflection.Assembly.Load%2A>方法的重载`Byte[]`参数加载通用对象文件格式 (COFF) 图像，证据继承自调用程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-917">When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.</span></span> <span data-ttu-id="97ca7-918">这适用于.NET Framework 1.1 版 Service Pack 1 (SP1) 和后续版本。</span><span class="sxs-lookup"><span data-stu-id="97ca7-918">This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97ca7-919">在.NET Framework 1.0 版和没有 SP1，当您使用的版本 1.1 中<xref:System.Reflection.Assembly.Load%2A>方法的重载`Byte[]`参数加载 COFF 映像，证据结合使用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-919">In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined.</span></span> <span data-ttu-id="97ca7-920">`Zone``Url`并`Site`继承自调用程序集，并`Hash`和`StrongName`取自 COFF 程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-920">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="97ca7-921">当你使用<xref:System.Reflection.Assembly.Load%2A>方法替换`Byte[]`参数和<xref:System.Security.Policy.Evidence>若要加载的 COFF 映像，请使用提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-921">When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="97ca7-922">将忽略的调用程序集和 COFF 映像的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-922">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 <span data-ttu-id="97ca7-923">专用于反映将C++可执行文件可能会引发<xref:System.BadImageFormatException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-923">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="97ca7-924">这是最有可能引起的C++编译器剥离重定位地址或`.reloc`可执行文件中的部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-924">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="97ca7-925">若要保留`.reloc`地址在C++可执行文件，则指定`/fixed:no`在链接时。</span><span class="sxs-lookup"><span data-stu-id="97ca7-925">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="97ca7-926">如果在同一程序集，但指定不同的证据不止一次调用此方法，公共语言运行时不会引发<xref:System.IO.FileLoadException>由于不能确定相等性和不同的证据规范的完整性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-926">If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined.</span></span> <span data-ttu-id="97ca7-927">第一个成功的证据为使用的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-927">The evidence that first succeeds is the evidence that is used.</span></span>  
  
 <span data-ttu-id="97ca7-928">在.NET Framework 2.0 版中，处理器体系结构添加到程序集标识，并可以指定为程序集名称字符串的一部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-928">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="97ca7-929">例如，"ProcessorArchitecture = msil"。</span><span class="sxs-lookup"><span data-stu-id="97ca7-929">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="97ca7-930">但是，指定程序集名称的建议的方法是创建<xref:System.Reflection.AssemblyName>对象，并将其传递给适当的重载<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-930">However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="97ca7-931">请参阅 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-931">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-932"><paramref name="assemblyString" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-932"><paramref name="assemblyString" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-933"><paramref name="assemblyString" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="97ca7-933"><paramref name="assemblyString" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-934"><paramref name="assemblyString" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-934"><paramref name="assemblyString" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-935">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-935">-or-</span></span> 
<span data-ttu-id="97ca7-936">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyString" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-936">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-937">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-937">A file that was found could not be loaded.</span></span>  
  
 <span data-ttu-id="97ca7-938">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-938">-or-</span></span>  
  
 <span data-ttu-id="97ca7-939">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="97ca7-939">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-940">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-940">to load an assembly with evidence.</span></span> <span data-ttu-id="97ca7-941">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-941">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
        <related type="Article" href="~/docs/framework/deployment/how-the-runtime-locates-assemblies.md"><span data-ttu-id="97ca7-942">运行时如何定位程序集</span><span class="sxs-lookup"><span data-stu-id="97ca7-942">How the Runtime Locates Assemblies</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore, class System.Security.Policy.Evidence securityEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (rawAssembly As Byte(), rawSymbolStore As Byte(), securityEvidence As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore, System::Security::Policy::Evidence ^ securityEvidence);" />
      <MemberSignature Language="F#" Value="static member Load : byte[] * byte[] * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load (rawAssembly, rawSymbolStore, securityEvidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="97ca7-943">字节数组，它是包含已发出程序集的基于 COFF 的映像。</span><span class="sxs-lookup"><span data-stu-id="97ca7-943">A byte array that is a COFF-based image containing an emitted assembly.</span></span></param>
        <param name="rawSymbolStore"><span data-ttu-id="97ca7-944">包含表示程序集符号的原始字节的字节数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-944">A byte array that contains the raw bytes representing the symbols for the assembly.</span></span></param>
        <param name="securityEvidence"><span data-ttu-id="97ca7-945">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-945">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-946">加载带有基于通用对象文件格式 (COFF) 的映像的程序集，此映像包含一个已发出的程序集，并且还可选择包括程序集的符号和证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-946">Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and evidence for the assembly.</span></span> <span data-ttu-id="97ca7-947">此程序集将会加载到调用方的应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-947">The assembly is loaded into the application domain of the caller.</span></span></summary>
        <returns><span data-ttu-id="97ca7-948">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-948">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-949">使用提供的证据将该程序集加载到调用方的域中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-949">The assembly is loaded into the domain of the caller using the supplied evidence.</span></span> <span data-ttu-id="97ca7-950">此外加载表示程序集符号的原始字节。</span><span class="sxs-lookup"><span data-stu-id="97ca7-950">The raw bytes representing the symbols for the assembly are also loaded.</span></span>  
  
 <span data-ttu-id="97ca7-951">是否将特定的权限授予程序集是基于证据的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-951">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="97ca7-952">程序集和安全证据的合并的规则如下所示：</span><span class="sxs-lookup"><span data-stu-id="97ca7-952">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="97ca7-953">当你使用<xref:System.Reflection.Assembly.Load%2A>方法没有<xref:System.Security.Policy.Evidence>参数，则加载程序提供的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-953">When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="97ca7-954">当你使用<xref:System.Reflection.Assembly.Load%2A>方法替换<xref:System.Security.Policy.Evidence>参数，证据进行合并。</span><span class="sxs-lookup"><span data-stu-id="97ca7-954">When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="97ca7-955">作为参数提供的证据<xref:System.Reflection.Assembly.Load%2A>方法取代加载程序提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-955">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="97ca7-956">当你使用<xref:System.Reflection.Assembly.Load%2A>方法的重载`Byte[]`参数加载 COFF 映像，证据继承自调用程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-956">When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is inherited from the calling assembly.</span></span> <span data-ttu-id="97ca7-957">这适用于.NET Framework 1.1 版 Service Pack 1 (SP1) 和后续版本。</span><span class="sxs-lookup"><span data-stu-id="97ca7-957">This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97ca7-958">在.NET Framework 1.0 版和没有 SP1，当您使用的版本 1.1 中<xref:System.Reflection.Assembly.Load%2A>方法的重载`Byte[]`参数加载 COFF 映像，证据结合使用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-958">In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined.</span></span> <span data-ttu-id="97ca7-959">`Zone``Url`并`Site`继承自调用程序集，并`Hash`和`StrongName`取自 COFF 程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-959">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="97ca7-960">当你使用<xref:System.Reflection.Assembly.Load%2A>方法替换`Byte[]`参数和<xref:System.Security.Policy.Evidence>若要加载的 COFF 映像，请使用提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-960">When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="97ca7-961">忽略调用程序集的证据和 COFF 映像的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-961">Evidence of the calling assembly and evidence of the COFF image are ignored.</span></span>  
  
 <span data-ttu-id="97ca7-962">专用于反映将C++可执行文件可能会引发<xref:System.BadImageFormatException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-962">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="97ca7-963">这是最有可能引起的C++编译器剥离重定位地址或`.reloc`可执行文件中的部分。</span><span class="sxs-lookup"><span data-stu-id="97ca7-963">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="97ca7-964">若要保留`.reloc`地址在C++可执行文件，则指定`/fixed:no`在链接时。</span><span class="sxs-lookup"><span data-stu-id="97ca7-964">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="97ca7-965">如果调用 [\]，字节\<xref:System.Reflection.Assembly.Load%2A > 方法比一次在同一个程序集，但指定不同的证据，公共语言运行时不会引发更多<xref:System.IO.FileLoadException>因为不能确定相等性和不同的证据规范的完整性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-965">If you call the [\], Byte\<xref:System.Reflection.Assembly.Load%2A> method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined.</span></span> <span data-ttu-id="97ca7-966">第一个成功的证据为使用的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-966">The evidence that first succeeds is the evidence that is used.</span></span>  
  
 <span data-ttu-id="97ca7-967">请注意，此方法的重载始终创建一个新<xref:System.Reflection.Assembly>具有其自己的映射对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-967">Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-968"><paramref name="rawAssembly" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-968"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-969"><paramref name="rawAssembly" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-969"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-970">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-970">-or-</span></span> 
<span data-ttu-id="97ca7-971">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-971">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-972">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="97ca7-972">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="97ca7-973"><paramref name="securityEvidence" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-973"><paramref name="securityEvidence" /> is not <see langword="null" />.</span></span>  <span data-ttu-id="97ca7-974">默认情况下，[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中未启用旧版 CAS 策略；如果未启用，则 <paramref name="securityEvidence" /> 必须为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-974">By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <paramref name="securityEvidence" /> must be <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-975">它能够提供证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-975">for the ability to supply evidence.</span></span> <span data-ttu-id="97ca7-976">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-976">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span> <span data-ttu-id="97ca7-977">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-977">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.SecurityContextSource securityContextSource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore, valuetype System.Security.SecurityContextSource securityContextSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore, System::Security::SecurityContextSource securityContextSource);" />
      <MemberSignature Language="F#" Value="static member Load : byte[] * byte[] * System.Security.SecurityContextSource -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load (rawAssembly, rawSymbolStore, securityContextSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="securityContextSource" Type="System.Security.SecurityContextSource" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="97ca7-978">字节数组，它是包含已发出程序集的基于 COFF 的映像。</span><span class="sxs-lookup"><span data-stu-id="97ca7-978">A byte array that is a COFF-based image containing an emitted assembly.</span></span></param>
        <param name="rawSymbolStore"><span data-ttu-id="97ca7-979">包含表示程序集符号的原始字节的字节数组。</span><span class="sxs-lookup"><span data-stu-id="97ca7-979">A byte array that contains the raw bytes representing the symbols for the assembly.</span></span></param>
        <param name="securityContextSource"><span data-ttu-id="97ca7-980">安全上下文的源。</span><span class="sxs-lookup"><span data-stu-id="97ca7-980">The source of the security context.</span></span></param>
        <summary><span data-ttu-id="97ca7-981">加载带有基于通用对象文件格式 (COFF) 的映像的程序集，此映像包含一个已发出的程序集，并且还可选择包括符号和指定安全上下文的源。</span><span class="sxs-lookup"><span data-stu-id="97ca7-981">Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and specifying the source for the security context.</span></span> <span data-ttu-id="97ca7-982">此程序集将会加载到调用方的应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-982">The assembly is loaded into the application domain of the caller.</span></span></summary>
        <returns><span data-ttu-id="97ca7-983">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-983">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-984">程序集被加载到调用方的安全上下文中使用指定的源的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="97ca7-984">The assembly is loaded into the application domain of the caller using the specified source for the security context.</span></span> <span data-ttu-id="97ca7-985">如果`rawSymbolStore`已指定，还加载表示程序集符号的原始字节。</span><span class="sxs-lookup"><span data-stu-id="97ca7-985">If `rawSymbolStore` was specified, the raw bytes that represent the symbols for the assembly are also loaded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-986"><paramref name="rawAssembly" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-986"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-987"><paramref name="rawAssembly" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-987"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-988">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-988">-or-</span></span> 
 <span data-ttu-id="97ca7-989"><paramref name="rawAssembly" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="97ca7-989"><paramref name="rawAssembly" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="97ca7-990"><paramref name="securityContextSource" /> 的值不是枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="97ca7-990">The value of <paramref name="securityContextSource" /> is not one of the enumeration values.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadFile">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-991">加载程序集文件的内容。</span><span class="sxs-lookup"><span data-stu-id="97ca7-991">Loads the contents of an assembly file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFile (path As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member LoadFile : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="97ca7-992">要加载的文件的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-992">The fully qualified path of the file to load.</span></span></param>
        <summary><span data-ttu-id="97ca7-993">加载指定路径上的程序集文件的内容。</span><span class="sxs-lookup"><span data-stu-id="97ca7-993">Loads the contents of an assembly file on the specified path.</span></span></summary>
        <returns><span data-ttu-id="97ca7-994">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-994">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-995">使用<xref:System.Reflection.Assembly.LoadFile%2A>方法来加载和检查程序集具有相同的标识，但位于不同的路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-995">Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths.</span></span> <span data-ttu-id="97ca7-996"><xref:System.Reflection.Assembly.LoadFile%2A> 不会加载到加载位置上下文中，文件和不能解决依赖项加载路径中，使用作为<xref:System.Reflection.Assembly.LoadFrom%2A>方法执行。</span><span class="sxs-lookup"><span data-stu-id="97ca7-996"><xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the load-from  context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does.</span></span> <span data-ttu-id="97ca7-997"><xref:System.Reflection.Assembly.LoadFile%2A> 此限制的情况下很有用因为<xref:System.Reflection.Assembly.LoadFrom%2A>不能用于加载程序集具有相同标识但不同的路径; 它将加载只有第一个此类程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-997"><xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.</span></span>  

<span data-ttu-id="97ca7-998">从.NET Framework 4 开始，如果`path`在远程位置中指定的程序集、 程序集加载默认情况下，处于禁用状态并`LoadFile`方法会抛出<xref:System.IO.FileLoadException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-998">Starting with .NET Framework 4, if `path` specifies an assembly in a remote location, assembly loading is disabled by default, and the `LoadFile` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="97ca7-999">若要启用从远程位置加载的代码的执行，可以使用[ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md)配置元素。</span><span class="sxs-lookup"><span data-stu-id="97ca7-999">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-1000"><paramref name="path" /> 参数不是绝对路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1000">The <paramref name="path" /> argument is not an absolute path.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1001"><paramref name="path" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1001">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1002">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1002">A file that was found could not be loaded.</span></span>

<span data-ttu-id="97ca7-1003">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1003">-or-</span></span>

<span data-ttu-id="97ca7-1004">在远程程序集中执行代码的功能已禁用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1004">The ability to execute code in remote assemblies is disabled.</span></span> <span data-ttu-id="97ca7-1005">请参阅 <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1005">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-1006"><paramref name="path" /> 参数为空字符串 ("") 或不存在。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1006">The <paramref name="path" /> parameter is an empty string ("") or does not exist.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1007"><paramref name="path" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1007"><paramref name="path" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-1008">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1008">-or-</span></span> 
<span data-ttu-id="97ca7-1009">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="path" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1009">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="path" /> was compiled with a later version.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-1010">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1010">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="97ca7-1011">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1011">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-1012">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1012">to load an assembly with evidence.</span></span> <span data-ttu-id="97ca7-1013">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1013">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFile (string path, System.Security.Policy.Evidence securityEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFile(string path, class System.Security.Policy.Evidence securityEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFile (path As String, securityEvidence As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFile(System::String ^ path, System::Security::Policy::Evidence ^ securityEvidence);" />
      <MemberSignature Language="F#" Value="static member LoadFile : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFile (path, securityEvidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of LoadFile which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="97ca7-1014">程序集文件的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1014">The fully qualified path of the assembly file.</span></span></param>
        <param name="securityEvidence"><span data-ttu-id="97ca7-1015">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1015">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-1016">通过给定的程序集的路径来加载程序集，使用提供的证据将程序集加载到调用方的域中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1016">Loads an assembly given its path, loading the assembly into the domain of the caller using the supplied evidence.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1017">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1017">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1018">使用<xref:System.Reflection.Assembly.LoadFile%2A>方法来加载和检查程序集具有相同的标识，但位于不同的路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1018">Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths.</span></span> <span data-ttu-id="97ca7-1019"><xref:System.Reflection.Assembly.LoadFile%2A> 不会加载到的文件<xref:System.Reflection.Assembly.LoadFrom%2A>上下文中，且无法解决依赖项加载路径中，使用作为<xref:System.Reflection.Assembly.LoadFrom%2A>方法执行。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1019"><xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the <xref:System.Reflection.Assembly.LoadFrom%2A> context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does.</span></span> <span data-ttu-id="97ca7-1020"><xref:System.Reflection.Assembly.LoadFile%2A> 此限制的情况下很有用因为<xref:System.Reflection.Assembly.LoadFrom%2A>不能用于加载程序集具有相同标识但不同的路径; 它将加载只有第一个此类程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1020"><xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.</span></span>  

<span data-ttu-id="97ca7-1021">从.NET Framework 4 开始，如果`path`在远程位置中指定的程序集、 程序集加载默认情况下，处于禁用状态并`LoadFile`方法会抛出<xref:System.IO.FileLoadException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1021">Starting with .NET Framework 4, if `path` specifies an assembly in a remote location, assembly loading is disabled by default, and the `LoadFile` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="97ca7-1022">若要启用从远程位置加载的代码的执行，可以使用[ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md)配置元素。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1022">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-1023"><paramref name="path" /> 参数不是绝对路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1023">The <paramref name="path" /> argument is not an absolute path.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1024"><paramref name="path" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1024">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-1025"><paramref name="path" /> 参数为空字符串 ("") 或不存在。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1025">The <paramref name="path" /> parameter is an empty string ("") or does not exist.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1026">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1026">A file that was found could not be loaded.</span></span>

<span data-ttu-id="97ca7-1027">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1027">-or-</span></span>

<span data-ttu-id="97ca7-1028">在远程程序集中执行代码的功能已禁用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1028">The ability to execute code in remote assemblies is disabled.</span></span> <span data-ttu-id="97ca7-1029">请参阅 <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1029">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1030"><paramref name="path" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1030"><paramref name="path" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-1031">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1031">-or-</span></span> 
<span data-ttu-id="97ca7-1032">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="path" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1032">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="path" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="97ca7-1033"><paramref name="securityEvidence" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1033"><paramref name="securityEvidence" /> is not <see langword="null" />.</span></span> <span data-ttu-id="97ca7-1034">默认情况下，[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中未启用旧版 CAS 策略；如果未启用，则 <paramref name="securityEvidence" /> 必须为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1034">By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <paramref name="securityEvidence" /> must be <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-1035">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1035">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="97ca7-1036">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1036">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-1037">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1037">to load an assembly with evidence.</span></span> <span data-ttu-id="97ca7-1038">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1038">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-1039">加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1039">Loads an assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
             
## Remarks

<span data-ttu-id="97ca7-1040">从.NET Framework 4 开始，在从远程位置加载的程序集执行代码的功能已禁用默认情况下，在调用`LoadFrom`方法会抛出<xref:System.IO.FileLoadException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1040">Starting with .NET Framework 4, the ability to execute code in assemblies loaded from remote locations is disabled by default, and the call to the `LoadFrom` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="97ca7-1041">若要加载的程序集和执行其代码，您必须：</span><span class="sxs-lookup"><span data-stu-id="97ca7-1041">To load the assembly and execute its code, you must either:</span></span>

- <span data-ttu-id="97ca7-1042">显式程序集创建一个沙盒。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1042">Explicitly create a sandbox for the assembly.</span></span> <span data-ttu-id="97ca7-1043">（请参阅[如何：运行沙盒中部分受信任的代码](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md)。)</span><span class="sxs-lookup"><span data-stu-id="97ca7-1043">(See [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).)</span></span>

- <span data-ttu-id="97ca7-1044">在完全信任环境中运行程序集的代码，通过设置`enabled`的属性[`<loadFromRemoteSources>`配置元素](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md)到`true`。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1044">Run the assembly's code in full trust by setting the `enabled` attribute of the [`<loadFromRemoteSources>` configuration element](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) to `true`.</span></span> <span data-ttu-id="97ca7-1045">有关详细信息，请参阅[`<loadFromRemoteSources>`配置元素](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md)一文。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1045">For more information, see the [`<loadFromRemoteSources>` configuration element](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) article.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFrom (string assemblyFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFrom(string assemblyFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFrom(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFrom (assemblyFile As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFrom(System::String ^ assemblyFile);" />
      <MemberSignature Language="F#" Value="static member LoadFrom : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFrom assemblyFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="97ca7-1046">包含程序集清单的文件的名称或路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1046">The name or path of the file that contains the manifest of the assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-1047">已知程序集的文件名或路径，加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1047">Loads an assembly given its file name or path.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1048">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1048">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1049">`assemblyFile`参数必须引用不包含转义符的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1049">The `assemblyFile` parameter must refer to a URI without escape characters.</span></span> <span data-ttu-id="97ca7-1050">此方法提供的 URI 中的所有无效字符的转义符。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1050">This method supplies escape characters for all invalid characters in the URI.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-1051">不支持文件传输协议 (FTP)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1051">File transfer protocol (FTP) is not supported.</span></span> <span data-ttu-id="97ca7-1052">如果为 URI 提供`assemblyFile`是 FTP 地址，则不会加载该程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1052">If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded.</span></span> <span data-ttu-id="97ca7-1053">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1053">No exception is thrown.</span></span>  
  
 <span data-ttu-id="97ca7-1054">`assemblyFile` 可以是绝对或相对于当前目录，并将程序集加载到调用方的域。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1054">`assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.</span></span>  
  
 <span data-ttu-id="97ca7-1055">程序集可以将加载到三个上下文中的一个，也可以在没有上下文的情况下加载：</span><span class="sxs-lookup"><span data-stu-id="97ca7-1055">Assemblies can be loaded into one of three contexts, or can be loaded without context:</span></span>  
  
-   <span data-ttu-id="97ca7-1056">加载上下文包含通过探测找到的程序集： 在 gac 中，在宿主程序集存储托管运行时，或在<xref:System.AppDomainSetup.ApplicationBase%2A>和<xref:System.AppDomainSetup.PrivateBinPath%2A>的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1056">The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain.</span></span> <span data-ttu-id="97ca7-1057"><xref:System.Reflection.Assembly.Load%2A> 方法的大多数重载都将程序集加载到此上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1057">Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.</span></span>  
  
-   <span data-ttu-id="97ca7-1058">加载位置上下文包含程序集为其用户提供了不包括在搜索通过探测的目录的路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1058">The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing.</span></span> <span data-ttu-id="97ca7-1059"><xref:System.Reflection.Assembly.LoadFrom%2A>、<xref:System.AppDomain.CreateInstanceFrom%2A> 和 <xref:System.AppDomain.ExecuteAssembly%2A> 都是通过路径加载的方法的示例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1059"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.</span></span> 

    <span data-ttu-id="97ca7-1060">从.NET Framework 4 开始，如果的 URI`assemblyFile`指定远程位置，默认情况下，禁用程序集加载和`LoadFrom`方法会抛出<xref:System.IO.FileLoadException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1060">Starting with .NET Framework 4, if the URI of `assemblyFile` specifies a remote location, assembly loading is disabled by default, and the `LoadFrom` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="97ca7-1061">若要启用从远程位置加载的代码的执行，可以使用[ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md)配置元素。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1061">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    
  
-   <span data-ttu-id="97ca7-1062">仅限反射上下文包含与加载的程序集<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>和<xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A>方法; 在这些代码不能执行上下文。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1062">The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.</span></span>  
  
-   <span data-ttu-id="97ca7-1063">如果用户生成或找到了程序集时，它不在任何上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1063">If the user generated or found the assembly, it is not in any context.</span></span> <span data-ttu-id="97ca7-1064">这适用于使用重载的加载程序集<xref:System.Reflection.Assembly.Load%2A>方法指定一个字节数组，包含程序集，并使用反射创建瞬态动态程序集发出和未保存到磁盘。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1064">This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.</span></span>  
  
 <span data-ttu-id="97ca7-1065">加载位置上下文允许从探测中, 未包括的路径加载程序集，但若要找出并加载，因为路径信息由上下文维护该路径上也允许使用依赖项。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1065">The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.</span></span>  
  
 <span data-ttu-id="97ca7-1066"><xref:System.Reflection.Assembly.LoadFrom%2A>方法具有以下缺点。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1066">The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages.</span></span> <span data-ttu-id="97ca7-1067">请考虑改用 <xref:System.Reflection.Assembly.Load%2A>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1067">Consider using <xref:System.Reflection.Assembly.Load%2A> instead.</span></span>  
  
-   <span data-ttu-id="97ca7-1068">如果已加载一个具有相同标识的程序集，则即使指定了不同的路径，<xref:System.Reflection.Assembly.LoadFrom%2A> 仍返回已加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1068">If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.</span></span>  
  
-   <span data-ttu-id="97ca7-1069">如果程序集加载了<xref:System.Reflection.Assembly.LoadFrom%2A>，以及更高版本中的加载上下文的程序集尝试按显示名称加载同一程序集，加载尝试将失败。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1069">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.</span></span> <span data-ttu-id="97ca7-1070">这可能执行反序列化程序集时。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1070">This can occur when an assembly is de-serialized.</span></span>  
  
-   <span data-ttu-id="97ca7-1071">如果程序集加载了<xref:System.Reflection.Assembly.LoadFrom%2A>，并且探测路径包括具有相同标识，而另一个位置的程序集<xref:System.InvalidCastException>， <xref:System.MissingMethodException>，否则会发生其他意外的行为。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1071">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.</span></span>  
  
-   <span data-ttu-id="97ca7-1072"><xref:System.Reflection.Assembly.LoadFrom%2A> 需要对指定路径的 <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> 和 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType> 或 <xref:System.Net.WebPermission>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1072"><xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType>, or <xref:System.Net.WebPermission>, on the specified path.</span></span>  
  
-   <span data-ttu-id="97ca7-1073">如果本机映像存在`assemblyFile`，不使用它。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1073">If a native image exists for `assemblyFile`, it is not used.</span></span> <span data-ttu-id="97ca7-1074">无法加载为非特定域的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1074">The assembly cannot be loaded as domain neutral.</span></span>  
  
-   <span data-ttu-id="97ca7-1075">在.NET Framework 1.0 和 1.1 版中，不应用策略。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1075">In the .NET Framework version 1.0 and 1.1, policy is not applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-1076">下面的示例加载给定的文件名或路径的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1076">The following example loads an assembly given its file name or path.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#11)]
 [!code-csharp[System.Reflection.Assembly#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#11)]
 [!code-vb[System.Reflection.Assembly#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1077"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1077"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-1078">未找到 <paramref name="assemblyFile" />，或者你正在试图加载的模块未指定文件名扩展。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1078"><paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1079">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1079">A file that was found could not be loaded.</span></span>

<span data-ttu-id="97ca7-1080">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1080">-or-</span></span>

<span data-ttu-id="97ca7-1081">在远程程序集中执行代码的功能已禁用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1081">The ability to execute code in remote assemblies is disabled.</span></span> <span data-ttu-id="97ca7-1082">请参阅 <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1082">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1083"><paramref name="assemblyFile" /> 不是有效的程序集 ；例如 64 位进程中的 32 位程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1083"><paramref name="assemblyFile" /> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.</span></span> <span data-ttu-id="97ca7-1084">有关详细信息，请参阅异常主题。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1084">See the exception topic for more information.</span></span>  
  
<span data-ttu-id="97ca7-1085">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1085">-or-</span></span> 
<span data-ttu-id="97ca7-1086">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1086">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="97ca7-1087">指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1087">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-1088"><paramref name="assemblyFile" /> 参数为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1088">The <paramref name="assemblyFile" /> parameter is an empty string ("").</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="97ca7-1089">程序集名称超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1089">The assembly name exceeds the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-1090">用于读取以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1090">for reading a URI that begins with "file://".</span></span> <span data-ttu-id="97ca7-1091">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1091">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="97ca7-1092">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1092">for reading a URI that does not begin with "file://".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="LoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFrom(string assemblyFile, class System.Security.Policy.Evidence securityEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFrom (assemblyFile As String, securityEvidence As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFrom(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ securityEvidence);" />
      <MemberSignature Language="F#" Value="static member LoadFrom : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFrom (assemblyFile, securityEvidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of LoadFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="97ca7-1093">包含程序集清单的文件的名称或路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1093">The name or path of the file that contains the manifest of the assembly.</span></span></param>
        <param name="securityEvidence"><span data-ttu-id="97ca7-1094">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1094">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-1095">在给定程序集的文件名或路径并提供安全证据的情况下，加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1095">Loads an assembly given its file name or path and supplying security evidence.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1096">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1096">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1097">`assemblyFile`参数必须引用不包含转义符的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1097">The `assemblyFile` parameter must refer to a URI without escape characters.</span></span> <span data-ttu-id="97ca7-1098">此方法提供的 URI 中的所有无效字符的转义符。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1098">This method supplies escape characters for all invalid characters in the URI.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-1099">不支持文件传输协议 (FTP)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1099">File transfer protocol (FTP) is not supported.</span></span> <span data-ttu-id="97ca7-1100">如果为 URI 提供`assemblyFile`是 FTP 地址，则不会加载该程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1100">If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded.</span></span> <span data-ttu-id="97ca7-1101">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1101">No exception is thrown.</span></span>  
  
 <span data-ttu-id="97ca7-1102">`assemblyFile` 可以是绝对或相对于当前目录，并将程序集加载到调用方的域。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1102">`assemblyFile` may be absolute or  relative to the current directory, and the assembly is loaded into the domain of the caller.</span></span>  
  
 <span data-ttu-id="97ca7-1103">程序集可以将加载到三个上下文中的一个，也可以在没有上下文的情况下加载：</span><span class="sxs-lookup"><span data-stu-id="97ca7-1103">Assemblies can be loaded into one of three contexts, or can be loaded without context:</span></span>  
  
-   <span data-ttu-id="97ca7-1104">加载上下文包含通过探测找到的程序集： 在 gac 中，在宿主程序集存储托管运行时，或在<xref:System.AppDomainSetup.ApplicationBase%2A>和<xref:System.AppDomainSetup.PrivateBinPath%2A>的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1104">The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain.</span></span> <span data-ttu-id="97ca7-1105"><xref:System.Reflection.Assembly.Load%2A> 方法的大多数重载都将程序集加载到此上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1105">Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.</span></span>  
  
-   <span data-ttu-id="97ca7-1106">加载位置上下文包含程序集为其用户提供了不包括在搜索通过探测的目录的路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1106">The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing.</span></span> <span data-ttu-id="97ca7-1107"><xref:System.Reflection.Assembly.LoadFrom%2A>、<xref:System.AppDomain.CreateInstanceFrom%2A> 和 <xref:System.AppDomain.ExecuteAssembly%2A> 都是通过路径加载的方法的示例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1107"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.</span></span>

    <span data-ttu-id="97ca7-1108">从.NET Framework 4 开始，如果的 URI`assemblyFile`指定远程位置，默认情况下，禁用程序集加载和`LoadFrom`方法会抛出<xref:System.IO.FileLoadException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1108">Starting with .NET Framework 4, if the URI of `assemblyFile` specifies a remote location, assembly loading is disabled by default, and the `LoadFrom` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="97ca7-1109">若要启用从远程位置加载的代码的执行，可以使用[ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md)配置元素。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1109">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    
  
-   <span data-ttu-id="97ca7-1110">仅限反射上下文包含与加载的程序集<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>和<xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A>方法; 在这些代码不能执行上下文。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1110">The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.</span></span>  
  
-   <span data-ttu-id="97ca7-1111">如果用户生成或找到了程序集时，它不在任何上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1111">If the user generated or found the assembly, it is not in any context.</span></span> <span data-ttu-id="97ca7-1112">这适用于使用重载的加载程序集<xref:System.Reflection.Assembly.Load%2A>方法指定一个字节数组，包含程序集，并使用反射创建瞬态动态程序集发出和未保存到磁盘。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1112">This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.</span></span>  
  
 <span data-ttu-id="97ca7-1113">加载位置上下文允许从探测中, 未包括的路径加载程序集，但若要找出并加载，因为路径信息由上下文维护该路径上也允许使用依赖项。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1113">The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.</span></span>  
  
 <span data-ttu-id="97ca7-1114"><xref:System.Reflection.Assembly.LoadFrom%2A>方法具有以下缺点。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1114">The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages.</span></span> <span data-ttu-id="97ca7-1115">请考虑改用 <xref:System.Reflection.Assembly.Load%2A>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1115">Consider using <xref:System.Reflection.Assembly.Load%2A> instead.</span></span>  
  
-   <span data-ttu-id="97ca7-1116">如果已加载一个具有相同标识的程序集，则即使指定了不同的路径，<xref:System.Reflection.Assembly.LoadFrom%2A> 仍返回已加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1116">If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.</span></span>  
  
-   <span data-ttu-id="97ca7-1117">如果程序集加载了<xref:System.Reflection.Assembly.LoadFrom%2A>，以及更高版本中的加载上下文的程序集尝试按显示名称加载同一程序集，加载尝试将失败。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1117">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.</span></span> <span data-ttu-id="97ca7-1118">对程序集进行反序列化时，可能发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1118">This can occur when an assembly is deserialized.</span></span>  
  
-   <span data-ttu-id="97ca7-1119">如果程序集加载了<xref:System.Reflection.Assembly.LoadFrom%2A>，并且探测路径包括具有相同标识，而另一个位置的程序集<xref:System.InvalidCastException>， <xref:System.MissingMethodException>，否则会发生其他意外的行为。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1119">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.</span></span>  
  
-   <span data-ttu-id="97ca7-1120"><xref:System.Reflection.Assembly.LoadFrom%2A> 需要对指定路径的 <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> 和 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType> 或 <xref:System.Net.WebPermission>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1120"><xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType>, or <xref:System.Net.WebPermission>, on the specified path.</span></span>  
  
-   <span data-ttu-id="97ca7-1121">如果本机映像存在`assemblyFile`，不使用它。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1121">If a native image exists for `assemblyFile`, it is not used.</span></span> <span data-ttu-id="97ca7-1122">无法加载为非特定域的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1122">The assembly cannot be loaded as domain neutral.</span></span>  
  
-   <span data-ttu-id="97ca7-1123">在.NET Framework 1.0 和 1.1 版中，不应用策略。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1123">In the .NET Framework version 1.0 and 1.1, policy is not applied.</span></span>  
  
 <span data-ttu-id="97ca7-1124">是否将特定的权限授予程序集是基于证据的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1124">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="97ca7-1125">程序集和安全证据的合并的规则如下所示：</span><span class="sxs-lookup"><span data-stu-id="97ca7-1125">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="97ca7-1126">当你使用<xref:System.Reflection.Assembly.LoadFrom%2A>方法没有<xref:System.Security.Policy.Evidence>参数，则加载程序提供的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1126">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="97ca7-1127">当你使用<xref:System.Reflection.Assembly.LoadFrom%2A>方法替换<xref:System.Security.Policy.Evidence>参数，证据进行合并。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1127">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="97ca7-1128">作为参数提供的证据<xref:System.Reflection.Assembly.LoadFrom%2A>方法取代加载程序提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1128">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="97ca7-1129">如果在同一程序集，但指定不同的证据不止一次调用此方法，公共语言运行时不会引发<xref:System.IO.FileLoadException>由于不能确定相等性和不同的证据规范的完整性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1129">If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined.</span></span> <span data-ttu-id="97ca7-1130">第一个成功的证据为使用的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1130">The evidence that first succeeds is the evidence that is used.</span></span>  
  
-   <span data-ttu-id="97ca7-1131">当你使用<xref:System.Reflection.Assembly.LoadFrom%2A>方法替换`Byte[]`参数加载通用对象文件格式 (COFF) 图像，证据结合使用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1131">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined.</span></span> <span data-ttu-id="97ca7-1132">`Zone``Url`并`Site`继承自调用程序集，并`Hash`和`StrongName`取自 COFF 程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1132">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="97ca7-1133">当你使用<xref:System.Reflection.Assembly.LoadFrom%2A>方法替换`Byte[]`参数和<xref:System.Security.Policy.Evidence>若要加载的 COFF 映像，请使用提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1133">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="97ca7-1134">将忽略的调用程序集和 COFF 映像的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1134">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1135"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1135"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-1136">未找到 <paramref name="assemblyFile" />，或者你正在试图加载的模块未指定文件名扩展。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1136"><paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1137">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1137">A file that was found could not be loaded.</span></span>  
  
<span data-ttu-id="97ca7-1138">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1138">-or-</span></span> 
<span data-ttu-id="97ca7-1139"><paramref name="securityEvidence" /> 是明确的，但被确定为无效。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1139">The <paramref name="securityEvidence" /> is not ambiguous and is determined to be invalid.</span></span>

<span data-ttu-id="97ca7-1140">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1140">-or-</span></span>

<span data-ttu-id="97ca7-1141">在远程程序集中执行代码的功能已禁用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1141">The ability to execute code in remote assemblies is disabled.</span></span> <span data-ttu-id="97ca7-1142">请参阅 <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1142">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1143"><paramref name="assemblyFile" /> 不是有效的程序集 ；例如 64 位进程中的 32 位程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1143"><paramref name="assemblyFile" /> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.</span></span> <span data-ttu-id="97ca7-1144">有关详细信息，请参阅异常主题。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1144">See the exception topic for more information.</span></span>  
  
<span data-ttu-id="97ca7-1145">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1145">-or-</span></span> 
<span data-ttu-id="97ca7-1146">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1146">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="97ca7-1147">指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1147">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-1148"><paramref name="assemblyFile" /> 参数为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1148">The <paramref name="assemblyFile" /> parameter is an empty string ("").</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="97ca7-1149">程序集名称超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1149">The assembly name exceeds the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-1150">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1150">to load an assembly with evidence.</span></span> <span data-ttu-id="97ca7-1151">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1151">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-1152">用于读取以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1152">for reading a URI that begins with "file://".</span></span> <span data-ttu-id="97ca7-1153">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1153">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="97ca7-1154">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1154">for reading a URI that does not begin with "file://".</span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="LoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFrom (string assemblyFile, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFrom(string assemblyFile, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFrom (assemblyFile As String, hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFrom(System::String ^ assemblyFile, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="F#" Value="static member LoadFrom : string * byte[] * System.Configuration.Assemblies.AssemblyHashAlgorithm -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFrom (assemblyFile, hashValue, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hashValue" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="97ca7-1155">包含程序集清单的文件的名称或路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1155">The name or path of the file that contains the manifest of the assembly.</span></span></param>
        <param name="hashValue"><span data-ttu-id="97ca7-1156">计算所得的哈希代码的值。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1156">The value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="97ca7-1157">用于对文件进行哈希处理并生成强名称的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1157">The hash algorithm used for hashing files and for generating the strong name.</span></span></param>
        <summary><span data-ttu-id="97ca7-1158">通过给定程序集文件名或路径、哈希值及哈希算法来加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1158">Loads an assembly given its file name or path, hash value, and hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1159">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1159">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1160">`assemblyFile`参数必须引用不包含转义符的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1160">The `assemblyFile` parameter must refer to a URI without escape characters.</span></span> <span data-ttu-id="97ca7-1161">此方法提供的 URI 中的所有无效字符的转义符。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1161">This method supplies escape characters for all invalid characters in the URI.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-1162">不支持文件传输协议 (FTP)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1162">File transfer protocol (FTP) is not supported.</span></span> <span data-ttu-id="97ca7-1163">如果为 URI 提供`assemblyFile`是 FTP 地址，则不会加载该程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1163">If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded.</span></span> <span data-ttu-id="97ca7-1164">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1164">No exception is thrown.</span></span>  
  
 <span data-ttu-id="97ca7-1165">`assemblyFile` 可以是绝对或相对于当前目录，并将程序集加载到调用方的域。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1165">`assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.</span></span>  
  
 <span data-ttu-id="97ca7-1166">程序集可以将加载到三个上下文中的一个，也可以在没有上下文的情况下加载：</span><span class="sxs-lookup"><span data-stu-id="97ca7-1166">Assemblies can be loaded into one of three contexts, or can be loaded without context:</span></span>  
  
-   <span data-ttu-id="97ca7-1167">加载上下文包含通过探测找到的程序集： 在全局程序集缓存中，在宿主程序集存储托管运行时，或在<xref:System.AppDomainSetup.ApplicationBase%2A>和<xref:System.AppDomainSetup.PrivateBinPath%2A>的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1167">The load context contains assemblies found by probing: in the global assembly cache, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain.</span></span> <span data-ttu-id="97ca7-1168"><xref:System.Reflection.Assembly.Load%2A> 方法的大多数重载都将程序集加载到此上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1168">Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.</span></span>  
  
-   <span data-ttu-id="97ca7-1169">加载位置上下文包含程序集为其用户提供了探测中未包括的路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1169">The load-from context contains assemblies for which the user provided a path that is not included in probing.</span></span> <span data-ttu-id="97ca7-1170"><xref:System.Reflection.Assembly.LoadFrom%2A>、<xref:System.AppDomain.CreateInstanceFrom%2A> 和 <xref:System.AppDomain.ExecuteAssembly%2A> 都是通过路径加载的方法的示例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1170"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.</span></span>  

    <span data-ttu-id="97ca7-1171">从.NET Framework 4 开始，如果的 URI`assemblyFile`指定远程位置，默认情况下，禁用程序集加载和`LoadFrom`方法会抛出<xref:System.IO.FileLoadException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1171">Starting with .NET Framework 4, if the URI of `assemblyFile` specifies a remote location, assembly loading is disabled by default, and the `LoadFrom` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="97ca7-1172">若要启用从远程位置加载的代码的执行，可以使用[ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md)配置元素。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1172">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    
  
-   <span data-ttu-id="97ca7-1173">仅限反射上下文包含与加载的程序集<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>和<xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A>方法; 在这些代码不能执行上下文。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1173">The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.</span></span>  
  
-   <span data-ttu-id="97ca7-1174">如果用户生成或找到了程序集时，它不在任何上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1174">If the user generated or found the assembly, it is not in any context.</span></span> <span data-ttu-id="97ca7-1175">这适用于使用重载的加载程序集<xref:System.Reflection.Assembly.Load%2A>方法指定一个字节数组，包含程序集，并使用反射创建瞬态动态程序集发出和未保存到磁盘。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1175">This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.</span></span>  
  
 <span data-ttu-id="97ca7-1176">加载位置上下文允许从探测中, 未包括的路径加载程序集，但若要找出并加载，因为路径信息由上下文维护该路径上也允许使用依赖项。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1176">The load-from context allows an assembly to be loaded from a path that is not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.</span></span>  
  
 <span data-ttu-id="97ca7-1177"><xref:System.Reflection.Assembly.LoadFrom%2A>方法具有以下缺点。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1177">The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages.</span></span> <span data-ttu-id="97ca7-1178">请考虑改用 <xref:System.Reflection.Assembly.Load%2A>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1178">Consider using <xref:System.Reflection.Assembly.Load%2A> instead.</span></span>  
  
-   <span data-ttu-id="97ca7-1179">如果已加载一个具有相同标识的程序集，则即使指定了不同的路径，<xref:System.Reflection.Assembly.LoadFrom%2A> 仍返回已加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1179">If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.</span></span>  
  
-   <span data-ttu-id="97ca7-1180">如果程序集加载了<xref:System.Reflection.Assembly.LoadFrom%2A>，以及更高版本中的加载上下文的程序集尝试按显示名称加载同一程序集，加载尝试将失败。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1180">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.</span></span> <span data-ttu-id="97ca7-1181">对程序集进行反序列化时，可能发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1181">This can occur when an assembly is deserialized.</span></span>  
  
-   <span data-ttu-id="97ca7-1182">如果程序集加载了<xref:System.Reflection.Assembly.LoadFrom%2A>，并且探测路径包括具有相同标识，而另一个位置的程序集<xref:System.InvalidCastException>， <xref:System.MissingMethodException>，否则会发生其他意外的行为。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1182">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.</span></span>  
  
-   <span data-ttu-id="97ca7-1183"><xref:System.Reflection.Assembly.LoadFrom%2A> 需要对指定路径的 <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> 和 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType> 或 <xref:System.Net.WebPermission>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1183"><xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType>, or <xref:System.Net.WebPermission>, on the specified path.</span></span>  
  
-   <span data-ttu-id="97ca7-1184">如果本机映像存在`assemblyFile`，不使用它。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1184">If a native image exists for `assemblyFile`, it is not used.</span></span> <span data-ttu-id="97ca7-1185">程序集不能以非特定于域的方式加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1185">The assembly cannot be loaded as domain-neutral.</span></span>  
  
 <span data-ttu-id="97ca7-1186">程序集的加载程序提供的证据加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1186">The assembly is loaded with the evidence that the loader supplies.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1187"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1187"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-1188">未找到 <paramref name="assemblyFile" />，或者你正在试图加载的模块未指定文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1188"><paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a file name extension.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1189">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1189">A file that was found could not be loaded.</span></span>

<span data-ttu-id="97ca7-1190">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1190">-or-</span></span>

<span data-ttu-id="97ca7-1191">在远程程序集中执行代码的功能已禁用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1191">The ability to execute code in remote assemblies is disabled.</span></span> <span data-ttu-id="97ca7-1192">请参阅 <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1192">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1193"><paramref name="assemblyFile" /> 不是有效的程序集 ；例如 64 位进程中的 32 位程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1193"><paramref name="assemblyFile" /> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.</span></span> <span data-ttu-id="97ca7-1194">有关详细信息，请参阅异常主题。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1194">See the exception topic for more information.</span></span>  
  
<span data-ttu-id="97ca7-1195">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1195">-or-</span></span> 
 <span data-ttu-id="97ca7-1196"><paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1196"><paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="97ca7-1197">指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1197">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-1198"><paramref name="assemblyFile" /> 参数为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1198">The <paramref name="assemblyFile" /> parameter is an empty string ("").</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="97ca7-1199">程序集名称超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1199">The assembly name exceeds the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-1200">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1200">to load an assembly with evidence.</span></span> <span data-ttu-id="97ca7-1201">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1201">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-1202">用于读取以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1202">for reading a URI that begins with "file://".</span></span> <span data-ttu-id="97ca7-1203">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1203">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="97ca7-1204">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1204">for reading a URI that does not begin with "file://".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="LoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFrom(string assemblyFile, class System.Security.Policy.Evidence securityEvidence, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFrom (assemblyFile As String, securityEvidence As Evidence, hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFrom(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ securityEvidence, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="F#" Value="static member LoadFrom : string * System.Security.Policy.Evidence * byte[] * System.Configuration.Assemblies.AssemblyHashAlgorithm -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFrom (assemblyFile, securityEvidence, hashValue, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of LoadFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashValue" Type="System.Byte[]" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="97ca7-1205">包含程序集清单的文件的名称或路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1205">The name or path of the file that contains the manifest of the assembly.</span></span></param>
        <param name="securityEvidence"><span data-ttu-id="97ca7-1206">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1206">Evidence for loading the assembly.</span></span></param>
        <param name="hashValue"><span data-ttu-id="97ca7-1207">计算所得的哈希代码的值。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1207">The value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="97ca7-1208">用于对文件进行哈希处理并生成强名称的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1208">The hash algorithm used for hashing files and for generating the strong name.</span></span></param>
        <summary><span data-ttu-id="97ca7-1209">通过给定程序集文件名或路径、安全证据、哈希值及哈希算法来加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1209">Loads an assembly given its file name or path, security evidence, hash value, and hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1210">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1210">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1211">`assemblyFile`参数必须引用不包含转义符的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1211">The `assemblyFile` parameter must refer to a URI without escape characters.</span></span> <span data-ttu-id="97ca7-1212">此方法提供的 URI 中的所有无效字符的转义符。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1212">This method supplies escape characters for all invalid characters in the URI.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-1213">不支持文件传输协议 (FTP)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1213">File transfer protocol (FTP) is not supported.</span></span> <span data-ttu-id="97ca7-1214">如果为 URI 提供`assemblyFile`是 FTP 地址，则不会加载该程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1214">If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded.</span></span> <span data-ttu-id="97ca7-1215">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1215">No exception is thrown.</span></span>  
  
 <span data-ttu-id="97ca7-1216">`assemblyFile` 可以是绝对或相对于当前目录，并将程序集加载到调用方的域。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1216">`assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.</span></span>  
  
 <span data-ttu-id="97ca7-1217">程序集可以将加载到三个上下文中的一个，也可以在没有上下文的情况下加载：</span><span class="sxs-lookup"><span data-stu-id="97ca7-1217">Assemblies can be loaded into one of three contexts, or can be loaded without context:</span></span>  
  
-   <span data-ttu-id="97ca7-1218">加载上下文包含通过探测找到的程序集： 在 gac 中，在宿主程序集存储托管运行时，或在<xref:System.AppDomainSetup.ApplicationBase%2A>和<xref:System.AppDomainSetup.PrivateBinPath%2A>的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1218">The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain.</span></span> <span data-ttu-id="97ca7-1219"><xref:System.Reflection.Assembly.Load%2A> 方法的大多数重载都将程序集加载到此上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1219">Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.</span></span>  
  
-   <span data-ttu-id="97ca7-1220">加载位置上下文包含程序集为其用户提供了不包括在搜索通过探测的目录的路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1220">The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing.</span></span> <span data-ttu-id="97ca7-1221"><xref:System.Reflection.Assembly.LoadFrom%2A>、<xref:System.AppDomain.CreateInstanceFrom%2A> 和 <xref:System.AppDomain.ExecuteAssembly%2A> 都是通过路径加载的方法的示例。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1221"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.</span></span>  

    <span data-ttu-id="97ca7-1222">从.NET Framework 4 开始，如果的 URI`assemblyFile`指定远程位置，默认情况下，禁用程序集加载和`LoadFrom`方法会抛出<xref:System.IO.FileLoadException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1222">Starting with .NET Framework 4, if the URI of `assemblyFile` specifies a remote location, assembly loading is disabled by default, and the `LoadFrom` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="97ca7-1223">若要启用从远程位置加载的代码的执行，可以使用[ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md)配置元素。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1223">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    
  
-   <span data-ttu-id="97ca7-1224">仅限反射上下文包含与加载的程序集<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>和<xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A>方法; 在这些代码不能执行上下文。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1224">The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.</span></span>  
  
-   <span data-ttu-id="97ca7-1225">如果用户生成或找到了程序集时，它不在任何上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1225">If the user generated or found the assembly, it is not in any context.</span></span> <span data-ttu-id="97ca7-1226">这适用于使用重载的加载程序集<xref:System.Reflection.Assembly.Load%2A>方法指定一个字节数组，包含程序集，并使用反射创建瞬态动态程序集发出和未保存到磁盘。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1226">This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.</span></span>  
  
 <span data-ttu-id="97ca7-1227">加载位置上下文允许从探测中, 未包括的路径加载程序集，但若要找出并加载，因为路径信息由上下文维护该路径上也允许使用依赖项。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1227">The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.</span></span>  
  
 <span data-ttu-id="97ca7-1228"><xref:System.Reflection.Assembly.LoadFrom%2A>方法具有以下缺点。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1228">The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages.</span></span> <span data-ttu-id="97ca7-1229">请考虑改用 <xref:System.Reflection.Assembly.Load%2A>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1229">Consider using <xref:System.Reflection.Assembly.Load%2A> instead.</span></span>  
  
-   <span data-ttu-id="97ca7-1230">如果已加载一个具有相同标识的程序集，则即使指定了不同的路径，<xref:System.Reflection.Assembly.LoadFrom%2A> 仍返回已加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1230">If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.</span></span>  
  
-   <span data-ttu-id="97ca7-1231">如果程序集加载了<xref:System.Reflection.Assembly.LoadFrom%2A>，以及更高版本中的加载上下文的程序集尝试按显示名称加载同一程序集，加载尝试将失败。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1231">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.</span></span> <span data-ttu-id="97ca7-1232">对程序集进行反序列化时，可能发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1232">This can occur when an assembly is deserialized.</span></span>  
  
-   <span data-ttu-id="97ca7-1233">如果程序集加载了<xref:System.Reflection.Assembly.LoadFrom%2A>，并且探测路径包括具有相同标识，而另一个位置的程序集<xref:System.InvalidCastException>， <xref:System.MissingMethodException>，否则会发生其他意外的行为。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1233">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.</span></span>  
  
-   <span data-ttu-id="97ca7-1234"><xref:System.Reflection.Assembly.LoadFrom%2A> 需要对指定路径的 <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> 和 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType> 或 <xref:System.Net.WebPermission>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1234"><xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType>, or <xref:System.Net.WebPermission>, on the specified path.</span></span>  
  
-   <span data-ttu-id="97ca7-1235">如果本机映像存在`assemblyFile`，不使用它。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1235">If a native image exists for `assemblyFile`, it is not used.</span></span> <span data-ttu-id="97ca7-1236">无法加载为非特定域的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1236">The assembly cannot be loaded as domain neutral.</span></span>  
  
-   <span data-ttu-id="97ca7-1237">在.NET Framework 1.0 和 1.1 版中，不应用策略。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1237">In the .NET Framework version 1.0 and 1.1, policy is not applied.</span></span>  
  
 <span data-ttu-id="97ca7-1238">是否将特定的权限授予程序集是基于证据的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1238">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="97ca7-1239">程序集和安全证据的合并的规则如下所示：</span><span class="sxs-lookup"><span data-stu-id="97ca7-1239">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="97ca7-1240">当你使用<xref:System.Reflection.Assembly.LoadFrom%2A>方法没有<xref:System.Security.Policy.Evidence>参数，则加载程序提供的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1240">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="97ca7-1241">当你使用<xref:System.Reflection.Assembly.LoadFrom%2A>方法替换<xref:System.Security.Policy.Evidence>参数，证据进行合并。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1241">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="97ca7-1242">作为参数提供的证据<xref:System.Reflection.Assembly.LoadFrom%2A>方法取代加载程序提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1242">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="97ca7-1243">如果在同一程序集，但指定不同的证据不止一次调用此方法，公共语言运行时不会引发<xref:System.IO.FileLoadException>由于不能确定相等性和不同的证据规范的完整性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1243">If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined.</span></span> <span data-ttu-id="97ca7-1244">第一个成功的证据为使用的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1244">The evidence that first succeeds is the evidence that is used.</span></span>  
  
-   <span data-ttu-id="97ca7-1245">当你使用<xref:System.Reflection.Assembly.LoadFrom%2A>方法替换`Byte[]`参数加载通用对象文件格式 (COFF) 图像，证据结合使用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1245">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined.</span></span> <span data-ttu-id="97ca7-1246">`Zone``Url`并`Site`继承自调用程序集，并`Hash`和`StrongName`取自 COFF 程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1246">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="97ca7-1247">当你使用<xref:System.Reflection.Assembly.LoadFrom%2A>方法替换`Byte[]`参数和<xref:System.Security.Policy.Evidence>若要加载的 COFF 映像，请使用提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1247">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="97ca7-1248">将忽略的调用程序集和 COFF 映像的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1248">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1249"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1249"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-1250">未找到 <paramref name="assemblyFile" />，或者你正在试图加载的模块未指定文件名扩展。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1250"><paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1251">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1251">A file that was found could not be loaded.</span></span>  
  
<span data-ttu-id="97ca7-1252">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1252">-or-</span></span> 
<span data-ttu-id="97ca7-1253"><paramref name="securityEvidence" /> 是明确的，但被确定为无效。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1253">The <paramref name="securityEvidence" /> is not ambiguous and is determined to be invalid.</span></span>

<span data-ttu-id="97ca7-1254">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1254">-or-</span></span>

<span data-ttu-id="97ca7-1255">在远程程序集中执行代码的功能已禁用。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1255">The ability to execute code in remote assemblies is disabled.</span></span> <span data-ttu-id="97ca7-1256">请参阅 <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1256">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1257"><paramref name="assemblyFile" /> 不是有效的程序集 ；例如 64 位进程中的 32 位程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1257"><paramref name="assemblyFile" /> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.</span></span> <span data-ttu-id="97ca7-1258">有关详细信息，请参阅异常主题。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1258">See the exception topic for more information.</span></span>  
  
<span data-ttu-id="97ca7-1259">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1259">-or-</span></span> 
<span data-ttu-id="97ca7-1260">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1260">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="97ca7-1261">指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1261">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-1262"><paramref name="assemblyFile" /> 参数为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1262">The <paramref name="assemblyFile" /> parameter is an empty string ("").</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="97ca7-1263">程序集名称超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1263">The assembly name exceeds the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-1264">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1264">to load an assembly with evidence.</span></span> <span data-ttu-id="97ca7-1265">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1265">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-1266">用于读取以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1266">for reading a URI that begins with "file://".</span></span> <span data-ttu-id="97ca7-1267">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1267">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="97ca7-1268">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1268">for reading a URI that does not begin with "file://".</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadModule">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-1269">加载此程序集的内部模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1269">Loads the module internal to this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Module LoadModule (string moduleName, byte[] rawModule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module LoadModule(string moduleName, unsigned int8[] rawModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadModule (moduleName As String, rawModule As Byte()) As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Module ^ LoadModule(System::String ^ moduleName, cli::array &lt;System::Byte&gt; ^ rawModule);" />
      <MemberSignature Language="F#" Value="abstract member LoadModule : string * byte[] -&gt; System.Reflection.Module&#xA;override this.LoadModule : string * byte[] -&gt; System.Reflection.Module" Usage="assembly.LoadModule (moduleName, rawModule)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.LoadModule(System.String,System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moduleName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="rawModule" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="moduleName"><span data-ttu-id="97ca7-1270">模块的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1270">The name of the module.</span></span> <span data-ttu-id="97ca7-1271">此字符串必须与程序集清单中的文件名对应。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1271">This string must correspond to a file name in this assembly's manifest.</span></span></param>
        <param name="rawModule"><span data-ttu-id="97ca7-1272">基于 COFF 映像的字节数组，该数组包含发送的模块或资源。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1272">A byte array that is a COFF-based image containing an emitted module, or a resource.</span></span></param>
        <summary><span data-ttu-id="97ca7-1273">加载带有基于通用对象文件格式 (COFF) 的映像（包含已发出的模块）或资源文件的模块（该模块相对于此程序集是内部的）。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1273">Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1274">加载的模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1274">The loaded module.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1275"><paramref name="moduleName" /> 或 <paramref name="rawModule" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1275"><paramref name="moduleName" /> or <paramref name="rawModule" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-1276"><paramref name="moduleName" /> 与此程序集清单中的文件条目不匹配。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1276"><paramref name="moduleName" /> does not match a file entry in this assembly's manifest.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1277"><paramref name="rawModule" /> 不是有效的模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1277"><paramref name="rawModule" /> is not a valid module.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1278">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1278">A file that was found could not be loaded.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-1279">若要提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1279">to provide evidence.</span></span> <span data-ttu-id="97ca7-1280">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1280">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="LoadModule">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module LoadModule (string moduleName, byte[] rawModule, byte[] rawSymbolStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module LoadModule(string moduleName, unsigned int8[] rawModule, unsigned int8[] rawSymbolStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LoadModule (moduleName As String, rawModule As Byte(), rawSymbolStore As Byte()) As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Module ^ LoadModule(System::String ^ moduleName, cli::array &lt;System::Byte&gt; ^ rawModule, cli::array &lt;System::Byte&gt; ^ rawSymbolStore);" />
      <MemberSignature Language="F#" Value="abstract member LoadModule : string * byte[] * byte[] -&gt; System.Reflection.Module&#xA;override this.LoadModule : string * byte[] * byte[] -&gt; System.Reflection.Module" Usage="assembly.LoadModule (moduleName, rawModule, rawSymbolStore)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.LoadModule(System.String,System.Byte[],System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moduleName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="rawModule" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="moduleName"><span data-ttu-id="97ca7-1281">模块的名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1281">The name of the module.</span></span> <span data-ttu-id="97ca7-1282">此字符串必须与程序集清单中的文件名对应。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1282">This string must correspond to a file name in this assembly's manifest.</span></span></param>
        <param name="rawModule"><span data-ttu-id="97ca7-1283">基于 COFF 映像的字节数组，该数组包含发送的模块或资源。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1283">A byte array that is a COFF-based image containing an emitted module, or a resource.</span></span></param>
        <param name="rawSymbolStore"><span data-ttu-id="97ca7-1284">一个字节数组，包含表示模块符号的原始字节。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1284">A byte array containing the raw bytes representing the symbols for the module.</span></span> <span data-ttu-id="97ca7-1285">如果这是一个资源文件，则必须为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1285">Must be <see langword="null" /> if this is a resource file.</span></span></param>
        <summary><span data-ttu-id="97ca7-1286">加载带有基于通用对象文件格式 (COFF) 的映像（包含已发出的模块）或资源文件的模块（该模块相对于此程序集是内部的）。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1286">Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.</span></span> <span data-ttu-id="97ca7-1287">还加载表示此模块的符号的原始字节。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1287">The raw bytes representing the symbols for the module are also loaded.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1288">加载的模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1288">The loaded module.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1289"><paramref name="moduleName" /> 或 <paramref name="rawModule" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1289"><paramref name="moduleName" /> or <paramref name="rawModule" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-1290"><paramref name="moduleName" /> 与此程序集清单中的文件条目不匹配。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1290"><paramref name="moduleName" /> does not match a file entry in this assembly's manifest.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1291"><paramref name="rawModule" /> 不是有效的模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1291"><paramref name="rawModule" /> is not a valid module.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1292">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1292">A file that was found could not be loaded.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-1293">若要提供的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1293">to provide evidence.</span></span> <span data-ttu-id="97ca7-1294">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1294">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadWithPartialName">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-1295">使用部分名称从应用程序目录或从全局程序集缓存加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1295">Loads an assembly from the application directory or from the global assembly cache using a partial name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="97ca7-1296">重载<xref:System.Reflection.Assembly.LoadWithPartialName%2A?displayProperty=nameWithType>方法已过时，并已保留用于向后兼容。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1296">The overloads of the <xref:System.Reflection.Assembly.LoadWithPartialName%2A?displayProperty=nameWithType> method are obsolete and have been retained for backward compatibility.</span></span> <span data-ttu-id="97ca7-1297">未过时的替代项为 <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1297">The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadWithPartialName">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadWithPartialName (string partialName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadWithPartialName(string partialName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadWithPartialName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadWithPartialName (partialName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadWithPartialName(System::String ^ partialName);" />
      <MemberSignature Language="F#" Value="static member LoadWithPartialName : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadWithPartialName partialName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use Assembly.Load() instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use Assembly.Load() instead. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partialName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="partialName"><span data-ttu-id="97ca7-1298">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1298">The display name of the assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-1299">使用部分名称从应用程序目录或从全局程序集缓存加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1299">Loads an assembly from the application directory or from the global assembly cache using a partial name.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1300">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1300">The loaded assembly.</span></span> <span data-ttu-id="97ca7-1301">如果未找到 <paramref name="partialName" />，此方法将返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1301">If <paramref name="partialName" /> is not found, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="97ca7-1302"><xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%29>方法已过时，已保留用于向后兼容。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1302">The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%29> method is obsolete and has been retained for backward compatibility.</span></span> <span data-ttu-id="97ca7-1303">未过时的替代项为 <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1303">The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="97ca7-1304">使用此方法加载程序集的应用程序将受这些程序集的升级。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1304">Applications that load assemblies with this method will be affected by upgrades of those assemblies.</span></span> <span data-ttu-id="97ca7-1305">因此，不使用此方法。重新设计应用程序以使用<xref:System.Reflection.Assembly.Load%28System.String%29>方法重载或<xref:System.Reflection.Assembly.LoadFrom%28System.String%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1305">Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%28System.String%29> method overload or the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.</span></span>  
  
 <span data-ttu-id="97ca7-1306">此方法首先调用<xref:System.Reflection.Assembly.Load%2A>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1306">This method first calls <xref:System.Reflection.Assembly.Load%2A>.</span></span> <span data-ttu-id="97ca7-1307">如果找不到程序集，此方法将返回从全局程序集缓存具有相同的简单名称和最高版本号的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1307">If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1308"><paramref name="partialName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1308">The <paramref name="partialName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1309"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1309"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-1310">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1310">-or-</span></span> 
<span data-ttu-id="97ca7-1311">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="partialName" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1311">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="partialName" /> was compiled with a later version.</span></span></exception>
        <altmember cref="M:System.Reflection.Assembly.Load(System.String)" />
        <altmember cref="M:System.Reflection.Assembly.LoadFrom(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LoadWithPartialName">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadWithPartialName (string partialName, System.Security.Policy.Evidence securityEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadWithPartialName(string partialName, class System.Security.Policy.Evidence securityEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadWithPartialName (partialName As String, securityEvidence As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadWithPartialName(System::String ^ partialName, System::Security::Policy::Evidence ^ securityEvidence);" />
      <MemberSignature Language="F#" Value="static member LoadWithPartialName : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadWithPartialName (partialName, securityEvidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use Assembly.Load() instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partialName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="partialName"><span data-ttu-id="97ca7-1312">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1312">The display name of the assembly.</span></span></param>
        <param name="securityEvidence"><span data-ttu-id="97ca7-1313">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1313">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-1314">使用部分名称从应用程序目录或从全局程序集缓存加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1314">Loads an assembly from the application directory or from the global assembly cache using a partial name.</span></span> <span data-ttu-id="97ca7-1315">使用提供的证据将该程序集加载到调用方的域中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1315">The assembly is loaded into the domain of the caller using the supplied evidence.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1316">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1316">The loaded assembly.</span></span> <span data-ttu-id="97ca7-1317">如果未找到 <paramref name="partialName" />，此方法将返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1317">If <paramref name="partialName" /> is not found, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="97ca7-1318"><xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%2CSystem.Security.Policy.Evidence%29>方法已过时，已保留用于向后兼容。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1318">The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%2CSystem.Security.Policy.Evidence%29> method is obsolete and has been retained for backward compatibility.</span></span> <span data-ttu-id="97ca7-1319">未过时的替代项为 <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1319">The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="97ca7-1320">证据是输入安全策略决策的一组信息（如代码可授予哪些权限）。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1320">Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.</span></span>  
  
 <span data-ttu-id="97ca7-1321">使用此方法加载程序集的应用程序将受这些程序集的升级。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1321">Applications that load assemblies with this method will be affected by upgrades of those assemblies.</span></span> <span data-ttu-id="97ca7-1322">因此，不使用此方法。重新设计应用程序以使用<xref:System.Reflection.Assembly.Load%2A>方法或<xref:System.Reflection.Assembly.LoadFrom%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1322">Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%2A> method or the <xref:System.Reflection.Assembly.LoadFrom%2A> method.</span></span>  
  
 <span data-ttu-id="97ca7-1323">此方法首先调用<xref:System.Reflection.Assembly.Load%2A>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1323">This method first calls <xref:System.Reflection.Assembly.Load%2A>.</span></span> <span data-ttu-id="97ca7-1324">如果找不到程序集，此方法将返回从全局程序集缓存具有相同的简单名称和最高版本号的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1324">If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1325">一个程序集或模块用两个不同的证据集加载了两次。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1325">An assembly or module was loaded twice with two different sets of evidence.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1326"><paramref name="partialName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1326">The <paramref name="partialName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1327"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1327"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-1328">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1328">-or-</span></span> 
<span data-ttu-id="97ca7-1329">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="partialName" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1329">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="partialName" /> was compiled with a later version.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97ca7-1330">用于调用非托管的代码和证据与加载程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1330">for calling unmanaged code and to load an assembly with evidence.</span></span> <span data-ttu-id="97ca7-1331">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1331">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
        <altmember cref="M:System.Reflection.Assembly.Load(System.String)" />
        <altmember cref="M:System.Reflection.Assembly.LoadFrom(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual string Location { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Location As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Location { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Location : string" Usage="System.Reflection.Assembly.Location" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.Location</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-1332">获取包含清单的已加载文件的完整路径或 UNC 位置。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1332">Gets the full path or UNC location of the loaded file that contains the manifest.</span></span></summary>
        <value><span data-ttu-id="97ca7-1333">包含清单的已加载文件的位置。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1333">The location of the loaded file that contains the manifest.</span></span> <span data-ttu-id="97ca7-1334">如果已加载文件使用了影像复制，则该位置是该文件被影像复制后的位置。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1334">If the loaded file was shadow-copied, the location is that of the file after being shadow-copied.</span></span> <span data-ttu-id="97ca7-1335">如果从字节数组加载程序集（如使用 <see cref="M:System.Reflection.Assembly.Load(System.Byte[])" /> 方法重载时），则返回值为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1335">If the assembly is loaded from a byte array, such as when using the <see cref="M:System.Reflection.Assembly.Load(System.Byte[])" /> method overload, the value returned is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1336">若要获取的位置，该文件已被卷影复制之前，请使用<xref:System.Reflection.Assembly.CodeBase%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1336">To get the location before the file has been shadow-copied, use the <xref:System.Reflection.Assembly.CodeBase%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97ca7-1337">下面的示例显示包含清单的已加载文件的位置。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1337">The following example displays the location of the loaded file that contains the manifest.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#3)]
 [!code-csharp[System.Reflection.Assembly#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#3)]
 [!code-vb[System.Reflection.Assembly#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="97ca7-1338">当前的程序集是动态程序集，由 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 对象表示。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1338">The current assembly is a dynamic assembly, represented by an <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> object.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-1339">用于访问该路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1339">for access to the path.</span></span> <span data-ttu-id="97ca7-1340">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1340">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
        <related type="Article" href="~/docs/framework/app-domains/shadow-copy-assemblies.md"><span data-ttu-id="97ca7-1341">卷影复制程序集</span><span class="sxs-lookup"><span data-stu-id="97ca7-1341">Shadow Copying Assemblies</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ManifestModule">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module ManifestModule { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module ManifestModule" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.ManifestModule" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ManifestModule As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ ManifestModule { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ManifestModule : System.Reflection.Module" Usage="System.Reflection.Assembly.ManifestModule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-1342">获取包含当前程序集清单的模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1342">Gets the module that contains the manifest for the current assembly.</span></span></summary>
        <value><span data-ttu-id="97ca7-1343">包含程序集清单的模块。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1343">The module that contains the manifest for the assembly.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleResolve">
      <MemberSignature Language="C#" Value="public virtual event System.Reflection.ModuleResolveEventHandler ModuleResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Reflection.ModuleResolveEventHandler ModuleResolve" />
      <MemberSignature Language="DocId" Value="E:System.Reflection.Assembly.ModuleResolve" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Custom Event ModuleResolve As ModuleResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Reflection::ModuleResolveEventHandler ^ ModuleResolve;" />
      <MemberSignature Language="F#" Value="member this.ModuleResolve : System.Reflection.ModuleResolveEventHandler " Usage="member this.ModuleResolve : System.Reflection.ModuleResolveEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Runtime.InteropServices._Assembly.ModuleResolve</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ModuleResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-1344">当公共语言运行时类加载程序不能通过正常方法解析对程序集的内部模块的引用时发生。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1344">Occurs when the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1345">此事件为回调提供了机会来查找和加载该模块本身并将其返回。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1345">This event gives the callback a chance to find and load the module itself and return it.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="97ca7-1346">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1346">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="97ca7-1347">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1347">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Modules">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.Module&gt; Modules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Module&gt; Modules" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.Modules" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Modules As IEnumerable(Of Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::Module ^&gt; ^ Modules { System::Collections::Generic::IEnumerable&lt;System::Reflection::Module ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Modules : seq&lt;System.Reflection.Module&gt;" Usage="System.Reflection.Assembly.Modules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Module&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-1348">获取包含此程序集中模块的集合。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1348">Gets a collection that contains the modules in this assembly.</span></span></summary>
        <value><span data-ttu-id="97ca7-1349">包含此程序集中模块的集合。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1349">A collection that contains the modules in this assembly.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.Assembly left, System.Reflection.Assembly right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.Assembly left, class System.Reflection.Assembly right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Assembly, right As Assembly) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::Assembly ^ left, System::Reflection::Assembly ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.Assembly * System.Reflection.Assembly -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.Assembly" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.Assembly" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="97ca7-1350">要与 <paramref name="right" /> 进行比较的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1350">The assembly to compare to <paramref name="right" />.</span></span></param>
        <param name="right"><span data-ttu-id="97ca7-1351">要与 <paramref name="left" /> 进行比较的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1351">The assembly to compare to <paramref name="left" />.</span></span></param>
        <summary><span data-ttu-id="97ca7-1352">指示两个 <see cref="T:System.Reflection.Assembly" /> 对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1352">Indicates whether two <see cref="T:System.Reflection.Assembly" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1353">如果 <see langword="true" /> 等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1353"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.Assembly left, System.Reflection.Assembly right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.Assembly left, class System.Reflection.Assembly right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Assembly, right As Assembly) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::Assembly ^ left, System::Reflection::Assembly ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.Assembly * System.Reflection.Assembly -&gt; bool" Usage="System.Reflection.Assembly.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.Assembly" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.Assembly" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="97ca7-1354">要与 <paramref name="right" /> 进行比较的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1354">The assembly to compare to <paramref name="right" />.</span></span></param>
        <param name="right"><span data-ttu-id="97ca7-1355">要与 <paramref name="left" /> 进行比较的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1355">The assembly to compare to <paramref name="left" />.</span></span></param>
        <summary><span data-ttu-id="97ca7-1356">指示两个 <see cref="T:System.Reflection.Assembly" /> 对象是否不相等。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1356">Indicates whether two <see cref="T:System.Reflection.Assembly" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1357">如果 <see langword="true" /> 不等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1357"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PermissionSet">
      <MemberSignature Language="C#" Value="public virtual System.Security.PermissionSet PermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet PermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.PermissionSet" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::PermissionSet ^ PermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PermissionSet : System.Security.PermissionSet" Usage="System.Reflection.Assembly.PermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-1358">获取当前程序集的授予集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1358">Gets the grant set of the current assembly.</span></span></summary>
        <value><span data-ttu-id="97ca7-1359">当前程序集的授予集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1359">The grant set of the current assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1360"><xref:System.Security.PermissionSet> 对象可以包含敏感信息，例如路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1360"><xref:System.Security.PermissionSet> objects can contain sensitive information such as paths.</span></span> <span data-ttu-id="97ca7-1361">因此，若要访问这些对象，需要进行完全信任。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1361">Therefore, full trust is required to access these objects.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="97ca7-1362">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1362">requires full trust for the immediate caller.</span></span> <span data-ttu-id="97ca7-1363">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1363">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnly">
      <MemberSignature Language="C#" Value="public virtual bool ReflectionOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReflectionOnly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.ReflectionOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ReflectionOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ReflectionOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectionOnly : bool" Usage="System.Reflection.Assembly.ReflectionOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-1364">获取 <see cref="T:System.Boolean" /> 值，该值指示此程序集是否被加载到只反射上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1364">Gets a <see cref="T:System.Boolean" /> value indicating whether this assembly was loaded into the reflection-only context.</span></span></summary>
        <value><span data-ttu-id="97ca7-1365">如果程序集被加载到只反射上下文而不是执行上下文中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1365"><see langword="true" /> if the assembly was loaded into the reflection-only context, rather than the execution context; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1366">如果程序集已加载到仅反射上下文中，使用<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>方法，您不能在程序集中执行代码。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1366">If an assembly has been loaded into the reflection-only context, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, you cannot execute code in the assembly.</span></span> <span data-ttu-id="97ca7-1367">若要执行的代码，必须将程序集加载到执行上下文。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1367">To execute code, the assembly must be loaded into the execution context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReflectionOnlyLoad">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97ca7-1368">将程序集加载到只反射上下文中，在只反射上下文中可以检查但不能执行程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1368">Loads an assembly into the reflection-only context, where it can be examined but not executed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReflectionOnlyLoad">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly ReflectionOnlyLoad (byte[] rawAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly ReflectionOnlyLoad(unsigned int8[] rawAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyLoad (rawAssembly As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ ReflectionOnlyLoad(cli::array &lt;System::Byte&gt; ^ rawAssembly);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyLoad : byte[] -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.ReflectionOnlyLoad rawAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="97ca7-1369">字节数组，它是包含已发出程序集的基于 COFF 的映像。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1369">A byte array that is a COFF-based image containing an emitted assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-1370">加载来自基于通用对象文件格式 (COFF) 的映像的程序集，该映像包含已发出的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1370">Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly.</span></span> <span data-ttu-id="97ca7-1371">程序集被加载到调用方的应用程序域的只反射上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1371">The assembly is loaded into the reflection-only context of the caller's application domain.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1372">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1372">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1373">无法从程序集加载到仅反射上下文中执行代码。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1373">You cannot execute code from an assembly loaded into the reflection-only context.</span></span> <span data-ttu-id="97ca7-1374">若要执行的代码，该程序集必须加载到执行上下文，使用<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1374">To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
 <span data-ttu-id="97ca7-1375">仅限反射上下文是与其他上下文中没有什么不同。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1375">The reflection-only context is no different from other contexts.</span></span> <span data-ttu-id="97ca7-1376">可以仅通过卸载应用程序域卸载到上下文中加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1376">Assemblies that are loaded into the context can be unloaded only by unloading the application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1377"><paramref name="rawAssembly" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1377"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1378"><paramref name="rawAssembly" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1378"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-1379">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1379">-or-</span></span> 
<span data-ttu-id="97ca7-1380">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1380">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1381">无法加载 <paramref name="rawAssembly" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1381"><paramref name="rawAssembly" /> cannot be loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyLoad">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly ReflectionOnlyLoad (string assemblyString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly ReflectionOnlyLoad(string assemblyString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyLoad (assemblyString As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ ReflectionOnlyLoad(System::String ^ assemblyString);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyLoad : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.ReflectionOnlyLoad assemblyString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="assemblyString"><span data-ttu-id="97ca7-1382">程序集的显示名称，由 <see cref="P:System.Reflection.AssemblyName.FullName" /> 属性返回。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1382">The display name of the assembly, as returned by the <see cref="P:System.Reflection.AssemblyName.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="97ca7-1383">将给定显示名称的程序集加载到只反射上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1383">Loads an assembly into the reflection-only context, given its display name.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1384">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1384">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1385">依赖项不会自动加载到只反射上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1385">Dependencies are not automatically loaded into the reflection-only context.</span></span>  
  
 <span data-ttu-id="97ca7-1386">无法从程序集加载到仅反射上下文中执行代码。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1386">You cannot execute code from an assembly loaded into the reflection-only context.</span></span> <span data-ttu-id="97ca7-1387">若要执行的代码，该程序集必须加载到执行上下文，使用<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1387">To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
 <span data-ttu-id="97ca7-1388">是否将特定的权限授予程序集是基于证据的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1388">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="97ca7-1389">程序集和安全证据的合并的规则如下所示：</span><span class="sxs-lookup"><span data-stu-id="97ca7-1389">The rules for assembly and security evidence merging are as follows:</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97ca7-1390">专用于反映将在编译的可执行文件的C++可能会引发<xref:System.IO.FileLoadException>。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1390">Reflecting on executable files compiled in C++ might throw a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="97ca7-1391">这是最有可能引起的C++编译器剥离重定位地址或.reloc 节从可执行文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1391">This is most likely caused by the C++ compiler stripping the relocation addresses or the .reloc section from your executable file.</span></span> <span data-ttu-id="97ca7-1392">若要保留.reloc 地址，请指定`/fixed:no`在链接时。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1392">To preserve the .reloc address, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="97ca7-1393">仅限反射上下文是与其他上下文中没有什么不同。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1393">The reflection-only context is no different from other contexts.</span></span> <span data-ttu-id="97ca7-1394">可以仅通过卸载应用程序域卸载到上下文中加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1394">Assemblies that are loaded into the context can be unloaded only by unloading the application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1395"><paramref name="assemblyString" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1395"><paramref name="assemblyString" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-1396"><paramref name="assemblyString" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1396"><paramref name="assemblyString" /> is an empty string ("").</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-1397"><paramref name="assemblyString" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1397"><paramref name="assemblyString" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1398"><paramref name="assemblyString" /> 已找到，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1398"><paramref name="assemblyString" /> is found, but cannot be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1399"><paramref name="assemblyString" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1399"><paramref name="assemblyString" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-1400">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1400">-or-</span></span> 
<span data-ttu-id="97ca7-1401">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyString" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1401">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyLoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly ReflectionOnlyLoadFrom (string assemblyFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly ReflectionOnlyLoadFrom(string assemblyFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyLoadFrom (assemblyFile As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ ReflectionOnlyLoadFrom(System::String ^ assemblyFile);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyLoadFrom : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.ReflectionOnlyLoadFrom assemblyFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="97ca7-1402">包含程序集清单的文件的路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1402">The path of the file that contains the manifest of the assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-1403">将给定路径的程序集加载到只反射上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1403">Loads an assembly into the reflection-only context, given its path.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1404">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1404">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1405">依赖项不会自动加载到只反射上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1405">Dependencies are not automatically loaded into the reflection-only context.</span></span> <span data-ttu-id="97ca7-1406">若要自动加载依赖项，请处理<xref:System.AppDomain.ReflectionOnlyAssemblyResolve>事件和负载中的事件处理程序的依赖项。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1406">To automatically load dependencies, handle the <xref:System.AppDomain.ReflectionOnlyAssemblyResolve> event and load the dependency in the event handler.</span></span>  
  
 <span data-ttu-id="97ca7-1407">无法从程序集已加载到只反射上下文中执行代码。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1407">You cannot execute code from an assembly that has been loaded into the reflection-only context.</span></span> <span data-ttu-id="97ca7-1408">若要执行的代码，加载的程序集中<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1408">To execute the code, load the assembly with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="97ca7-1409">`assemblyFile`参数必须引用不包含转义符的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1409">The `assemblyFile` parameter must refer to a URI without escape characters.</span></span> <span data-ttu-id="97ca7-1410">此方法提供的 URI 中的所有无效字符的转义符。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1410">This method supplies escape characters for all invalid characters in the URI.</span></span>  
  
 <span data-ttu-id="97ca7-1411">为指定的路径`assemblyFile`是相对于当前目录。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1411">The path specified for `assemblyFile` is relative to the current directory.</span></span> <span data-ttu-id="97ca7-1412">程序集被加载到调用方的域。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1412">The assembly is loaded into the domain of the caller.</span></span>  
  
 <span data-ttu-id="97ca7-1413">仅限反射上下文是与其他上下文中没有什么不同。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1413">The reflection-only context is no different from other contexts.</span></span> <span data-ttu-id="97ca7-1414">可以仅通过卸载应用程序域卸载到上下文中加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1414">Assemblies that are loaded into the context can be unloaded only by unloading the application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1415"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1415"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-1416">未找到 <paramref name="assemblyFile" />，或者你正在试图加载的模块未指定文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1416"><paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a file name extension.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1417"><paramref name="assemblyFile" /> 已找到，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1417"><paramref name="assemblyFile" /> is found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1418"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1418"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-1419">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1419">-or-</span></span> 
<span data-ttu-id="97ca7-1420">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1420">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="97ca7-1421">指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1421">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="97ca7-1422">程序集名称超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1422">The assembly name exceeds the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-1423"><paramref name="assemblyFile" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1423"><paramref name="assemblyFile" /> is an empty string ("").</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="97ca7-1424">用于读取以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1424">for reading a URI that begins with "file://".</span></span> <span data-ttu-id="97ca7-1425">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="97ca7-1425">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="97ca7-1426">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1426">for reading a URI that does not begin with "file://".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SecurityRuleSet">
      <MemberSignature Language="C#" Value="public virtual System.Security.SecurityRuleSet SecurityRuleSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.SecurityRuleSet SecurityRuleSet" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.SecurityRuleSet" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SecurityRuleSet As SecurityRuleSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::SecurityRuleSet SecurityRuleSet { System::Security::SecurityRuleSet get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityRuleSet : System.Security.SecurityRuleSet" Usage="System.Reflection.Assembly.SecurityRuleSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityRuleSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97ca7-1427">获取一个值，该值指示公共语言运行时 (CLR) 对此程序集强制执行的安全规则集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1427">Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</span></span></summary>
        <value><span data-ttu-id="97ca7-1428">CLR 对此程序集强制执行的安全规则集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1428">The security rule set that the CLR enforces for this assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1429">默认情况下，使用编译的程序集[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]具有[第 2 级](~/docs/framework/misc/security-transparent-code-level-2.md)透明度，尽管您可以显式使它们[第 1 级](~/docs/framework/misc/security-transparent-code-level-1.md)相反。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1429">By default, assemblies that you compile with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] have [level 2](~/docs/framework/misc/security-transparent-code-level-2.md) transparency, although you can explicitly make them [level 1](~/docs/framework/misc/security-transparent-code-level-1.md) instead.</span></span> <span data-ttu-id="97ca7-1430">使用.NET Framework 的早期版本编译的程序集具有 1 级透明度。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1430">Assemblies that were compiled with earlier versions of the .NET Framework have level 1 transparency.</span></span>  
  
 <span data-ttu-id="97ca7-1431">请参阅[安全更改](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1431">See [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/misc/security-transparent-code.md"><span data-ttu-id="97ca7-1432">安全透明的代码</span><span class="sxs-lookup"><span data-stu-id="97ca7-1432">Security-Transparent Code</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="97ca7-1433">.NET Framework 4 中的安全更改</span><span class="sxs-lookup"><span data-stu-id="97ca7-1433">Security Changes in the .NET Framework 4</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.5;netstandard-1.6" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.IsDefined">
      <MemberSignature Language="C#" Value="bool ICustomAttributeProvider.IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Reflection.ICustomAttributeProvider.IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean Implements ICustomAttributeProvider.IsDefined" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Reflection.ICustomAttributeProvider.IsDefined(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::IsDefined;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.5;netstandard-1.6" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Assembly.GetType">
      <MemberSignature Language="C#" Value="Type _Assembly.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._Assembly.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _Assembly.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._Assembly.GetType() = System::Runtime::InteropServices::_Assembly::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-1434">返回当前实例的类型。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1434">Returns the type of the current instance.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1435">表示 <see cref="T:System.Reflection.Assembly" /> 类型的对象。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1435">An object that represents the <see cref="T:System.Reflection.Assembly" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="assembly.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97ca7-1436">返回程序集的全名，即所谓的显示名称。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1436">Returns the full name of the assembly, also known as the display name.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1437">程序集的全名；如果不能确定程序集的全名，则为类名。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1437">The full name of the assembly, or the class name if the full name of the assembly cannot be determined.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeLoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly UnsafeLoadFrom (string assemblyFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly UnsafeLoadFrom(string assemblyFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.UnsafeLoadFrom(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeLoadFrom (assemblyFile As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ UnsafeLoadFrom(System::String ^ assemblyFile);" />
      <MemberSignature Language="F#" Value="static member UnsafeLoadFrom : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.UnsafeLoadFrom assemblyFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="97ca7-1438">包含程序集清单的文件的名称或路径。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1438">The name or path of the file that contains the manifest of the assembly.</span></span></param>
        <summary><span data-ttu-id="97ca7-1439">绕过某些安全检查，将程序集加载到加载源上下文中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1439">Loads an assembly into the load-from context, bypassing some security checks.</span></span></summary>
        <returns><span data-ttu-id="97ca7-1440">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1440">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97ca7-1441">使用此方法加载操作系统已标记为已加载从 Web （例如，从 Internet 或 intranet 下载的临时文件） 的本地程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1441">Use this method to load a local assembly that the operating system has flagged as having been loaded from the Web (for example, a temporary file that was downloaded from the Internet or intranet).</span></span> <span data-ttu-id="97ca7-1442">之前[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，此类程序集都要自动加载到沙盒应用程序域。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1442">Before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], such assemblies were automatically loaded into a sandboxed application domain.</span></span> <span data-ttu-id="97ca7-1443">从开始[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，它们是以完全信任方式加载的。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1443">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], they are loaded with full trust.</span></span>  
  
 <span data-ttu-id="97ca7-1444">作为使用此方法的替代方法，可以将应用[ &lt;NetFx40_LegacySecurityPolicy&gt;元素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)应用程序配置文件中。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1444">As an alternative to using this method, you can apply the [&lt;NetFx40_LegacySecurityPolicy&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md) in your application configuration file.</span></span> <span data-ttu-id="97ca7-1445">这会导致公共语言运行时，若要还原到的安全策略[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1445">This causes the common language runtime to revert to the security policy of the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="97ca7-1446">如果您使用这些解决方案，你必须是确定它是否可以安全地加载`assemblyFile`以完全信任。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1446">If you use either of these solutions, you must be certain that it is safe to load `assemblyFile` with full trust.</span></span>  
  
 <span data-ttu-id="97ca7-1447">有关讨论加载上下文，包括加载位置上下文，请参阅<xref:System.Reflection.Assembly.LoadFrom%28System.String%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1447">For a discussion of load contexts, including the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97ca7-1448"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1448"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="97ca7-1449">未找到 <paramref name="assemblyFile" />，或者你正在试图加载的模块未指定文件名扩展。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1449"><paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="97ca7-1450">无法加载已找到的文件。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1450">A file that was found could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="97ca7-1451"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1451"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="97ca7-1452">- 或 -</span><span class="sxs-lookup"><span data-stu-id="97ca7-1452">-or-</span></span> 
 <span data-ttu-id="97ca7-1453"><paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1453"><paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="97ca7-1454">指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1454">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97ca7-1455"><paramref name="assemblyFile" /> 参数为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1455">The <paramref name="assemblyFile" /> parameter is an empty string ("").</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="97ca7-1456">程序集名称超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1456">The assembly name exceeds the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="97ca7-1457">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1457">requires full trust for the immediate caller.</span></span> <span data-ttu-id="97ca7-1458">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="97ca7-1458">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>
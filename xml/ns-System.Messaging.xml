<Namespace Name="System.Messaging">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eab5ed0569927572b94947f95901b3f05d70f785" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70626799" /></Metadata><Docs>
    <summary><see cref="N:System.Messaging" /> 命名空间提供一些类，您可以使用这些类连接到、监视和管理网络上的消息队列，并发送、接收或查看消息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueue>类的成员包括以下方法，可用于读取和写入队列中的消息：  
  
-   <xref:System.Messaging.MessageQueue.Send%2A>方法使应用程序能够将消息写入队列。 使用方法的重载，你可以指定是使用<xref:System.Messaging.Message> （提供对所发送信息的详细控制）或任何其他托管对象（包括应用程序特定的类）发送消息。 方法还支持作为事务的一部分发送消息。  
  
-   <xref:System.Messaging.MessageQueue.Receive%2A>、和方法 <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> 提供了从队列中读取消息的功能。 <xref:System.Messaging.MessageQueue.ReceiveById%2A> <xref:System.Messaging.MessageQueue.Send%2A>与方法类似，这些方法提供支持事务性队列处理的重载。 这些方法还提供了超时的重载。  
  
     Out 参数，使处理在队列为空时继续。 由于这些方法是同步处理的示例，因此它们会中断当前线程，直到有可用的消息，除非您指定超时。  
  
-   <xref:System.Messaging.MessageQueue.Peek%2A>方法类似于，但它不会在读取消息时将其 <xref:System.Messaging.MessageQueue.Receive%2A> 从队列中删除。 由于<xref:System.Messaging.MessageQueue.Peek%2A>不更改队列内容，因此没有可支持事务处理的重载。 但是，因为<xref:System.Messaging.MessageQueue.Peek%2A>类似<xref:System.Messaging.MessageQueue.Receive%2A>地从队列中同步读取消息，所以方法的重载支持指定超时以便阻止线程无限期等待。  
  
-   <xref:System.Messaging.MessageQueue.BeginPeek%2A> 、 <xref:System.Messaging.MessageQueue.BeginReceive%2A> 、和方法 <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> 提供了以异步方式从队列中读取消息的方式。 <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> 它们不会在等待消息到达队列时中断当前线程。  
  
 <xref:System.Messaging.MessageQueue>类的以下方法提供按指定条件检索队列列表的功能，并确定特定队列是否存在：  
  
-   <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>允许检索计算机上的专用队列。  
  
-   <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>、 <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>和 <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> 提供按通用标准检索公共队列的方式。 的<xref:System.Messaging.MessageQueue.GetPublicQueues%2A>重载提供了更详细的信息，可用于基于多个搜索条件选择队列。  
  
 <xref:System.Messaging.MessageQueue>类的其他方法提供了以下功能：  
  
-   创建和删除 "消息队列" 队列。  
  
-   使用消息枚举器逐句通过队列中的消息。  
  
-   使用队列枚举器循环访问系统上的队列。  
  
-   设置基于 ACL 的访问权限。  
  
-   使用连接缓存。  
  
 <xref:System.Messaging.Message>类提供对发送到队列的信息的详细控制，是接收或查看队列中的消息时所使用的对象。 除了消息正文外， <xref:System.Messaging.Message>类的属性还包括确认设置、格式化程序选择、标识、身份验证和加密信息、时间戳、有关使用跟踪的指示、服务器日记和死信队列和事务数据。  
  
 此<xref:System.Messaging.MessageQueue>组件与以下三个格式化程序关联，这使您可以序列化和反序列化从队列中发送和接收的消息：  
  
-   <xref:System.Messaging.XmlMessageFormatter>提供松散耦合的消息传递，在客户端和服务器上启用序列化类型的独立版本控制。  
  
-   <xref:System.Messaging.ActiveXMessageFormatter>与 MSMQ COM 控件兼容。 它允许发送控件可以接收的类型，以及接收由控件发送的类型。  
  
-   提供了更快的<xref:System.Messaging.XmlMessageFormatter>替代方法，但没有松散耦合消息传递的好处。 <xref:System.Messaging.BinaryMessageFormatter>  
  
 命名空间中的`Messaging`其他类支持代码访问和基于 ACL 的安全、在<xref:System.Messaging.Message>从队列中读取消息时筛选属性，以及在发送和接收消息时使用事务。  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>
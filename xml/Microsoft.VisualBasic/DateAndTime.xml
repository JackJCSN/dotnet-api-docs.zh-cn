<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2c90494f50963965c1fc8cd6dee5ba8348981f13" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67239193" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="DateAndTime" /> 模块包含在日期和时间操作中使用的过程和属性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此模块支持的 Visual Basic 语言关键字和运行时库成员，获取当前日期或时间、 执行日期计算，返回日期或时间、 设置的日期或时间，或记录的进程的持续时间。  
  
   
  
## Examples  
 此示例使用`Today`属性以返回当前系统日期。  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/dates-and-times-summary.md">日期和时间摘要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">关键字 (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 运行时库成员</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个 <see langword="Date" /> 值，其中包含已添加指定时间间隔的日期和时间值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">必需。 表示要加上的时间间隔的 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式。</param>
        <param name="Number">必需。 表示希望添加的时间间隔数的浮点表达式。 可以为正数（此时将获取今后的日期/时间值），也可以为负数（此时将获取过去的日期/时间值）。 在 <paramref name="Interval" /> 指定小时、分钟或秒时，该参数可以包含小数部分。 对于其他类型的 <paramref name="Interval" /> 值，将忽略 <paramref name="Number" /> 的所有小数部分。</param>
        <param name="DateValue">必需。 表示要在其基础上加上此时间间隔的日期和时间的表达式。 <paramref name="DateValue" /> 本身在调用程序中并未改变。</param>
        <summary>返回一个值，其中包含已添加指定时间间隔的日期和时间值。</summary>
        <returns>包含已添加指定时间间隔的日期和时间值的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用`DateAdd`函数要添加或减去指定的时间间隔从日期。 例如，可以计算从现在今天或 45 分钟的时间之前的 30 天的日期。  
  
 若要添加的天数`DateValue`，可以使用`DateInterval.Day`， `DateInterval.DayOfYear`，或`DateInterval.Weekday`。 这些被视为等效项，因为`DayOfYear`和`Weekday`不是有意义的时间间隔。  
  
 `DateAdd`函数永远不会返回无效的日期。 如有必要，会生成日期的日部分向调整为结果生成的年中月份的最后一天。 下面的示例将年 1 月 31 日加上一个月：  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 在此示例中，`DateAdd`将返回`#2/28/1995#`，而不`#2/31/1995#`。 如果`DateValue`是`#1/31/1996#`，它将返回`#2/29/1996#`因为 1996 年为闰年。  
  
> [!NOTE]
>  `DateAdd` 使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的属性<xref:System.Globalization.CultureInfo>类中<xref:System.Globalization>命名空间。 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值均由**控制面板**设置。  
  
 由于每个`Date`支持值<xref:System.DateTime>结构，其方法，您可以添加时间间隔中的其他选项。 例如，可以添加的天数，为舍入到最接近的毫秒小数`Date`变量，如下所示：  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval`自变量可具有以下设置之一。  
  
|枚举值|String|要添加的时间间隔单位|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|一天;截断为整数值|  
|`DateInterval.DayOfYear`|y|一天;截断为整数值|  
|`DateInterval.Hour`|h|小时;舍入为接近的毫秒|  
|`DateInterval.Minute`|n|分钟;舍入为接近的毫秒|  
|`DateInterval.Month`|m|月;截断为整数值|  
|`DateInterval.Quarter`|q|每个季度;截断为整数值|  
|`DateInterval.Second`|秒|第二个;舍入为接近的毫秒|  
|`DateInterval.Weekday`|w|一天;截断为整数值|  
|`DateInterval.WeekOfYear`|ww|一周;截断为整数值|  
|`DateInterval.Year`|yyyy|年;截断为整数值|  
  
   
  
## Examples  
 此示例采用一个日期，并通过`DateAdd`函数中，显示的相应日期在将来的月数。  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> 并不强制为 <see langword="Date" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> 无效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">计算所得日期早于元年 1 月 1 日 00:00:00，或晚于 9999 年 12 月 31 日 23:59:59。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">必需。 表示要加上的时间间隔的 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式。</param>
        <param name="Number">必需。 表示希望添加的时间间隔数的浮点表达式。 <paramref name="Number" /> 可以为正数（此时将获取今后的日期/时间值），也可以为负数（此时将获取过去的日期/时间值）。 在 <paramref name="Interval" /> 指定小时、分钟或秒时，该参数可以包含小数部分。 对于其他类型的 <paramref name="Interval" /> 值，将忽略 <paramref name="Number" /> 的所有小数部分。</param>
        <param name="DateValue">必需。 表示要在其基础上加上此时间间隔的日期和时间的表达式。 <paramref name="DateValue" /> 本身在调用程序中并未改变。</param>
        <summary>返回一个值，其中包含已添加指定时间间隔的日期和时间值。</summary>
        <returns>包含已添加指定时间间隔的日期和时间值的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用`DateAdd`函数要添加或减去指定的时间间隔从日期。 例如，可以计算从现在今天或 45 分钟的时间之前的 30 天的日期。  
  
 若要添加的天数`DateValue`，可以使用`DateInterval.Day`， `DateInterval.DayOfYear`，或`DateInterval.Weekday`。 这些被视为等效项，因为`DayOfYear`和`Weekday`不是有意义的时间间隔。  
  
 `DateAdd`函数永远不会返回无效的日期。 如有必要，会生成日期的日部分向调整为结果生成的年中月份的最后一天。 下面的示例将年 1 月 31 日加上一个月：  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 在此示例中，`DateAdd`将返回`#2/28/1995#`，而不`#2/31/1995#`。 如果`DateValue`是`#1/31/1996#`，它将返回`#2/29/1996#`因为 1996 年为闰年。  
  
> [!NOTE]
>  `DateAdd` 使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的属性<xref:System.Globalization.CultureInfo>类中<xref:System.Globalization>命名空间。 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值均由**控制面板**设置。  
  
 由于每个`Date`支持值<xref:System.DateTime>结构，其方法，您可以添加时间间隔中的其他选项。 例如，可以添加的天数，为舍入到最接近的毫秒小数`Date`变量，如下所示：  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval`自变量可具有以下设置之一。  
  
|枚举值|String|要添加的时间间隔单位|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|一天;截断为整数值|  
|`DateInterval.DayOfYear`|y|一天;截断为整数值|  
|`DateInterval.Hour`|h|小时;舍入为接近的毫秒|  
|`DateInterval.Minute`|n|分钟;舍入为接近的毫秒|  
|`DateInterval.Month`|m|月;截断为整数值|  
|`DateInterval.Quarter`|q|每个季度;截断为整数值|  
|`DateInterval.Second`|秒|第二个;舍入为接近的毫秒|  
|`DateInterval.Weekday`|w|一天;截断为整数值|  
|`DateInterval.WeekOfYear`|ww|一周;截断为整数值|  
|`DateInterval.Year`|yyyy|年;截断为整数值|  
  
   
  
## Examples  
 此示例采用一个日期，并通过`DateAdd`函数中，显示的相应日期在将来的月数。  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> 并不强制为 <see langword="Date" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> 无效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">计算所得日期早于元年 1 月 1 日 00:00:00，或晚于 9999 年 12 月 31 日 23:59:59。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个值，该值指定两个 <see langword="Date" /> 值之间的时间间隔数。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必需。 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式，表示要用作 <paramref name="Date1" /> 和 <paramref name="Date2" /> 之差的单位的时间间隔。</param>
        <param name="Date1">必需。 要在计算中使用的第一个日期/时间值。</param>
        <param name="Date2">必需。 要在计算中使用的第二个日期/时间值。</param>
        <param name="DayOfWeek">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />。</param>
        <param name="WeekOfYear">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 枚举中选择的值，用于指定一年的第一周。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />。</param>
        <summary>返回一个长值，该长值指定两个 <see langword="Date" /> 值之间的时间间隔数。</summary>
        <returns>指定两个 <see langword="Date" /> 值之间的时间间隔数的长值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用`DateDiff`函数来确定两个日期/时间值之间存在多少指定的时间间隔。 例如，可以使用`DateDiff`来计算两个日期或当前年度结束之间的周数之间的天数。  
  
## <a name="behavior"></a>行为  
  
-   **参数的处理方式。** `DateDiff` 值中减去`Date1`的值从`Date2`以生成不同之处。 两个值被更改调用程序中。  
  
-   **返回值。** 因为`Date1`并`Date2`属于`Date`数据类型，保留日期和时间值精确到 100 毫微秒系统计时器。 但是，`DateDiff`始终返回为时间间隔数`Long`值。  
  
     如果`Date1`表示的更高版本的日期和时间长于`Date2`，`DateDiff`返回一个负数。  
  
-   **一天的时间间隔。** 如果`Interval`设置为`DateInterval.DayOfYear`，则将其视为相同`DateInterval.Day`，这是因为`DayOfYear`时间间隔内不是有意义的单位。  
  
-   **一周的时间间隔。** 如果`Interval`设置为`DateInterval.WeekOfYear`，则返回值表示之间的包含的一周的第一天的周数`Date1`和包含的一周的第一天`Date2`。 下面的示例演示如何，这会生成不同的结果从`DateInterval.Weekday`。  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     在前面的示例中，`DateDiff`返回 0 到`wD`因为两个日期之间的区别是七天内，但它将返回 1 到`wY`因为没有相应的日历的第一天之间相差七天周。  
  
-   **更大的时间间隔。** 如果`Interval`设置为`DateInterval.Year`，返回值的计算纯粹从的年份组成部分`Date1`和`Date2`。 同样，对于返回值`DateInterval.Month`纯粹从年份和月份的各部分的自变量，以及计算`DateInterval.Quarter`从包含两个日期的季度。  
  
     例如，当比较年 12 月 31 日的下一 1 年月 1 日`DateDiff`返回 1 `DateInterval.Year`， `DateInterval.Quarter`，或`DateInterval.Month`，即使最多只能一天已过。  
  
     例如，有多个纪元的日语区域性`DateDiff`方法不返回年存在差异，如果区别跨越两个或多个纪元。 相反，您可以计算返回的值之间的差异<xref:System.DateTime.Year%2A>属性，如下面的示例中所示： `date2.Year - date1.Year`。  
  
-   **其他时间间隔。** 由于每个`Date`支持值<xref:System.DateTime>结构，其方法，您可以查找时间间隔中的其他选项。 例如，可以使用`Subtract`方法重载形式之一：<xref:System.DateTime.Subtract%2A?displayProperty=nameWithType>减去<xref:System.TimeSpan>从`Date`变量返回另一个`Date`值，和<xref:System.DateTime.Subtract%2A?displayProperty=nameWithType>减去`Date`值若要返回<xref:System.TimeSpan>。 若要了解需要，如以下示例所示的毫秒数的进程的时间。  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval`自变量可具有以下设置之一。  
  
|枚举值|字符串值|单位的时间差异|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|天|  
|`DateInterval.DayOfYear`|“y”|天|  
|`DateInterval.Hour`|“h”|小时|  
|`DateInterval.Minute`|"n"|分钟|  
|`DateInterval.Month`|“m”|月份|  
|`DateInterval.Quarter`|"q"|每个季度|  
|`DateInterval.Second`|“s”|秒|  
|`DateInterval.Weekday`|“w”|周|  
|`DateInterval.WeekOfYear`|"ww"|日历周|  
|`DateInterval.Year`|“yyyy”|年|  
  
 `DayOfWeek`自变量可具有以下设置之一。  
  
|枚举值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|系统设置中指定的每周的第一天|  
|`FirstDayOfWeek.Sunday`|1|Sunday （默认值）|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|星期三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|星期五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
 `WeekOfYear`自变量可具有以下设置之一。  
  
|枚举值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|系统设置中指定的年的第一周|  
|`FirstWeekOfYear.Jan1`|1|1 月 1 日所在的周 （默认值）|  
|`FirstWeekOfYear.FirstFourDays`|2|在新的一年 （符合 ISO 8601 标准第 3.17 节） 中具有至少四天的周|  
|`FirstWeekOfYear.FirstFullWeek`|3|在新的一年中第一个完整的周|  
  
   
  
## Examples  
 此示例使用`DateDiff`函数显示在给定的日期和今天之间的天数。  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />、<paramref name="Date2" /> 或 <paramref name="DayofWeek" /> 超出范围。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> 或 <paramref name="Date2" /> 是无效类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必需。 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式，表示要用作 <paramref name="Date1" /> 和 <paramref name="Date2" /> 之差的单位的时间间隔。</param>
        <param name="Date1">必需。 要在计算中使用的第一个日期/时间值。</param>
        <param name="Date2">必需。 要在计算中使用的第二个日期/时间值。</param>
        <param name="DayOfWeek">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />。</param>
        <param name="WeekOfYear">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 枚举中选择的值，用于指定一年的第一周。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />。</param>
        <summary>返回一个长值，该长值指定两个 <see langword="Date" /> 值之间的时间间隔数。</summary>
        <returns>指定两个 <see langword="Date" /> 值之间的时间间隔数的长值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用`DateDiff`函数来确定两个日期/时间值之间存在多少指定的时间间隔。 例如，可以使用`DateDiff`来计算两个日期或当前年度结束之间的周数之间的天数。  
  
## <a name="behavior"></a>行为  
  
-   **参数的处理方式。** `DateDiff` 值中减去`Date1`的值从`Date2`以生成不同之处。 两个值被更改调用程序中。  
  
-   **返回值。** 因为`Date1`并`Date2`属于`Date`数据类型，保留日期和时间值精确到 100 毫微秒系统计时器。 但是，`DateDiff`始终返回为时间间隔数`Long`值。  
  
     如果`Date1`表示的更高版本的日期和时间长于`Date2`，`DateDiff`返回一个负数。  
  
-   **一天的时间间隔。** 如果`Interval`设置为`DateInterval.DayOfYear`，则将其视为相同`DateInterval.Day`，这是因为`DayOfYear`时间间隔内不是有意义的单位。  
  
-   **一周的时间间隔。** 如果`Interval`设置为`DateInterval.WeekOfYear`，则返回值表示之间的包含的一周的第一天的周数`Date1`和包含的一周的第一天`Date2`。 下面的示例演示如何，这会生成不同的结果从`DateInterval.Weekday`。  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     在前面的示例中，`DateDiff`返回 0 到`wD`因为两个日期之间的区别是七天内，但它将返回 1 到`wY`因为没有相应的日历的第一天之间相差七天周。  
  
-   **更大的时间间隔。** 如果`Interval`设置为`DateInterval.Year`，返回值的计算纯粹从的年份组成部分`Date1`和`Date2`。 同样，对于返回值`DateInterval.Month`纯粹从年份和月份的各部分的自变量，以及计算`DateInterval.Quarter`从包含两个日期的季度。  
  
     例如，当比较年 12 月 31 日的下一 1 年月 1 日`DateDiff`返回 1 `DateInterval.Year`， `DateInterval.Quarter`，或`DateInterval.Month`，即使最多只能一天已过。  
  
     例如，有多个纪元的日语区域性`DateDiff`方法不返回年存在差异，如果区别跨越两个或多个纪元。 相反，您可以计算返回的值之间的差异<xref:System.DateTime.Year%2A>属性，如下面的示例中所示： `date2.Year - date1.Year`。  
  
-   **其他时间间隔。** 由于每个`Date`支持值<xref:System.DateTime>结构，其方法，您可以查找时间间隔中的其他选项。 例如，可以使用`Subtract`方法重载形式之一：<xref:System.DateTime.Subtract%2A?displayProperty=nameWithType>减去<xref:System.TimeSpan>从`Date`变量返回另一个`Date`值，和<xref:System.DateTime.Subtract%2A?displayProperty=nameWithType>减去`Date`值若要返回<xref:System.TimeSpan>。 若要了解需要，如以下示例所示的毫秒数的进程的时间。  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval`自变量可具有以下设置之一。  
  
|枚举值|字符串值|单位的时间差异|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|天|  
|`DateInterval.DayOfYear`|“y”|天|  
|`DateInterval.Hour`|“h”|小时|  
|`DateInterval.Minute`|"n"|分钟|  
|`DateInterval.Month`|“m”|月份|  
|`DateInterval.Quarter`|"q"|每个季度|  
|`DateInterval.Second`|“s”|秒|  
|`DateInterval.Weekday`|“w”|周|  
|`DateInterval.WeekOfYear`|"ww"|日历周|  
|`DateInterval.Year`|“yyyy”|年|  
  
 `DayOfWeek`自变量可具有以下设置之一。  
  
|枚举值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|系统设置中指定的每周的第一天|  
|`FirstDayOfWeek.Sunday`|1|Sunday （默认值）|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|星期三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|星期五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
 `WeekOfYear`自变量可具有以下设置之一。  
  
|枚举值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|系统设置中指定的年的第一周|  
|`FirstWeekOfYear.Jan1`|1|1 月 1 日所在的周 （默认值）|  
|`FirstWeekOfYear.FirstFourDays`|2|在新的一年 （符合 ISO 8601 标准第 3.17 节） 中具有至少四天的周|  
|`FirstWeekOfYear.FirstFullWeek`|3|在新的一年中第一个完整的周|  
  
   
  
## Examples  
 此示例使用`DateDiff`函数显示在给定的日期和今天之间的天数。  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />、<paramref name="Date2" /> 或 <paramref name="DayofWeek" /> 超出范围。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> 或 <paramref name="Date2" /> 是无效类型。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回包含给定 <see langword="Date" /> 值的指定组件的整数值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必需。 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式，它表示要返回的日期/时间值部分。</param>
        <param name="DateValue">必需。 要计算的 <see langword="Date" /> 值。</param>
        <param name="FirstDayOfWeekValue">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />。</param>
        <param name="FirstWeekOfYearValue">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 枚举中选择的值，用于指定一年的第一周。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />。</param>
        <summary>返回包含给定 <see langword="Date" /> 值的指定组件的整数值。</summary>
        <returns>包含给定 <see langword="Date" /> 值的指定组件的整数值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用`DatePart`函数来计算日期/时间值并返回特定的组件。 例如，可以使用`DatePart`计算一周或在当前小时的某个日期。  
  
 如果愿意`DateInterval.Weekday`有关`Interval`参数，返回的值是与的值一致`FirstDayOfWeek`枚举。 如果愿意`DateInterval.WeekOfYear`，`DatePart`使用<xref:System.Globalization.Calendar>并<xref:System.Globalization.CultureInfo>类的<xref:System.Globalization>命名空间来确定您的当前设置。  
  
 `FirstDayOfWeekValue`参数会影响使用的计算`DateInterval.Weekday`并`DateInterval.WeekOfYear``Interval`设置。 `FirstWeekOfYearValue`参数会影响指定的计算`DateInterval.WeekOfYear`为`Interval`。  
  
 由于每个`Date`支持值<xref:System.DateTime>结构，其方法，您可以检索日期/时间部分的过程中的其他选项。 例如，可以获取的整个日期值`Date`变量，将时间值会设置为午夜，按如下所示：  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval`自变量可具有以下设置之一。  
  
|枚举值|String|要返回的日期/时间值的一部分|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|一月的某一日（1 到 31）|  
|`DateInterval.DayOfYear`|y|一年的某一日（1 到 366）|  
|`DateInterval.Hour`|h|小时|  
|`DateInterval.Minute`|n|分钟|  
|`DateInterval.Month`|m|月份|  
|`DateInterval.Quarter`|q|每个季度|  
|`DateInterval.Second`|秒|秒|  
|`DateInterval.Weekday`|w|一周的某一日（1 到 7）|  
|`DateInterval.WeekOfYear`|ww|一年的某一周（1 到 53）|  
|`DateInterval.Year`|yyyy|年|  
  
 `FirstDayOfWeekValue`自变量可具有以下设置之一。  
  
|枚举值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|系统设置中指定的每周的第一天|  
|`FirstDayOfWeek.Sunday`|1|Sunday （默认值）|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|星期三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|星期五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
 `FirstWeekOfYearValue`自变量可具有以下设置之一。  
  
|枚举值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|系统设置中指定的年的第一周|  
|`FirstWeekOfYear.Jan1`|1|1 月 1 日所在的周 （默认值）|  
|`FirstWeekOfYear.FirstFourDays`|2|在新的一年 （符合 ISO 8601 标准第 3.17 节） 中具有至少四天的周|  
|`FirstWeekOfYear.FirstFullWeek`|3|新的一年的第一个完整的周|  
  
   
  
## Examples  
 此示例采用一个日期，并通过`DatePart`函数中，显示其中发生的一年中的每个季度。  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> 无效。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> 并不强制为 <see langword="Date" />。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必需。 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式，它表示要返回的日期/时间值部分。</param>
        <param name="DateValue">必需。 要计算的 <see langword="Date" /> 值。</param>
        <param name="DayOfWeek">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />。</param>
        <param name="WeekOfYear">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 枚举中选择的值，用于指定一年的第一周。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />。</param>
        <summary>返回一个值，其中包含给定 <see langword="Date" /> 值的指定组件。</summary>
        <returns>包含给定 <see langword="Date" /> 值的指定组件的整数值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用`DatePart`函数来计算日期/时间值并返回特定的组件。 例如，可以使用`DatePart`计算一周或在当前小时的某个日期。  
  
 如果愿意`DateInterval.Weekday`有关`Interval`参数，返回的值是与的值一致`FirstDayOfWeek`枚举。 如果愿意`DateInterval.WeekOfYear`，`DatePart`使用<xref:System.Globalization.Calendar>并<xref:System.Globalization.CultureInfo>类的<xref:System.Globalization>命名空间来确定您的当前设置。  
  
 `FirstDayOfWeekValue`参数会影响使用的计算`DateInterval.Weekday`并`DateInterval.WeekOfYear``Interval`设置。 `FirstWeekOfYearValue`参数会影响指定的计算`DateInterval.WeekOfYear`为`Interval`。  
  
 由于每个`Date`支持值<xref:System.DateTime>结构，其方法，您可以检索日期/时间部分的过程中的其他选项。 例如，可以获取的整个日期值`Date`变量，将时间值会设置为午夜，按如下所示：  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval`自变量可具有以下设置之一。  
  
|枚举值|String|要返回的日期/时间值的一部分|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|一月的某一日（1 到 31）|  
|`DateInterval.DayOfYear`|y|一年的某一日（1 到 366）|  
|`DateInterval.Hour`|h|小时|  
|`DateInterval.Minute`|n|分钟|  
|`DateInterval.Month`|m|月份|  
|`DateInterval.Quarter`|q|每个季度|  
|`DateInterval.Second`|秒|秒|  
|`DateInterval.Weekday`|w|一周的某一日（1 到 7）|  
|`DateInterval.WeekOfYear`|ww|一年的某一周（1 到 53）|  
|`DateInterval.Year`|yyyy|年|  
  
 `FirstDayOfWeekValue`自变量可具有以下设置之一。  
  
|枚举值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|系统设置中指定的每周的第一天|  
|`FirstDayOfWeek.Sunday`|1|Sunday （默认值）|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|星期三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|星期五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
 `FirstWeekOfYearValue`自变量可具有以下设置之一。  
  
|枚举值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|系统设置中指定的年的第一周|  
|`FirstWeekOfYear.Jan1`|1|1 月 1 日所在的周 （默认值）|  
|`FirstWeekOfYear.FirstFourDays`|2|在新的一年 （符合 ISO 8601 标准第 3.17 节） 中具有至少四天的周|  
|`FirstWeekOfYear.FirstFullWeek`|3|新的一年的第一个完整的周|  
  
   
  
## Examples  
 此示例采用一个日期，并通过`DatePart`函数中，显示其中发生的一年中的每个季度。  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> 无效。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> 并不强制为 <see langword="Date" />。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">必需。 范围为 1 到 9999 的整数表达式。 但是，也接受小于此范围的值。 如果 <paramref name="Year" /> 为 0 到 99，它被解释为介于 1930 年和 2029 年之间，下面的"备注"部分对此做了解释。 如果 <paramref name="Year" /> 小于 1，则从当前年份减去它。</param>
        <param name="Month">必需。 范围为 1 到 12 的整数表达式。 但是，也接受此范围之外的值。 <paramref name="Month" /> 值的偏移量为 1，且该值应用于所计算年份的 1 月。 换言之，就是 1 月加上 (<paramref name="Month" /> - 1)。 若有必要则对年份进行重新计算。 以下的结果阐释了这种效果： 
如果 <paramref name="Month" /> 为 1，则结果为所计算年份的 1 月。  
  
如果 <paramref name="Month" /> 为 0，则结果为上一年的 12 月。  
  
如果 <paramref name="Month" /> 为 -1，则结果为上一年的 11 月。  
  
如果 <paramref name="Month" /> 为 13，则结果为下一年的 1 月。</param>
        <param name="Day">必需。 范围为 1 到 31 的 Integer 表达式。 但是，也接受此范围之外的值。 <paramref name="Day" /> 值偏移量为 1，该值应用于所计算月份的第一天。 换言之，就是该月份的第一天加上 (<paramref name="Day" /> - 1)。 若有必要，则对月份和年份进行重新计算。 以下的结果阐释了这种效果： 
如果 <paramref name="Day" /> 为 1，则结果为所计算月份的第一天。  
  
如果 <paramref name="Day" /> 为 0，则结果为上一月份的最后一天。  
  
如果 <paramref name="Day" /> 为 -1，则结果为上一月份的倒数第二天。  
  
如果 <paramref name="Day" /> 超过当前月份的月末，则结果为下一月份中相应的一天。 例如，如果 <paramref name="Month" /> 为 4 且 <paramref name="Day" /> 为 31，则结果为 5 月 1 日。</param>
        <summary>返回表示已指定年月日的 <see langword="Date" /> 值，其时间信息被设置为午夜 (00:00:00)。</summary>
        <returns>表示已指定年月日的 <see langword="Date" /> 值，其时间信息被设置为午夜 (00:00:00)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Windows 98 或 Windows 2000 下的两位数年份`Year`参数基于用户定义的计算机设置进行解释。 默认设置是从 0 到 29 值被解释为 2000 年-2029 年之间，并从 30 到 99 之间的值被解释为 1930 年 1999 年。 对于所有其他`Year`参数，使用四位数年份; 例如，选择 1924年。  
  
 早期版本的 Windows 解释两位数年份基于前面所述的默认设置。 若要确保该函数返回正确的值，请使用四位数字`Year`。  
  
 下面的示例演示负、 零，并且正参数值。 在这里，`DateSerial`函数返回`Date`表示 10 年之前的当前年份; 年 3 月的第一天的前一天换而言之，十年前年 2 月的最后一天。  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 如果任一`Month`或`Day`超过其正常范围内，应用于根据下一个较大的单位。 例如，如果指定 32 天，它计算为一个月和一到四天，具体取决于值`Month`。 如果`Year`大于 9999，或如果任一参数超出范围-2147483648 到 2147483647，<xref:System.ArgumentException>发生错误。 如果由三个参数指定的日期到 9999，早于 1，或晚于 12 月 31 日 23:59:59 年的 1 月 1 日 00:00:00<xref:System.ArgumentOutOfRangeException>发生错误。  
  
 `Date`数据类型包括时间组件。 `DateSerial` 设置所有这些为 0，因此返回的值表示计算的一天的开始。  
  
 由于每个`Date`值受<xref:System.DateTime>结构，其方法，您可以在编写的其他选项`Date`值。 例如，可以使用某个重载<xref:System.DateTime.%23ctor%2A>构造函数来填充`Date`使用所需的组件组合的变量。 下面的示例设置`NewDateTime`1978 年 6，在上午 8:30 秒的十分之一到：  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 此示例使用`DateSerial`函数以返回指定的年、 月和日的日期。  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置一个字符串值，该值表示与系统对应的当前日期。</summary>
        <value>返回或设置一个字符串值，该值表示与系统对应的当前日期。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString` 以 MM dd yyyy 格式，它使用缩写的月份名称返回系统日期。 接受日期的格式是 yyyy，M-d-M d y、 年-月-日和年-/ y。 这适用于除使用双字节字符集 (DBCS) 的所有系统区域设置。 如果系统区域设置使用双字节字符集`DateString`中的年-月-日格式返回系统日期。 使用设置系统区域设置**时钟、 语言和区域**中的项**控制面板**。  
  
 **请注意**`DateString`属性仅在为年-月-日格式返回系统日期`zh`（简体中文）， `ko` （朝鲜语） 和`ja`（日语） 系统区域设置，如果您正在运行中的 Visual BasicSilverlight。  
  
 获取或设置当前系统时间作为`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>属性。  
  
 若要获取当前系统日期或时间，格式为您的区域设置，或自定义格式，请提供<xref:Microsoft.VisualBasic.DateAndTime.Now%2A>属性设置为<xref:Microsoft.VisualBasic.Strings.Format%2A>函数，并指定预定义或用户定义的日期/时间格式。 下面的示例演示这一操作。  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 若要访问的当前系统日期`Date`，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>属性。  
  
> [!IMPORTANT]
>  设置系统日期或时间要求非托管的代码的权限，这可能会影响在部分信任情况下执行。 有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 下面的示例使用`DateString`属性来显示当前系统日期。  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">用于设置 <see cref="T:Microsoft.VisualBasic.DateAndTime.DateString" /> 值的格式无效。</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">必需。 字符串表达式，表示 1 年 1 月 1 日 00:00:00 到 9999 年 12 月 31 日 23:59:59 之间的一个日期/时间值。</param>
        <summary>返回一个 <see langword="Date" /> 值，该值包含用字符串表示的日期信息，其时间信息设置为午夜 (00:00:00)。</summary>
        <returns><see langword="Date" /> 值，它包含由字符串表示的日期信息，其中的时间信息设置为午夜 (00:00:00)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`StringDate`包括仅从 1 到 12 由有效的日期分隔符分隔的数字`DateValue`将识别月、 日和年根据为你的系统指定的短日期格式的顺序。 `DateValue` 使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的属性<xref:System.Globalization.CultureInfo>类中<xref:System.Globalization>命名空间。 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值均由**控制面板**设置。 可以通过设置替代的短日期格式<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>的属性<xref:System.Globalization.DateTimeFormatInfo>类中<xref:System.Globalization>命名空间。  
  
 `DateValue` 识别长、 缩写形式和数字的窗体中的月份名称。 例如，除了识别 12/30/1991年和 12/30/91 `DateValue` 1991 年 12 月 30 和 1991 年 12 月 30，还可以识别。  
  
 如果的年份部分`StringDate`省略，则`DateValue`使用来自计算机的系统日期的当前年份。  
  
 如果`StringDate`自变量包含时间的信息，`DateValue`不包括在返回的值。 但是，如果`StringDate`包括无效的时间信息，例如"89: 98"<xref:System.InvalidCastException>发生错误。  
  
   
  
## Examples  
 此示例使用`DateValue`函数将字符串转换为日期。 此外可以使用的日期文本将直接分配到日期`Object`或`Date`变量，例如， `oldDate = #2/12/69#`。  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringDate" /> 包含无效的时间信息。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必需。 要从中提取天的 <see langword="Date" /> 值。</param>
        <summary>返回表示月中第几天的整数值，该值介于 1 和 31 之间。</summary>
        <returns>介于 1 和 31 之间表示月中第几天的整数值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您使用`Day`函数，您可能需要限定其与`Microsoft.VisualBasic`命名空间，因为<xref:System.Windows.Forms>命名空间定义<xref:System.Windows.Forms.Day>为枚举。 下面的示例演示如何限定`Day`解决此多义性问题：  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 你还可以通过调用获取每月天数`DatePart`并指定`DateInterval.Day`有关*间隔*参数。  
  
   
  
## Examples  
 下面的示例使用`Day`函数从指定日期中获取每月天数。 在开发环境中，日期文本显示在标准短格式 （例如"12/02/1969") 使用您的代码的区域设置。  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day` 受到限定，以将其从区分开来<xref:System.Windows.Forms.Day?displayProperty=nameWithType>枚举。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必需。 要从中提取小时的 <see langword="Date" /> 值。</param>
        <summary>返回表示天中第几个小时的整数值，该值介于 0 和 23 之间。</summary>
        <returns>介于 0 和 23 之间表示一天中第几个小时的整数值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你还可以通过调用获取一天的小时`DatePart`并指定`DateInterval.Hour`为`Interval`参数。  
  
   
  
## Examples  
 此示例使用`Hour`函数来获取从指定的时间的小时。 在开发环境中，以使用你的代码的区域设置的短时间格式显示时间文字。  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必需。 要从中提取分钟的 <see langword="Date" /> 值。</param>
        <summary>返回表示一小时内第几分钟的整数值，该值介于 0 和 59 之间。</summary>
        <returns>介于 0 和 59 之间表示一小时内第几分钟的整数值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你还可以通过调用获取小时的分钟`DatePart`并指定`DateInterval.Minute`为`Interval`参数。  
  
   
  
## Examples  
 此示例使用`Minute`函数获取从指定的时间的小时的分钟。 在开发环境中，以使用你的代码的区域设置的短时间格式显示时间文字。  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必需。 要从中提取月的 <see langword="Date" /> 值。</param>
        <summary>返回表示一年中第几个月的整数值，该值介于 1 和 12 之间。</summary>
        <returns>介于 1 和 12 之间表示一年中第几个月的整数值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你还可以通过调用获取一年中的月份`DatePart`并指定`DateInterval.Month`为`Interval`参数。  
  
   
  
## Examples  
 此示例使用`Month`函数获取从指定日期的月份。 在开发环境中，使用你的代码的区域设置以短日期格式显示文本的日期。  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">必需。 以数字表示的月份，介于 1 到 13 之间；1 表示 1 月，12 表示 12 月。 值 13 可用于 13 月制日历。 若系统正在使用 12 月制日历，而 <paramref name="Month" /> 为 13，则 MonthName 返回一个空字符串<c></c>。</param>
        <param name="Abbreviate">可选。 为 <see langword="True" /> 则缩写月份名称；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
        <summary>返回包含指定月份名称的字符串值。</summary>
        <returns>包含指定月份名称的字符串值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的字符串`MonthName`取决于不在输入参数，而且还**区域选项**Windows 中指定的设置**控制面板**。  
  
> [!NOTE]
>  `MonthName` 使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的属性<xref:System.Globalization.CultureInfo>类中<xref:System.Globalization>命名空间。 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值均由**控制面板**设置。  
  
   
  
## Examples  
 此示例使用`MonthName`函数来确定通过给定整数的月份的名称。 布尔值将确定是否完整名称 (`False`) 或缩写的名称 (`True`) 将显示。  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Month" /> 小于 1 或大于 13。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个值，该值包含与系统对应的当前日期和时间。</summary>
        <value>当前日期和时间根据您的系统。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要设置系统日期，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>属性。 若要设置系统时间，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>属性。  
  
   
  
## Examples  
 下面的示例使用`Now`属性以返回当前系统日期和时间。  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必需。 要从中提取秒的 <see langword="Date" /> 值。</param>
        <summary>返回表示一分钟内第几秒的整数值，该值介于 0 和 59 之间。</summary>
        <returns>介于 0 和 59 之间表示一分钟内第几秒的整数值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你还可以通过调用获取的第二个分钟`DatePart`并指定`DateInterval.Second`为`Interval`参数。  
  
   
  
## Examples  
 下面的示例使用`Second`函数获取从指定的时间的秒数第二个。 在开发环境中，以使用你的代码的区域设置的短时间格式显示时间文字。  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置 <see langword="Date" /> 值，该值包含与系统对应的当前时间。</summary>
        <value>返回或设置 <see langword="Date" /> 值，该值包含与系统对应的当前时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date`数据类型包括日期组件。 返回系统时间时`TimeOfDay`设置为 1，所有这些，因此返回的值表示 1 年的第一天。 设置系统时间时`TimeOfDay`忽略日期部分。  
  
 若要访问当前系统时间作为`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>属性。  
  
 若要获取或设置当前系统日期，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>属性。  
  
> [!IMPORTANT]
>  设置系统日期或时间要求非托管的代码的权限，这可能会影响在部分信任情况下执行。 有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 此示例使用`TimeOfDay`属性以返回当前系统时间。  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个 <see cref="T:System.Double" /> 值，该值表示午夜之后的秒数。</summary>
        <value>自午夜以来过去的秒数表示的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Timer`属性返回最新的午夜以来的秒数和毫秒数。 秒是中的返回值的整数部分和毫秒数为的小数部分。  
  
   
  
## Examples  
 此示例使用`Timer`暂停应用程序的属性。 它可以执行其他处理期间暂停。  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 请注意，必须限定`Timer`具有属性<xref:Microsoft.VisualBasic?displayProperty=nameWithType>命名空间，因为`Timer`也是在定义的类<xref:System.Threading?displayProperty=nameWithType>， <xref:System.Timers?displayProperty=nameWithType>，并<xref:System.Windows.Forms?displayProperty=nameWithType>命名空间。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">必需。 范围为 0 到 23 的整数表达式。 但是，也接受此范围之外的值。</param>
        <param name="Minute">必需。 范围为 0 到 59 的整数表达式。 但是，也接受此范围之外的值。 <paramref name="Minute" /> 的值加入所计算的小时，因此负值指定该小时前的某几分钟。</param>
        <param name="Second">必需。 范围为 0 到 59 的整数表达式。 但是，也接受此范围之外的值。 <paramref name="Second" /> 的值加入所计算的分钟，因此负值指定该分钟前的某几秒。</param>
        <summary>返回一个 <see langword="Date" /> 值，该值表示指定的小时、分钟和秒，其日期信息设置基点为元年 1 月 1 日。</summary>
        <returns>一个 <see langword="Date" /> 值，该值表示指定的小时、分钟和秒，其日期信息设置基点为元年 1 月 1 日。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例演示负、 零，并且正参数值。 `TimeSerial`函数将返回表示中午或上午 8:45:00 前三个小时之前的 15 分钟的时间。  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 如果任一`Minute`或`Second`超过其正常范围内，应用于根据下一个较大的单位。 例如，如果指定为 75 分钟，则将它评估为 1 小时 15 分钟。  
  
 `TimeSerial` 减少的总秒数，取模 86,400，这是一天中的秒数。 因此，返回的时间始终为 00:00:00 和 23:59:59 之间。  
  
 `Date`数据类型包括日期组件。 `TimeSerial` 设置所有这些为 1，因此返回的值表示 1 年的第一天。 但是，如果自变量的值导致计算出的时间超过 24 小时，一天会相应增加。 在下面的示例的值`Hour`和`Minute`导致的合并时间为超过 24 小时。  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 如果参数的值会导致负的计算时间，日期信息设置为 0001 年 1 月 1 日和时间信息调整在 00:00:00 到 23:59:59 之间。 但是，如果计算出的时间为小于负 24 小时，<xref:System.ArgumentOutOfRangeException>发生错误。  
  
 由于每个`Date`值受<xref:System.DateTime?displayProperty=nameWithType>结构，其方法，您可以在编写的其他选项`Date`值。 例如，您可以使用其中一个重载<xref:System.DateTime.%23ctor%2A>构造函数来填充`Date`使用所需的组件组合的变量。 下面的示例设置`newDateTime`1978 年 6，在上午 8:30 秒的十分之一到：  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 下面的示例使用`TimeSerial`函数以返回指定的小时、 分钟和秒的时间。  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-2,147,483,648 到 2,147,483,647 范围以外的参数。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">计算所得的时间小于负 24 小时。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>根据系统返回或设置表示当前时间的字符串值。</summary>
        <value>根据系统返回或设置表示当前时间的字符串值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString` 始终返回系统时间为"hh: mm:"，这是 24 小时格式。 此格式是区域性不变，这意味着即使更改不会更改**区域选项**中**控制面板**。  
  
 获取或设置的当前系统日期`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>属性。  
  
 若要获取当前系统日期或时间，格式为您的区域设置，或自定义格式，请提供<xref:Microsoft.VisualBasic.DateAndTime.Now%2A>属性设置为<xref:Microsoft.VisualBasic.Strings.Format%2A>函数，并指定预定义或用户定义的日期/时间格式。 下面的示例演示这一操作。  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 若要访问当前系统时间作为`Date`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>属性。  
  
> [!IMPORTANT]
>  设置系统日期或时间要求非托管的代码的权限，这可能会影响它在部分信任情况下执行。 有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 此示例使用`TimeString`属性来显示当前系统时间。  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">用于设置 <see langword="TimeString" /> 值的格式无效。</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">必需。 字符串表达式，表示 1 年 1 月 1 日 00:00:00 到 9999 年 12 月 31 日 23:59:59 之间的一个日期/时间值。</param>
        <summary>返回一个 <see langword="Date" /> 值，该值包含以字符串表示的时间信息，其日期信息设置为元年 1 月 1 日。</summary>
        <returns>一个 <see langword="Date" /> 值，该值包含以字符串表示的时间信息，其日期信息设置为元年 1 月 1 日。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以输入有效的时间采用 12 小时或 24 小时制。 例如，`"2:24 P.M."`并`"14:24"`都是有效`StringTime`参数。  
  
 如果`StringTime`自变量包含日期信息`TimeValue`不包括在返回的值。 但是，如果`StringTime`包含无效的日期信息，例如"年 1 月 32，"<xref:System.InvalidCastException>发生错误。  
  
   
  
## Examples  
 下面的示例使用`TimeValue`函数将字符串转换到某个时间。 此外可以使用的日期文本将直接分配一次对`Date`变量。  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringTime" /> 包含无效的日期信息。</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置一个 <see langword="Date" /> 值，该值包含对应于系统的当前日期。</summary>
        <value>返回或设置一个 <see langword="Date" /> 值，该值包含对应于系统的当前日期。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date`数据类型包括时间组件。 返回系统日期时`Today`设置所有这些为 0，因此返回的值表示午夜 (00: 00:00)。 设置系统日期时`Today`忽略时间组件。  
  
 若要访问的当前系统日期`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>属性。  
  
 若要获取或设置当前系统时间，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>属性。  
  
> [!IMPORTANT]
>  设置系统日期或时间要求非托管的代码的权限，这可能会影响在部分信任情况下执行。 有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>并[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 此示例使用`Today`属性以返回当前系统日期。  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">必需。 要确定属于一周中的哪一天的 <see langword="Date" /> 值。</param>
        <param name="DayOfWeek">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />。</param>
        <summary>返回包含表示星期几的数字的整数值。</summary>
        <returns>包含表示星期几的数字的整数值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的值`Weekday`函数对应的值`FirstDayOfWeek`枚举; 也就是说，1 表示星期日，7 表示星期六。  
  
> [!NOTE]
>  `Weekday` 使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的属性<xref:System.Globalization.CultureInfo>类中<xref:System.Globalization>命名空间。 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值均由**控制面板**设置。  
  
 `DayOfWeek`自变量可具有以下设置之一。  
  
|枚举值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|系统设置中指定的每周的第一天|  
|`FirstDayOfWeek.Sunday`|1|Sunday （默认值）|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|星期三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|星期五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
   
  
## Examples  
 下面的示例使用`Weekday`函数获取从指定日期的日期是星期几。  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="DayOfWeek" /> 小于 0 或大于 7。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">必需。 Integer。 以数字表示的周几，介于 1 到 7 之间；1 表示一周的第一天，7 表示一周的最后一天。 第一天和最后一天指的是哪一天取决于 <paramref name="FirstDayOfWeekValue" /> 的设置。</param>
        <param name="Abbreviate">可选。 指示是否缩写周几的名称的 <see langword="Boolean" /> 值。 如果省略，则默认为 <see langword="False" />，表示星期几的名称不缩写。</param>
        <param name="FirstDayOfWeekValue">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see langword="FirstDayOfWeek.System" />。</param>
        <summary>返回包含指定工作日的名称的整数值。</summary>
        <returns>包含指定工作日的名称的整数值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的字符串`WeekdayName`取决于不在输入参数，而且还**区域选项**Windows 中指定的设置**控制面板**。  
  
> [!NOTE]
>  `WeekdayName` 使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的属性<xref:System.Globalization.CultureInfo>类中<xref:System.Globalization>命名空间。 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值均由**控制面板**设置。  
  
 `FirstDayOfWeekValue`自变量可具有以下设置之一。  
  
|枚举值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|在系统中指定的每周的第一天设置 （默认值）|  
|`FirstDayOfWeek.Sunday`|1|星期日|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|星期三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|星期五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
   
  
## Examples  
 下面的示例使用`Weekday`函数获取从指定日期的日期是星期几，然后`WeekDayName`函数根据其序号获取工作日的名称。  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Weekday" /> 小于 1 或大于 7，或 <paramref name="FirstDayOfWeekValue" /> 小于 0 或大于 7。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必需。 要从中提取年的 <see langword="Date" /> 值。</param>
        <summary>返回表示年的 1 到 9999 之间的整数值。</summary>
        <returns>表示年的 1 到 9999 之间的整数值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你还可以通过调用获取年份`DatePart`并指定`DateInterval.Year`为`Interval`参数。  
  
   
  
## Examples  
 下面的示例使用`Year`函数获取从指定日期的年份。 在开发环境中，使用你的代码的区域设置以短日期格式显示文本的日期。  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>
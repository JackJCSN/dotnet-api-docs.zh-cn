<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="658fbfb1c662acb281aac80c9ade7559461114ea" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67238745" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3578a-101"><see langword="Strings" /> 模块包含用于执行字符串操作的过程。</span><span class="sxs-lookup"><span data-stu-id="3578a-101">The <see langword="Strings" /> module contains procedures used to perform string operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-102">此模块支持的 Visual Basic 语言关键字和操作字符串的运行时库成员。</span><span class="sxs-lookup"><span data-stu-id="3578a-102">This module supports the Visual Basic language keywords and run-time library members that manipulate strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-103">下面的示例演示如何将一个字符串的空格处拆分。</span><span class="sxs-lookup"><span data-stu-id="3578a-103">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-104">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-104">String Manipulation Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="3578a-105">关键字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="3578a-106">Visual Basic 运行时库成员</span><span class="sxs-lookup"><span data-stu-id="3578a-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3578a-107">返回表示与某个字符相对应的字符代码的整数值。</span><span class="sxs-lookup"><span data-stu-id="3578a-107">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="3578a-108">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-108">Required.</span></span> <span data-ttu-id="3578a-109">任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-109">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="3578a-110">如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。</span><span class="sxs-lookup"><span data-stu-id="3578a-110">If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="3578a-111">如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="3578a-111">If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="3578a-112">返回表示与某个字符相对应的字符代码的整数值。</span><span class="sxs-lookup"><span data-stu-id="3578a-112">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="3578a-113">与某个字符相对应的字符代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-113">The character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-114">`Asc` 返回*代码点*，或输入字符的字符代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-114">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="3578a-115">这可以是 0 到 255 的单字节字符集 (SBCS) 值和从-32768 到 32767 之间的双字节字符集 (dbcs) 值。</span><span class="sxs-lookup"><span data-stu-id="3578a-115">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="3578a-116">`AscW` 返回输入的字符的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="3578a-116">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="3578a-117">这可以是 0 到 65535 之间。</span><span class="sxs-lookup"><span data-stu-id="3578a-117">This can be 0 through 65535.</span></span> <span data-ttu-id="3578a-118">返回的值是独立于当前线程的区域性和代码页设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-118">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-119">`AscB`的早期版本的 Visual Basic 函数返回一个字节，而不是一个字符的代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-119">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="3578a-120">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-120">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-121">Visual Basic 2005 的所有字符串都都以 unicode 格式，和`AscB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-121">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-122">下面的示例使用`Asc`函数返回`Integer`字符对应于每个字符串中的第一个字母的代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-122">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md"><span data-ttu-id="3578a-123">函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-123">Functions (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="3578a-124">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-124">Required.</span></span> <span data-ttu-id="3578a-125">任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-125">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="3578a-126">如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。</span><span class="sxs-lookup"><span data-stu-id="3578a-126">If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="3578a-127">如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="3578a-127">If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="3578a-128">返回表示与某个字符相对应的字符代码的整数值。</span><span class="sxs-lookup"><span data-stu-id="3578a-128">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="3578a-129">与某个字符相对应的字符代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-129">The character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-130">`Asc` 返回*代码点*，或输入字符的字符代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-130">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="3578a-131">这可以是 0 到 255 的单字节字符集 (SBCS) 值和从-32768 到 32767 之间的双字节字符集 (dbcs) 值。</span><span class="sxs-lookup"><span data-stu-id="3578a-131">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="3578a-132">`AscW` 返回输入的字符的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="3578a-132">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="3578a-133">这可以是 0 到 65535 之间。</span><span class="sxs-lookup"><span data-stu-id="3578a-133">This can be 0 through 65535.</span></span> <span data-ttu-id="3578a-134">返回的值是独立于当前线程的区域性和代码页设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-134">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-135">`AscB`的早期版本的 Visual Basic 函数返回一个字节，而不是一个字符的代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-135">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="3578a-136">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-136">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-137">Visual Basic 2005 的所有字符串都都以 unicode 格式，和`AscB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-137">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-138">下面的示例使用`Asc`函数返回`Integer`字符对应于每个字符串中的第一个字母的代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-138">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md"><span data-ttu-id="3578a-139">函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-139">Functions (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3578a-140">返回表示与某个字符相对应的字符代码的整数值。</span><span class="sxs-lookup"><span data-stu-id="3578a-140">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="3578a-141">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-141">Required.</span></span> <span data-ttu-id="3578a-142">任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-142">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="3578a-143">如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。</span><span class="sxs-lookup"><span data-stu-id="3578a-143">If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="3578a-144">如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="3578a-144">If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="3578a-145">返回表示与某个字符相对应的字符代码的整数值。</span><span class="sxs-lookup"><span data-stu-id="3578a-145">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="3578a-146">与某个字符相对应的字符代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-146">The character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-147">`Asc` 返回*代码点*，或输入字符的字符代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-147">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="3578a-148">这可以是 0 到 255 的单字节字符集 (SBCS) 值和从-32768 到 32767 之间的双字节字符集 (dbcs) 值。</span><span class="sxs-lookup"><span data-stu-id="3578a-148">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="3578a-149">`AscW` 返回输入的字符的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="3578a-149">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="3578a-150">这可以是 0 到 65535 之间。</span><span class="sxs-lookup"><span data-stu-id="3578a-150">This can be 0 through 65535.</span></span> <span data-ttu-id="3578a-151">返回的值是独立于当前线程的区域性和代码页设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-151">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-152">`AscB`的早期版本的 Visual Basic 函数返回一个字节，而不是一个字符的代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-152">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="3578a-153">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-153">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-154">Visual Basic 2005 的所有字符串都都以 unicode 格式，和`AscB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-154">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-155">下面的示例使用`Asc`函数返回`Integer`字符对应于每个字符串中的第一个字母的代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-155">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md"><span data-ttu-id="3578a-156">函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-156">Functions (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="3578a-157">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-157">Required.</span></span> <span data-ttu-id="3578a-158">任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-158">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="3578a-159">如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。</span><span class="sxs-lookup"><span data-stu-id="3578a-159">If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="3578a-160">如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="3578a-160">If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="3578a-161">返回表示与某个字符相对应的字符代码的整数值。</span><span class="sxs-lookup"><span data-stu-id="3578a-161">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="3578a-162">与某个字符相对应的字符代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-162">The character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-163">`Asc` 返回*代码点*，或输入字符的字符代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-163">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="3578a-164">这可以是 0 到 255 的单字节字符集 (SBCS) 值和从-32768 到 32767 之间的双字节字符集 (dbcs) 值。</span><span class="sxs-lookup"><span data-stu-id="3578a-164">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="3578a-165">`AscW` 返回输入的字符的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="3578a-165">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="3578a-166">这可以是 0 到 65535 之间。</span><span class="sxs-lookup"><span data-stu-id="3578a-166">This can be 0 through 65535.</span></span> <span data-ttu-id="3578a-167">返回的值是独立于当前线程的区域性和代码页设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-167">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-168">`AscB`的早期版本的 Visual Basic 函数返回一个字节，而不是一个字符的代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-168">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="3578a-169">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-169">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-170">Visual Basic 2005 的所有字符串都都以 unicode 格式，和`AscB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-170">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-171">下面的示例使用`Asc`函数返回`Integer`字符对应于每个字符串中的第一个字母的代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-171">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md"><span data-ttu-id="3578a-172">函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-172">Functions (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="CharCode"><span data-ttu-id="3578a-173">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-173">Required.</span></span> <span data-ttu-id="3578a-174"><see langword="Integer" /> 表达式，表示字符的 <c>code point</c> 或字符代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-174">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span></span></param>
        <summary><span data-ttu-id="3578a-175">返回与指定字符代码相关联的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-175">Returns the character associated with the specified character code.</span></span></summary>
        <returns><span data-ttu-id="3578a-176">与指定字符代码相关联的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-176">The character associated with the specified character code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-177">非对称范围接受`CharCode`存储之间的差异进行补偿`Short`和`Integer`。</span><span class="sxs-lookup"><span data-stu-id="3578a-177">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="3578a-178">例如，是-29183`Short`但 + 36353 为`Integer`。</span><span class="sxs-lookup"><span data-stu-id="3578a-178">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="3578a-179">这还简化了与 Visual Basic 6.0 的兼容性。</span><span class="sxs-lookup"><span data-stu-id="3578a-179">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="3578a-180">`Chr` 使用<xref:System.Text.Encoding>类中<xref:System.Text?displayProperty=nameWithType>命名空间来确定当前线程是否使用单字节字符集 (SBCS) 或双字节字符设置 (DBCS)。</span><span class="sxs-lookup"><span data-stu-id="3578a-180">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="3578a-181">然后，它会`CharCode`为代码点在相应的一组中。</span><span class="sxs-lookup"><span data-stu-id="3578a-181">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="3578a-182">范围可以是 0 到 255 的 SBCS 字符和-32768 到 65535 的 DBCS 字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-182">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="3578a-183">返回的值取决于当前线程中包含的代码页<xref:System.Globalization.TextInfo.ANSICodePage%2A>的属性<xref:System.Globalization.TextInfo>类中<xref:System.Globalization>命名空间。</span><span class="sxs-lookup"><span data-stu-id="3578a-183">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="3578a-184">你可以获取<xref:System.Globalization.TextInfo.ANSICodePage%2A>通过指定`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`。</span><span class="sxs-lookup"><span data-stu-id="3578a-184">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="3578a-185">`ChrW` 采用`CharCode`为 Unicode 代码点。</span><span class="sxs-lookup"><span data-stu-id="3578a-185">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="3578a-186">范围是独立于当前线程的区域性和代码页设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-186">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="3578a-187">从-32768 到-1 的值为相同视为范围 32768 到方式中的值。</span><span class="sxs-lookup"><span data-stu-id="3578a-187">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="3578a-188">从 0 到 31 的数字将与标准不能打印的 ASCII 代码相同。</span><span class="sxs-lookup"><span data-stu-id="3578a-188">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="3578a-189">例如，`Chr(10)`返回换行字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-189">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-190">`ChrB`在早期版本的 Visual Basic 函数将返回一个字节。</span><span class="sxs-lookup"><span data-stu-id="3578a-190">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="3578a-191">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-191">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-192">Visual Basic 和.NET Framework 中的所有字符串都都以 unicode 格式，和`ChrB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-192">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-193">下面的示例使用`Chr`函数以返回与指定的字符代码关联的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-193">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-194"><see langword="Chr" /> 的 <paramref name="CharCode" /> &lt; 0 或 &gt; 255。</span><span class="sxs-lookup"><span data-stu-id="3578a-194"><paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-195">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-195">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode"><span data-ttu-id="3578a-196">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-196">Required.</span></span> <span data-ttu-id="3578a-197"><see langword="Integer" /> 表达式，表示字符的 <c>code point</c> 或字符代码。</span><span class="sxs-lookup"><span data-stu-id="3578a-197">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span></span></param>
        <summary><span data-ttu-id="3578a-198">返回与指定字符代码相关联的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-198">Returns the character associated with the specified character code.</span></span></summary>
        <returns><span data-ttu-id="3578a-199">与指定字符代码相关联的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-199">The character associated with the specified character code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-200">非对称范围接受`CharCode`存储之间的差异进行补偿`Short`和`Integer`。</span><span class="sxs-lookup"><span data-stu-id="3578a-200">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="3578a-201">例如，是-29183`Short`但 + 36353 为`Integer`。</span><span class="sxs-lookup"><span data-stu-id="3578a-201">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="3578a-202">这还简化了与 Visual Basic 6.0 的兼容性。</span><span class="sxs-lookup"><span data-stu-id="3578a-202">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="3578a-203">`Chr` 使用<xref:System.Text.Encoding>类中<xref:System.Text?displayProperty=nameWithType>命名空间来确定当前线程是否使用单字节字符集 (SBCS) 或双字节字符设置 (DBCS)。</span><span class="sxs-lookup"><span data-stu-id="3578a-203">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="3578a-204">然后，它会`CharCode`为代码点在相应的一组中。</span><span class="sxs-lookup"><span data-stu-id="3578a-204">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="3578a-205">范围可以是 0 到 255 的 SBCS 字符和-32768 到 65535 的 DBCS 字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-205">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="3578a-206">返回的值取决于当前线程中包含的代码页<xref:System.Globalization.TextInfo.ANSICodePage%2A>的属性<xref:System.Globalization.TextInfo>类中<xref:System.Globalization>命名空间。</span><span class="sxs-lookup"><span data-stu-id="3578a-206">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="3578a-207">你可以获取<xref:System.Globalization.TextInfo.ANSICodePage%2A>通过指定`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`。</span><span class="sxs-lookup"><span data-stu-id="3578a-207">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="3578a-208">`ChrW` 采用`CharCode`为 Unicode 代码点。</span><span class="sxs-lookup"><span data-stu-id="3578a-208">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="3578a-209">范围是独立于当前线程的区域性和代码页设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-209">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="3578a-210">从-32768 到-1 的值为相同视为范围 32768 到方式中的值。</span><span class="sxs-lookup"><span data-stu-id="3578a-210">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="3578a-211">从 0 到 31 的数字将与标准不能打印的 ASCII 代码相同。</span><span class="sxs-lookup"><span data-stu-id="3578a-211">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="3578a-212">例如，`Chr(10)`返回换行字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-212">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-213">`ChrB`在早期版本的 Visual Basic 函数将返回一个字节。</span><span class="sxs-lookup"><span data-stu-id="3578a-213">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="3578a-214">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-214">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-215">Visual Basic 和.NET Framework 中的所有字符串都都以 unicode 格式，和`ChrB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-215">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-216">下面的示例使用`Chr`函数以返回与指定的字符代码关联的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-216">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-217"><see langword="ChrW" /> 的 <paramref name="CharCode" /> &lt; -32768 或 &gt; 65535。</span><span class="sxs-lookup"><span data-stu-id="3578a-217"><paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-218">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-218">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3578a-219">返回一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</span><span class="sxs-lookup"><span data-stu-id="3578a-219">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="3578a-220">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-220">Required.</span></span> <span data-ttu-id="3578a-221">要搜索的一维字符串数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-221">One-dimensional array of strings to be searched.</span></span></param>
        <param name="Match"><span data-ttu-id="3578a-222">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-222">Required.</span></span> <span data-ttu-id="3578a-223">要搜索的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-223">String to search for.</span></span></param>
        <param name="Include"><span data-ttu-id="3578a-224">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-224">Optional.</span></span> <span data-ttu-id="3578a-225"><see langword="Boolean" /> 值，指示是返回包含还是排除 <paramref name="Match" /> 的子字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-225"><see langword="Boolean" /> value indicating whether to return substrings that include or exclude <paramref name="Match" />.</span></span> <span data-ttu-id="3578a-226">如果 <paramref name="Include" /> 为 <see langword="True" />，则 <see langword="Filter" /> 函数返回将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。</span><span class="sxs-lookup"><span data-stu-id="3578a-226">If <paramref name="Include" /> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <paramref name="Match" /> as a substring.</span></span> <span data-ttu-id="3578a-227">如果 <paramref name="Include" /> 为 <see langword="False" />，则 <see langword="Filter" /> 函数返回不将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。</span><span class="sxs-lookup"><span data-stu-id="3578a-227">If <paramref name="Include" /> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.</span></span></param>
        <param name="Compare"><span data-ttu-id="3578a-228">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-228">Optional.</span></span> <span data-ttu-id="3578a-229">表示要使用的字符串比较类型的数值。</span><span class="sxs-lookup"><span data-stu-id="3578a-229">Numeric value indicating the kind of string comparison to use.</span></span> <span data-ttu-id="3578a-230">请参阅“设置”，以获取值。</span><span class="sxs-lookup"><span data-stu-id="3578a-230">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="3578a-231">返回一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</span><span class="sxs-lookup"><span data-stu-id="3578a-231">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
        <returns><span data-ttu-id="3578a-232">一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</span><span class="sxs-lookup"><span data-stu-id="3578a-232">A zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-233">如果没有匹配的项`Match`中找到`Source`，则`Filter`函数返回一个空数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-233">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="3578a-234">如果出错`Source`设置为`Nothing`或不是一维数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-234">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="3578a-235">返回的数组`Filter`函数包含仅足够包含匹配项数目的元素。</span><span class="sxs-lookup"><span data-stu-id="3578a-235">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="3578a-236">`Compare`自变量可具有以下值。</span><span class="sxs-lookup"><span data-stu-id="3578a-236">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="3578a-237">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-237">Constant</span></span>|<span data-ttu-id="3578a-238">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-238">Description</span></span>|  
|-|-|  
|<span data-ttu-id="3578a-239">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-239">Constant</span></span>|<span data-ttu-id="3578a-240">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-240">Description</span></span>|  
|`CompareMethod.Binary`|<span data-ttu-id="3578a-241">执行二进制比较</span><span class="sxs-lookup"><span data-stu-id="3578a-241">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="3578a-242">执行文本比较</span><span class="sxs-lookup"><span data-stu-id="3578a-242">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-243">此示例演示如何使用`Filter`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-243">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-244"><paramref name="Source" /> 为 <see langword="Nothing" /> 或不是一维数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-244"><paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-245">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-245">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="3578a-246">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-246">Required.</span></span> <span data-ttu-id="3578a-247">要搜索的一维字符串数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-247">One-dimensional array of strings to be searched.</span></span></param>
        <param name="Match"><span data-ttu-id="3578a-248">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-248">Required.</span></span> <span data-ttu-id="3578a-249">要搜索的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-249">String to search for.</span></span></param>
        <param name="Include"><span data-ttu-id="3578a-250">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-250">Optional.</span></span> <span data-ttu-id="3578a-251"><see langword="Boolean" /> 值，指示是返回包含还是排除 <paramref name="Match" /> 的子字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-251"><see langword="Boolean" /> value indicating whether to return substrings that include or exclude <paramref name="Match" />.</span></span> <span data-ttu-id="3578a-252">如果 <paramref name="Include" /> 为 <see langword="True" />，则 <see langword="Filter" /> 函数返回将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。</span><span class="sxs-lookup"><span data-stu-id="3578a-252">If <paramref name="Include" /> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <paramref name="Match" /> as a substring.</span></span> <span data-ttu-id="3578a-253">如果 <paramref name="Include" /> 为 <see langword="False" />，则 <see langword="Filter" /> 函数返回不将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。</span><span class="sxs-lookup"><span data-stu-id="3578a-253">If <paramref name="Include" /> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.</span></span></param>
        <param name="Compare"><span data-ttu-id="3578a-254">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-254">Optional.</span></span> <span data-ttu-id="3578a-255">表示要使用的字符串比较类型的数值。</span><span class="sxs-lookup"><span data-stu-id="3578a-255">Numeric value indicating the kind of string comparison to use.</span></span> <span data-ttu-id="3578a-256">请参阅“设置”，以获取值。</span><span class="sxs-lookup"><span data-stu-id="3578a-256">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="3578a-257">返回一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</span><span class="sxs-lookup"><span data-stu-id="3578a-257">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
        <returns><span data-ttu-id="3578a-258">一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</span><span class="sxs-lookup"><span data-stu-id="3578a-258">A zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-259">如果没有匹配的项`Match`中找到`Source`，则`Filter`函数返回一个空数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-259">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="3578a-260">如果出错`Source`设置为`Nothing`或不是一维数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-260">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="3578a-261">返回的数组`Filter`函数包含仅足够包含匹配项数目的元素。</span><span class="sxs-lookup"><span data-stu-id="3578a-261">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="3578a-262">`Compare`自变量可具有以下值。</span><span class="sxs-lookup"><span data-stu-id="3578a-262">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="3578a-263">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-263">Constant</span></span>|<span data-ttu-id="3578a-264">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-264">Description</span></span>|  
|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="3578a-265">执行二进制比较</span><span class="sxs-lookup"><span data-stu-id="3578a-265">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="3578a-266">执行文本比较</span><span class="sxs-lookup"><span data-stu-id="3578a-266">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-267">此示例演示如何使用`Filter`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-267">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-268"><paramref name="Source" /> 为 <see langword="Nothing" /> 或不是一维数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-268"><paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-269">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-269">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Style" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-270">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-270">Required.</span></span> <span data-ttu-id="3578a-271">任何有效表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-271">Any valid expression.</span></span></param>
        <param name="Style"><span data-ttu-id="3578a-272">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-272">Optional.</span></span> <span data-ttu-id="3578a-273">一个有效的命名或用户定义的格式 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-273">A valid named or user-defined format <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3578a-274">返回根据格式 <see langword="String" /> 表达式中包含的指令设置格式的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-274">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span></span></summary>
        <returns><span data-ttu-id="3578a-275">根据格式 <see langword="String" /> 表达式中包含的指令设置格式的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-275">A string formatted according to instructions contained in a format <see langword="String" /> expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-276"><xref:System.String.Format%2A?displayProperty=nameWithType>方法还提供了类似的功能。</span><span class="sxs-lookup"><span data-stu-id="3578a-276">The <xref:System.String.Format%2A?displayProperty=nameWithType> method also provides similar functionality.</span></span>  
  
 <span data-ttu-id="3578a-277">如果进行格式设置非本地化的数字字符串，应使用用户定义的数字格式以确保获取所需的外观。</span><span class="sxs-lookup"><span data-stu-id="3578a-277">If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.</span></span>  
  
 <span data-ttu-id="3578a-278">如果你尝试将数字设置格式而无需指定`Style`，则`Format`函数提供了功能类似于`Str`函数，但它是国际通用。</span><span class="sxs-lookup"><span data-stu-id="3578a-278">If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware.</span></span> <span data-ttu-id="3578a-279">但是，正数和负数的格式设置为使用字符串`Format`函数不包含前导空格保留符号的值; 这些转换使用`Str`函数保留前导空格。</span><span class="sxs-lookup"><span data-stu-id="3578a-279">However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.</span></span>  
  
## <a name="different-formats-for-different-numeric-values"></a><span data-ttu-id="3578a-280">不同的不同数值格式</span><span class="sxs-lookup"><span data-stu-id="3578a-280">Different Formats for Different Numeric Values</span></span>  
 <span data-ttu-id="3578a-281">数字的用户定义的格式表达式可以包含一到三个部分之间用分号分隔。</span><span class="sxs-lookup"><span data-stu-id="3578a-281">A user-defined format expression for numbers can have from one to three sections separated by semicolons.</span></span> <span data-ttu-id="3578a-282">如果`Style`自变量的`Format`函数包含一个预定义数字格式，只允许有一部分是。</span><span class="sxs-lookup"><span data-stu-id="3578a-282">If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.</span></span>  
  
|<span data-ttu-id="3578a-283">如果你使用</span><span class="sxs-lookup"><span data-stu-id="3578a-283">If you use</span></span>|<span data-ttu-id="3578a-284">下面是结果</span><span class="sxs-lookup"><span data-stu-id="3578a-284">This is the result</span></span>|  
|-|-|  
|<span data-ttu-id="3578a-285">只有一部分</span><span class="sxs-lookup"><span data-stu-id="3578a-285">One section only</span></span>|<span data-ttu-id="3578a-286">格式表达式应用于所有值。</span><span class="sxs-lookup"><span data-stu-id="3578a-286">The format expression applies to all values.</span></span>|  
|<span data-ttu-id="3578a-287">两个部分</span><span class="sxs-lookup"><span data-stu-id="3578a-287">Two sections</span></span>|<span data-ttu-id="3578a-288">第一部分应用于正值和零;第二个应用于负值。</span><span class="sxs-lookup"><span data-stu-id="3578a-288">The first section applies to positive values and zeros; the second applies to negative values.</span></span>|  
|<span data-ttu-id="3578a-289">三个部分</span><span class="sxs-lookup"><span data-stu-id="3578a-289">Three sections</span></span>|<span data-ttu-id="3578a-290">第一部分应用于正值，第二个应用于负值，第三个应用于零。</span><span class="sxs-lookup"><span data-stu-id="3578a-290">The first section applies to positive values, the second applies to negative values, and the third applies to zeros.</span></span>|  
  
 <span data-ttu-id="3578a-291">下面的示例有两个部分： 第一个定义正值和零; 的格式第二部分定义负值的格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-291">The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values.</span></span> <span data-ttu-id="3578a-292">由于`Style`自变量的`Format`函数采用一个字符串，它用引号引起来。</span><span class="sxs-lookup"><span data-stu-id="3578a-292">Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.</span></span>  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 <span data-ttu-id="3578a-293">如果包括它们之间没有任何内容的分号，则缺少的部分被打印使用正值的格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-293">If you include semicolons with nothing between them, the missing section is printed using the format of the positive value.</span></span> <span data-ttu-id="3578a-294">例如，以下格式显示正值和负值值第一个部分中使用的格式并显示`Zero`如果的值为零。</span><span class="sxs-lookup"><span data-stu-id="3578a-294">For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.</span></span>  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a><span data-ttu-id="3578a-295">预定义数字格式</span><span class="sxs-lookup"><span data-stu-id="3578a-295">Predefined Numeric Formats</span></span>  
 <span data-ttu-id="3578a-296">下表标识预定义数字格式的名称。</span><span class="sxs-lookup"><span data-stu-id="3578a-296">The following table identifies the predefined numeric format names.</span></span> <span data-ttu-id="3578a-297">这些可能由与名称`Style`自变量`Format`函数：</span><span class="sxs-lookup"><span data-stu-id="3578a-297">These may be used by name as the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="3578a-298">格式名称</span><span class="sxs-lookup"><span data-stu-id="3578a-298">Format name</span></span>|<span data-ttu-id="3578a-299">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-299">Description</span></span>|  
|-|-|  
|<span data-ttu-id="3578a-300">`General Number`、`G` 或 `g`</span><span class="sxs-lookup"><span data-stu-id="3578a-300">`General Number`, `G`, or `g`</span></span>|<span data-ttu-id="3578a-301">显示带没有千位分隔符的数字。</span><span class="sxs-lookup"><span data-stu-id="3578a-301">Displays number with no thousand separator.</span></span><br /><br /> <span data-ttu-id="3578a-302">例如，`Format(&H3FA, "g")`返回`1018`。</span><span class="sxs-lookup"><span data-stu-id="3578a-302">For example, `Format(&H3FA, "g")` returns `1018`.</span></span>|  
|<span data-ttu-id="3578a-303">`Currency`、`C` 或 `c`</span><span class="sxs-lookup"><span data-stu-id="3578a-303">`Currency`, `C`, or `c`</span></span>|<span data-ttu-id="3578a-304">显示带千位分隔符的数字，如果相应;显示小数点分隔符右侧两位数字。</span><span class="sxs-lookup"><span data-stu-id="3578a-304">Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator.</span></span> <span data-ttu-id="3578a-305">输出基于系统区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-305">Output is based on system locale settings.</span></span><br /><br /> <span data-ttu-id="3578a-306">例如，`Format(1234567, "c")`返回`$1,234,567.00`。</span><span class="sxs-lookup"><span data-stu-id="3578a-306">For example, `Format(1234567, "c")` returns `$1,234,567.00`.</span></span>|  
|<span data-ttu-id="3578a-307">`Fixed`、`F` 或 `f`</span><span class="sxs-lookup"><span data-stu-id="3578a-307">`Fixed`, `F`, or `f`</span></span>|<span data-ttu-id="3578a-308">小数点分隔符右侧显示左侧至少一个数字和两个数字。</span><span class="sxs-lookup"><span data-stu-id="3578a-308">Displays at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="3578a-309">例如，`Format(1234567, "f")`返回`1234567.00`。</span><span class="sxs-lookup"><span data-stu-id="3578a-309">For example, `Format(1234567, "f")` returns `1234567.00`.</span></span>|  
|<span data-ttu-id="3578a-310">`Standard`、`N` 或 `n`</span><span class="sxs-lookup"><span data-stu-id="3578a-310">`Standard`, `N`, or `n`</span></span>|<span data-ttu-id="3578a-311">小数点分隔符右侧显示带千位分隔符左侧至少一个数字两位数字的数字。</span><span class="sxs-lookup"><span data-stu-id="3578a-311">Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="3578a-312">例如，`Format(1234567, "n")`返回`1,234,567.00`。</span><span class="sxs-lookup"><span data-stu-id="3578a-312">For example, `Format(1234567, "n")` returns `1,234,567.00`.</span></span>|  
|`Percent`|<span data-ttu-id="3578a-313">显示数字乘以 100 百分号 （%）在右侧; 立即追加小数点分隔符右侧总是显示两位。</span><span class="sxs-lookup"><span data-stu-id="3578a-313">Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="3578a-314">例如，`Format(0.4744, "Percent")`返回`47.44%`。</span><span class="sxs-lookup"><span data-stu-id="3578a-314">For example, `Format(0.4744, "Percent")` returns `47.44%`.</span></span>|  
|<span data-ttu-id="3578a-315">`P`或 `p`</span><span class="sxs-lookup"><span data-stu-id="3578a-315">`P`, or `p`</span></span>|<span data-ttu-id="3578a-316">数字显示带千分之几秒分隔符乘以 100 百分号 （%）追加到右侧，以单个空格;小数点分隔符右侧总是显示两位。</span><span class="sxs-lookup"><span data-stu-id="3578a-316">Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="3578a-317">例如，`Format(0.80345, "p")`返回`80.35 %`。</span><span class="sxs-lookup"><span data-stu-id="3578a-317">For example, `Format(0.80345, "p")` returns `80.35 %`.</span></span>|  
|`Scientific`|<span data-ttu-id="3578a-318">使用标准的科学记数法，提供两个有效位数。</span><span class="sxs-lookup"><span data-stu-id="3578a-318">Uses standard scientific notation, providing two significant digits.</span></span><br /><br /> <span data-ttu-id="3578a-319">例如，`Format(1234567, "Scientific")`返回`1.23E+06`。</span><span class="sxs-lookup"><span data-stu-id="3578a-319">For example, `Format(1234567, "Scientific")` returns `1.23E+06`.</span></span>|  
|<span data-ttu-id="3578a-320">`E`或 `e`</span><span class="sxs-lookup"><span data-stu-id="3578a-320">`E`, or `e`</span></span>|<span data-ttu-id="3578a-321">使用标准的科学记数法，提供六个有效位数。</span><span class="sxs-lookup"><span data-stu-id="3578a-321">Uses standard scientific notation, providing six significant digits.</span></span><br /><br /> <span data-ttu-id="3578a-322">例如，`Format(1234567, "e")`返回`1.234567e+006`。</span><span class="sxs-lookup"><span data-stu-id="3578a-322">For example, `Format(1234567, "e")` returns `1.234567e+006`.</span></span>|  
|<span data-ttu-id="3578a-323">`D`或 `d`</span><span class="sxs-lookup"><span data-stu-id="3578a-323">`D`, or `d`</span></span>|<span data-ttu-id="3578a-324">将数字显示为一个字符串，包含采用十进制 (基数为 10) 格式的数字的值。</span><span class="sxs-lookup"><span data-stu-id="3578a-324">Displays number as a string that contains the value of the number in Decimal (base 10) format.</span></span> <span data-ttu-id="3578a-325">对于整型类型支持此选项 (`Byte`， `Short`， `Integer`， `Long`) 仅。</span><span class="sxs-lookup"><span data-stu-id="3578a-325">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="3578a-326">例如，`Format(&H7F, "d")`返回`127`。</span><span class="sxs-lookup"><span data-stu-id="3578a-326">For example, `Format(&H7F, "d")` returns `127`.</span></span>|  
|<span data-ttu-id="3578a-327">`X`或 `x`</span><span class="sxs-lookup"><span data-stu-id="3578a-327">`X`, or `x`</span></span>|<span data-ttu-id="3578a-328">将数字显示为一个字符串，包含采用十六进制 (基数为 16) 格式的数字的值。</span><span class="sxs-lookup"><span data-stu-id="3578a-328">Displays number as a string that contains the value of the number in Hexadecimal (base 16) format.</span></span> <span data-ttu-id="3578a-329">对于整型类型支持此选项 (`Byte`， `Short`， `Integer`， `Long`) 仅。</span><span class="sxs-lookup"><span data-stu-id="3578a-329">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="3578a-330">例如，`Format(127, "x")`返回`7f`。</span><span class="sxs-lookup"><span data-stu-id="3578a-330">For example, `Format(127, "x")` returns `7f`.</span></span>|  
|`Yes/No`|<span data-ttu-id="3578a-331">显示`No`如果数字为 0; 否则为显示`Yes`。</span><span class="sxs-lookup"><span data-stu-id="3578a-331">Displays `No` if number is 0; otherwise, displays `Yes`.</span></span><br /><br /> <span data-ttu-id="3578a-332">例如，`Format(0, "Yes/No")`返回`No`。</span><span class="sxs-lookup"><span data-stu-id="3578a-332">For example, `Format(0, "Yes/No")` returns `No`.</span></span>|  
|`True/False`|<span data-ttu-id="3578a-333">显示`False`如果数字为 0; 否则为显示`True`。</span><span class="sxs-lookup"><span data-stu-id="3578a-333">Displays `False` if number is 0; otherwise, displays `True`.</span></span><br /><br /> <span data-ttu-id="3578a-334">例如，`Format(1, "True/False")`返回`True`。</span><span class="sxs-lookup"><span data-stu-id="3578a-334">For example, `Format(1, "True/False")` returns `True`.</span></span>|  
|`On/Off`|<span data-ttu-id="3578a-335">显示`Off`如果数字为 0; 否则为显示`On`。</span><span class="sxs-lookup"><span data-stu-id="3578a-335">Displays `Off` if number is 0; otherwise, displays `On`.</span></span><br /><br /> <span data-ttu-id="3578a-336">例如，`Format(1, "On/Off")`返回`On`。</span><span class="sxs-lookup"><span data-stu-id="3578a-336">For example, `Format(1, "On/Off")` returns `On`.</span></span>|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-337">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-337">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-338">`Yes/No`， `True/False`，和`On/Off`格式不受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-338">The `Yes/No`, `True/False`, and `On/Off` formats are not supported.</span></span>  
  
## <a name="user-defined-numeric-formats"></a><span data-ttu-id="3578a-339">用户定义的数值格式</span><span class="sxs-lookup"><span data-stu-id="3578a-339">User-Defined Numeric Formats</span></span>  
 <span data-ttu-id="3578a-340">下表标识了可用于创建用户定义的数字格式的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-340">The following table identifies characters you can use to create user-defined number formats.</span></span> <span data-ttu-id="3578a-341">这些可能用于生成`Style`自变量`Format`函数：</span><span class="sxs-lookup"><span data-stu-id="3578a-341">These may be used to build the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="3578a-342">字符</span><span class="sxs-lookup"><span data-stu-id="3578a-342">Character</span></span>|<span data-ttu-id="3578a-343">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-343">Description</span></span>|  
|-|-|  
|<span data-ttu-id="3578a-344">None</span><span class="sxs-lookup"><span data-stu-id="3578a-344">None</span></span>|<span data-ttu-id="3578a-345">显示不带格式数字。</span><span class="sxs-lookup"><span data-stu-id="3578a-345">Displays the number with no formatting.</span></span>|  
|<span data-ttu-id="3578a-346">(`0`)</span><span class="sxs-lookup"><span data-stu-id="3578a-346">(`0`)</span></span>|<span data-ttu-id="3578a-347">数字占位符。</span><span class="sxs-lookup"><span data-stu-id="3578a-347">Digit placeholder.</span></span> <span data-ttu-id="3578a-348">显示一个数字或零。</span><span class="sxs-lookup"><span data-stu-id="3578a-348">Displays a digit or a zero.</span></span> <span data-ttu-id="3578a-349">如果表达式在格式字符串中出现零的位置有一个数字，显示它;否则，将显示该位置的值为零。</span><span class="sxs-lookup"><span data-stu-id="3578a-349">If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.</span></span><br /><br /> <span data-ttu-id="3578a-350">当数字的位数少于格式表达式中，显示前导零或尾随零是零的个数 （不管在小数点的一侧）。</span><span class="sxs-lookup"><span data-stu-id="3578a-350">If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros.</span></span> <span data-ttu-id="3578a-351">当数字的数字位数的比小数点分隔符右侧有格式表达式中小数点分隔符右侧的零将舍入到任意多个数字的小数位数与零的个数。</span><span class="sxs-lookup"><span data-stu-id="3578a-351">If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros.</span></span> <span data-ttu-id="3578a-352">当数字的数字位数超过小数点分隔符左侧有零的格式表达式中小数点分隔符左侧显示额外的数字，而无需修改。</span><span class="sxs-lookup"><span data-stu-id="3578a-352">If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.</span></span>|  
|<span data-ttu-id="3578a-353">(`#`)</span><span class="sxs-lookup"><span data-stu-id="3578a-353">(`#`)</span></span>|<span data-ttu-id="3578a-354">数字占位符。</span><span class="sxs-lookup"><span data-stu-id="3578a-354">Digit placeholder.</span></span> <span data-ttu-id="3578a-355">显示一个数字或执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="3578a-355">Displays a digit or nothing.</span></span> <span data-ttu-id="3578a-356">如果该表达式的位置有一个数字其中`#`字符会出现在格式字符串中，将其显示; 否则，在该位置会显示任何内容。</span><span class="sxs-lookup"><span data-stu-id="3578a-356">If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.</span></span><br /><br /> <span data-ttu-id="3578a-357">此符号的作用类似`0`数字占位符，除了当数字的位数少于有前导零或尾随零不会显示`#`格式表达式中小数点分隔符任意一侧的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-357">This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.</span></span>|  
|<span data-ttu-id="3578a-358">(`.`)</span><span class="sxs-lookup"><span data-stu-id="3578a-358">(`.`)</span></span>|<span data-ttu-id="3578a-359">小数点占位符。</span><span class="sxs-lookup"><span data-stu-id="3578a-359">Decimal placeholder.</span></span> <span data-ttu-id="3578a-360">小数点占位符确定小数点分隔符左侧和右侧显示几位数。</span><span class="sxs-lookup"><span data-stu-id="3578a-360">The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator.</span></span> <span data-ttu-id="3578a-361">如果格式表达式仅包含`#`此符号左侧的字符; 数字小于 1 以小数点分隔符开头。</span><span class="sxs-lookup"><span data-stu-id="3578a-361">If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator.</span></span> <span data-ttu-id="3578a-362">若要显示随小数显示前导零，请使用零作为小数点分隔符左侧的第一个数字占位符。</span><span class="sxs-lookup"><span data-stu-id="3578a-362">To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator.</span></span> <span data-ttu-id="3578a-363">在某些区域设置中，逗号用作十进制分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-363">In some locales, a comma is used as the decimal separator.</span></span> <span data-ttu-id="3578a-364">用作小数点占位符在格式化输出中的实际字符取决于您的系统所识别的数字格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-364">The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system.</span></span> <span data-ttu-id="3578a-365">因此，您应使用句点用作小数点占位符在您的格式即使您位于使用逗号作为小数点占位符的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-365">Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder.</span></span> <span data-ttu-id="3578a-366">带格式的字符串将显示区域设置的正确格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-366">The formatted string will appear in the format correct for the locale.</span></span>|  
|<span data-ttu-id="3578a-367">(`%`)</span><span class="sxs-lookup"><span data-stu-id="3578a-367">(`%`)</span></span>|<span data-ttu-id="3578a-368">百分比占位符。</span><span class="sxs-lookup"><span data-stu-id="3578a-368">Percent placeholder.</span></span> <span data-ttu-id="3578a-369">将表达式乘以 100。</span><span class="sxs-lookup"><span data-stu-id="3578a-369">Multiplies the expression by 100.</span></span> <span data-ttu-id="3578a-370">百分比字符 (`%`) 插入格式字符串中出现的位置中。</span><span class="sxs-lookup"><span data-stu-id="3578a-370">The percent character (`%`) is inserted in the position where it appears in the format string.</span></span>|  
|<span data-ttu-id="3578a-371">(`,`)</span><span class="sxs-lookup"><span data-stu-id="3578a-371">(`,`)</span></span>|<span data-ttu-id="3578a-372">千位分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-372">Thousand separator.</span></span> <span data-ttu-id="3578a-373">千位分隔符用于分隔千位和百具有四个或多个位数的小数点分隔符左侧的数字中。</span><span class="sxs-lookup"><span data-stu-id="3578a-373">The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator.</span></span> <span data-ttu-id="3578a-374">则指定千位分隔符的标准用法如果格式包含由数字占位符包围的千位分隔符 (`0`或`#`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-374">Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).</span></span><br /><br /> <span data-ttu-id="3578a-375">千位分隔符紧挨小数点分隔符 （该值指示指定小数） 或最右侧左边中的字符字符串表示"伸缩数通过除以 1000，按需要四舍五入"。</span><span class="sxs-lookup"><span data-stu-id="3578a-375">A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means "scale the number by dividing it by 1,000, rounding as needed."</span></span> <span data-ttu-id="3578a-376">小于 1,000 但大于或等于 500 的数字显示为`1`，和数字小于 500 显示为`0`。</span><span class="sxs-lookup"><span data-stu-id="3578a-376">Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`.</span></span> <span data-ttu-id="3578a-377">通过 1 亿的身份和 1,000 的每个其他分隔符的另一个因素来扩展此位置的两个相邻千位分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-377">Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.</span></span><br /><br /> <span data-ttu-id="3578a-378">在紧挨小数点分隔符左侧以外的其他任何位置或字符串中的最右侧位置中的多个分隔符只被视为指定使用千位分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-378">Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator.</span></span> <span data-ttu-id="3578a-379">在某些区域设置中，句点用作千位分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-379">In some locales, a period is used as a thousand separator.</span></span> <span data-ttu-id="3578a-380">用作千位分隔符在格式化输出中的实际字符取决于您的系统所识别的数字格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-380">The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system.</span></span> <span data-ttu-id="3578a-381">因此，您应使用逗号作为千位分隔符在您的格式即使您位于使用句点作为千位分隔符的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-381">Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator.</span></span> <span data-ttu-id="3578a-382">带格式的字符串将显示区域设置的正确格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-382">The formatted string will appear in the format correct for the locale.</span></span><br /><br /> <span data-ttu-id="3578a-383">例如，考虑三个以下的格式字符串：</span><span class="sxs-lookup"><span data-stu-id="3578a-383">For example, consider the three following format strings:</span></span><br /><br /> <span data-ttu-id="3578a-384">-   `"#,0."`使用千位分隔符格式将数字 1 亿设置为字符串"100000000"。</span><span class="sxs-lookup"><span data-stu-id="3578a-384">-   `"#,0."`, which uses the thousands separator to format the number 100 million as the string "100,000,000".</span></span><br /><span data-ttu-id="3578a-385">-   `"#0,."`它使用按 1000 倍的系数缩放数字 100 万个格式化为字符串"100000"。</span><span class="sxs-lookup"><span data-stu-id="3578a-385">-   `"#0,."`, which uses scaling by a factor of one thousand to format the number 100 million as the string "100000".</span></span><br /><span data-ttu-id="3578a-386">-   `"#,0,."`哪些使用千位分隔符和缩放一千数字 100 万个格式化为字符串"100000"。</span><span class="sxs-lookup"><span data-stu-id="3578a-386">-   `"#,0,."`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string "100,000".</span></span>|  
|<span data-ttu-id="3578a-387">(`:`)</span><span class="sxs-lookup"><span data-stu-id="3578a-387">(`:`)</span></span>|<span data-ttu-id="3578a-388">时间分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-388">Time separator.</span></span> <span data-ttu-id="3578a-389">在某些区域设置，可能用其他字符来表示时间分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-389">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="3578a-390">时间分隔符用于分隔小时、 分钟和秒为单位设置时间值的格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-390">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="3578a-391">通过您的系统设置确定用作时间分隔符在格式化输出中的实际字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-391">The actual character used as the time separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="3578a-392">(`/`)</span><span class="sxs-lookup"><span data-stu-id="3578a-392">(`/`)</span></span>|<span data-ttu-id="3578a-393">日期分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-393">Date separator.</span></span> <span data-ttu-id="3578a-394">在某些区域设置，可能用其他字符来表示日期分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-394">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="3578a-395">日期分隔符用于分隔设置日期值的格式日、 月和年。</span><span class="sxs-lookup"><span data-stu-id="3578a-395">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="3578a-396">通过您的系统设置确定用作在格式化输出中的日期分隔符的实际字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-396">The actual character used as the date separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="3578a-397">(`E-``E+``e-``e+`)</span><span class="sxs-lookup"><span data-stu-id="3578a-397">(`E-``E+``e-``e+`)</span></span>|<span data-ttu-id="3578a-398">科学记数法格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-398">Scientific format.</span></span> <span data-ttu-id="3578a-399">如果格式表达式包含至少一个数字占位符 (`0`或`#`) 的左侧`E-`， `E+`， `e-`，或`e+`，以科学记数法格式显示数字和`E`或`e`数字和其指数之间插入。</span><span class="sxs-lookup"><span data-stu-id="3578a-399">If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent.</span></span> <span data-ttu-id="3578a-400">左侧的数字占位符数目确定指数中的位数。</span><span class="sxs-lookup"><span data-stu-id="3578a-400">The number of digit placeholders to the left determines the number of digits in the exponent.</span></span> <span data-ttu-id="3578a-401">使用`E-`或`e-`放置一个减号负指数的后面。</span><span class="sxs-lookup"><span data-stu-id="3578a-401">Use `E-` or `e-` to place a minus sign next to negative exponents.</span></span> <span data-ttu-id="3578a-402">使用`E+`或`e+`放置一个减号负指数的后面和正指数的后面一个加号。</span><span class="sxs-lookup"><span data-stu-id="3578a-402">Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents.</span></span> <span data-ttu-id="3578a-403">此外必须包括此符号的右侧，以获取正确的格式的数字占位符。</span><span class="sxs-lookup"><span data-stu-id="3578a-403">You must also include digit placeholders to the right of this symbol to get correct formatting.</span></span>|  
|<span data-ttu-id="3578a-404">`-` `+` `$` ( )</span><span class="sxs-lookup"><span data-stu-id="3578a-404">`-` `+` `$` ( )</span></span>|<span data-ttu-id="3578a-405">原义字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-405">Literal characters.</span></span> <span data-ttu-id="3578a-406">直接将键入在格式字符串中显示这些字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-406">These characters are displayed exactly as typed in the format string.</span></span> <span data-ttu-id="3578a-407">若要显示之外的其他列出的这些字符，它在前面加上一个反斜杠 (`\`) 或将其括在双引号 ("")。</span><span class="sxs-lookup"><span data-stu-id="3578a-407">To display a character other than one of those listed, precede it with a backslash (`\`) or enclose it in double quotation marks (" ").</span></span>|  
|<span data-ttu-id="3578a-408">(`\`)</span><span class="sxs-lookup"><span data-stu-id="3578a-408">(`\`)</span></span>|<span data-ttu-id="3578a-409">在格式字符串中显示的下一个字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-409">Displays the next character in the format string.</span></span> <span data-ttu-id="3578a-410">若要显示的字符具有特殊含义为原义字符，它在前面加上一个反斜杠 (`\`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-410">To display a character that has special meaning as a literal character, precede it with a backslash (`\`).</span></span> <span data-ttu-id="3578a-411">反斜杠本身不显示。</span><span class="sxs-lookup"><span data-stu-id="3578a-411">The backslash itself isn't displayed.</span></span> <span data-ttu-id="3578a-412">使用反斜杠是用双引号括住的下一个字符相同。</span><span class="sxs-lookup"><span data-stu-id="3578a-412">Using a backslash is the same as enclosing the next character in double quotation marks.</span></span> <span data-ttu-id="3578a-413">若要显示反斜杠，请使用两个反斜杠 (`\\`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-413">To display a backslash, use two backslashes (`\\`).</span></span><br /><br /> <span data-ttu-id="3578a-414">无法显示，因为原义字符是日期格式设置和时间格式设置字符的字符的示例 (`a`， `c`， `d`， `h`， `m`， `n`， `p`， `q`， `s`， `t`， `w`， `y`， `/`，以及`:`)，数值格式的字符 (`#`， `0`， `%`， `E`， `e`，逗号和句点)，和字符串格式设置字符 (`@`， `&`， `<`， `>`，和`!`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-414">Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).</span></span>|  
|<span data-ttu-id="3578a-415">(`"``ABC``"`)</span><span class="sxs-lookup"><span data-stu-id="3578a-415">(`"``ABC``"`)</span></span>|<span data-ttu-id="3578a-416">显示内部双引号引起来的字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="3578a-416">Displays the string inside the double quotation marks (" ").</span></span> <span data-ttu-id="3578a-417">若要从代码中的样式参数包含一个字符串，必须使用`Chr(34)`将文本放在 (`34`是引号 （"） 的字符代码)。</span><span class="sxs-lookup"><span data-stu-id="3578a-417">To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (")).</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="3578a-418">旧式代码示例</span><span class="sxs-lookup"><span data-stu-id="3578a-418">Legacy Code Example</span></span>  
 <span data-ttu-id="3578a-419">下表包含数字的一些示例格式表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-419">The following table contains some sample format expressions for numbers.</span></span> <span data-ttu-id="3578a-420">（所有这些示例假设您的系统区域设置设置为美国英语）第一列包含的格式字符串`Style`自变量的`Format`函数; 如果带格式的数据具有列标题中给定的值包含生成的输出的其他列。</span><span class="sxs-lookup"><span data-stu-id="3578a-420">(These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.</span></span>  
  
|<span data-ttu-id="3578a-421">格式 (`Style`)</span><span class="sxs-lookup"><span data-stu-id="3578a-421">Format (`Style`)</span></span>|<span data-ttu-id="3578a-422">为"5"格式设置</span><span class="sxs-lookup"><span data-stu-id="3578a-422">"5" formatted as</span></span>|<span data-ttu-id="3578a-423">"-5"格式为</span><span class="sxs-lookup"><span data-stu-id="3578a-423">"-5" formatted as</span></span>|<span data-ttu-id="3578a-424">作为"0.5"格式设置</span><span class="sxs-lookup"><span data-stu-id="3578a-424">"0.5" formatted as</span></span>|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a><span data-ttu-id="3578a-425">预定义的日期/时间格式</span><span class="sxs-lookup"><span data-stu-id="3578a-425">Predefined Date/Time Formats</span></span>  
 <span data-ttu-id="3578a-426">下表标识预定义的日期和时间格式的名称。</span><span class="sxs-lookup"><span data-stu-id="3578a-426">The following table identifies the predefined date and time format names.</span></span> <span data-ttu-id="3578a-427">这些可能用作按名称的样式参数`Format`函数：</span><span class="sxs-lookup"><span data-stu-id="3578a-427">These may be used by name as the style argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="3578a-428">格式名称</span><span class="sxs-lookup"><span data-stu-id="3578a-428">Format Name</span></span>|<span data-ttu-id="3578a-429">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-429">Description</span></span>|  
|-|-|  
|<span data-ttu-id="3578a-430">`General Date`或 `G`</span><span class="sxs-lookup"><span data-stu-id="3578a-430">`General Date`, or `G`</span></span>|<span data-ttu-id="3578a-431">显示日期和/或时间。</span><span class="sxs-lookup"><span data-stu-id="3578a-431">Displays a date and/or time.</span></span> <span data-ttu-id="3578a-432">例如 `3/12/2008 11:07:31 AM`。</span><span class="sxs-lookup"><span data-stu-id="3578a-432">For example, `3/12/2008 11:07:31 AM`.</span></span> <span data-ttu-id="3578a-433">日期显示由应用程序的当前区域性值确定。</span><span class="sxs-lookup"><span data-stu-id="3578a-433">Date display is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="3578a-434">`Long Date`、`Medium Date` 或 `D`</span><span class="sxs-lookup"><span data-stu-id="3578a-434">`Long Date`, `Medium Date`, or `D`</span></span>|<span data-ttu-id="3578a-435">显示根据您的当前区域性的长日期格式的日期。</span><span class="sxs-lookup"><span data-stu-id="3578a-435">Displays a date according to your current culture's long date format.</span></span> <span data-ttu-id="3578a-436">例如 `Wednesday, March 12, 2008`。</span><span class="sxs-lookup"><span data-stu-id="3578a-436">For example, `Wednesday, March 12, 2008`.</span></span>|  
|<span data-ttu-id="3578a-437">`Short Date`或 `d`</span><span class="sxs-lookup"><span data-stu-id="3578a-437">`Short Date`, or `d`</span></span>|<span data-ttu-id="3578a-438">显示使用当前区域性的短日期格式的日期。</span><span class="sxs-lookup"><span data-stu-id="3578a-438">Displays a date using your current culture's short date format.</span></span> <span data-ttu-id="3578a-439">例如 `3/12/2008`。</span><span class="sxs-lookup"><span data-stu-id="3578a-439">For example, `3/12/2008`.</span></span><br /><br /> <span data-ttu-id="3578a-440">`d`字符以用户定义的日期格式显示日期。</span><span class="sxs-lookup"><span data-stu-id="3578a-440">The `d` character displays the day in a user-defined date format.</span></span>|  
|<span data-ttu-id="3578a-441">`Long Time`、`Medium Time` 或 `T`</span><span class="sxs-lookup"><span data-stu-id="3578a-441">`Long Time`, `Medium Time`, or `T`</span></span>|<span data-ttu-id="3578a-442">使用当前区域性的长时间格式; 显示时间通常包括小时、 分钟和秒。</span><span class="sxs-lookup"><span data-stu-id="3578a-442">Displays a time using your current culture's long time format; typically includes hours, minutes, seconds.</span></span> <span data-ttu-id="3578a-443">例如 `11:07:31 AM`。</span><span class="sxs-lookup"><span data-stu-id="3578a-443">For example, `11:07:31 AM`.</span></span>|  
|<span data-ttu-id="3578a-444">`Short Time` 或 `t`</span><span class="sxs-lookup"><span data-stu-id="3578a-444">`Short Time` or `t`</span></span>|<span data-ttu-id="3578a-445">显示使用当前区域性的短时间格式的时间。</span><span class="sxs-lookup"><span data-stu-id="3578a-445">Displays a time using your current culture's short time format.</span></span> <span data-ttu-id="3578a-446">例如 `11:07 AM`。</span><span class="sxs-lookup"><span data-stu-id="3578a-446">For example, `11:07 AM`.</span></span><br /><br /> <span data-ttu-id="3578a-447">`t`字符显示`AM`或`PM`中用户定义的时间格式使用 12 小时制时钟的区域设置的值。</span><span class="sxs-lookup"><span data-stu-id="3578a-447">The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.</span></span>|  
|`f`|<span data-ttu-id="3578a-448">显示长日期和短时间根据当前区域性的格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-448">Displays the long date and short time according to your current culture's format.</span></span> <span data-ttu-id="3578a-449">例如 `Wednesday, March 12, 2008 11:07 AM`。</span><span class="sxs-lookup"><span data-stu-id="3578a-449">For example, `Wednesday, March 12, 2008 11:07 AM`.</span></span>|  
|`F`|<span data-ttu-id="3578a-450">显示长日期和长时间根据当前区域性的格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-450">Displays the long date and long time according to your current culture's format.</span></span> <span data-ttu-id="3578a-451">例如 `Wednesday, March 12, 2008 11:07:31 AM`。</span><span class="sxs-lookup"><span data-stu-id="3578a-451">For example, `Wednesday, March 12, 2008 11:07:31 AM`.</span></span>|  
|`g`|<span data-ttu-id="3578a-452">显示的短日期和短时间根据当前区域性的格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-452">Displays the short date and short time according to your current culture's format.</span></span> <span data-ttu-id="3578a-453">例如 `3/12/2008 11:07 AM`。</span><span class="sxs-lookup"><span data-stu-id="3578a-453">For example, `3/12/2008 11:07 AM`.</span></span>|  
|<span data-ttu-id="3578a-454">`M`， `m`</span><span class="sxs-lookup"><span data-stu-id="3578a-454">`M`, `m`</span></span>|<span data-ttu-id="3578a-455">显示月份和日期的日期。</span><span class="sxs-lookup"><span data-stu-id="3578a-455">Displays the month and the day of a date.</span></span> <span data-ttu-id="3578a-456">例如 `March 12`。</span><span class="sxs-lookup"><span data-stu-id="3578a-456">For example, `March 12`.</span></span><br /><br /> <span data-ttu-id="3578a-457">`M`字符以用户定义的日期格式显示月份。</span><span class="sxs-lookup"><span data-stu-id="3578a-457">The `M` character displays the month in a user-defined date format.</span></span> <span data-ttu-id="3578a-458">`m`字符以用户定义的时间格式显示分钟。</span><span class="sxs-lookup"><span data-stu-id="3578a-458">The `m` character displays the minutes in a user-defined time format.</span></span>|  
|<span data-ttu-id="3578a-459">`R`， `r`</span><span class="sxs-lookup"><span data-stu-id="3578a-459">`R`, `r`</span></span>|<span data-ttu-id="3578a-460">根据日期的格式<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="3578a-460">Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property.</span></span> <span data-ttu-id="3578a-461">例如 `Wed, 12 Mar 2008 11:07:31 GMT`。</span><span class="sxs-lookup"><span data-stu-id="3578a-461">For example, `Wed, 12 Mar 2008 11:07:31 GMT`.</span></span> <span data-ttu-id="3578a-462">带格式的日期不调整日期和时间值。</span><span class="sxs-lookup"><span data-stu-id="3578a-462">The formatted date does not adjust the value of the date and time.</span></span> <span data-ttu-id="3578a-463">必须在调用之前调整为 GMT 日期/时间值`Format`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-463">You must adjust the Date/Time value to GMT before calling the `Format` function.</span></span>|  
|`s`|<span data-ttu-id="3578a-464">设置日期和时间作为可排序索引格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-464">Formats the date and time as a sortable index.</span></span> <span data-ttu-id="3578a-465">例如 `2008-03-12T11:07:31`。</span><span class="sxs-lookup"><span data-stu-id="3578a-465">For example, `2008-03-12T11:07:31`.</span></span><br /><br /> <span data-ttu-id="3578a-466">`s`字符以用户定义的时间格式显示秒钟。</span><span class="sxs-lookup"><span data-stu-id="3578a-466">The `s` character displays the seconds in a user-defined time format.</span></span>|  
|`u`|<span data-ttu-id="3578a-467">设置日期和时间为 GMT 可排序索引格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-467">Formats the date and time as a GMT sortable index.</span></span> <span data-ttu-id="3578a-468">例如 `2008-03-12 11:07:31Z`。</span><span class="sxs-lookup"><span data-stu-id="3578a-468">For example, `2008-03-12 11:07:31Z`.</span></span>|  
|`U`|<span data-ttu-id="3578a-469">设置格式的日期和时间的长日期和长时间为 GMT。</span><span class="sxs-lookup"><span data-stu-id="3578a-469">Formats the date and time with the long date and long time as GMT.</span></span> <span data-ttu-id="3578a-470">例如 `Wednesday, March 12, 2008 6:07:31 PM`。</span><span class="sxs-lookup"><span data-stu-id="3578a-470">For example, `Wednesday, March 12, 2008 6:07:31 PM`.</span></span>|  
|<span data-ttu-id="3578a-471">`Y`， `y`</span><span class="sxs-lookup"><span data-stu-id="3578a-471">`Y`, `y`</span></span>|<span data-ttu-id="3578a-472">作为年份和月份日期的格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-472">Formats the date as the year and month.</span></span> <span data-ttu-id="3578a-473">例如 `March, 2008`。</span><span class="sxs-lookup"><span data-stu-id="3578a-473">For example, `March, 2008`.</span></span><br /><br /> <span data-ttu-id="3578a-474">`Y`和`y`字符以用户定义的日期格式显示年份。</span><span class="sxs-lookup"><span data-stu-id="3578a-474">The `Y` and `y` characters display the year in a user-defined date format.</span></span>|  
  
 <span data-ttu-id="3578a-475">有关应用程序的当前区域性信息的详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="3578a-475">For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
## <a name="user-defined-datetime-formats"></a><span data-ttu-id="3578a-476">用户定义的日期/时间格式</span><span class="sxs-lookup"><span data-stu-id="3578a-476">User-Defined Date/Time Formats</span></span>  
 <span data-ttu-id="3578a-477">下表显示了可用于创建用户定义的日期/时间格式的多个字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-477">The following table shows characters you can use to create user-defined date/time formats.</span></span> <span data-ttu-id="3578a-478">与在早期版本的 Visual Basic 中，这些格式字符是区分大小写。</span><span class="sxs-lookup"><span data-stu-id="3578a-478">Unlike in earlier versions of Visual Basic, these format characters are case-sensitive.</span></span>  
  
|<span data-ttu-id="3578a-479">字符</span><span class="sxs-lookup"><span data-stu-id="3578a-479">Character</span></span>|<span data-ttu-id="3578a-480">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-480">Description</span></span>|  
|-|-|  
|<span data-ttu-id="3578a-481">(`:`)</span><span class="sxs-lookup"><span data-stu-id="3578a-481">(`:`)</span></span>|<span data-ttu-id="3578a-482">时间分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-482">Time separator.</span></span> <span data-ttu-id="3578a-483">在某些区域设置，可能用其他字符来表示时间分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-483">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="3578a-484">时间分隔符用于分隔小时、 分钟和秒为单位设置时间值的格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-484">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="3578a-485">通过应用程序的当前区域性值确定用作时间分隔符在格式化输出中的实际字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-485">The actual character that is used as the time separator in formatted output is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="3578a-486">(`/`)</span><span class="sxs-lookup"><span data-stu-id="3578a-486">(`/`)</span></span>|<span data-ttu-id="3578a-487">日期分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-487">Date separator.</span></span> <span data-ttu-id="3578a-488">在某些区域设置，可能用其他字符来表示日期分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-488">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="3578a-489">日期分隔符用于分隔设置日期值的格式日、 月和年。</span><span class="sxs-lookup"><span data-stu-id="3578a-489">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="3578a-490">由应用程序的当前区域性确定用作在格式化输出中的日期分隔符的实际字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-490">The actual character that is used as the date separator in formatted output is determined by your application's current culture.</span></span>|  
|<span data-ttu-id="3578a-491">(`%`)</span><span class="sxs-lookup"><span data-stu-id="3578a-491">(`%`)</span></span>|<span data-ttu-id="3578a-492">用于指示应作为单个字母格式而不考虑任何尾随字母读取的后面的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-492">Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters.</span></span> <span data-ttu-id="3578a-493">此外用于指示以用户定义的格式读取单个字母格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-493">Also used to indicate that a single-letter format is read as a user-defined format.</span></span> <span data-ttu-id="3578a-494">请参阅以下有关其他详细信息的内容。</span><span class="sxs-lookup"><span data-stu-id="3578a-494">See what follows for additional details.</span></span>|  
|`d`|<span data-ttu-id="3578a-495">将天显示为不带前导零的数字 (例如， `1`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-495">Displays the day as a number without a leading zero (for example, `1`).</span></span> <span data-ttu-id="3578a-496">使用`%d`如果这是用户定义的数字格式中的唯一字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-496">Use `%d` if this is the only character in your user-defined numeric format.</span></span>|  
|`dd`|<span data-ttu-id="3578a-497">将天显示为带前导零的数字 (例如， `01`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-497">Displays the day as a number with a leading zero (for example, `01`).</span></span>|  
|`ddd`|<span data-ttu-id="3578a-498">将天显示为缩写 (例如， `Sun`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-498">Displays the day as an abbreviation (for example, `Sun`).</span></span>|  
|`dddd`|<span data-ttu-id="3578a-499">将天显示为完整名称 (例如， `Sunday`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-499">Displays the day as a full name (for example, `Sunday`).</span></span>|  
|`M`|<span data-ttu-id="3578a-500">将月显示为不带前导零的数字 (例如，一月表示为`1`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-500">Displays the month as a number without a leading zero (for example, January is represented as `1`).</span></span> <span data-ttu-id="3578a-501">使用`%M`如果这是用户定义的数字格式中的唯一字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-501">Use `%M` if this is the only character in your user-defined numeric format.</span></span>|  
|`MM`|<span data-ttu-id="3578a-502">将月显示为带前导零的数字 (例如， `01/12/01`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-502">Displays the month as a number with a leading zero (for example, `01/12/01`).</span></span>|  
|`MMM`|<span data-ttu-id="3578a-503">将月显示为缩写 (例如， `Jan`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-503">Displays the month as an abbreviation (for example, `Jan`).</span></span>|  
|`MMMM`|<span data-ttu-id="3578a-504">将月显示为完整的月份名称 (例如， `January`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-504">Displays the month as a full month name (for example, `January`).</span></span>|  
|`gg`|<span data-ttu-id="3578a-505">显示时期/时代字符串 (例如， `A.D.`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-505">Displays the period/era string (for example, `A.D.`).</span></span>|  
|`h`|<span data-ttu-id="3578a-506">不带前导零使用 12 小时制时钟将小时显示为一个数字 (例如， `1:15:15 PM`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-506">Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`).</span></span> <span data-ttu-id="3578a-507">使用`%h`如果这是用户定义的数字格式中的唯一字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-507">Use `%h` if this is the only character in your user-defined numeric format.</span></span>|  
|`hh`|<span data-ttu-id="3578a-508">将小时显示为带前导零使用 12 小时制时钟的数字 (例如， `01:15:15 PM`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-508">Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).</span></span>|  
|`H`|<span data-ttu-id="3578a-509">不带前导零使用 24 小时制时钟将小时显示为一个数字 (例如， `1:15:15`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-509">Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`).</span></span> <span data-ttu-id="3578a-510">使用`%H`如果这是用户定义的数字格式中的唯一字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-510">Use `%H` if this is the only character in your user-defined numeric format.</span></span>|  
|`HH`|<span data-ttu-id="3578a-511">将小时显示为带前导零使用 24 小时制的数字 (例如， `01:15:15`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-511">Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).</span></span>|  
|`m`|<span data-ttu-id="3578a-512">不带前导零将分钟显示为一个数字 (例如， `12:1:15`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-512">Displays the minute as a number without leading zeros (for example, `12:1:15`).</span></span> <span data-ttu-id="3578a-513">使用`%m`如果这是用户定义的数字格式中的唯一字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-513">Use `%m` if this is the only character in your user-defined numeric format.</span></span>|  
|`mm`|<span data-ttu-id="3578a-514">将分钟显示为带前导零的数字 (例如， `12:01:15`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-514">Displays the minute as a number with leading zeros (for example, `12:01:15`).</span></span>|  
|`s`|<span data-ttu-id="3578a-515">不带前导零将秒显示为一个数字 (例如， `12:15:5`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-515">Displays the second as a number without leading zeros (for example, `12:15:5`).</span></span> <span data-ttu-id="3578a-516">使用`%s`如果这是用户定义的数字格式中的唯一字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-516">Use `%s` if this is the only character in your user-defined numeric format.</span></span>|  
|`ss`|<span data-ttu-id="3578a-517">将秒显示为带前导零的数字 (例如， `12:15:05`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-517">Displays the second as a number with leading zeros (for example, `12:15:05`).</span></span>|  
|`f`|<span data-ttu-id="3578a-518">显示秒的小数部分。</span><span class="sxs-lookup"><span data-stu-id="3578a-518">Displays fractions of seconds.</span></span> <span data-ttu-id="3578a-519">例如`ff`显示百分之一秒，而`ffff`显示万分之一秒。</span><span class="sxs-lookup"><span data-stu-id="3578a-519">For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds.</span></span> <span data-ttu-id="3578a-520">你可以使用最多七个`f`用户定义的格式中的符号。</span><span class="sxs-lookup"><span data-stu-id="3578a-520">You may use up to seven `f` symbols in your user-defined format.</span></span> <span data-ttu-id="3578a-521">使用`%f`如果这是用户定义的数字格式中的唯一字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-521">Use `%f` if this is the only character in your user-defined numeric format.</span></span>|  
|`t`|<span data-ttu-id="3578a-522">使用 12 小时时钟，并显示大写`A`对于之前正午的任何小时显示大写`P`对于中午与 11:59 P.M 之间的任何小时</span><span class="sxs-lookup"><span data-stu-id="3578a-522">Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M.</span></span> <span data-ttu-id="3578a-523">使用`%t`如果这是用户定义的数字格式中的唯一字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-523">Use `%t` if this is the only character in your user-defined numeric format.</span></span>|  
|`tt`|<span data-ttu-id="3578a-524">对于使用 12 小时制时钟的区域设置，显示大写`AM`正午之前的任何小时有显示大写`PM`与中午与 11:59 P.M 之间的任何小时</span><span class="sxs-lookup"><span data-stu-id="3578a-524">For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.</span></span><br /><br /> <span data-ttu-id="3578a-525">对于使用 24 小时制时钟的区域设置，会显示任何内容。</span><span class="sxs-lookup"><span data-stu-id="3578a-525">For locales that use a 24-hour clock, displays nothing.</span></span>|  
|`y`|<span data-ttu-id="3578a-526">显示不带前导零的年数 (0-9)。</span><span class="sxs-lookup"><span data-stu-id="3578a-526">Displays the year number (0-9) without leading zeros.</span></span> <span data-ttu-id="3578a-527">使用`%y`如果这是用户定义的数字格式中的唯一字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-527">Use `%y` if this is the only character in your user-defined numeric format.</span></span>|  
|`yy`|<span data-ttu-id="3578a-528">如果适用，将年显示两位数字表示带一个前导零的数字格式中。</span><span class="sxs-lookup"><span data-stu-id="3578a-528">Displays the year in two-digit numeric format with a leading zero, if applicable.</span></span>|  
|`yyy`|<span data-ttu-id="3578a-529">将年份显示四位数字的数字格式中。</span><span class="sxs-lookup"><span data-stu-id="3578a-529">Displays the year in four-digit numeric format.</span></span>|  
|`yyyy`|<span data-ttu-id="3578a-530">将年份显示四位数字的数字格式中。</span><span class="sxs-lookup"><span data-stu-id="3578a-530">Displays the year in four-digit numeric format.</span></span>|  
|`z`|<span data-ttu-id="3578a-531">显示不带前导零的时区偏移量 (例如， `-8`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-531">Displays the timezone offset without a leading zero (for example, `-8`).</span></span> <span data-ttu-id="3578a-532">使用`%z`如果这是用户定义的数字格式中的唯一字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-532">Use `%z` if this is the only character in your user-defined numeric format.</span></span>|  
|`zz`|<span data-ttu-id="3578a-533">显示带一个前导零的时区偏移量 (例如， `-08`)</span><span class="sxs-lookup"><span data-stu-id="3578a-533">Displays the timezone offset with a leading zero (for example, `-08`)</span></span>|  
|`zzz`|<span data-ttu-id="3578a-534">显示完整的时区偏移量 (例如， `-08:00`)</span><span class="sxs-lookup"><span data-stu-id="3578a-534">Displays the full timezone offset (for example, `-08:00`)</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="3578a-535">旧式代码示例</span><span class="sxs-lookup"><span data-stu-id="3578a-535">Legacy Code Example</span></span>  
 <span data-ttu-id="3578a-536">下面的示例的用户定义的日期和时间格式为`December 7, 1958, 8:50 PM, 35 seconds`:</span><span class="sxs-lookup"><span data-stu-id="3578a-536">The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:</span></span>  
  
|<span data-ttu-id="3578a-537">格式</span><span class="sxs-lookup"><span data-stu-id="3578a-537">Format</span></span>|<span data-ttu-id="3578a-538">显示</span><span class="sxs-lookup"><span data-stu-id="3578a-538">Displays</span></span>|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-539">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-539">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-540">由设备制造商确定设备的最小时间解析度。</span><span class="sxs-lookup"><span data-stu-id="3578a-540">The minimum time resolution for a device is determined by the manufacturer of the device.</span></span> <span data-ttu-id="3578a-541">如果该设备的时间解析度非常低，`f`格式字符，则返回 0 时该设备上运行。</span><span class="sxs-lookup"><span data-stu-id="3578a-541">If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-542">此示例演示同时使用 `Format` 格式和用户定义格式格式化值的 `String` 函数的各种用法。</span><span class="sxs-lookup"><span data-stu-id="3578a-542">This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats.</span></span> <span data-ttu-id="3578a-543">对于日期分隔符 (`/`)、时间分隔符 (`:`) 和 AM/PM 指示符（`t` 和 `tt`），系统显示的实际格式化输出取决于代码使用的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-543">For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using.</span></span> <span data-ttu-id="3578a-544">当在开发环境中显示时间和日期时，使用代码区域设置的短时间格式和短日期格式。</span><span class="sxs-lookup"><span data-stu-id="3578a-544">When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-545">对于使用 24 小时制的区域设置，AM/PM 指示符（`t` 和 `tt`）不显示任何内容。</span><span class="sxs-lookup"><span data-stu-id="3578a-545">For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.</span></span>  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-546">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-546">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-547">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-547">Required.</span></span> <span data-ttu-id="3578a-548">要格式化的表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-548">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="3578a-549">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-549">Optional.</span></span> <span data-ttu-id="3578a-550">数值，指示在小数点右侧显示的位数。</span><span class="sxs-lookup"><span data-stu-id="3578a-550">Numeric value indicating how many places are displayed to the right of the decimal.</span></span> <span data-ttu-id="3578a-551">默认值为 -1，指示使用了计算机的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-551">Default value is -1, which indicates that the computer's regional settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="3578a-552">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-552">Optional.</span></span> <span data-ttu-id="3578a-553"><see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示对于小数值是否显示前导零。</span><span class="sxs-lookup"><span data-stu-id="3578a-553"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values.</span></span> <span data-ttu-id="3578a-554">请参见值的“备注”。</span><span class="sxs-lookup"><span data-stu-id="3578a-554">See "Remarks" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="3578a-555">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-555">Optional.</span></span> <span data-ttu-id="3578a-556"><see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示是否用括号将负值括起来。</span><span class="sxs-lookup"><span data-stu-id="3578a-556"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses.</span></span> <span data-ttu-id="3578a-557">请参见值的“备注”。</span><span class="sxs-lookup"><span data-stu-id="3578a-557">See "Remarks" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="3578a-558">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-558">Optional.</span></span> <span data-ttu-id="3578a-559"><see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示是否用计算机区域设置中指定的组分隔符对数字进行分组。</span><span class="sxs-lookup"><span data-stu-id="3578a-559"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings.</span></span> <span data-ttu-id="3578a-560">请参见值的“备注”。</span><span class="sxs-lookup"><span data-stu-id="3578a-560">See "Remarks" for values.</span></span></param>
        <summary><span data-ttu-id="3578a-561">返回一个格式为货币值的表达式，该货币值使用系统控制面板中定义的货币符号。</span><span class="sxs-lookup"><span data-stu-id="3578a-561">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span></span></summary>
        <returns><span data-ttu-id="3578a-562">一个格式为货币值的表达式，该货币值使用系统控制面板中定义的货币符号。</span><span class="sxs-lookup"><span data-stu-id="3578a-562">An expression formatted as a currency value using the currency symbol defined in the system control panel.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-563">时省略了一个或多个可选参数，将改为使用计算机的匹配区域设置值。</span><span class="sxs-lookup"><span data-stu-id="3578a-563">When one or more optional arguments are omitted, the computer's matching regional-settings values are used instead.</span></span>  
  
 <span data-ttu-id="3578a-564">相对于货币值的货币符号的位置取决于系统的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-564">The position of the currency symbol relative to the currency value is determined by the system's regional settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-565">设置的所有信息均都来自应用程序的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-565">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="3578a-566">默认情况下，将在控制面板中设置的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-566">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="3578a-567">但是，它可能会更改以编程方式使用.NET Framework 中，除前导零，来自`Number`选项卡。</span><span class="sxs-lookup"><span data-stu-id="3578a-567">However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the `Number` tab.</span></span>  
  
 <span data-ttu-id="3578a-568">`IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`参数采用以下三态枚举值。</span><span class="sxs-lookup"><span data-stu-id="3578a-568">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments take the following TriState enumeration values.</span></span>  
  
|<span data-ttu-id="3578a-569">值</span><span class="sxs-lookup"><span data-stu-id="3578a-569">Value</span></span>|<span data-ttu-id="3578a-570">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-570">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="3578a-571">True</span><span class="sxs-lookup"><span data-stu-id="3578a-571">True</span></span>|  
|`TriState.False`|<span data-ttu-id="3578a-572">False</span><span class="sxs-lookup"><span data-stu-id="3578a-572">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="3578a-573">计算机的区域设置</span><span class="sxs-lookup"><span data-stu-id="3578a-573">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-574">下面的示例说明了 `FormatCurrency` 函数的用法。</span><span class="sxs-lookup"><span data-stu-id="3578a-574">The following example illustrates the use of the `FormatCurrency` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-575">小数点后的数字位数大于 99。</span><span class="sxs-lookup"><span data-stu-id="3578a-575">Number of digits after decimal point is greater than 99.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3578a-576">不是数字类型。</span><span class="sxs-lookup"><span data-stu-id="3578a-576">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-577">字符串操作</span><span class="sxs-lookup"><span data-stu-id="3578a-577">String Manipulation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-578">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-578">Required.</span></span> <span data-ttu-id="3578a-579">要格式化的 <see langword="Date" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-579"><see langword="Date" /> expression to be formatted.</span></span></param>
        <param name="NamedFormat"><span data-ttu-id="3578a-580">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-580">Optional.</span></span> <span data-ttu-id="3578a-581">指示所使用的日期/时间格式的数值。</span><span class="sxs-lookup"><span data-stu-id="3578a-581">Numeric value that indicates the date/time format used.</span></span> <span data-ttu-id="3578a-582">如果省略，则使用 <see langword="DateFormat.GeneralDate" />。</span><span class="sxs-lookup"><span data-stu-id="3578a-582">If omitted, <see langword="DateFormat.GeneralDate" /> is used.</span></span></param>
        <summary><span data-ttu-id="3578a-583">返回一个表示日期/时间值的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-583">Returns a string expression representing a date/time value.</span></span></summary>
        <returns><span data-ttu-id="3578a-584">一个表示日期/时间值的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-584">A string expression representing a date/time value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-585">`Date`数据类型始终包含日期和时间信息。</span><span class="sxs-lookup"><span data-stu-id="3578a-585">The `Date` data type always contains both date and time information.</span></span> <span data-ttu-id="3578a-586">为进行类型转换，Visual Basic 将 1/1/1 (1 月 1 日的 1 年度) 作为时间为非特定值的日期和 00:00:00 （午夜） 的非特定值。</span><span class="sxs-lookup"><span data-stu-id="3578a-586">For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time.</span></span> <span data-ttu-id="3578a-587">如果您设置的格式`Date`值为日期/时间字符串，`FormatDateTime`不在生成的字符串中包括非特定值。</span><span class="sxs-lookup"><span data-stu-id="3578a-587">If you format a `Date` value as a date/time string, `FormatDateTime` does not include neutral values in the resulting string.</span></span> <span data-ttu-id="3578a-588">例如，如果转换 #1/1/0001 # 为一个字符串，则结果是"9:30:00 AM"; 的 9:30:00取消日期信息。</span><span class="sxs-lookup"><span data-stu-id="3578a-588">For example, if you convert #1/1/0001 9:30:00# to a string, the result is "9:30:00 AM"; the date information is suppressed.</span></span> <span data-ttu-id="3578a-589">但是，日期信息仍会在原始`Date`值和可恢复函数如`DatePart`。</span><span class="sxs-lookup"><span data-stu-id="3578a-589">However, the date information is still present in the original `Date` value and can be recovered with functions such as `DatePart`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-590">如果传递`Expression`参数中的作为`String`文本，`FormatDateTime`将根据其解释<xref:System.Globalization.CultureInfo.CurrentCulture%2A>应用程序的设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-590">If you pass the `Expression` argument as a `String` literal, `FormatDateTime` interprets it according to the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> setting of your application.</span></span> <span data-ttu-id="3578a-591">但是，如果将其作为传递`Date`文本，使用格式 #mm/dd/yyyy #，因为`FormatDateTime`总是将解释`Date`文本取决于英语 （美国） 区域性设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-591">However, if you pass it as a `Date` literal, use the format #mm/dd/yyyy#, because `FormatDateTime` always interprets a `Date` literal according to the English (US) culture.</span></span> <span data-ttu-id="3578a-592">这是必需的因为如果应用程序开发和使用进行编码`Date`来自其中一个的文本的区域性，但具有不同区域性的平台上然后执行`Date`无法正确地分析文本。</span><span class="sxs-lookup"><span data-stu-id="3578a-592">This is necessary because, if an application is developed and coded using `Date` literals from one culture, but is then executed on a platform with a different culture, the `Date` literals could be parsed incorrectly.</span></span>  
  
 <span data-ttu-id="3578a-593">`NamedFormat`参数具有以下设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-593">The `NamedFormat` argument has the following settings.</span></span>  
  
|<span data-ttu-id="3578a-594">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-594">Constant</span></span>|<span data-ttu-id="3578a-595">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-595">Description</span></span>|  
|-|-|  
|`DateFormat.GeneralDate`|<span data-ttu-id="3578a-596">显示日期和/或时间。</span><span class="sxs-lookup"><span data-stu-id="3578a-596">Display a date and/or time.</span></span> <span data-ttu-id="3578a-597">显示为短日期的日期部分。</span><span class="sxs-lookup"><span data-stu-id="3578a-597">Display a date part as a short date.</span></span> <span data-ttu-id="3578a-598">如果没有时间部分，则很长时间格式显示。</span><span class="sxs-lookup"><span data-stu-id="3578a-598">If there is a time part, display it as a long time.</span></span> <span data-ttu-id="3578a-599">如果存在，这两个部分都显示。</span><span class="sxs-lookup"><span data-stu-id="3578a-599">If present, both parts display.</span></span>|  
|`DateFormat.LongDate`|<span data-ttu-id="3578a-600">显示使用计算机的区域设置中指定的长日期格式的日期。</span><span class="sxs-lookup"><span data-stu-id="3578a-600">Display a date using the long date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortDate`|<span data-ttu-id="3578a-601">显示使用计算机的区域设置中指定的短日期格式的日期。</span><span class="sxs-lookup"><span data-stu-id="3578a-601">Display a date using the short date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.LongTime`|<span data-ttu-id="3578a-602">显示使用计算机的区域设置中指定的时间格式的时间。</span><span class="sxs-lookup"><span data-stu-id="3578a-602">Display a time using the time format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortTime`|<span data-ttu-id="3578a-603">显示时间使用 24 小时格式 (hh: mm)。</span><span class="sxs-lookup"><span data-stu-id="3578a-603">Display a time using the 24-hour format (hh:mm).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-604">此示例演示如何使用`FormatDateTime`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-604">This example demonstrates the use of the `FormatDateTime` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-605"><paramref name="NamedFormat" /> 设置无效。</span><span class="sxs-lookup"><span data-stu-id="3578a-605"><paramref name="NamedFormat" /> setting is not valid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-606">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-606">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-607">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-607">Required.</span></span> <span data-ttu-id="3578a-608">要格式化的表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-608">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="3578a-609">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-609">Optional.</span></span> <span data-ttu-id="3578a-610">数值，指示在小数点右侧显示的位数。</span><span class="sxs-lookup"><span data-stu-id="3578a-610">Numeric value indicating how many places are displayed to the right of the decimal.</span></span> <span data-ttu-id="3578a-611">默认值为 -1，指示使用了计算机的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-611">The default value is -1, which indicates that the computer's regional settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="3578a-612">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-612">Optional.</span></span> <span data-ttu-id="3578a-613"><see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示对于小数值是否显示前导零。</span><span class="sxs-lookup"><span data-stu-id="3578a-613"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values.</span></span> <span data-ttu-id="3578a-614">请参阅“设置”，以获取值。</span><span class="sxs-lookup"><span data-stu-id="3578a-614">See "Settings" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="3578a-615">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-615">Optional.</span></span> <span data-ttu-id="3578a-616"><see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否用括号将负值括起来。</span><span class="sxs-lookup"><span data-stu-id="3578a-616"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses.</span></span> <span data-ttu-id="3578a-617">请参阅“设置”，以获取值。</span><span class="sxs-lookup"><span data-stu-id="3578a-617">See "Settings" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="3578a-618">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-618">Optional.</span></span> <span data-ttu-id="3578a-619"><see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否使用区域设置中指定的组分隔符对数字进行分组。</span><span class="sxs-lookup"><span data-stu-id="3578a-619"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span></span> <span data-ttu-id="3578a-620">请参阅“设置”，以获取值。</span><span class="sxs-lookup"><span data-stu-id="3578a-620">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="3578a-621">返回格式化为数字的表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-621">Returns an expression formatted as a number.</span></span></summary>
        <returns><span data-ttu-id="3578a-622">格式化为数字的表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-622">An expression formatted as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-623">时省略了一个或多个可选自变量是由区域设置提供省略的实参的值。</span><span class="sxs-lookup"><span data-stu-id="3578a-623">When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-624">设置的所有信息均都来自应用程序的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-624">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="3578a-625">默认情况下，将在控制面板中设置的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-625">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="3578a-626">但是，它可能会更改以编程方式使用.NET Framework。</span><span class="sxs-lookup"><span data-stu-id="3578a-626">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="3578a-627">`IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`参数具有以下设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-627">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="3578a-628">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-628">Constant</span></span>|<span data-ttu-id="3578a-629">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-629">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="3578a-630">True</span><span class="sxs-lookup"><span data-stu-id="3578a-630">True</span></span>|  
|`TriState.False`|<span data-ttu-id="3578a-631">False</span><span class="sxs-lookup"><span data-stu-id="3578a-631">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="3578a-632">计算机的区域设置</span><span class="sxs-lookup"><span data-stu-id="3578a-632">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-633">此示例演示`FormatNumber`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-633">This example demonstrates the `FormatNumber` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3578a-634">不是数字类型。</span><span class="sxs-lookup"><span data-stu-id="3578a-634">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-635">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-635">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-636">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-636">Required.</span></span> <span data-ttu-id="3578a-637">要格式化的表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-637">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="3578a-638">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-638">Optional.</span></span> <span data-ttu-id="3578a-639">数字值，该值指示要显示小数点右侧的多少位。</span><span class="sxs-lookup"><span data-stu-id="3578a-639">Numeric value indicating how many places to the right of the decimal are displayed.</span></span> <span data-ttu-id="3578a-640">默认值为 -1，指示使用了区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-640">Default value is -1, which indicates that the locale settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="3578a-641">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-641">Optional.</span></span> <span data-ttu-id="3578a-642"><see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否显示小数值前的零。</span><span class="sxs-lookup"><span data-stu-id="3578a-642"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values.</span></span> <span data-ttu-id="3578a-643">请参阅“设置”，以获取值。</span><span class="sxs-lookup"><span data-stu-id="3578a-643">See "Settings" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="3578a-644">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-644">Optional.</span></span> <span data-ttu-id="3578a-645"><see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否在括号内放入负值。</span><span class="sxs-lookup"><span data-stu-id="3578a-645"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses.</span></span> <span data-ttu-id="3578a-646">请参阅“设置”，以获取值。</span><span class="sxs-lookup"><span data-stu-id="3578a-646">See "Settings" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="3578a-647">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-647">Optional.</span></span> <span data-ttu-id="3578a-648"><see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否使用区域设置中指定的组分隔符对数字进行分组。</span><span class="sxs-lookup"><span data-stu-id="3578a-648"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span></span> <span data-ttu-id="3578a-649">请参阅“设置”，以获取值。</span><span class="sxs-lookup"><span data-stu-id="3578a-649">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="3578a-650">返回以 % 字符结尾的百分比格式的表达式（即乘以 100）。</span><span class="sxs-lookup"><span data-stu-id="3578a-650">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span></span></summary>
        <returns><span data-ttu-id="3578a-651">以 % 字符结尾的百分比格式（即乘以 100）的表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-651">An expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-652">当省略一个或多个可选参数时，由区域设置提供省略的实参的值。</span><span class="sxs-lookup"><span data-stu-id="3578a-652">When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-653">设置的所有信息均都来自应用程序的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-653">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="3578a-654">默认情况下，将在控制面板中设置的区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-654">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="3578a-655">但是，它可能会更改以编程方式使用.NET Framework。</span><span class="sxs-lookup"><span data-stu-id="3578a-655">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="3578a-656">`IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`参数具有以下设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-656">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="3578a-657">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-657">Constant</span></span>|<span data-ttu-id="3578a-658">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-658">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="3578a-659">True</span><span class="sxs-lookup"><span data-stu-id="3578a-659">True</span></span>|  
|`TriState.False`|<span data-ttu-id="3578a-660">False</span><span class="sxs-lookup"><span data-stu-id="3578a-660">False</span></span>|  
|`TriState.Default`|<span data-ttu-id="3578a-661">计算机的区域设置</span><span class="sxs-lookup"><span data-stu-id="3578a-661">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-662">此示例演示如何使用`FormatPercent`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-662">This example illustrates the use of the `FormatPercent` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3578a-663">不是数字类型。</span><span class="sxs-lookup"><span data-stu-id="3578a-663">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-664">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-664">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Index" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="3578a-665">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-665">Required.</span></span> <span data-ttu-id="3578a-666">任何有效的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-666">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="Index"><span data-ttu-id="3578a-667">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-667">Required.</span></span> <span data-ttu-id="3578a-668"><see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-668"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="3578a-669">要返回的 <paramref name="str" /> 中的字符索引（从 1 开始）。</span><span class="sxs-lookup"><span data-stu-id="3578a-669">The (1-based) index of the character in <paramref name="str" /> to be returned.</span></span></param>
        <summary><span data-ttu-id="3578a-670">返回 <see langword="Char" /> 值，该值表示提供的字符串中位于指定的索引位置处的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-670">Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</span></span></summary>
        <returns><span data-ttu-id="3578a-671"><see langword="Char" /> 值，该值表示提供的字符串中指定索引处的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-671"><see langword="Char" /> value representing the character from the specified index in the supplied string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-672">如果`Index`小于 1 或大于中的最后一个字符的索引`str`、`ArgumentException`引发。</span><span class="sxs-lookup"><span data-stu-id="3578a-672">If `Index` is less than 1 or greater than the index of the last character in `str`, an `ArgumentException` is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-673">此示例演示如何使用`GetChar`函数返回从指定索引中的一个字符`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-673">This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.</span></span>  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-674"><paramref name="str" /> 为 <see langword="Nothing" />，<paramref name="Index" /> &lt; 1，或 <paramref name="Index" /> 大于 <paramref name="str" /> 最后一个字符的索引。</span><span class="sxs-lookup"><span data-stu-id="3578a-674"><paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-675">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-675">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3578a-676">返回一个整数，该整数指定一个字符串在另一个字符串中的第一个匹配项的起始位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-676">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span>  <span data-ttu-id="3578a-677">如果找到了匹配项，则该整数是从 1 开始的索引。</span><span class="sxs-lookup"><span data-stu-id="3578a-677">The integer is a one-based index if a match is found.</span></span>  <span data-ttu-id="3578a-678">如果未找到匹配项，则函数返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-678">If no match is found, the function returns zero.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1"><span data-ttu-id="3578a-679">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-679">Required.</span></span> <span data-ttu-id="3578a-680">正在搜索的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-680"><see langword="String" /> expression being searched.</span></span></param>
        <param name="String2"><span data-ttu-id="3578a-681">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-681">Required.</span></span> <span data-ttu-id="3578a-682">查找到的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-682"><see langword="String" /> expression sought.</span></span></param>
        <param name="Compare"><span data-ttu-id="3578a-683">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-683">Optional.</span></span> <span data-ttu-id="3578a-684">指定字符串比较的类型。</span><span class="sxs-lookup"><span data-stu-id="3578a-684">Specifies the type of string comparison.</span></span> <span data-ttu-id="3578a-685">如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</span><span class="sxs-lookup"><span data-stu-id="3578a-685">If <paramref name="Compare" /> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="3578a-686">返回一个整数，该整数指定一个字符串在另一个字符串中的第一个匹配项的起始位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-686">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span></summary>
        <returns><list type="table">
            <item>
              <term> <span data-ttu-id="3578a-687">如果</span><span class="sxs-lookup"><span data-stu-id="3578a-687">If</span></span> 
 </term>
              <description> <span data-ttu-id="3578a-688">InStr 返回</span><span class="sxs-lookup"><span data-stu-id="3578a-688">InStr returns</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-689">
                <paramref name="String1" /> 的长度为零或 <see langword="Nothing" /></span><span class="sxs-lookup"><span data-stu-id="3578a-689">
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="3578a-690">0</span><span class="sxs-lookup"><span data-stu-id="3578a-690">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-691">
                <paramref name="String2" /> 的长度为零或 <see langword="Nothing" /></span><span class="sxs-lookup"><span data-stu-id="3578a-691">
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="3578a-692">搜索的开始位置，该位置默认为第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-692">The starting position for the search, which defaults to the first character position.</span></span>  
  
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-693">未找到 
                <paramref name="String2" />。</span><span class="sxs-lookup"><span data-stu-id="3578a-693">
                <paramref name="String2" /> is not found</span></span> 
 </term>
              <description> <span data-ttu-id="3578a-694">0</span><span class="sxs-lookup"><span data-stu-id="3578a-694">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-695">在 
                <paramref name="String2" /> 中找到 <paramref name="String1" /></span><span class="sxs-lookup"><span data-stu-id="3578a-695">
                <paramref name="String2" /> is found within <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="3578a-696">匹配开始的位置</span><span class="sxs-lookup"><span data-stu-id="3578a-696">Position where match begins</span></span> 
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-697">通常情况下，`InStr`函数用于分析字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-697">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-698">`InStrB`在以前版本的 Visual Basic 函数返回的字节，而不是字符位置数。</span><span class="sxs-lookup"><span data-stu-id="3578a-698">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="3578a-699">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-699">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-700">Visual Basic 2005 的所有字符串都都以 unicode 格式，和`InStrB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-700">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="3578a-701">`Compare` 参数的设置是：</span><span class="sxs-lookup"><span data-stu-id="3578a-701">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="3578a-702">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-702">Constant</span></span>|<span data-ttu-id="3578a-703">值</span><span class="sxs-lookup"><span data-stu-id="3578a-703">Value</span></span>|<span data-ttu-id="3578a-704">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-704">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="3578a-705">0</span><span class="sxs-lookup"><span data-stu-id="3578a-705">0</span></span>|<span data-ttu-id="3578a-706">执行二进制比较</span><span class="sxs-lookup"><span data-stu-id="3578a-706">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="3578a-707">1</span><span class="sxs-lookup"><span data-stu-id="3578a-707">1</span></span>|<span data-ttu-id="3578a-708">执行文本比较</span><span class="sxs-lookup"><span data-stu-id="3578a-708">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-709">本例使用 `InStr` 函数返回一个字符串在另一个字符串中的第一个匹配项的位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-709">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="3578a-710">字符串 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-710">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="3578a-711">字符串介绍 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-711">Introduction to Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md"><span data-ttu-id="3578a-712">Option Compare 语句</span><span class="sxs-lookup"><span data-stu-id="3578a-712">Option Compare Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start"><span data-ttu-id="3578a-713">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-713">Optional.</span></span> <span data-ttu-id="3578a-714">数值表达式，设置每个搜索的起始位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-714">Numeric expression that sets the starting position for each search.</span></span> <span data-ttu-id="3578a-715">如果省略该参数，则从第一个字符位置开始搜索。</span><span class="sxs-lookup"><span data-stu-id="3578a-715">If omitted, search begins at the first character position.</span></span> <span data-ttu-id="3578a-716">起始索引从一开始。</span><span class="sxs-lookup"><span data-stu-id="3578a-716">The start index is 1-based.</span></span></param>
        <param name="StartPos">To be added.</param>
        <param name="String1"><span data-ttu-id="3578a-717">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-717">Required.</span></span> <span data-ttu-id="3578a-718">正在搜索的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-718"><see langword="String" /> expression being searched.</span></span></param>
        <param name="String2"><span data-ttu-id="3578a-719">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-719">Required.</span></span> <span data-ttu-id="3578a-720">查找到的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-720"><see langword="String" /> expression sought.</span></span></param>
        <param name="Compare"><span data-ttu-id="3578a-721">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-721">Optional.</span></span> <span data-ttu-id="3578a-722">指定字符串比较的类型。</span><span class="sxs-lookup"><span data-stu-id="3578a-722">Specifies the type of string comparison.</span></span> <span data-ttu-id="3578a-723">如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</span><span class="sxs-lookup"><span data-stu-id="3578a-723">If <paramref name="Compare" /> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="3578a-724">返回一个整数，该整数指定一个字符串在另一个字符串中的第一个匹配项的起始位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-724">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span></summary>
        <returns><list type="table">
            <item>
              <term> <span data-ttu-id="3578a-725">如果</span><span class="sxs-lookup"><span data-stu-id="3578a-725">If</span></span> 
 </term>
              <description> <span data-ttu-id="3578a-726">InStr 返回</span><span class="sxs-lookup"><span data-stu-id="3578a-726">InStr returns</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-727">
                <paramref name="String1" /> 的长度为零或 <see langword="Nothing" /></span><span class="sxs-lookup"><span data-stu-id="3578a-727">
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="3578a-728">0</span><span class="sxs-lookup"><span data-stu-id="3578a-728">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-729">
                <paramref name="String2" /> 的长度为零或 <see langword="Nothing" /></span><span class="sxs-lookup"><span data-stu-id="3578a-729">
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-730">未找到 
                <paramref name="String2" />。</span><span class="sxs-lookup"><span data-stu-id="3578a-730">
                <paramref name="String2" /> is not found</span></span> 
 </term>
              <description> <span data-ttu-id="3578a-731">0</span><span class="sxs-lookup"><span data-stu-id="3578a-731">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-732">在 
                <paramref name="String2" /> 中找到 <paramref name="String1" /></span><span class="sxs-lookup"><span data-stu-id="3578a-732">
                <paramref name="String2" /> is found within <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="3578a-733">匹配开始的位置</span><span class="sxs-lookup"><span data-stu-id="3578a-733">Position where match begins</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-734">
                <paramref name="Start" /> 长度大于 <paramref name="String1" /></span><span class="sxs-lookup"><span data-stu-id="3578a-734">
                <paramref name="Start" /> &gt; length of <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="3578a-735">0</span><span class="sxs-lookup"><span data-stu-id="3578a-735">0</span></span> 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-736">通常情况下，`InStr`函数用于分析字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-736">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-737">`InStrB`在以前版本的 Visual Basic 函数返回的字节，而不是字符位置数。</span><span class="sxs-lookup"><span data-stu-id="3578a-737">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="3578a-738">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-738">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-739">Visual Basic 2005 的所有字符串都都以 unicode 格式，和`InStrB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-739">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="3578a-740">`Compare` 参数的设置是：</span><span class="sxs-lookup"><span data-stu-id="3578a-740">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="3578a-741">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-741">Constant</span></span>|<span data-ttu-id="3578a-742">值</span><span class="sxs-lookup"><span data-stu-id="3578a-742">Value</span></span>|<span data-ttu-id="3578a-743">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-743">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="3578a-744">0</span><span class="sxs-lookup"><span data-stu-id="3578a-744">0</span></span>|<span data-ttu-id="3578a-745">执行二进制比较</span><span class="sxs-lookup"><span data-stu-id="3578a-745">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="3578a-746">1</span><span class="sxs-lookup"><span data-stu-id="3578a-746">1</span></span>|<span data-ttu-id="3578a-747">执行文本比较</span><span class="sxs-lookup"><span data-stu-id="3578a-747">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-748">本例使用 `InStr` 函数返回一个字符串在另一个字符串中的第一个匹配项的位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-748">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-749"><paramref name="Start" /> &lt; 1。</span><span class="sxs-lookup"><span data-stu-id="3578a-749"><paramref name="Start" /> &lt; 1.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="3578a-750">字符串 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-750">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="3578a-751">字符串介绍 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-751">Introduction to Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md"><span data-ttu-id="3578a-752">Option Compare 语句</span><span class="sxs-lookup"><span data-stu-id="3578a-752">Option Compare Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StringMatch" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck"><span data-ttu-id="3578a-753">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-753">Required.</span></span> <span data-ttu-id="3578a-754">搜索的 String 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-754">String expression being searched.</span></span></param>
        <param name="StringMatch"><span data-ttu-id="3578a-755">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-755">Required.</span></span> <span data-ttu-id="3578a-756">搜索的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-756">String expression being searched for.</span></span></param>
        <param name="Start"><span data-ttu-id="3578a-757">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-757">Optional.</span></span> <span data-ttu-id="3578a-758">数值表达式，设置从字符串左侧开始进行的每个搜索的起始位置（从一开始计数）。</span><span class="sxs-lookup"><span data-stu-id="3578a-758">Numeric expression setting the one-based starting position for each search, starting from the left side of the string.</span></span> <span data-ttu-id="3578a-759">如果省略 <paramref name="Start" />，则使用 -1，它表示搜索从最后一个字符位置开始。</span><span class="sxs-lookup"><span data-stu-id="3578a-759">If <paramref name="Start" /> is omitted then -1 is used, meaning the search begins at the last character position.</span></span> <span data-ttu-id="3578a-760">然后搜索从右到左继续进行。</span><span class="sxs-lookup"><span data-stu-id="3578a-760">Search then proceeds from right to left.</span></span></param>
        <param name="Compare"><span data-ttu-id="3578a-761">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-761">Optional.</span></span> <span data-ttu-id="3578a-762">数值，指示对子字符串求值时使用的比较类型。</span><span class="sxs-lookup"><span data-stu-id="3578a-762">Numeric value indicating the kind of comparison to use when evaluating substrings.</span></span> <span data-ttu-id="3578a-763">如果省略，就会执行二进制比较。</span><span class="sxs-lookup"><span data-stu-id="3578a-763">If omitted, a binary comparison is performed.</span></span> <span data-ttu-id="3578a-764">具体的值请参见"设置"。</span><span class="sxs-lookup"><span data-stu-id="3578a-764">See Settings for values.</span></span></param>
        <summary><span data-ttu-id="3578a-765">返回某一字符串从另一字符串的右侧开始算起第一次出现的位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-765">Returns the position of the first occurrence of one string within another, starting from the right side of the string.</span></span></summary>
        <returns><list type="table">
            <item>
              <term> <span data-ttu-id="3578a-766">如果</span><span class="sxs-lookup"><span data-stu-id="3578a-766">If</span></span> 
 </term>
              <description> <span data-ttu-id="3578a-767">InStrRev 返回</span><span class="sxs-lookup"><span data-stu-id="3578a-767">InStrRev returns</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-768">
                <paramref name="StringCheck" /> 的长度为零</span><span class="sxs-lookup"><span data-stu-id="3578a-768">
                <paramref name="StringCheck" /> is zero-length</span></span> 
 </term>
              <description> <span data-ttu-id="3578a-769">0</span><span class="sxs-lookup"><span data-stu-id="3578a-769">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-770">
                <paramref name="StringMatch" /> 的长度为零</span><span class="sxs-lookup"><span data-stu-id="3578a-770">
                <paramref name="StringMatch" /> is zero-length</span></span> 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-771">未找到 
                <paramref name="StringMatch" />。</span><span class="sxs-lookup"><span data-stu-id="3578a-771">
                <paramref name="StringMatch" /> is not found</span></span> 
 </term>
              <description> <span data-ttu-id="3578a-772">0</span><span class="sxs-lookup"><span data-stu-id="3578a-772">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-773">在 
                <paramref name="StringMatch" /> 中找到 <paramref name="StringCheck" /></span><span class="sxs-lookup"><span data-stu-id="3578a-773">
                <paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></span></span></term>
              <description> <span data-ttu-id="3578a-774">从字符串的右侧开始找到的第一个匹配项的位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-774">Position at which the first match is found, starting with the right side of the string.</span></span>  
  
 </description>
            </item>
            <item>
              <term><span data-ttu-id="3578a-775">
                <paramref name="Start" /> 大于 <paramref name="StringMatch" /> 的长度</span><span class="sxs-lookup"><span data-stu-id="3578a-775">
                <paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></span></span></term>
              <description> <span data-ttu-id="3578a-776">0</span><span class="sxs-lookup"><span data-stu-id="3578a-776">0</span></span> 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-777">请注意，对于语法`InStrRev`函数不是相同的语法`InStr`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-777">Note that the syntax for the `InStrRev` function is not the same as the syntax for the `InStr` function.</span></span>  
  
 <span data-ttu-id="3578a-778">`Compare`自变量可具有以下值。</span><span class="sxs-lookup"><span data-stu-id="3578a-778">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="3578a-779">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-779">Constant</span></span>|<span data-ttu-id="3578a-780">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-780">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="3578a-781">执行二进制比较。</span><span class="sxs-lookup"><span data-stu-id="3578a-781">Performs a binary comparison.</span></span>|  
|`Text`|<span data-ttu-id="3578a-782">执行文本比较。</span><span class="sxs-lookup"><span data-stu-id="3578a-782">Performs a textual comparison.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-783">此示例演示如何使用`InStrRev`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-783">This example demonstrates the use of the `InStrRev` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-784"><paramref name="Start" /> = 0 或 <paramref name="Start" /> &lt; -1。</span><span class="sxs-lookup"><span data-stu-id="3578a-784"><paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="3578a-785">字符串 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-785">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="3578a-786">字符串介绍 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-786">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3578a-787">返回通过连接一个数组中包含的若干子字符串创建的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-787">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray"><span data-ttu-id="3578a-788">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-788">Required.</span></span> <span data-ttu-id="3578a-789">一维数组，包含要连接的子字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-789">One-dimensional array containing substrings to be joined.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="3578a-790">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-790">Optional.</span></span> <span data-ttu-id="3578a-791">任何字符串，用于在返回的字符串中分隔子字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-791">Any string, used to separate the substrings in the returned string.</span></span> <span data-ttu-id="3578a-792">如果省略该参数，则使用空白字符 (" ")。</span><span class="sxs-lookup"><span data-stu-id="3578a-792">If omitted, the space character (" ") is used.</span></span> <span data-ttu-id="3578a-793">如果 <paramref name="Delimiter" /> 是零长度字符串 ("") 或 <see langword="Nothing" />，则列表中的所有项目都串联在一起，中间没有分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-793">If <paramref name="Delimiter" /> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span></span></param>
        <summary><span data-ttu-id="3578a-794">返回通过连接一个数组中包含的若干子字符串创建的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-794">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
        <returns><span data-ttu-id="3578a-795">通过连接一个数组中包含的若干子字符串创建的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-795">A string created by joining a number of substrings contained in an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-796">没有之间的奇偶校验`Join`和`Split`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-796">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="3578a-797">`Join`函数采用一个字符串数组，并将它们联接起来使用分隔符字符串，以返回单个字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-797">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="3578a-798">`Split`函数采用一个字符串，并将它隔离在分隔符，以返回一个字符串数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-798">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="3578a-799">但是，主要区别在于`Join`可以使用任何分隔符的字符串、 字符串串联`Split`仅可以分隔字符串使用单字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-799">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-800">下面的示例演示如何使用`Join`函数来创建从多个字符串的列表。</span><span class="sxs-lookup"><span data-stu-id="3578a-800">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-801"><paramref name="SourceArray" /> 不是一维数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-801"><paramref name="SourceArray" /> is not one dimensional.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-802">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-802">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray"><span data-ttu-id="3578a-803">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-803">Required.</span></span> <span data-ttu-id="3578a-804">一维数组，包含要连接的子字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-804">One-dimensional array containing substrings to be joined.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="3578a-805">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-805">Optional.</span></span> <span data-ttu-id="3578a-806">任何字符串，用于在返回的字符串中分隔子字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-806">Any string, used to separate the substrings in the returned string.</span></span> <span data-ttu-id="3578a-807">如果省略该参数，则使用空白字符 (" ")。</span><span class="sxs-lookup"><span data-stu-id="3578a-807">If omitted, the space character (" ") is used.</span></span> <span data-ttu-id="3578a-808">如果 <paramref name="Delimiter" /> 是零长度字符串 ("") 或 <see langword="Nothing" />，则列表中的所有项目都串联在一起，中间没有分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-808">If <paramref name="Delimiter" /> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span></span></param>
        <summary><span data-ttu-id="3578a-809">返回通过连接一个数组中包含的若干子字符串创建的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-809">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
        <returns><span data-ttu-id="3578a-810">通过连接一个数组中包含的若干子字符串创建的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-810">A string created by joining a number of substrings contained in an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-811">没有之间的奇偶校验`Join`和`Split`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-811">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="3578a-812">`Join`函数采用一个字符串数组，并将它们联接起来使用分隔符字符串，以返回单个字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-812">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="3578a-813">`Split`函数采用一个字符串，并将它隔离在分隔符，以返回一个字符串数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-813">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="3578a-814">但是，主要区别在于`Join`可以使用任何分隔符的字符串、 字符串串联`Split`仅可以分隔字符串使用单字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-814">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-815">下面的示例演示如何使用`Join`函数来创建从多个字符串的列表。</span><span class="sxs-lookup"><span data-stu-id="3578a-815">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-816"><paramref name="SourceArray" /> 不是一维数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-816"><paramref name="SourceArray" /> is not one dimensional.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-817">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-817">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3578a-818">返回将转换为小写的字符串或字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-818">Returns a string or character converted to lowercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="3578a-819">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-819">Required.</span></span> <span data-ttu-id="3578a-820">任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-820">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="3578a-821">返回将转换为小写的字符串或字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-821">Returns a string or character converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="3578a-822">将转换为小写的字符串或字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-822">A string or character converted to lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-823">仅将大写字母转换为小写;所有小写字母和 nonletter 字符都保持不变。</span><span class="sxs-lookup"><span data-stu-id="3578a-823">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="3578a-824">此函数，以便在其中使用该应用程序的区域设置相应的大小写更改操作字符串时使用应用程序的区域性信息。</span><span class="sxs-lookup"><span data-stu-id="3578a-824">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3578a-825">如果你的应用程序做出安全决策基于比较或大小写更改操作的结果，则该操作应使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，并传入<xref:System.StringComparison.Ordinal>或<xref:System.StringComparison.OrdinalIgnoreCase>为`comparisonType`参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-825">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="3578a-826">有关详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="3578a-826">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-827">此示例使用`LCase`函数返回一个字符串的小写形式。</span><span class="sxs-lookup"><span data-stu-id="3578a-827">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="3578a-828">字符串 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-828">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="3578a-829">字符串介绍 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-829">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="3578a-830">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-830">Required.</span></span> <span data-ttu-id="3578a-831">任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-831">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="3578a-832">返回将转换为小写的字符串或字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-832">Returns a string or character converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="3578a-833">将转换为小写的字符串或字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-833">A string or character converted to lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-834">仅将大写字母转换为小写;所有小写字母和 nonletter 字符都保持不变。</span><span class="sxs-lookup"><span data-stu-id="3578a-834">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="3578a-835">此函数，以便在其中使用该应用程序的区域设置相应的大小写更改操作字符串时使用应用程序的区域性信息。</span><span class="sxs-lookup"><span data-stu-id="3578a-835">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3578a-836">如果你的应用程序做出安全决策基于比较或大小写更改操作的结果，则该操作应使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，并传入<xref:System.StringComparison.Ordinal>或<xref:System.StringComparison.OrdinalIgnoreCase>为`comparisonType`参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-836">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="3578a-837">有关详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="3578a-837">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-838">此示例使用`LCase`函数返回一个字符串的小写形式。</span><span class="sxs-lookup"><span data-stu-id="3578a-838">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="3578a-839">字符串 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-839">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="3578a-840">字符串介绍 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-840">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="3578a-841">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-841">Required.</span></span> <span data-ttu-id="3578a-842">一个 <see langword="String" /> 表达式，从中返回最左侧的那些字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-842"><see langword="String" /> expression from which the leftmost characters are returned.</span></span></param>
        <param name="Length"><span data-ttu-id="3578a-843">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-843">Required.</span></span> <span data-ttu-id="3578a-844"><see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-844"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="3578a-845">指示要返回的字符数的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-845">Numeric expression indicating how many characters to return.</span></span> <span data-ttu-id="3578a-846">如果为 0，则返回零长度字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="3578a-846">If 0, a zero-length string ("") is returned.</span></span> <span data-ttu-id="3578a-847">如果大于或等于 <paramref name="str" /> 的字符数，则返回整个字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-847">If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.</span></span></param>
        <summary><span data-ttu-id="3578a-848">返回一个字符串，该字符串包含从某字符串左侧算起的指定数量的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-848">Returns a string containing a specified number of characters from the left side of a string.</span></span></summary>
        <returns><span data-ttu-id="3578a-849">一个字符串，该字符串包含从某字符串左侧算起的指定数量的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-849">A string containing a specified number of characters from the left side of a string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-850">若要确定中的字符数`str`，使用`Len`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-850">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="3578a-851">如果在 Windows 窗体应用程序或具有任何其他类中使用`Left`属性，必须完全限定的函数`Microsoft.VisualBasic.Left`。</span><span class="sxs-lookup"><span data-stu-id="3578a-851">If used in a Windows Forms application, or any other class that has a `Left` property, you must fully qualify the function with `Microsoft.VisualBasic.Left`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-852">`LeftB`函数在以前版本的 Visual Basic 中字节而不是字符返回的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-852">The `LeftB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="3578a-853">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-853">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-854">所有当前的 Visual Basic 字符串是 Unicode，和`LeftB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-854">All current Visual Basic strings are in Unicode, and `LeftB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-855">此示例演示如何使用`Left`函数返回的子字符串给定`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-855">This example demonstrates the use of the `Left` function to return a substring of a given `String`.</span></span> <span data-ttu-id="3578a-856">在类具有`Left`属性，则可能需要完全限定`Left`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-856">In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-857"><paramref name="Length" /> &lt; 0。</span><span class="sxs-lookup"><span data-stu-id="3578a-857"><paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-858">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-858">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3578a-859">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-859">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-860">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-860">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-861">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-861">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-862">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-862">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-863">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-863">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-864">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-864">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-865">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-865">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-866">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-866">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-867">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-867">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-868">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-868">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-869">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-869">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-870">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-870">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-871">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-871">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-872">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-872">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-873">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-873">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-874">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-874">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-875">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-875">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-876">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-876">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-877">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-877">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-878">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-878">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-879">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-879">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-880">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-880">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-881">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-881">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-882">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-882">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-883">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-883">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-884">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-884">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-885">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-885">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-886">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-886">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-887">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-887">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-888">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-888">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-889">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-889">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-890">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-890">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-891">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-891">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-892">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-892">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-893">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-893">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-894">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-894">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-895">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-895">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-896">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-896">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-897">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-897">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-898">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-898">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-899">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-899">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-900">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-900">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-901">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-901">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-902">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-902">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-903">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-903">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-904">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-904">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-905">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-905">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-906">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-906">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-907">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-907">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-908">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-908">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-909">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-909">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-910">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-910">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-911">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-911">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-912">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-912">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-913">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-913">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-914">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-914">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-915">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-915">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-916">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-916">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-917">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-917">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-918">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-918">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-919">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-919">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-920">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-920">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-921">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-921">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-922">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-922">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-923">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-923">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-924">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-924">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-925">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-925">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-926">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-926">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-927">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-927">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-928">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-928">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-929">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-929">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-930">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-930">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-931">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-931">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-932">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-932">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-933">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-933">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-934">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-934">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-935">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-935">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-936">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-936">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-937">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-937">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-938">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-938">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-939">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-939">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-940">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-940">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-941">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-941">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-942">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-942">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-943">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-943">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-944">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-944">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-945">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-945">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-946">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-946">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-947">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-947">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-948">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-948">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-949">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-949">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-950">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-950">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-951">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-951">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-952">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-952">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-953">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-953">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-954">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-954">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-955">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-955">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-956">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-956">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-957">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-957">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-958">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-958">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-959">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-959">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-960">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-960">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-961">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-961">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-962">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-962">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-963">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-963">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-964">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-964">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-965">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-965">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-966">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-966">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-967">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-967">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-968">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-968">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-969">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-969">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-970">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-970">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-971">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-971">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-972">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-972">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-973">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-973">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-974">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-974">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-975">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-975">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-976">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-976">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-977">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-977">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-978">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-978">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-979">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-979">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-980">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-980">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-981">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-981">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-982">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-982">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-983">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-983">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-984">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-984">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-985">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-985">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-986">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-986">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-987">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-987">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-988">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-988">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-989">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-989">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-990">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-990">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-991">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-991">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-992">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-992">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-993">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-993">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-994">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-994">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-995">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-995">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-996">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-996">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-997">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-997">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-998">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-998">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-999">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-999">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-1000">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1000">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-1001">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1001">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-1002">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-1002">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-1003">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-1003">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1004">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1004">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1005">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1005">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1006">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1006">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1007">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-1007">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-1008">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-1008">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-1009">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1009">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-1010">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1010">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1011">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1011">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-1012">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1012">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-1013">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1013">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-1014">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-1014">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-1015">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-1015">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1016">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1016">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1017">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1017">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-1018">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1018">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1019">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1019">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-1020">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-1020">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-1021">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1021">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-1022">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1022">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-1023">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-1023">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-1024">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-1024">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1025">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1025">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1026">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1026">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1027">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1027">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1028">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-1028">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-1029">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-1029">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-1030">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1030">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-1031">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1031">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1032">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1032">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-1033">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1033">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-1034">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1034">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-1035">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-1035">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-1036">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-1036">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1037">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1037">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1038">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1038">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-1039">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1039">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1040">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1040">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-1041">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-1041">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-1042">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1042">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-1043">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1043">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-1044">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-1044">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-1045">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-1045">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1046">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1046">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1047">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1047">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1048">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1048">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1049">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-1049">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-1050">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-1050">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-1051">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1051">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-1052">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1052">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1053">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1053">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-1054">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1054">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-1055">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1055">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-1056">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-1056">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-1057">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-1057">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1058">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1058">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1059">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1059">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-1060">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1060">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1061">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1061">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-1062">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-1062">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-1063">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1063">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-1064">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1064">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-1065">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-1065">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-1066">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-1066">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1067">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1067">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1068">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1068">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1069">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1069">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1070">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-1070">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-1071">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-1071">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-1072">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1072">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-1073">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1073">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1074">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1074">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-1075">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1075">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-1076">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1076">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-1077">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-1077">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-1078">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-1078">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1079">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1079">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1080">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1080">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-1081">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1081">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1082">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1082">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-1083">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-1083">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-1084">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1084">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-1085">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1085">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-1086">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-1086">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-1087">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-1087">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1088">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1088">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1089">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1089">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1090">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1090">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1091">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-1091">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-1092">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-1092">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-1093">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1093">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-1094">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1094">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1095">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1095">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-1096">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1096">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-1097">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1097">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-1098">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-1098">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-1099">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-1099">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1100">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1100">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1101">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1101">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-1102">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1102">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1103">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1103">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-1104">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-1104">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-1105">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1105">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-1106">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1106">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-1107">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-1107">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-1108">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-1108">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1109">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1109">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1110">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1110">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1111">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1111">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1112">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-1112">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-1113">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-1113">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-1114">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1114">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-1115">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1115">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1116">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1116">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-1117">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1117">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-1118">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1118">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-1119">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-1119">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-1120">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-1120">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1121">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1121">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1122">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1122">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-1123">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1123">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1124">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1124">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-1125">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-1125">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-1126">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1126">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-1127">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1127">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-1128">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-1128">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-1129">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-1129">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1130">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1130">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1131">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1131">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1132">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1132">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1133">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-1133">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-1134">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-1134">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-1135">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1135">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-1136">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1136">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1137">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1137">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-1138">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1138">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-1139">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1139">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-1140">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-1140">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-1141">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-1141">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1142">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1142">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1143">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1143">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-1144">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1144">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1145">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1145">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-1146">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-1146">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-1147">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1147">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-1148">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1148">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-1149">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-1149">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-1150">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-1150">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1151">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1151">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1152">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1152">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1153">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1153">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1154">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-1154">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-1155">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-1155">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-1156">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1156">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-1157">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1157">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1158">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1158">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-1159">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1159">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-1160">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1160">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-1161">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-1161">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-1162">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-1162">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1163">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1163">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1164">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1164">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-1165">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1165">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1166">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1166">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-1167">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-1167">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-1168">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1168">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-1169">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1169">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-1170">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-1170">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-1171">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-1171">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1172">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1172">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1173">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1173">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1174">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1174">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1175">任何有效的 <see langword="String" /> 表达式或变量名。</span><span class="sxs-lookup"><span data-stu-id="3578a-1175">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="3578a-1176">如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</span><span class="sxs-lookup"><span data-stu-id="3578a-1176">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="3578a-1177">返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1177">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="3578a-1178">一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1178">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1179">使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1179">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="3578a-1180">如果`Object`包含`String`，它将返回字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1180">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="3578a-1181">如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1181">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="3578a-1182">`VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3578a-1182">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="3578a-1183">`Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。</span><span class="sxs-lookup"><span data-stu-id="3578a-1183">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1184">`Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1184">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1185">`LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1185">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="3578a-1186">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1186">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1187">所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1187">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="3578a-1188">智能设备开发人员说明</span><span class="sxs-lookup"><span data-stu-id="3578a-1188">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="3578a-1189">`Len`函数仅接受`String`和`Object`变量作为参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1189">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="3578a-1190">如果`Object`包含`String`，它将返回的长度`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1190">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="3578a-1191">如果参数为 NULL`Object`引用，该函数将返回零。</span><span class="sxs-lookup"><span data-stu-id="3578a-1191">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="3578a-1192">如果`Object`不包含任何其他类型，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="3578a-1192">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1193">本例使用 `Len` 返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1193">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1194">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1194">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1195">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1195">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="3578a-1196">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1196">Required.</span></span> <span data-ttu-id="3578a-1197"><see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1197"><see langword="String" /> expression.</span></span> <span data-ttu-id="3578a-1198">字符串变量的名称。</span><span class="sxs-lookup"><span data-stu-id="3578a-1198">Name of string variable.</span></span></param>
        <param name="Length"><span data-ttu-id="3578a-1199">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1199">Required.</span></span> <span data-ttu-id="3578a-1200"><see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1200"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="3578a-1201">返回的字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1201">Length of returned string.</span></span></param>
        <summary><span data-ttu-id="3578a-1202">返回一个左对齐字符串，该字符串包含调整为指定长度的指定的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1202">Returns a left-aligned string containing the specified string adjusted to the specified length.</span></span></summary>
        <returns><span data-ttu-id="3578a-1203">一个左对齐字符串，该字符串包含调整为指定长度的指定的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1203">A left-aligned string containing the specified string adjusted to the specified length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1204">如果指定的字符串的长度超过指定的长度，则返回的字符串被缩写为指定的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1204">If the specified string is longer than the specified length, the returned string is shortened to the specified length.</span></span> <span data-ttu-id="3578a-1205">如果指定的字符串的长度小于指定长度，添加空格，右端的返回的字符串以生成适当的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1205">If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1206">此示例演示如何使用`LSet`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1206">This example demonstrates the use of the `LSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1207">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1207">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1208">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1208">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md"><span data-ttu-id="3578a-1209">有效使用数据类型</span><span class="sxs-lookup"><span data-stu-id="3578a-1209">Efficient Use of Data Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="3578a-1210">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1210">Required.</span></span> <span data-ttu-id="3578a-1211">任何有效的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1211">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3578a-1212">返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</span><span class="sxs-lookup"><span data-stu-id="3578a-1212">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="3578a-1213">一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</span><span class="sxs-lookup"><span data-stu-id="3578a-1213">A string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1214">`LTrim`， `RTrim`，和`Trim`函数从字符串末尾删除空格。</span><span class="sxs-lookup"><span data-stu-id="3578a-1214">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1215">此示例使用 `LTrim` 函数去除字符串变量的前导空格，使用 `RTrim` 函数去除尾随空格，</span><span class="sxs-lookup"><span data-stu-id="3578a-1215">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="3578a-1216">并使用 `Trim` 函数同时去除这两种类型的空格。</span><span class="sxs-lookup"><span data-stu-id="3578a-1216">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1217">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1217">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3578a-1218">返回一个字符串，该字符串包含来自指定字符串的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1218">Returns a string that contains characters from a specified string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="3578a-1219">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1219">Required.</span></span> <span data-ttu-id="3578a-1220"><see langword="String" /> 表达式，从该表达式返回字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1220"><see langword="String" /> expression from which characters are returned.</span></span></param>
        <param name="Start"><span data-ttu-id="3578a-1221">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1221">Required.</span></span> <span data-ttu-id="3578a-1222"><see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1222"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="3578a-1223">要返回字符的开始位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-1223">Starting position of the characters to return.</span></span> <span data-ttu-id="3578a-1224">如果 <paramref name="Start" /> 大于 <paramref name="str" /> 中的字符个数，则 <see langword="Mid" /> 函数返回零长度字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="3578a-1224">If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the <see langword="Mid" /> function returns a zero-length string ("").</span></span> <span data-ttu-id="3578a-1225"><paramref name="Start" /> 从一开始。</span><span class="sxs-lookup"><span data-stu-id="3578a-1225"><paramref name="Start" /> is one-based.</span></span></param>
        <summary><span data-ttu-id="3578a-1226">返回字符串，该字符串包含从字符串中的指定位置开始的所有字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1226">Returns a string that contains all the characters starting from a specified position in a string.</span></span></summary>
        <returns><span data-ttu-id="3578a-1227">由从字符串中指定位置开始的所有字符组成的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1227">A string that consists of all the characters starting from the specified position in the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1228">若要确定中的字符数`str`，使用`Len`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1228">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="3578a-1229">Visual Basic 具有`Mid`函数和一个`Mid`语句。</span><span class="sxs-lookup"><span data-stu-id="3578a-1229">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="3578a-1230">都按指定数目的字符在字符串中，运行这些元素，但`Mid`函数将返回字符，而`Mid`语句替换的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1230">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="3578a-1231">有关详细信息，请参阅[Mid 语句](~/docs/visual-basic/language-reference/statements/mid-statement.md)。</span><span class="sxs-lookup"><span data-stu-id="3578a-1231">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1232">`MidB`函数在以前版本的 Visual Basic 中字节而不是字符返回的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1232">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="3578a-1233">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1233">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1234">所有 Visual Basic 字符串都是 Unicode，和`MidB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1234">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1235">此示例中的最后一行对 `Mid` 函数使用此重载以返回字符串中第 5 个字符之后的字符（包括第 5 个字符）。</span><span class="sxs-lookup"><span data-stu-id="3578a-1235">The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-1236"><paramref name="Start" /> &lt;= 0 或 <paramref name="Length" /> &lt; 0。</span><span class="sxs-lookup"><span data-stu-id="3578a-1236"><paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1237">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1237">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="3578a-1238">字符串 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1238">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="3578a-1239">字符串介绍 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1239">Introduction to Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md"><span data-ttu-id="3578a-1240">Mid 语句</span><span class="sxs-lookup"><span data-stu-id="3578a-1240">Mid Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="3578a-1241">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1241">Required.</span></span> <span data-ttu-id="3578a-1242"><see langword="String" /> 表达式，从该表达式返回字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1242"><see langword="String" /> expression from which characters are returned.</span></span></param>
        <param name="Start"><span data-ttu-id="3578a-1243">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1243">Required.</span></span> <span data-ttu-id="3578a-1244"><see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1244"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="3578a-1245">要返回字符的开始位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-1245">Starting position of the characters to return.</span></span> <span data-ttu-id="3578a-1246">如果 <paramref name="Start" /> 大于 <paramref name="str" /> 中的字符个数，则 <see langword="Mid" /> 函数返回零长度字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="3578a-1246">If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the <see langword="Mid" /> function returns a zero-length string ("").</span></span> <span data-ttu-id="3578a-1247"><paramref name="Start" /> 从 1 开始。</span><span class="sxs-lookup"><span data-stu-id="3578a-1247"><paramref name="Start" /> is one based.</span></span></param>
        <param name="Length"><span data-ttu-id="3578a-1248">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-1248">Optional.</span></span> <span data-ttu-id="3578a-1249"><see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1249"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="3578a-1250">要返回的字符数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1250">Number of characters to return.</span></span> <span data-ttu-id="3578a-1251">如果 <paramref name="Length" /> 省略或超过文本的字符（包括 <paramref name="Start" /> 处的字符）数，则返回从字符串开始位置到结尾的所有字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1251">If omitted or if there are fewer than <paramref name="Length" /> characters in the text (including the character at position <paramref name="Start" />), all characters from the start position to the end of the string are returned.</span></span></param>
        <summary><span data-ttu-id="3578a-1252">返回字符串，该字符串包含从字符串中的指定位置开始的指定数量的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1252">Returns a string that contains a specified number of characters starting from a specified position in a string.</span></span></summary>
        <returns><span data-ttu-id="3578a-1253">由从字符串中指定位置开始的指定数量的字符组成的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1253">A string that consists of the specified number of characters starting from the specified position in the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1254">若要确定中的字符数`str`，使用`Len`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1254">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="3578a-1255">Visual Basic 具有`Mid`函数和一个`Mid`语句。</span><span class="sxs-lookup"><span data-stu-id="3578a-1255">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="3578a-1256">都按指定数目的字符在字符串中，运行这些元素，但`Mid`函数将返回字符，而`Mid`语句替换的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1256">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="3578a-1257">有关详细信息，请参阅[Mid 语句](~/docs/visual-basic/language-reference/statements/mid-statement.md)。</span><span class="sxs-lookup"><span data-stu-id="3578a-1257">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1258">`MidB`函数在以前版本的 Visual Basic 中字节而不是字符返回的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1258">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="3578a-1259">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1259">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1260">所有 Visual Basic 字符串都是 Unicode，和`MidB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1260">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1261">此示例中的前两个 `Mid` 函数从字符串中的指定位置开始返回指定数量的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1261">The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions.</span></span> <span data-ttu-id="3578a-1262">（最后一个函数阐释 <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> 重载，并且仅指定字符串提取的起点。）</span><span class="sxs-lookup"><span data-stu-id="3578a-1262">(The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-1263"><paramref name="Start" /> &lt;= 0 或 <paramref name="Length" /> &lt; 0。</span><span class="sxs-lookup"><span data-stu-id="3578a-1263"><paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1264">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1264">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="3578a-1265">字符串 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1265">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="3578a-1266">字符串介绍 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1266">Introduction to Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md"><span data-ttu-id="3578a-1267">Mid 语句</span><span class="sxs-lookup"><span data-stu-id="3578a-1267">Mid Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Find" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Replacement" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Start" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Count" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1268">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1268">Required.</span></span> <span data-ttu-id="3578a-1269">字符串表达式，包含要替换的子字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1269">String expression containing substring to replace.</span></span></param>
        <param name="Find"><span data-ttu-id="3578a-1270">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1270">Required.</span></span> <span data-ttu-id="3578a-1271">搜索的子字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1271">Substring being searched for.</span></span></param>
        <param name="Replacement"><span data-ttu-id="3578a-1272">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1272">Required.</span></span> <span data-ttu-id="3578a-1273">替换用的子字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1273">Replacement substring.</span></span></param>
        <param name="Start"><span data-ttu-id="3578a-1274">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-1274">Optional.</span></span> <span data-ttu-id="3578a-1275"><paramref name="Expression" /> 内部要替换的子字符串的开始的位置。</span><span class="sxs-lookup"><span data-stu-id="3578a-1275">Position within <paramref name="Expression" /> that starts a substring used for replacement.</span></span> <span data-ttu-id="3578a-1276"><see langword="Replace" /> 的返回值是字符串，在 <paramref name="Start" /> 开始，具有相应的子情况。</span><span class="sxs-lookup"><span data-stu-id="3578a-1276">The return value of <see langword="Replace" /> is a string that begins at <paramref name="Start" />, with appropriate substitutions.</span></span> <span data-ttu-id="3578a-1277">如果省略，则假定为 1。</span><span class="sxs-lookup"><span data-stu-id="3578a-1277">If omitted, 1 is assumed.</span></span></param>
        <param name="Count"><span data-ttu-id="3578a-1278">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-1278">Optional.</span></span> <span data-ttu-id="3578a-1279">执行子字符串替换的数目。</span><span class="sxs-lookup"><span data-stu-id="3578a-1279">Number of substring substitutions to perform.</span></span> <span data-ttu-id="3578a-1280">如果省略，则默认值是 -1，表示“进行所有可能的替换”。</span><span class="sxs-lookup"><span data-stu-id="3578a-1280">If omitted, the default value is -1, which means "make all possible substitutions."</span></span></param>
        <param name="Compare"><span data-ttu-id="3578a-1281">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-1281">Optional.</span></span> <span data-ttu-id="3578a-1282">数值，指示对子字符串求值时使用的比较类型。</span><span class="sxs-lookup"><span data-stu-id="3578a-1282">Numeric value indicating the kind of comparison to use when evaluating substrings.</span></span> <span data-ttu-id="3578a-1283">具体的值请参见"设置"。</span><span class="sxs-lookup"><span data-stu-id="3578a-1283">See Settings for values.</span></span></param>
        <summary><span data-ttu-id="3578a-1284">返回一个字符串，其中的指定子字符串已由另一个子字符串替换了指定的次数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1284">Returns a string in which a specified substring has been replaced with another substring a specified number of times.</span></span></summary>
        <returns><span data-ttu-id="3578a-1285"><see langword="Replace" /> 返回下列值。</span><span class="sxs-lookup"><span data-stu-id="3578a-1285"><see langword="Replace" /> returns the following values.</span></span>  
  
 <list type="table"><item><term> <span data-ttu-id="3578a-1286">如果</span><span class="sxs-lookup"><span data-stu-id="3578a-1286">If</span></span> 
 </term><description> <span data-ttu-id="3578a-1287">Replace 返回</span><span class="sxs-lookup"><span data-stu-id="3578a-1287">Replace returns</span></span> 
 </description></item><item><term><span data-ttu-id="3578a-1288"><paramref name="Find" /> 的长度为零或 <see langword="Nothing" /></span><span class="sxs-lookup"><span data-stu-id="3578a-1288"><paramref name="Find" /> is zero-length or <see langword="Nothing" /></span></span></term><description> <span data-ttu-id="3578a-1289"><paramref name="Expression" /> 的副本</span><span class="sxs-lookup"><span data-stu-id="3578a-1289">Copy of <paramref name="Expression" /></span></span></description></item><item><term><span data-ttu-id="3578a-1290"><paramref name="Replace" /> 的长度为零</span><span class="sxs-lookup"><span data-stu-id="3578a-1290"><paramref name="Replace" /> is zero-length</span></span> 
 </term><description> <span data-ttu-id="3578a-1291"><paramref name="Expression" /> 的副本，不带 <paramref name="Find" /> 匹配项</span><span class="sxs-lookup"><span data-stu-id="3578a-1291">Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></span></span></description></item><item><term><span data-ttu-id="3578a-1292"><paramref name="Expression" /> 的长度为零或 <see langword="Nothing" />，或者 <paramref name="Start" /> 大于 <paramref name="Expression" /> 的长度</span><span class="sxs-lookup"><span data-stu-id="3578a-1292"><paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></span></span></term><description><see langword="Nothing" /></description></item><item><term><span data-ttu-id="3578a-1293"><paramref name="Count" /> 是 0</span><span class="sxs-lookup"><span data-stu-id="3578a-1293"><paramref name="Count" /> is 0</span></span> 
 </term><description> <span data-ttu-id="3578a-1294"><paramref name="Expression" /> 的副本</span><span class="sxs-lookup"><span data-stu-id="3578a-1294">Copy of <paramref name="Expression" /></span></span></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1295">返回值`Replace`函数是一个字符串，则从指定的位置开始`Start`，并在末尾结束`Expression`具有进行的替换字符串所指定的`Find`和`Replace`值。</span><span class="sxs-lookup"><span data-stu-id="3578a-1295">The return value of the `Replace` function is a string that begins at the position specified by `Start` and concludes at the end of the `Expression` string, with the substitutions made as specified by the `Find` and `Replace` values.</span></span>  
  
 <span data-ttu-id="3578a-1296">`Compare`自变量可具有以下值。</span><span class="sxs-lookup"><span data-stu-id="3578a-1296">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="3578a-1297">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-1297">Constant</span></span>|<span data-ttu-id="3578a-1298">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-1298">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="3578a-1299">执行二进制比较</span><span class="sxs-lookup"><span data-stu-id="3578a-1299">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="3578a-1300">执行文本比较</span><span class="sxs-lookup"><span data-stu-id="3578a-1300">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1301">此示例演示`Replace`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1301">This example demonstrates the `Replace` function.</span></span>  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-1302"><paramref name="Count" /> &lt; -1 或 <paramref name="Start" /> &lt;= 0。</span><span class="sxs-lookup"><span data-stu-id="3578a-1302"><paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1303">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1303">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="3578a-1304">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1304">Required.</span></span> <span data-ttu-id="3578a-1305">一个 <see langword="String" /> 表达式，从中返回最右侧的那些字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1305"><see langword="String" /> expression from which the rightmost characters are returned.</span></span></param>
        <param name="Length"><span data-ttu-id="3578a-1306">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1306">Required.</span></span> <span data-ttu-id="3578a-1307"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="3578a-1307"><see langword="Integer" />.</span></span> <span data-ttu-id="3578a-1308">指示要返回的字符数的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1308">Numeric expression indicating how many characters to return.</span></span> <span data-ttu-id="3578a-1309">如果为 0，则返回零长度字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="3578a-1309">If 0, a zero-length string ("") is returned.</span></span> <span data-ttu-id="3578a-1310">如果大于或等于 <paramref name="str" /> 的字符数，则返回整个字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1310">If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.</span></span></param>
        <summary><span data-ttu-id="3578a-1311">返回一个字符串，其中包含从某个字符串右端开始的指定数量的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1311">Returns a string containing a specified number of characters from the right side of a string.</span></span></summary>
        <returns><span data-ttu-id="3578a-1312">一个字符串，其中包含从某个字符串右端开始的指定数量的字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1312">A string containing a specified number of characters from the right side of a string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1313">若要确定中的字符数`str`，使用`Len`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1313">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="3578a-1314">如果在 Windows 窗体或具有任何其他类中使用`Right`属性，必须完全限定的函数`Microsoft.VisualBasic.Strings.Right`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1314">If used in a Windows Form, or any other class that has a `Right` property, you must fully qualify the function with `Microsoft.VisualBasic.Strings.Right`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1315">`RightB`早期版本的 Visual Basic 中的函数返回字节，而不是字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1315">The `RightB` function in earlier versions of Visual Basic returns a string in bytes, rather than characters.</span></span> <span data-ttu-id="3578a-1316">它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1316">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="3578a-1317">所有当前的 Visual Basic 字符串是 Unicode，和`RightB`不再受支持。</span><span class="sxs-lookup"><span data-stu-id="3578a-1317">All current Visual Basic strings are in Unicode, and `RightB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1318">此示例演示如何使用`Right`函数返回的子字符串给定`String`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1318">This example demonstrates the use of the `Right` function to return a substring of a given `String`.</span></span> <span data-ttu-id="3578a-1319">在类具有`Right`属性，则可能需要完全限定`Right`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1319">In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-1320"><paramref name="Length" /> &lt; 0。</span><span class="sxs-lookup"><span data-stu-id="3578a-1320"><paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1321">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1321">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="3578a-1322">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1322">Required.</span></span> <span data-ttu-id="3578a-1323"><see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1323"><see langword="String" /> expression.</span></span> <span data-ttu-id="3578a-1324">字符串变量的名称。</span><span class="sxs-lookup"><span data-stu-id="3578a-1324">Name of string variable.</span></span></param>
        <param name="Length"><span data-ttu-id="3578a-1325">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1325">Required.</span></span> <span data-ttu-id="3578a-1326"><see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1326"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="3578a-1327">返回的字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1327">Length of returned string.</span></span></param>
        <summary><span data-ttu-id="3578a-1328">返回包含调整为指定长度的指定字符串的右对齐字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1328">Returns a right-aligned string containing the specified string adjusted to the specified length.</span></span></summary>
        <returns><span data-ttu-id="3578a-1329">包含调整为指定长度的指定字符串的右对齐字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1329">A right-aligned string containing the specified string adjusted to the specified length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1330">如果`Source`长于`Length`，`RSet`放置仅最左边的字符，最长`Source`，返回的字符串中。</span><span class="sxs-lookup"><span data-stu-id="3578a-1330">If `Source` is longer than `Length`, `RSet` places only the leftmost characters, up to the length of `Source`, in the returned string.</span></span> <span data-ttu-id="3578a-1331">如果指定的字符串的长度小于指定长度，以生成适当的长度的字符串的左端添加空格。</span><span class="sxs-lookup"><span data-stu-id="3578a-1331">If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length.</span></span> <span data-ttu-id="3578a-1332">如果指定的字符串的长度超过指定的长度，则将它缩短为指定长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1332">If the specified string is longer than the specified length, it is shortened to the specified length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1333">此示例演示如何使用`RSet`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1333">This example demonstrates the use of the `RSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1334">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1334">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="3578a-1335">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1335">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md"><span data-ttu-id="3578a-1336">有效使用数据类型</span><span class="sxs-lookup"><span data-stu-id="3578a-1336">Efficient Use of Data Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="3578a-1337">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1337">Required.</span></span> <span data-ttu-id="3578a-1338">任何有效的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1338">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3578a-1339">返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</span><span class="sxs-lookup"><span data-stu-id="3578a-1339">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="3578a-1340">一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</span><span class="sxs-lookup"><span data-stu-id="3578a-1340">A string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1341">`LTrim`， `RTrim`，和`Trim`函数从字符串末尾删除空格。</span><span class="sxs-lookup"><span data-stu-id="3578a-1341">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1342">此示例使用 `LTrim` 函数去除字符串变量的前导空格，使用 `RTrim` 函数去除尾随空格，</span><span class="sxs-lookup"><span data-stu-id="3578a-1342">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="3578a-1343">并使用 `Trim` 函数同时去除这两种类型的空格。</span><span class="sxs-lookup"><span data-stu-id="3578a-1343">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1344">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1344">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3578a-1345">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1345">Required.</span></span> <span data-ttu-id="3578a-1346"><see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1346"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="3578a-1347">希望字符串包含的空格数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1347">The number of spaces you want in the string.</span></span></param>
        <summary><span data-ttu-id="3578a-1348">返回由指定数量空格组成的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1348">Returns a string consisting of the specified number of spaces.</span></span></summary>
        <returns><span data-ttu-id="3578a-1349">由指定数量空格组成的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1349">A string consisting of the specified number of spaces.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1350">`Space`函数可用于格式化输出，并清除固定长度字符串中的数据。</span><span class="sxs-lookup"><span data-stu-id="3578a-1350">The `Space` function is useful for formatting output and clearing data in fixed-length strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1351">此示例使用`Space`函数返回一个包含指定数量的空格的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1351">This example uses the `Space` function to return a string consisting of a specified number of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-1352"><paramref name="Number" /> &lt; 0。</span><span class="sxs-lookup"><span data-stu-id="3578a-1352"><paramref name="Number" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1353">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1353">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Limit" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1354">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1354">Required.</span></span> <span data-ttu-id="3578a-1355">包含子字符串和分隔符的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1355"><see langword="String" /> expression containing substrings and delimiters.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="3578a-1356">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-1356">Optional.</span></span> <span data-ttu-id="3578a-1357">用于标识子字符串的界限的任何单个字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1357">Any single character used to identify substring limits.</span></span> <span data-ttu-id="3578a-1358">如果省略了 <paramref name="Delimiter" />，则假定空白字符 (" ") 为分隔符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1358">If <paramref name="Delimiter" /> is omitted, the space character (" ") is assumed to be the delimiter.</span></span></param>
        <param name="Limit"><span data-ttu-id="3578a-1359">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-1359">Optional.</span></span> <span data-ttu-id="3578a-1360">输入字符串应拆分到的子字符串的最大数量。</span><span class="sxs-lookup"><span data-stu-id="3578a-1360">Maximum number of substrings into which the input string should be split.</span></span> <span data-ttu-id="3578a-1361">默认值为 -1，指示在 <paramref name="Delimiter" /> 字符串的每个匹配项处都拆分输入字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1361">The default, -1, indicates that the input string should be split at every occurrence of the <paramref name="Delimiter" /> string.</span></span></param>
        <param name="Compare"><span data-ttu-id="3578a-1362">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-1362">Optional.</span></span> <span data-ttu-id="3578a-1363">数值，指示计算子字符串时使用的比较模式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1363">Numeric value indicating the comparison to use when evaluating substrings.</span></span> <span data-ttu-id="3578a-1364">请参阅“设置”，以获取值。</span><span class="sxs-lookup"><span data-stu-id="3578a-1364">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="3578a-1365">返回一个从零开始的一维数组，其中包含指定数量的子字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1365">Returns a zero-based, one-dimensional array containing a specified number of substrings.</span></span></summary>
        <returns><span data-ttu-id="3578a-1366"><see langword="String" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-1366"><see langword="String" /> array.</span></span> <span data-ttu-id="3578a-1367">如果 <paramref name="Expression" /> 为零长度字符串 ("")，则 <see langword="Split" /> 返回包含零长度字符串的单个元素数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-1367">If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string.</span></span> <span data-ttu-id="3578a-1368">如果 <paramref name="Delimiter" /> 为零长度字符串，或如果它不在 <paramref name="Expression" /> 中的任何位置出现，则 <see langword="Split" /> 将返回包含整个 <paramref name="Expression" /> 字符串的单个元素数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-1368">If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1369">默认情况下，或者当`Limit`等于-1，`Split`函数拆分输入的字符串的分隔符字符串，每个匹配项处，并返回数组中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1369">By default, or when `Limit` equals -1, the `Split` function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array.</span></span> <span data-ttu-id="3578a-1370">当`Limit`参数是大于零，`Split`函数将在第一个字符串拆分`Limit`-1 出现的分隔符，并返回一个包含生成的子字符串的数组。</span><span class="sxs-lookup"><span data-stu-id="3578a-1370">When the `Limit` parameter is greater than zero, the `Split` function splits the string at the first `Limit`-1 occurrences of the delimiter, and returns an array with the resulting substrings.</span></span> <span data-ttu-id="3578a-1371">例如，`Split("a:b:c", ":")`返回的数组`{"a", "b", "c"}`，而`Split("a:b:c", ":", 2)`返回的数组`{"a", "b:c"}`。</span><span class="sxs-lookup"><span data-stu-id="3578a-1371">For example, `Split("a:b:c", ":")` returns the array `{"a", "b", "c"}`, while `Split("a:b:c", ":", 2)` returns the array `{"a", "b:c"}`.</span></span>  
  
 <span data-ttu-id="3578a-1372">当`Split`函数遇到某行中，两个分隔符或分隔符的开头或字符串的末尾，会将其解释为围绕一个空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="3578a-1372">When the `Split` function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string ("").</span></span> <span data-ttu-id="3578a-1373">例如，`Split("xx", "x")`返回数组，其中包含三个空字符串： 之一开头的字符串和"x"，第二个介于两个"x"字符串，第一个和最后一个"x"和字符串的末尾之间的一个。</span><span class="sxs-lookup"><span data-stu-id="3578a-1373">For example, `Split("xx", "x")` returns the array containing three empty strings: one from between the beginning of the string and the first "x", one from between the two "x" strings, and one from between the last "x" and the end of the string.</span></span>  
  
 <span data-ttu-id="3578a-1374">此表说明了如何可选`Delimiter`， `Limit`，并`Compare`参数可以更改的行为`Split`函数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1374">This table demonstrates how the optional `Delimiter`, `Limit`, and `Compare` parameters can change the behavior of the `Split` function.</span></span>  
  
|<span data-ttu-id="3578a-1375">拆分调用</span><span class="sxs-lookup"><span data-stu-id="3578a-1375">Split Call</span></span>|<span data-ttu-id="3578a-1376">返回值</span><span class="sxs-lookup"><span data-stu-id="3578a-1376">Return Value</span></span>|  
|-|-|  
|`Split("42, 12, 19")`|<span data-ttu-id="3578a-1377">{"42," , "12," , "19"}</span><span class="sxs-lookup"><span data-stu-id="3578a-1377">{"42," , "12," , "19"}</span></span>|  
|`Split("42, 12, 19", ", ")`|<span data-ttu-id="3578a-1378">{"42", "12", "19"}</span><span class="sxs-lookup"><span data-stu-id="3578a-1378">{"42", "12", "19"}</span></span>|  
|`Split("42, 12, 19", ", ", 2)`|<span data-ttu-id="3578a-1379">{"42", "12, 19"}</span><span class="sxs-lookup"><span data-stu-id="3578a-1379">{"42", "12, 19"}</span></span>|  
|`Split("192.168.0.1", ".")`|<span data-ttu-id="3578a-1380">{"192", "168", "0", "1"}</span><span class="sxs-lookup"><span data-stu-id="3578a-1380">{"192", "168", "0", "1"}</span></span>|  
|`Split("Alice and Bob", " AND ")`|<span data-ttu-id="3578a-1381">{"Alice 和 Bob"}</span><span class="sxs-lookup"><span data-stu-id="3578a-1381">{"Alice and Bob"}</span></span>|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|<span data-ttu-id="3578a-1382">{"Alice"，"Bob"}</span><span class="sxs-lookup"><span data-stu-id="3578a-1382">{"Alice", "Bob"}</span></span>|  
|`Split("someone@example.com", "@",1)`|<span data-ttu-id="3578a-1383">{"someone@example.com"}</span><span class="sxs-lookup"><span data-stu-id="3578a-1383">{"someone@example.com"}</span></span>|  
|`Split("someone@example.com", "@",2)`|<span data-ttu-id="3578a-1384">{"someone", "example.com"}</span><span class="sxs-lookup"><span data-stu-id="3578a-1384">{"someone", "example.com"}</span></span>|  
  
 <span data-ttu-id="3578a-1385">`Compare`自变量可具有以下值。</span><span class="sxs-lookup"><span data-stu-id="3578a-1385">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="3578a-1386">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-1386">Constant</span></span>|<span data-ttu-id="3578a-1387">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-1387">Description</span></span>|<span data-ttu-id="3578a-1388">值</span><span class="sxs-lookup"><span data-stu-id="3578a-1388">Value</span></span>|  
|-|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="3578a-1389">执行二进制比较</span><span class="sxs-lookup"><span data-stu-id="3578a-1389">Performs a binary comparison</span></span>|<span data-ttu-id="3578a-1390">0</span><span class="sxs-lookup"><span data-stu-id="3578a-1390">0</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="3578a-1391">执行文本比较</span><span class="sxs-lookup"><span data-stu-id="3578a-1391">Performs a textual comparison</span></span>|<span data-ttu-id="3578a-1392">1</span><span class="sxs-lookup"><span data-stu-id="3578a-1392">1</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1393">下面的示例演示如何将一个字符串的空格处拆分。</span><span class="sxs-lookup"><span data-stu-id="3578a-1393">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 <span data-ttu-id="3578a-1394">下面的示例演示如何拆分有行中的多个分隔符的字符串并筛选出空字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1394">The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1395">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1395">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1"><span data-ttu-id="3578a-1396">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1396">Required.</span></span> <span data-ttu-id="3578a-1397">任何有效的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1397">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="String2"><span data-ttu-id="3578a-1398">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1398">Required.</span></span> <span data-ttu-id="3578a-1399">任何有效的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1399">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="Compare"><span data-ttu-id="3578a-1400">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-1400">Optional.</span></span> <span data-ttu-id="3578a-1401">指定字符串比较的类型。</span><span class="sxs-lookup"><span data-stu-id="3578a-1401">Specifies the type of string comparison.</span></span> <span data-ttu-id="3578a-1402">如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</span><span class="sxs-lookup"><span data-stu-id="3578a-1402">If <paramref name="Compare" /> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="3578a-1403">根据字符串的比较结果返回 -1、0 或 1。</span><span class="sxs-lookup"><span data-stu-id="3578a-1403">Returns -1, 0, or 1, based on the result of a string comparison.</span></span></summary>
        <returns><span data-ttu-id="3578a-1404"><see langword="StrComp" /> 函数具有下列返回值：</span><span class="sxs-lookup"><span data-stu-id="3578a-1404">The <see langword="StrComp" /> function has the following return values.</span></span>  
  
 <list type="table"><item><term> <span data-ttu-id="3578a-1405">如果</span><span class="sxs-lookup"><span data-stu-id="3578a-1405">If</span></span> 
 </term><description> <span data-ttu-id="3578a-1406">StrComp 返回</span><span class="sxs-lookup"><span data-stu-id="3578a-1406">StrComp returns</span></span> 
 </description></item><item><term><span data-ttu-id="3578a-1407"><paramref name="String1" /> 排在 <paramref name="String2" /> 的前面</span><span class="sxs-lookup"><span data-stu-id="3578a-1407"><paramref name="String1" /> sorts ahead of <paramref name="String2" /></span></span></term><description> <span data-ttu-id="3578a-1408">-1</span><span class="sxs-lookup"><span data-stu-id="3578a-1408">-1</span></span> 
 </description></item><item><term><span data-ttu-id="3578a-1409"><paramref name="String1" /> 等于 <paramref name="String2" /></span><span class="sxs-lookup"><span data-stu-id="3578a-1409"><paramref name="String1" /> is equal to <paramref name="String2" /></span></span></term><description> <span data-ttu-id="3578a-1410">0</span><span class="sxs-lookup"><span data-stu-id="3578a-1410">0</span></span> 
 </description></item><item><term><span data-ttu-id="3578a-1411"><paramref name="String1" /> 排在 <paramref name="String2" /> 的后面</span><span class="sxs-lookup"><span data-stu-id="3578a-1411"><paramref name="String1" /> sorts after <paramref name="String2" /></span></span></term><description> <span data-ttu-id="3578a-1412">1</span><span class="sxs-lookup"><span data-stu-id="3578a-1412">1</span></span> 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1413">开头的第一个字符的字母数字排序值的比较字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1413">The strings are compared by alphanumeric sort values beginning with the first character.</span></span> <span data-ttu-id="3578a-1414">二进制比较、 文本比较和排序顺序的详细信息，请参阅[Option 比较语句](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)。</span><span class="sxs-lookup"><span data-stu-id="3578a-1414">For further information on binary comparisons, textual comparisons, and sort order, see [Option Compare Statement](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).</span></span>  
  
 <span data-ttu-id="3578a-1415">`Compare` 参数的设置是：</span><span class="sxs-lookup"><span data-stu-id="3578a-1415">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="3578a-1416">返回的常量</span><span class="sxs-lookup"><span data-stu-id="3578a-1416">Constant</span></span>|<span data-ttu-id="3578a-1417">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-1417">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="3578a-1418">执行二进制比较，而基于派生自的内部二进制表示形式的字符的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="3578a-1418">Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.</span></span>|  
|`Text`|<span data-ttu-id="3578a-1419">执行文本比较，基于由您的系统的不区分大小写的文本排序顺序`LocaleID`值。</span><span class="sxs-lookup"><span data-stu-id="3578a-1419">Performs a text comparison, based on a case-insensitive text sort order determined by your system's `LocaleID` value.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1420">此示例使用`StrComp`函数以返回的字符串比较的结果。</span><span class="sxs-lookup"><span data-stu-id="3578a-1420">This example uses the `StrComp` function to return the results of a string comparison.</span></span>  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-1421"><paramref name="Compare" /> 值无效。</span><span class="sxs-lookup"><span data-stu-id="3578a-1421"><paramref name="Compare" /> value is not valid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1422">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1422">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="3578a-1423">字符串 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1423">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="3578a-1424">字符串介绍 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1424">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="LocaleID" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="3578a-1425">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1425">Required.</span></span> <span data-ttu-id="3578a-1426">要转换的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1426"><see langword="String" /> expression to be converted.</span></span></param>
        <param name="Conversion"><span data-ttu-id="3578a-1427">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1427">Required.</span></span> <span data-ttu-id="3578a-1428"><see cref="T:Microsoft.VisualBasic.VbStrConv" /> 成员。</span><span class="sxs-lookup"><span data-stu-id="3578a-1428"><see cref="T:Microsoft.VisualBasic.VbStrConv" /> member.</span></span> <span data-ttu-id="3578a-1429">指定要执行的转换类型的枚举值。</span><span class="sxs-lookup"><span data-stu-id="3578a-1429">The enumeration value specifying the type of conversion to perform.</span></span></param>
        <param name="LocaleID"><span data-ttu-id="3578a-1430">可选。</span><span class="sxs-lookup"><span data-stu-id="3578a-1430">Optional.</span></span> <span data-ttu-id="3578a-1431"><see langword="LocaleID" /> 值（如果与系统 <see langword="LocaleID" /> 值不同）。</span><span class="sxs-lookup"><span data-stu-id="3578a-1431">The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value.</span></span> <span data-ttu-id="3578a-1432">（系统 <see langword="LocaleID" /> 值为默认值。）</span><span class="sxs-lookup"><span data-stu-id="3578a-1432">(The system <see langword="LocaleID" /> value is the default.)</span></span></param>
        <summary><span data-ttu-id="3578a-1433">返回按照指定方式转换的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1433">Returns a string converted as specified.</span></span></summary>
        <returns><span data-ttu-id="3578a-1434">按照指定方式转换的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1434">A string converted as specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1435">常量`VbStrConv.Wide`， `VbStrConv.Narrow`， `VbStrConv.SimplifiedChinese`， `VbStrConv.TraditionalChinese`， `VbStrConv.Katakana`，和`VbStrConv.Hiragana`可能会导致运行时错误时使用在区域设置中，它们不适用，但并不总是： 常量`VbStrConv.Katakana`和`VbStrConv.Hiragana`可用于非日语系统中安装了日语语言包。</span><span class="sxs-lookup"><span data-stu-id="3578a-1435">The constants `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, and `VbStrConv.Hiragana` can cause run-time errors when used in locales where they do not apply, but not always: the constants `VbStrConv.Katakana` and `VbStrConv.Hiragana` can be used in a non-Japanese system with the Japanese Language Pack installed.</span></span> <span data-ttu-id="3578a-1436">此外，使用的常量`VbStrConv.Wide`和`VbStrConv.Narrow`使用东亚语言安装支持在任何系统上。</span><span class="sxs-lookup"><span data-stu-id="3578a-1436">In addition, use of the constants `VbStrConv.Wide` and `VbStrConv.Narrow` is supported on any system with an East Asian language installed.</span></span>  
  
 <span data-ttu-id="3578a-1437">此函数，以便在其中使用该应用程序的区域设置相应的大小写更改操作字符串时使用应用程序的区域性信息。</span><span class="sxs-lookup"><span data-stu-id="3578a-1437">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3578a-1438">如果你的应用程序做出安全决策基于比较或大小写更改操作的结果，则该操作应使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，并传入<xref:System.StringComparison.Ordinal>或<xref:System.StringComparison.OrdinalIgnoreCase>为`comparisonType`参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1438">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="3578a-1439">有关详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="3578a-1439">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
 <span data-ttu-id="3578a-1440">`Conversion` 参数的设置是：</span><span class="sxs-lookup"><span data-stu-id="3578a-1440">The `Conversion` argument settings are:</span></span>  
  
|<span data-ttu-id="3578a-1441">枚举成员</span><span class="sxs-lookup"><span data-stu-id="3578a-1441">Enumeration member</span></span>|<span data-ttu-id="3578a-1442">描述</span><span class="sxs-lookup"><span data-stu-id="3578a-1442">Description</span></span>|  
|-|-|  
|`VbStrConv.None`|<span data-ttu-id="3578a-1443">不执行任何转换</span><span class="sxs-lookup"><span data-stu-id="3578a-1443">Performs no conversion</span></span>|  
|`VbStrConv.LinguisticCasing`|<span data-ttu-id="3578a-1444">使用语言规则进行大小写，而不是文件系统 （默认值）。</span><span class="sxs-lookup"><span data-stu-id="3578a-1444">Uses linguistic rules for casing, rather than File System (default).</span></span> <span data-ttu-id="3578a-1445">有效，且`VbStrConv.UpperCase`和`VbStrConv.LowerCase`仅。</span><span class="sxs-lookup"><span data-stu-id="3578a-1445">Valid with `VbStrConv.UpperCase` and `VbStrConv.LowerCase` only.</span></span>|  
|`VbStrConv.UpperCase`|<span data-ttu-id="3578a-1446">将字符串转换为大写字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1446">Converts the string to uppercase characters.</span></span>|  
|`VbStrConv.LowerCase`|<span data-ttu-id="3578a-1447">将字符串转换为小写字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1447">Converts the string to lowercase characters.</span></span>|  
|`VbStrConv.ProperCase`|<span data-ttu-id="3578a-1448">将转换为大写的字符串中每个单词的第一个字母。</span><span class="sxs-lookup"><span data-stu-id="3578a-1448">Converts the first letter of every word in string to uppercase.</span></span>|  
|<span data-ttu-id="3578a-1449">`VbStrConv.Wide` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="3578a-1449">`VbStrConv.Wide` <sup>\*</sup></span></span>|<span data-ttu-id="3578a-1450">将窄 （半） 为宽 （全角） 字符在字符串中的字符转换。</span><span class="sxs-lookup"><span data-stu-id="3578a-1450">Converts narrow (half-width) characters in the string to wide (full-width) characters.</span></span> [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|<span data-ttu-id="3578a-1451">`VbStrConv.Narrow` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="3578a-1451">`VbStrConv.Narrow` <sup>\*</sup></span></span>|<span data-ttu-id="3578a-1452">将转换为窄 （半） 字符的字符串中的宽 （全角） 字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1452">Converts wide (full-width) characters in the string to narrow (half-width) characters.</span></span>|  
|<span data-ttu-id="3578a-1453">`VbStrConv.Katakana` <sup>\*\*</sup></span><span class="sxs-lookup"><span data-stu-id="3578a-1453">`VbStrConv.Katakana` <sup>\*\*</sup></span></span>|<span data-ttu-id="3578a-1454">将字符串中的平假名字符转换为片假名字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1454">Converts Hiragana characters in the string to Katakana characters.</span></span>|  
|<span data-ttu-id="3578a-1455">`VbStrConv.Hiragana` <sup>\*\*</sup></span><span class="sxs-lookup"><span data-stu-id="3578a-1455">`VbStrConv.Hiragana` <sup>\*\*</sup></span></span>|<span data-ttu-id="3578a-1456">将字符串中片假名字符的转换为平假名字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1456">Converts Katakana characters in the string to Hiragana characters.</span></span>|  
|<span data-ttu-id="3578a-1457">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="3578a-1457">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span></span>|<span data-ttu-id="3578a-1458">将繁体中文字符转换为简体中文。</span><span class="sxs-lookup"><span data-stu-id="3578a-1458">Converts Traditional Chinese characters to Simplified Chinese.</span></span>|  
|<span data-ttu-id="3578a-1459">`VbStrConv.TraditionalChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="3578a-1459">`VbStrConv.TraditionalChinese` <sup>\*</sup></span></span>|<span data-ttu-id="3578a-1460">将简体中文字符转换为繁体中文。</span><span class="sxs-lookup"><span data-stu-id="3578a-1460">Converts Simplified Chinese characters to Traditional Chinese.</span></span>|  
  
 <span data-ttu-id="3578a-1461"><sup>\*</sup> 适用于亚洲区域设置。</span><span class="sxs-lookup"><span data-stu-id="3578a-1461"><sup>\*</sup> Applies to Asian locales.</span></span>  
  
 <span data-ttu-id="3578a-1462"><sup>\*\*</sup> 仅适用于日本。</span><span class="sxs-lookup"><span data-stu-id="3578a-1462"><sup>\*\*</sup> Applies to Japan only.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3578a-1463">这些常量指定.NET Framework 公共语言运行时中。</span><span class="sxs-lookup"><span data-stu-id="3578a-1463">These constants are specified in the .NET Framework common language runtime.</span></span> <span data-ttu-id="3578a-1464">因此，它们可以使用任意位置代替实际值在代码中。</span><span class="sxs-lookup"><span data-stu-id="3578a-1464">As a result, they can be used anywhere in your code in place of the actual values.</span></span> <span data-ttu-id="3578a-1465">可组合 (例如， `UpperCase + Wide`)，除非它们是互斥 (例如， `VbStrConv.Wide + VbStrConv.Narrow`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-1465">Most can be combined (for example, `UpperCase + Wide`), except when they are mutually exclusive (for example, `VbStrConv.Wide + VbStrConv.Narrow`).</span></span>  
  
 <span data-ttu-id="3578a-1466">以下是正确的大小写的有效单词分隔符：Null (`Chr$(0)`)，水平制表符 (`Chr$(9)`)，换行符 (`Chr$(10)`)，垂直制表符 (`Chr$(11)`)，换页符 (`Chr$(12)`)、 回车符 (`Chr$(13)`)，空间 （单字节字符集） (`Chr$(32)`)。</span><span class="sxs-lookup"><span data-stu-id="3578a-1466">The following are valid word separators for proper casing: Null (`Chr$(0)`), horizontal tab (`Chr$(9)`), line feed (`Chr$(10)`), vertical tab (`Chr$(11)`), form feed (`Chr$(12)`), carriage return (`Chr$(13)`), space (single-byte character set) (`Chr$(32)`).</span></span> <span data-ttu-id="3578a-1467">空格，这可以是全角或半角，实际值因国家/地区的东亚语言区域性而异。</span><span class="sxs-lookup"><span data-stu-id="3578a-1467">The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1468">此示例将所有小写字母转换为文本。</span><span class="sxs-lookup"><span data-stu-id="3578a-1468">This example converts text into all lowercase letters.</span></span>  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-1469">不支持 <paramref name="LocaleID" />、<paramref name="Conversion" /> &lt; 0 或 &gt; 2048，或不支持指定区域设置的转换。</span><span class="sxs-lookup"><span data-stu-id="3578a-1469">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1470">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1470">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="3578a-1471">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="3578a-1471">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3578a-1472">返回由指定字符重复指定次数后形成的字符串或对象。</span><span class="sxs-lookup"><span data-stu-id="3578a-1472">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Char" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3578a-1473">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1473">Required.</span></span> <span data-ttu-id="3578a-1474"><see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1474"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="3578a-1475">要返回的字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1475">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="3578a-1476">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1476">Required.</span></span> <span data-ttu-id="3578a-1477">任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1477">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="3578a-1478">将只使用表达式的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1478">Only the first character of the expression will be used.</span></span> <span data-ttu-id="3578a-1479">如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</span><span class="sxs-lookup"><span data-stu-id="3578a-1479">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="3578a-1480">返回由指定字符重复指定次数后形成的字符串或对象。</span><span class="sxs-lookup"><span data-stu-id="3578a-1480">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="3578a-1481">由指定字符重复指定次数后形成的字符串或对象。</span><span class="sxs-lookup"><span data-stu-id="3578a-1481">A string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1482">此函数将返回`String`的重复字符组成。</span><span class="sxs-lookup"><span data-stu-id="3578a-1482">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="3578a-1483">构成的字符串的字符是中的第一个字符`Character`参数，并且它重复`Number`次数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1483">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1484">此示例使用`StrDup`函数以返回字符串的重复字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1484">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-1485"><paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</span><span class="sxs-lookup"><span data-stu-id="3578a-1485"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3578a-1486"><paramref name="Character" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="3578a-1486"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1487">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1487">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3578a-1488">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1488">Required.</span></span> <span data-ttu-id="3578a-1489"><see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1489"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="3578a-1490">要返回的字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1490">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="3578a-1491">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1491">Required.</span></span> <span data-ttu-id="3578a-1492">任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1492">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="3578a-1493">将只使用表达式的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1493">Only the first character of the expression will be used.</span></span> <span data-ttu-id="3578a-1494">如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</span><span class="sxs-lookup"><span data-stu-id="3578a-1494">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="3578a-1495">返回由指定字符重复指定次数后形成的字符串或对象。</span><span class="sxs-lookup"><span data-stu-id="3578a-1495">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="3578a-1496">由指定字符重复指定次数后形成的字符串或对象。</span><span class="sxs-lookup"><span data-stu-id="3578a-1496">A string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1497">此函数将返回`String`的重复字符组成。</span><span class="sxs-lookup"><span data-stu-id="3578a-1497">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="3578a-1498">构成的字符串的字符是中的第一个字符`Character`参数，并且它重复`Number`次数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1498">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1499">此示例使用`StrDup`函数以返回字符串的重复字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1499">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-1500"><paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</span><span class="sxs-lookup"><span data-stu-id="3578a-1500"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3578a-1501"><paramref name="Character" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="3578a-1501"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1502">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1502">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="3578a-1503">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1503">Required.</span></span> <span data-ttu-id="3578a-1504"><see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1504"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="3578a-1505">要返回的字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="3578a-1505">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="3578a-1506">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1506">Required.</span></span> <span data-ttu-id="3578a-1507">任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1507">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="3578a-1508">将只使用表达式的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1508">Only the first character of the expression will be used.</span></span> <span data-ttu-id="3578a-1509">如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</span><span class="sxs-lookup"><span data-stu-id="3578a-1509">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="3578a-1510">返回由指定字符重复指定次数后形成的字符串或对象。</span><span class="sxs-lookup"><span data-stu-id="3578a-1510">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="3578a-1511">由指定字符重复指定次数后形成的字符串或对象。</span><span class="sxs-lookup"><span data-stu-id="3578a-1511">A string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1512">此函数将返回`String`的重复字符组成。</span><span class="sxs-lookup"><span data-stu-id="3578a-1512">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="3578a-1513">构成的字符串的字符是中的第一个字符`Character`参数，并且它重复`Number`次数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1513">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1514">此示例使用`StrDup`函数以返回字符串的重复字符。</span><span class="sxs-lookup"><span data-stu-id="3578a-1514">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3578a-1515"><paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</span><span class="sxs-lookup"><span data-stu-id="3578a-1515"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3578a-1516"><paramref name="Character" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="3578a-1516"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1517">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1517">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="3578a-1518">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1518">Required.</span></span> <span data-ttu-id="3578a-1519">字符反转的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1519">String expression whose characters are to be reversed.</span></span> <span data-ttu-id="3578a-1520">如果 <paramref name="Expression" /> 是一个零长度字符串 ("")，则返回一个零长度字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1520">If <paramref name="Expression" /> is a zero-length string (""), a zero-length string is returned.</span></span></param>
        <summary><span data-ttu-id="3578a-1521">返回指定字符串的字符顺序是相反的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1521">Returns a string in which the character order of a specified string is reversed.</span></span></summary>
        <returns><span data-ttu-id="3578a-1522">指定字符串的字符顺序是相反的字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1522">A string in which the character order of a specified string is reversed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1523">`StrReverse`函数将返回一个字符串，包含相同字符作为`Expression`，但顺序相反。</span><span class="sxs-lookup"><span data-stu-id="3578a-1523">The `StrReverse` function returns a string that contains the same characters as `Expression`, but in the opposite order.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1524">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1524">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="3578a-1525">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1525">Required.</span></span> <span data-ttu-id="3578a-1526">任何有效的 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1526">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="3578a-1527">返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</span><span class="sxs-lookup"><span data-stu-id="3578a-1527">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="3578a-1528">一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</span><span class="sxs-lookup"><span data-stu-id="3578a-1528">A string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1529">`LTrim`， `RTrim`，和`Trim`函数从字符串末尾删除空格。</span><span class="sxs-lookup"><span data-stu-id="3578a-1529">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1530">此示例使用 `LTrim` 函数去除字符串变量的前导空格，使用 `RTrim` 函数去除尾随空格，</span><span class="sxs-lookup"><span data-stu-id="3578a-1530">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="3578a-1531">并使用 `Trim` 函数同时去除这两种类型的空格。</span><span class="sxs-lookup"><span data-stu-id="3578a-1531">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1532">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1532">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3578a-1533">返回一个字符串或字符，其中包含转换为大写的指定字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1533">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="3578a-1534">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1534">Required.</span></span> <span data-ttu-id="3578a-1535">任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1535">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="3578a-1536">返回一个字符串或字符，其中包含转换为大写的指定字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1536">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="3578a-1537">一个字符串或字符，其中包含转换为大写的指定字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1537">A string or character containing the specified string converted to uppercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1538">只包含小写字母都转换为大写;所有大写字母和 nonletter 字符都保持不变。</span><span class="sxs-lookup"><span data-stu-id="3578a-1538">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="3578a-1539">此函数，以便在其中使用该应用程序的区域设置相应的大小写更改操作字符串时使用应用程序的区域性信息。</span><span class="sxs-lookup"><span data-stu-id="3578a-1539">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3578a-1540">如果你的应用程序做出安全决策基于比较或大小写更改操作的结果，则该操作应使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，并传入<xref:System.StringComparison.Ordinal>或<xref:System.StringComparison.OrdinalIgnoreCase>为`comparisonType`参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1540">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="3578a-1541">有关详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="3578a-1541">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1542">本例使用 `UCase` 函数返回字符串的大写版本。</span><span class="sxs-lookup"><span data-stu-id="3578a-1542">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1543">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1543">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="3578a-1544">字符串 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1544">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="3578a-1545">字符串介绍 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1545">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="3578a-1546">必需。</span><span class="sxs-lookup"><span data-stu-id="3578a-1546">Required.</span></span> <span data-ttu-id="3578a-1547">任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="3578a-1547">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="3578a-1548">返回一个字符串或字符，其中包含转换为大写的指定字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1548">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="3578a-1549">一个字符串或字符，其中包含转换为大写的指定字符串。</span><span class="sxs-lookup"><span data-stu-id="3578a-1549">A string or character containing the specified string converted to uppercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3578a-1550">只包含小写字母都转换为大写;所有大写字母和 nonletter 字符都保持不变。</span><span class="sxs-lookup"><span data-stu-id="3578a-1550">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="3578a-1551">此函数，以便在其中使用该应用程序的区域设置相应的大小写更改操作字符串时使用应用程序的区域性信息。</span><span class="sxs-lookup"><span data-stu-id="3578a-1551">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3578a-1552">如果你的应用程序做出安全决策基于比较或大小写更改操作的结果，则该操作应使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，并传入<xref:System.StringComparison.Ordinal>或<xref:System.StringComparison.OrdinalIgnoreCase>为`comparisonType`参数。</span><span class="sxs-lookup"><span data-stu-id="3578a-1552">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="3578a-1553">有关详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="3578a-1553">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3578a-1554">本例使用 `UCase` 函数返回字符串的大写版本。</span><span class="sxs-lookup"><span data-stu-id="3578a-1554">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="3578a-1555">字符串操作摘要</span><span class="sxs-lookup"><span data-stu-id="3578a-1555">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="3578a-1556">字符串 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1556">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="3578a-1557">字符串介绍 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3578a-1557">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
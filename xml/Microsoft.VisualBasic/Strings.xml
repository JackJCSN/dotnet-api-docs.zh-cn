<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="658fbfb1c662acb281aac80c9ade7559461114ea" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67238745" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Strings" /> 模块包含用于执行字符串操作的过程。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此模块支持的 Visual Basic 语言关键字和操作字符串的运行时库成员。  
  
   
  
## Examples  
 下面的示例演示如何将一个字符串的空格处拆分。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">关键字 (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 运行时库成员</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
        <returns>与某个字符相对应的字符代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返回*代码点*，或输入字符的字符代码。 这可以是 0 到 255 的单字节字符集 (SBCS) 值和从-32768 到 32767 之间的双字节字符集 (dbcs) 值。  
  
 `AscW` 返回输入的字符的 Unicode 码位。 这可以是 0 到 65535 之间。 返回的值是独立于当前线程的区域性和代码页设置。  
  
> [!NOTE]
>  `AscB`的早期版本的 Visual Basic 函数返回一个字节，而不是一个字符的代码。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 Visual Basic 2005 的所有字符串都都以 unicode 格式，和`AscB`不再受支持。  
  
   
  
## Examples  
 下面的示例使用`Asc`函数返回`Integer`字符对应于每个字符串中的第一个字母的代码。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">函数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
        <returns>与某个字符相对应的字符代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返回*代码点*，或输入字符的字符代码。 这可以是 0 到 255 的单字节字符集 (SBCS) 值和从-32768 到 32767 之间的双字节字符集 (dbcs) 值。  
  
 `AscW` 返回输入的字符的 Unicode 码位。 这可以是 0 到 65535 之间。 返回的值是独立于当前线程的区域性和代码页设置。  
  
> [!NOTE]
>  `AscB`的早期版本的 Visual Basic 函数返回一个字节，而不是一个字符的代码。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 Visual Basic 2005 的所有字符串都都以 unicode 格式，和`AscB`不再受支持。  
  
   
  
## Examples  
 下面的示例使用`Asc`函数返回`Integer`字符对应于每个字符串中的第一个字母的代码。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">函数 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
        <returns>与某个字符相对应的字符代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返回*代码点*，或输入字符的字符代码。 这可以是 0 到 255 的单字节字符集 (SBCS) 值和从-32768 到 32767 之间的双字节字符集 (dbcs) 值。  
  
 `AscW` 返回输入的字符的 Unicode 码位。 这可以是 0 到 65535 之间。 返回的值是独立于当前线程的区域性和代码页设置。  
  
> [!NOTE]
>  `AscB`的早期版本的 Visual Basic 函数返回一个字节，而不是一个字符的代码。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 Visual Basic 2005 的所有字符串都都以 unicode 格式，和`AscB`不再受支持。  
  
   
  
## Examples  
 下面的示例使用`Asc`函数返回`Integer`字符对应于每个字符串中的第一个字母的代码。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">函数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
        <returns>与某个字符相对应的字符代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返回*代码点*，或输入字符的字符代码。 这可以是 0 到 255 的单字节字符集 (SBCS) 值和从-32768 到 32767 之间的双字节字符集 (dbcs) 值。  
  
 `AscW` 返回输入的字符的 Unicode 码位。 这可以是 0 到 65535 之间。 返回的值是独立于当前线程的区域性和代码页设置。  
  
> [!NOTE]
>  `AscB`的早期版本的 Visual Basic 函数返回一个字节，而不是一个字符的代码。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 Visual Basic 2005 的所有字符串都都以 unicode 格式，和`AscB`不再受支持。  
  
   
  
## Examples  
 下面的示例使用`Asc`函数返回`Integer`字符对应于每个字符串中的第一个字母的代码。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">函数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="CharCode">必需。 <see langword="Integer" /> 表达式，表示字符的 <c>code point</c> 或字符代码。</param>
        <summary>返回与指定字符代码相关联的字符。</summary>
        <returns>与指定字符代码相关联的字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非对称范围接受`CharCode`存储之间的差异进行补偿`Short`和`Integer`。 例如，是-29183`Short`但 + 36353 为`Integer`。 这还简化了与 Visual Basic 6.0 的兼容性。  
  
 `Chr` 使用<xref:System.Text.Encoding>类中<xref:System.Text?displayProperty=nameWithType>命名空间来确定当前线程是否使用单字节字符集 (SBCS) 或双字节字符设置 (DBCS)。 然后，它会`CharCode`为代码点在相应的一组中。 范围可以是 0 到 255 的 SBCS 字符和-32768 到 65535 的 DBCS 字符。  
  
 返回的值取决于当前线程中包含的代码页<xref:System.Globalization.TextInfo.ANSICodePage%2A>的属性<xref:System.Globalization.TextInfo>类中<xref:System.Globalization>命名空间。 你可以获取<xref:System.Globalization.TextInfo.ANSICodePage%2A>通过指定`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`。  
  
 `ChrW` 采用`CharCode`为 Unicode 代码点。 范围是独立于当前线程的区域性和代码页设置。 从-32768 到-1 的值为相同视为范围 32768 到方式中的值。  
  
 从 0 到 31 的数字将与标准不能打印的 ASCII 代码相同。 例如，`Chr(10)`返回换行字符。  
  
> [!NOTE]
>  `ChrB`在早期版本的 Visual Basic 函数将返回一个字节。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 Visual Basic 和.NET Framework 中的所有字符串都都以 unicode 格式，和`ChrB`不再受支持。  
  
   
  
## Examples  
 下面的示例使用`Chr`函数以返回与指定的字符代码关联的字符。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="Chr" /> 的 <paramref name="CharCode" /> &lt; 0 或 &gt; 255。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">必需。 <see langword="Integer" /> 表达式，表示字符的 <c>code point</c> 或字符代码。</param>
        <summary>返回与指定字符代码相关联的字符。</summary>
        <returns>与指定字符代码相关联的字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非对称范围接受`CharCode`存储之间的差异进行补偿`Short`和`Integer`。 例如，是-29183`Short`但 + 36353 为`Integer`。 这还简化了与 Visual Basic 6.0 的兼容性。  
  
 `Chr` 使用<xref:System.Text.Encoding>类中<xref:System.Text?displayProperty=nameWithType>命名空间来确定当前线程是否使用单字节字符集 (SBCS) 或双字节字符设置 (DBCS)。 然后，它会`CharCode`为代码点在相应的一组中。 范围可以是 0 到 255 的 SBCS 字符和-32768 到 65535 的 DBCS 字符。  
  
 返回的值取决于当前线程中包含的代码页<xref:System.Globalization.TextInfo.ANSICodePage%2A>的属性<xref:System.Globalization.TextInfo>类中<xref:System.Globalization>命名空间。 你可以获取<xref:System.Globalization.TextInfo.ANSICodePage%2A>通过指定`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`。  
  
 `ChrW` 采用`CharCode`为 Unicode 代码点。 范围是独立于当前线程的区域性和代码页设置。 从-32768 到-1 的值为相同视为范围 32768 到方式中的值。  
  
 从 0 到 31 的数字将与标准不能打印的 ASCII 代码相同。 例如，`Chr(10)`返回换行字符。  
  
> [!NOTE]
>  `ChrB`在早期版本的 Visual Basic 函数将返回一个字节。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 Visual Basic 和.NET Framework 中的所有字符串都都以 unicode 格式，和`ChrB`不再受支持。  
  
   
  
## Examples  
 下面的示例使用`Chr`函数以返回与指定的字符代码关联的字符。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="ChrW" /> 的 <paramref name="CharCode" /> &lt; -32768 或 &gt; 65535。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必需。 要搜索的一维字符串数组。</param>
        <param name="Match">必需。 要搜索的字符串。</param>
        <param name="Include">可选。 <see langword="Boolean" /> 值，指示是返回包含还是排除 <paramref name="Match" /> 的子字符串。 如果 <paramref name="Include" /> 为 <see langword="True" />，则 <see langword="Filter" /> 函数返回将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。 如果 <paramref name="Include" /> 为 <see langword="False" />，则 <see langword="Filter" /> 函数返回不将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。</param>
        <param name="Compare">可选。 表示要使用的字符串比较类型的数值。 请参阅“设置”，以获取值。</param>
        <summary>返回一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</summary>
        <returns>一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有匹配的项`Match`中找到`Source`，则`Filter`函数返回一个空数组。 如果出错`Source`设置为`Nothing`或不是一维数组。  
  
 返回的数组`Filter`函数包含仅足够包含匹配项数目的元素。  
  
 `Compare`自变量可具有以下值。  
  
|返回的常量|描述|  
|-|-|  
|返回的常量|描述|  
|`CompareMethod.Binary`|执行二进制比较|  
|`CompareMethod.Text`|执行文本比较|  
  
   
  
## Examples  
 此示例演示如何使用`Filter`函数。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> 为 <see langword="Nothing" /> 或不是一维数组。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必需。 要搜索的一维字符串数组。</param>
        <param name="Match">必需。 要搜索的字符串。</param>
        <param name="Include">可选。 <see langword="Boolean" /> 值，指示是返回包含还是排除 <paramref name="Match" /> 的子字符串。 如果 <paramref name="Include" /> 为 <see langword="True" />，则 <see langword="Filter" /> 函数返回将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。 如果 <paramref name="Include" /> 为 <see langword="False" />，则 <see langword="Filter" /> 函数返回不将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。</param>
        <param name="Compare">可选。 表示要使用的字符串比较类型的数值。 请参阅“设置”，以获取值。</param>
        <summary>返回一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</summary>
        <returns>一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有匹配的项`Match`中找到`Source`，则`Filter`函数返回一个空数组。 如果出错`Source`设置为`Nothing`或不是一维数组。  
  
 返回的数组`Filter`函数包含仅足够包含匹配项数目的元素。  
  
 `Compare`自变量可具有以下值。  
  
|返回的常量|描述|  
|-|-|  
|`CompareMethod.Binary`|执行二进制比较|  
|`CompareMethod.Text`|执行文本比较|  
  
   
  
## Examples  
 此示例演示如何使用`Filter`函数。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> 为 <see langword="Nothing" /> 或不是一维数组。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Style" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 任何有效表达式。</param>
        <param name="Style">可选。 一个有效的命名或用户定义的格式 <see langword="String" /> 表达式。</param>
        <summary>返回根据格式 <see langword="String" /> 表达式中包含的指令设置格式的字符串。</summary>
        <returns>根据格式 <see langword="String" /> 表达式中包含的指令设置格式的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType>方法还提供了类似的功能。  
  
 如果进行格式设置非本地化的数字字符串，应使用用户定义的数字格式以确保获取所需的外观。  
  
 如果你尝试将数字设置格式而无需指定`Style`，则`Format`函数提供了功能类似于`Str`函数，但它是国际通用。 但是，正数和负数的格式设置为使用字符串`Format`函数不包含前导空格保留符号的值; 这些转换使用`Str`函数保留前导空格。  
  
## <a name="different-formats-for-different-numeric-values"></a>不同的不同数值格式  
 数字的用户定义的格式表达式可以包含一到三个部分之间用分号分隔。 如果`Style`自变量的`Format`函数包含一个预定义数字格式，只允许有一部分是。  
  
|如果你使用|下面是结果|  
|-|-|  
|只有一部分|格式表达式应用于所有值。|  
|两个部分|第一部分应用于正值和零;第二个应用于负值。|  
|三个部分|第一部分应用于正值，第二个应用于负值，第三个应用于零。|  
  
 下面的示例有两个部分： 第一个定义正值和零; 的格式第二部分定义负值的格式。 由于`Style`自变量的`Format`函数采用一个字符串，它用引号引起来。  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 如果包括它们之间没有任何内容的分号，则缺少的部分被打印使用正值的格式。 例如，以下格式显示正值和负值值第一个部分中使用的格式并显示`Zero`如果的值为零。  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>预定义数字格式  
 下表标识预定义数字格式的名称。 这些可能由与名称`Style`自变量`Format`函数：  
  
|格式名称|描述|  
|-|-|  
|`General Number`、`G` 或 `g`|显示带没有千位分隔符的数字。<br /><br /> 例如，`Format(&H3FA, "g")`返回`1018`。|  
|`Currency`、`C` 或 `c`|显示带千位分隔符的数字，如果相应;显示小数点分隔符右侧两位数字。 输出基于系统区域设置。<br /><br /> 例如，`Format(1234567, "c")`返回`$1,234,567.00`。|  
|`Fixed`、`F` 或 `f`|小数点分隔符右侧显示左侧至少一个数字和两个数字。<br /><br /> 例如，`Format(1234567, "f")`返回`1234567.00`。|  
|`Standard`、`N` 或 `n`|小数点分隔符右侧显示带千位分隔符左侧至少一个数字两位数字的数字。<br /><br /> 例如，`Format(1234567, "n")`返回`1,234,567.00`。|  
|`Percent`|显示数字乘以 100 百分号 （%）在右侧; 立即追加小数点分隔符右侧总是显示两位。<br /><br /> 例如，`Format(0.4744, "Percent")`返回`47.44%`。|  
|`P`或 `p`|数字显示带千分之几秒分隔符乘以 100 百分号 （%）追加到右侧，以单个空格;小数点分隔符右侧总是显示两位。<br /><br /> 例如，`Format(0.80345, "p")`返回`80.35 %`。|  
|`Scientific`|使用标准的科学记数法，提供两个有效位数。<br /><br /> 例如，`Format(1234567, "Scientific")`返回`1.23E+06`。|  
|`E`或 `e`|使用标准的科学记数法，提供六个有效位数。<br /><br /> 例如，`Format(1234567, "e")`返回`1.234567e+006`。|  
|`D`或 `d`|将数字显示为一个字符串，包含采用十进制 (基数为 10) 格式的数字的值。 对于整型类型支持此选项 (`Byte`， `Short`， `Integer`， `Long`) 仅。<br /><br /> 例如，`Format(&H7F, "d")`返回`127`。|  
|`X`或 `x`|将数字显示为一个字符串，包含采用十六进制 (基数为 16) 格式的数字的值。 对于整型类型支持此选项 (`Byte`， `Short`， `Integer`， `Long`) 仅。<br /><br /> 例如，`Format(127, "x")`返回`7f`。|  
|`Yes/No`|显示`No`如果数字为 0; 否则为显示`Yes`。<br /><br /> 例如，`Format(0, "Yes/No")`返回`No`。|  
|`True/False`|显示`False`如果数字为 0; 否则为显示`True`。<br /><br /> 例如，`Format(1, "True/False")`返回`True`。|  
|`On/Off`|显示`Off`如果数字为 0; 否则为显示`On`。<br /><br /> 例如，`Format(1, "On/Off")`返回`On`。|  
  
### <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Yes/No`， `True/False`，和`On/Off`格式不受支持。  
  
## <a name="user-defined-numeric-formats"></a>用户定义的数值格式  
 下表标识了可用于创建用户定义的数字格式的字符。 这些可能用于生成`Style`自变量`Format`函数：  
  
|字符|描述|  
|-|-|  
|None|显示不带格式数字。|  
|(`0`)|数字占位符。 显示一个数字或零。 如果表达式在格式字符串中出现零的位置有一个数字，显示它;否则，将显示该位置的值为零。<br /><br /> 当数字的位数少于格式表达式中，显示前导零或尾随零是零的个数 （不管在小数点的一侧）。 当数字的数字位数的比小数点分隔符右侧有格式表达式中小数点分隔符右侧的零将舍入到任意多个数字的小数位数与零的个数。 当数字的数字位数超过小数点分隔符左侧有零的格式表达式中小数点分隔符左侧显示额外的数字，而无需修改。|  
|(`#`)|数字占位符。 显示一个数字或执行任何操作。 如果该表达式的位置有一个数字其中`#`字符会出现在格式字符串中，将其显示; 否则，在该位置会显示任何内容。<br /><br /> 此符号的作用类似`0`数字占位符，除了当数字的位数少于有前导零或尾随零不会显示`#`格式表达式中小数点分隔符任意一侧的字符。|  
|(`.`)|小数点占位符。 小数点占位符确定小数点分隔符左侧和右侧显示几位数。 如果格式表达式仅包含`#`此符号左侧的字符; 数字小于 1 以小数点分隔符开头。 若要显示随小数显示前导零，请使用零作为小数点分隔符左侧的第一个数字占位符。 在某些区域设置中，逗号用作十进制分隔符。 用作小数点占位符在格式化输出中的实际字符取决于您的系统所识别的数字格式。 因此，您应使用句点用作小数点占位符在您的格式即使您位于使用逗号作为小数点占位符的区域设置。 带格式的字符串将显示区域设置的正确格式。|  
|(`%`)|百分比占位符。 将表达式乘以 100。 百分比字符 (`%`) 插入格式字符串中出现的位置中。|  
|(`,`)|千位分隔符。 千位分隔符用于分隔千位和百具有四个或多个位数的小数点分隔符左侧的数字中。 则指定千位分隔符的标准用法如果格式包含由数字占位符包围的千位分隔符 (`0`或`#`)。<br /><br /> 千位分隔符紧挨小数点分隔符 （该值指示指定小数） 或最右侧左边中的字符字符串表示"伸缩数通过除以 1000，按需要四舍五入"。 小于 1,000 但大于或等于 500 的数字显示为`1`，和数字小于 500 显示为`0`。 通过 1 亿的身份和 1,000 的每个其他分隔符的另一个因素来扩展此位置的两个相邻千位分隔符。<br /><br /> 在紧挨小数点分隔符左侧以外的其他任何位置或字符串中的最右侧位置中的多个分隔符只被视为指定使用千位分隔符。 在某些区域设置中，句点用作千位分隔符。 用作千位分隔符在格式化输出中的实际字符取决于您的系统所识别的数字格式。 因此，您应使用逗号作为千位分隔符在您的格式即使您位于使用句点作为千位分隔符的区域设置。 带格式的字符串将显示区域设置的正确格式。<br /><br /> 例如，考虑三个以下的格式字符串：<br /><br /> -   `"#,0."`使用千位分隔符格式将数字 1 亿设置为字符串"100000000"。<br />-   `"#0,."`它使用按 1000 倍的系数缩放数字 100 万个格式化为字符串"100000"。<br />-   `"#,0,."`哪些使用千位分隔符和缩放一千数字 100 万个格式化为字符串"100000"。|  
|(`:`)|时间分隔符。 在某些区域设置，可能用其他字符来表示时间分隔符。 时间分隔符用于分隔小时、 分钟和秒为单位设置时间值的格式。 通过您的系统设置确定用作时间分隔符在格式化输出中的实际字符。|  
|(`/`)|日期分隔符。 在某些区域设置，可能用其他字符来表示日期分隔符。 日期分隔符用于分隔设置日期值的格式日、 月和年。 通过您的系统设置确定用作在格式化输出中的日期分隔符的实际字符。|  
|(`E-``E+``e-``e+`)|科学记数法格式。 如果格式表达式包含至少一个数字占位符 (`0`或`#`) 的左侧`E-`， `E+`， `e-`，或`e+`，以科学记数法格式显示数字和`E`或`e`数字和其指数之间插入。 左侧的数字占位符数目确定指数中的位数。 使用`E-`或`e-`放置一个减号负指数的后面。 使用`E+`或`e+`放置一个减号负指数的后面和正指数的后面一个加号。 此外必须包括此符号的右侧，以获取正确的格式的数字占位符。|  
|`-` `+` `$` ( )|原义字符。 直接将键入在格式字符串中显示这些字符。 若要显示之外的其他列出的这些字符，它在前面加上一个反斜杠 (`\`) 或将其括在双引号 ("")。|  
|(`\`)|在格式字符串中显示的下一个字符。 若要显示的字符具有特殊含义为原义字符，它在前面加上一个反斜杠 (`\`)。 反斜杠本身不显示。 使用反斜杠是用双引号括住的下一个字符相同。 若要显示反斜杠，请使用两个反斜杠 (`\\`)。<br /><br /> 无法显示，因为原义字符是日期格式设置和时间格式设置字符的字符的示例 (`a`， `c`， `d`， `h`， `m`， `n`， `p`， `q`， `s`， `t`， `w`， `y`， `/`，以及`:`)，数值格式的字符 (`#`， `0`， `%`， `E`， `e`，逗号和句点)，和字符串格式设置字符 (`@`， `&`， `<`， `>`，和`!`)。|  
|(`"``ABC``"`)|显示内部双引号引起来的字符串 ("")。 若要从代码中的样式参数包含一个字符串，必须使用`Chr(34)`将文本放在 (`34`是引号 （"） 的字符代码)。|  
  
### <a name="legacy-code-example"></a>旧式代码示例  
 下表包含数字的一些示例格式表达式。 （所有这些示例假设您的系统区域设置设置为美国英语）第一列包含的格式字符串`Style`自变量的`Format`函数; 如果带格式的数据具有列标题中给定的值包含生成的输出的其他列。  
  
|格式 (`Style`)|为"5"格式设置|"-5"格式为|作为"0.5"格式设置|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>预定义的日期/时间格式  
 下表标识预定义的日期和时间格式的名称。 这些可能用作按名称的样式参数`Format`函数：  
  
|格式名称|描述|  
|-|-|  
|`General Date`或 `G`|显示日期和/或时间。 例如 `3/12/2008 11:07:31 AM`。 日期显示由应用程序的当前区域性值确定。|  
|`Long Date`、`Medium Date` 或 `D`|显示根据您的当前区域性的长日期格式的日期。 例如 `Wednesday, March 12, 2008`。|  
|`Short Date`或 `d`|显示使用当前区域性的短日期格式的日期。 例如 `3/12/2008`。<br /><br /> `d`字符以用户定义的日期格式显示日期。|  
|`Long Time`、`Medium Time` 或 `T`|使用当前区域性的长时间格式; 显示时间通常包括小时、 分钟和秒。 例如 `11:07:31 AM`。|  
|`Short Time` 或 `t`|显示使用当前区域性的短时间格式的时间。 例如 `11:07 AM`。<br /><br /> `t`字符显示`AM`或`PM`中用户定义的时间格式使用 12 小时制时钟的区域设置的值。|  
|`f`|显示长日期和短时间根据当前区域性的格式。 例如 `Wednesday, March 12, 2008 11:07 AM`。|  
|`F`|显示长日期和长时间根据当前区域性的格式。 例如 `Wednesday, March 12, 2008 11:07:31 AM`。|  
|`g`|显示的短日期和短时间根据当前区域性的格式。 例如 `3/12/2008 11:07 AM`。|  
|`M`， `m`|显示月份和日期的日期。 例如 `March 12`。<br /><br /> `M`字符以用户定义的日期格式显示月份。 `m`字符以用户定义的时间格式显示分钟。|  
|`R`， `r`|根据日期的格式<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>属性。 例如 `Wed, 12 Mar 2008 11:07:31 GMT`。 带格式的日期不调整日期和时间值。 必须在调用之前调整为 GMT 日期/时间值`Format`函数。|  
|`s`|设置日期和时间作为可排序索引格式。 例如 `2008-03-12T11:07:31`。<br /><br /> `s`字符以用户定义的时间格式显示秒钟。|  
|`u`|设置日期和时间为 GMT 可排序索引格式。 例如 `2008-03-12 11:07:31Z`。|  
|`U`|设置格式的日期和时间的长日期和长时间为 GMT。 例如 `Wednesday, March 12, 2008 6:07:31 PM`。|  
|`Y`， `y`|作为年份和月份日期的格式。 例如 `March, 2008`。<br /><br /> `Y`和`y`字符以用户定义的日期格式显示年份。|  
  
 有关应用程序的当前区域性信息的详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
## <a name="user-defined-datetime-formats"></a>用户定义的日期/时间格式  
 下表显示了可用于创建用户定义的日期/时间格式的多个字符。 与在早期版本的 Visual Basic 中，这些格式字符是区分大小写。  
  
|字符|描述|  
|-|-|  
|(`:`)|时间分隔符。 在某些区域设置，可能用其他字符来表示时间分隔符。 时间分隔符用于分隔小时、 分钟和秒为单位设置时间值的格式。 通过应用程序的当前区域性值确定用作时间分隔符在格式化输出中的实际字符。|  
|(`/`)|日期分隔符。 在某些区域设置，可能用其他字符来表示日期分隔符。 日期分隔符用于分隔设置日期值的格式日、 月和年。 由应用程序的当前区域性确定用作在格式化输出中的日期分隔符的实际字符。|  
|(`%`)|用于指示应作为单个字母格式而不考虑任何尾随字母读取的后面的字符。 此外用于指示以用户定义的格式读取单个字母格式。 请参阅以下有关其他详细信息的内容。|  
|`d`|将天显示为不带前导零的数字 (例如， `1`)。 使用`%d`如果这是用户定义的数字格式中的唯一字符。|  
|`dd`|将天显示为带前导零的数字 (例如， `01`)。|  
|`ddd`|将天显示为缩写 (例如， `Sun`)。|  
|`dddd`|将天显示为完整名称 (例如， `Sunday`)。|  
|`M`|将月显示为不带前导零的数字 (例如，一月表示为`1`)。 使用`%M`如果这是用户定义的数字格式中的唯一字符。|  
|`MM`|将月显示为带前导零的数字 (例如， `01/12/01`)。|  
|`MMM`|将月显示为缩写 (例如， `Jan`)。|  
|`MMMM`|将月显示为完整的月份名称 (例如， `January`)。|  
|`gg`|显示时期/时代字符串 (例如， `A.D.`)。|  
|`h`|不带前导零使用 12 小时制时钟将小时显示为一个数字 (例如， `1:15:15 PM`)。 使用`%h`如果这是用户定义的数字格式中的唯一字符。|  
|`hh`|将小时显示为带前导零使用 12 小时制时钟的数字 (例如， `01:15:15 PM`)。|  
|`H`|不带前导零使用 24 小时制时钟将小时显示为一个数字 (例如， `1:15:15`)。 使用`%H`如果这是用户定义的数字格式中的唯一字符。|  
|`HH`|将小时显示为带前导零使用 24 小时制的数字 (例如， `01:15:15`)。|  
|`m`|不带前导零将分钟显示为一个数字 (例如， `12:1:15`)。 使用`%m`如果这是用户定义的数字格式中的唯一字符。|  
|`mm`|将分钟显示为带前导零的数字 (例如， `12:01:15`)。|  
|`s`|不带前导零将秒显示为一个数字 (例如， `12:15:5`)。 使用`%s`如果这是用户定义的数字格式中的唯一字符。|  
|`ss`|将秒显示为带前导零的数字 (例如， `12:15:05`)。|  
|`f`|显示秒的小数部分。 例如`ff`显示百分之一秒，而`ffff`显示万分之一秒。 你可以使用最多七个`f`用户定义的格式中的符号。 使用`%f`如果这是用户定义的数字格式中的唯一字符。|  
|`t`|使用 12 小时时钟，并显示大写`A`对于之前正午的任何小时显示大写`P`对于中午与 11:59 P.M 之间的任何小时 使用`%t`如果这是用户定义的数字格式中的唯一字符。|  
|`tt`|对于使用 12 小时制时钟的区域设置，显示大写`AM`正午之前的任何小时有显示大写`PM`与中午与 11:59 P.M 之间的任何小时<br /><br /> 对于使用 24 小时制时钟的区域设置，会显示任何内容。|  
|`y`|显示不带前导零的年数 (0-9)。 使用`%y`如果这是用户定义的数字格式中的唯一字符。|  
|`yy`|如果适用，将年显示两位数字表示带一个前导零的数字格式中。|  
|`yyy`|将年份显示四位数字的数字格式中。|  
|`yyyy`|将年份显示四位数字的数字格式中。|  
|`z`|显示不带前导零的时区偏移量 (例如， `-8`)。 使用`%z`如果这是用户定义的数字格式中的唯一字符。|  
|`zz`|显示带一个前导零的时区偏移量 (例如， `-08`)|  
|`zzz`|显示完整的时区偏移量 (例如， `-08:00`)|  
  
### <a name="legacy-code-example"></a>旧式代码示例  
 下面的示例的用户定义的日期和时间格式为`December 7, 1958, 8:50 PM, 35 seconds`:  
  
|格式|显示|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 由设备制造商确定设备的最小时间解析度。 如果该设备的时间解析度非常低，`f`格式字符，则返回 0 时该设备上运行。  
  
   
  
## Examples  
 此示例演示同时使用 `Format` 格式和用户定义格式格式化值的 `String` 函数的各种用法。 对于日期分隔符 (`/`)、时间分隔符 (`:`) 和 AM/PM 指示符（`t` 和 `tt`），系统显示的实际格式化输出取决于代码使用的区域设置。 当在开发环境中显示时间和日期时，使用代码区域设置的短时间格式和短日期格式。  
  
> [!NOTE]
>  对于使用 24 小时制的区域设置，AM/PM 指示符（`t` 和 `tt`）不显示任何内容。  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 要格式化的表达式。</param>
        <param name="NumDigitsAfterDecimal">可选。 数值，指示在小数点右侧显示的位数。 默认值为 -1，指示使用了计算机的区域设置。</param>
        <param name="IncludeLeadingDigit">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示对于小数值是否显示前导零。 请参见值的“备注”。</param>
        <param name="UseParensForNegativeNumbers">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示是否用括号将负值括起来。 请参见值的“备注”。</param>
        <param name="GroupDigits">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示是否用计算机区域设置中指定的组分隔符对数字进行分组。 请参见值的“备注”。</param>
        <summary>返回一个格式为货币值的表达式，该货币值使用系统控制面板中定义的货币符号。</summary>
        <returns>一个格式为货币值的表达式，该货币值使用系统控制面板中定义的货币符号。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 时省略了一个或多个可选参数，将改为使用计算机的匹配区域设置值。  
  
 相对于货币值的货币符号的位置取决于系统的区域设置。  
  
> [!NOTE]
>  设置的所有信息均都来自应用程序的区域设置。 默认情况下，将在控制面板中设置的区域设置。 但是，它可能会更改以编程方式使用.NET Framework 中，除前导零，来自`Number`选项卡。  
  
 `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`参数采用以下三态枚举值。  
  
|值|描述|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|计算机的区域设置|  
  
   
  
## Examples  
 下面的示例说明了 `FormatCurrency` 函数的用法。  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">小数点后的数字位数大于 99。</exception>
        <exception cref="T:System.InvalidCastException">不是数字类型。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 要格式化的 <see langword="Date" /> 表达式。</param>
        <param name="NamedFormat">可选。 指示所使用的日期/时间格式的数值。 如果省略，则使用 <see langword="DateFormat.GeneralDate" />。</param>
        <summary>返回一个表示日期/时间值的字符串表达式。</summary>
        <returns>一个表示日期/时间值的字符串表达式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date`数据类型始终包含日期和时间信息。 为进行类型转换，Visual Basic 将 1/1/1 (1 月 1 日的 1 年度) 作为时间为非特定值的日期和 00:00:00 （午夜） 的非特定值。 如果您设置的格式`Date`值为日期/时间字符串，`FormatDateTime`不在生成的字符串中包括非特定值。 例如，如果转换 #1/1/0001 # 为一个字符串，则结果是"9:30:00 AM"; 的 9:30:00取消日期信息。 但是，日期信息仍会在原始`Date`值和可恢复函数如`DatePart`。  
  
> [!NOTE]
>  如果传递`Expression`参数中的作为`String`文本，`FormatDateTime`将根据其解释<xref:System.Globalization.CultureInfo.CurrentCulture%2A>应用程序的设置。 但是，如果将其作为传递`Date`文本，使用格式 #mm/dd/yyyy #，因为`FormatDateTime`总是将解释`Date`文本取决于英语 （美国） 区域性设置。 这是必需的因为如果应用程序开发和使用进行编码`Date`来自其中一个的文本的区域性，但具有不同区域性的平台上然后执行`Date`无法正确地分析文本。  
  
 `NamedFormat`参数具有以下设置。  
  
|返回的常量|描述|  
|-|-|  
|`DateFormat.GeneralDate`|显示日期和/或时间。 显示为短日期的日期部分。 如果没有时间部分，则很长时间格式显示。 如果存在，这两个部分都显示。|  
|`DateFormat.LongDate`|显示使用计算机的区域设置中指定的长日期格式的日期。|  
|`DateFormat.ShortDate`|显示使用计算机的区域设置中指定的短日期格式的日期。|  
|`DateFormat.LongTime`|显示使用计算机的区域设置中指定的时间格式的时间。|  
|`DateFormat.ShortTime`|显示时间使用 24 小时格式 (hh: mm)。|  
  
   
  
## Examples  
 此示例演示如何使用`FormatDateTime`函数。  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NamedFormat" /> 设置无效。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 要格式化的表达式。</param>
        <param name="NumDigitsAfterDecimal">可选。 数值，指示在小数点右侧显示的位数。 默认值为 -1，指示使用了计算机的区域设置。</param>
        <param name="IncludeLeadingDigit">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示对于小数值是否显示前导零。 请参阅“设置”，以获取值。</param>
        <param name="UseParensForNegativeNumbers">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否用括号将负值括起来。 请参阅“设置”，以获取值。</param>
        <param name="GroupDigits">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否使用区域设置中指定的组分隔符对数字进行分组。 请参阅“设置”，以获取值。</param>
        <summary>返回格式化为数字的表达式。</summary>
        <returns>格式化为数字的表达式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 时省略了一个或多个可选自变量是由区域设置提供省略的实参的值。  
  
> [!NOTE]
>  设置的所有信息均都来自应用程序的区域设置。 默认情况下，将在控制面板中设置的区域设置。 但是，它可能会更改以编程方式使用.NET Framework。  
  
 `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`参数具有以下设置。  
  
|返回的常量|描述|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|计算机的区域设置|  
  
   
  
## Examples  
 此示例演示`FormatNumber`函数。  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">不是数字类型。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 要格式化的表达式。</param>
        <param name="NumDigitsAfterDecimal">可选。 数字值，该值指示要显示小数点右侧的多少位。 默认值为 -1，指示使用了区域设置。</param>
        <param name="IncludeLeadingDigit">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否显示小数值前的零。 请参阅“设置”，以获取值。</param>
        <param name="UseParensForNegativeNumbers">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否在括号内放入负值。 请参阅“设置”，以获取值。</param>
        <param name="GroupDigits">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否使用区域设置中指定的组分隔符对数字进行分组。 请参阅“设置”，以获取值。</param>
        <summary>返回以 % 字符结尾的百分比格式的表达式（即乘以 100）。</summary>
        <returns>以 % 字符结尾的百分比格式（即乘以 100）的表达式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当省略一个或多个可选参数时，由区域设置提供省略的实参的值。  
  
> [!NOTE]
>  设置的所有信息均都来自应用程序的区域设置。 默认情况下，将在控制面板中设置的区域设置。 但是，它可能会更改以编程方式使用.NET Framework。  
  
 `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`参数具有以下设置。  
  
|返回的常量|描述|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|计算机的区域设置|  
  
   
  
## Examples  
 此示例演示如何使用`FormatPercent`函数。  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">不是数字类型。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Index" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <param name="Index">必需。 <see langword="Integer" /> 表达式。 要返回的 <paramref name="str" /> 中的字符索引（从 1 开始）。</param>
        <summary>返回 <see langword="Char" /> 值，该值表示提供的字符串中位于指定的索引位置处的字符。</summary>
        <returns><see langword="Char" /> 值，该值表示提供的字符串中指定索引处的字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Index`小于 1 或大于中的最后一个字符的索引`str`、`ArgumentException`引发。  
  
   
  
## Examples  
 此示例演示如何使用`GetChar`函数返回从指定索引中的一个字符`String`。  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="str" /> 为 <see langword="Nothing" />，<paramref name="Index" /> &lt; 1，或 <paramref name="Index" /> 大于 <paramref name="str" /> 最后一个字符的索引。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个整数，该整数指定一个字符串在另一个字符串中的第一个匹配项的起始位置。  如果找到了匹配项，则该整数是从 1 开始的索引。  如果未找到匹配项，则函数返回零。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必需。 正在搜索的 <see langword="String" /> 表达式。</param>
        <param name="String2">必需。 查找到的 <see langword="String" /> 表达式。</param>
        <param name="Compare">可选。 指定字符串比较的类型。 如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</param>
        <summary>返回一个整数，该整数指定一个字符串在另一个字符串中的第一个匹配项的起始位置。</summary>
        <returns><list type="table">
            <item>
              <term> 如果 
 </term>
              <description> InStr 返回 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> 的长度为零或 <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 的长度为零或 <see langword="Nothing" /></term>
              <description> 搜索的开始位置，该位置默认为第一个字符位置。  
  
 </description>
            </item>
            <item>
              <term>未找到 
                <paramref name="String2" />。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>在 
                <paramref name="String2" /> 中找到 <paramref name="String1" /></term>
              <description> 匹配开始的位置 
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，`InStr`函数用于分析字符串。  
  
> [!NOTE]
>  `InStrB`在以前版本的 Visual Basic 函数返回的字节，而不是字符位置数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 Visual Basic 2005 的所有字符串都都以 unicode 格式，和`InStrB`不再受支持。  
  
 `Compare` 参数的设置是：  
  
|返回的常量|值|描述|  
|-|-|-|  
|`Binary`|0|执行二进制比较|  
|`Text`|1|执行文本比较|  
  
   
  
## Examples  
 本例使用 `InStr` 函数返回一个字符串在另一个字符串中的第一个匹配项的位置。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">字符串 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">字符串介绍 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare 语句</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">可选。 数值表达式，设置每个搜索的起始位置。 如果省略该参数，则从第一个字符位置开始搜索。 起始索引从一开始。</param>
        <param name="StartPos">To be added.</param>
        <param name="String1">必需。 正在搜索的 <see langword="String" /> 表达式。</param>
        <param name="String2">必需。 查找到的 <see langword="String" /> 表达式。</param>
        <param name="Compare">可选。 指定字符串比较的类型。 如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</param>
        <summary>返回一个整数，该整数指定一个字符串在另一个字符串中的第一个匹配项的起始位置。</summary>
        <returns><list type="table">
            <item>
              <term> 如果 
 </term>
              <description> InStr 返回 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> 的长度为零或 <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 的长度为零或 <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>未找到 
                <paramref name="String2" />。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>在 
                <paramref name="String2" /> 中找到 <paramref name="String1" /></term>
              <description> 匹配开始的位置 
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> 长度大于 <paramref name="String1" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，`InStr`函数用于分析字符串。  
  
> [!NOTE]
>  `InStrB`在以前版本的 Visual Basic 函数返回的字节，而不是字符位置数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 Visual Basic 2005 的所有字符串都都以 unicode 格式，和`InStrB`不再受支持。  
  
 `Compare` 参数的设置是：  
  
|返回的常量|值|描述|  
|-|-|-|  
|`Binary`|0|执行二进制比较|  
|`Text`|1|执行文本比较|  
  
   
  
## Examples  
 本例使用 `InStr` 函数返回一个字符串在另一个字符串中的第一个匹配项的位置。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 1。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">字符串 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">字符串介绍 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare 语句</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StringMatch" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">必需。 搜索的 String 表达式。</param>
        <param name="StringMatch">必需。 搜索的字符串表达式。</param>
        <param name="Start">可选。 数值表达式，设置从字符串左侧开始进行的每个搜索的起始位置（从一开始计数）。 如果省略 <paramref name="Start" />，则使用 -1，它表示搜索从最后一个字符位置开始。 然后搜索从右到左继续进行。</param>
        <param name="Compare">可选。 数值，指示对子字符串求值时使用的比较类型。 如果省略，就会执行二进制比较。 具体的值请参见"设置"。</param>
        <summary>返回某一字符串从另一字符串的右侧开始算起第一次出现的位置。</summary>
        <returns><list type="table">
            <item>
              <term> 如果 
 </term>
              <description> InStrRev 返回 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> 的长度为零 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> 的长度为零 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>未找到 
                <paramref name="StringMatch" />。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>在 
                <paramref name="StringMatch" /> 中找到 <paramref name="StringCheck" /></term>
              <description> 从字符串的右侧开始找到的第一个匹配项的位置。  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> 大于 <paramref name="StringMatch" /> 的长度</term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请注意，对于语法`InStrRev`函数不是相同的语法`InStr`函数。  
  
 `Compare`自变量可具有以下值。  
  
|返回的常量|描述|  
|-|-|  
|`Binary`|执行二进制比较。|  
|`Text`|执行文本比较。|  
  
   
  
## Examples  
 此示例演示如何使用`InStrRev`函数。  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> = 0 或 <paramref name="Start" /> &lt; -1。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">字符串 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回通过连接一个数组中包含的若干子字符串创建的字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必需。 一维数组，包含要连接的子字符串。</param>
        <param name="Delimiter">可选。 任何字符串，用于在返回的字符串中分隔子字符串。 如果省略该参数，则使用空白字符 (" ")。 如果 <paramref name="Delimiter" /> 是零长度字符串 ("") 或 <see langword="Nothing" />，则列表中的所有项目都串联在一起，中间没有分隔符。</param>
        <summary>返回通过连接一个数组中包含的若干子字符串创建的字符串。</summary>
        <returns>通过连接一个数组中包含的若干子字符串创建的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 没有之间的奇偶校验`Join`和`Split`函数。 `Join`函数采用一个字符串数组，并将它们联接起来使用分隔符字符串，以返回单个字符串。 `Split`函数采用一个字符串，并将它隔离在分隔符，以返回一个字符串数组。 但是，主要区别在于`Join`可以使用任何分隔符的字符串、 字符串串联`Split`仅可以分隔字符串使用单字符分隔符。  
  
   
  
## Examples  
 下面的示例演示如何使用`Join`函数来创建从多个字符串的列表。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> 不是一维数组。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必需。 一维数组，包含要连接的子字符串。</param>
        <param name="Delimiter">可选。 任何字符串，用于在返回的字符串中分隔子字符串。 如果省略该参数，则使用空白字符 (" ")。 如果 <paramref name="Delimiter" /> 是零长度字符串 ("") 或 <see langword="Nothing" />，则列表中的所有项目都串联在一起，中间没有分隔符。</param>
        <summary>返回通过连接一个数组中包含的若干子字符串创建的字符串。</summary>
        <returns>通过连接一个数组中包含的若干子字符串创建的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 没有之间的奇偶校验`Join`和`Split`函数。 `Join`函数采用一个字符串数组，并将它们联接起来使用分隔符字符串，以返回单个字符串。 `Split`函数采用一个字符串，并将它隔离在分隔符，以返回一个字符串数组。 但是，主要区别在于`Join`可以使用任何分隔符的字符串、 字符串串联`Split`仅可以分隔字符串使用单字符分隔符。  
  
   
  
## Examples  
 下面的示例演示如何使用`Join`函数来创建从多个字符串的列表。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> 不是一维数组。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回将转换为小写的字符串或字符。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
        <summary>返回将转换为小写的字符串或字符。</summary>
        <returns>将转换为小写的字符串或字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅将大写字母转换为小写;所有小写字母和 nonletter 字符都保持不变。  
  
 此函数，以便在其中使用该应用程序的区域设置相应的大小写更改操作字符串时使用应用程序的区域性信息。  
  
> [!IMPORTANT]
>  如果你的应用程序做出安全决策基于比较或大小写更改操作的结果，则该操作应使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，并传入<xref:System.StringComparison.Ordinal>或<xref:System.StringComparison.OrdinalIgnoreCase>为`comparisonType`参数。 有关详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
   
  
## Examples  
 此示例使用`LCase`函数返回一个字符串的小写形式。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">字符串 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
        <summary>返回将转换为小写的字符串或字符。</summary>
        <returns>将转换为小写的字符串或字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅将大写字母转换为小写;所有小写字母和 nonletter 字符都保持不变。  
  
 此函数，以便在其中使用该应用程序的区域设置相应的大小写更改操作字符串时使用应用程序的区域性信息。  
  
> [!IMPORTANT]
>  如果你的应用程序做出安全决策基于比较或大小写更改操作的结果，则该操作应使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，并传入<xref:System.StringComparison.Ordinal>或<xref:System.StringComparison.OrdinalIgnoreCase>为`comparisonType`参数。 有关详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
   
  
## Examples  
 此示例使用`LCase`函数返回一个字符串的小写形式。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">字符串 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">必需。 一个 <see langword="String" /> 表达式，从中返回最左侧的那些字符。</param>
        <param name="Length">必需。 <see langword="Integer" /> 表达式。 指示要返回的字符数的数值表达式。 如果为 0，则返回零长度字符串 ("")。 如果大于或等于 <paramref name="str" /> 的字符数，则返回整个字符串。</param>
        <summary>返回一个字符串，该字符串包含从某字符串左侧算起的指定数量的字符。</summary>
        <returns>一个字符串，该字符串包含从某字符串左侧算起的指定数量的字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定中的字符数`str`，使用`Len`函数。 如果在 Windows 窗体应用程序或具有任何其他类中使用`Left`属性，必须完全限定的函数`Microsoft.VisualBasic.Left`。  
  
> [!NOTE]
>  `LeftB`函数在以前版本的 Visual Basic 中字节而不是字符返回的字符串。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LeftB`不再受支持。  
  
   
  
## Examples  
 此示例演示如何使用`Left`函数返回的子字符串给定`String`。 在类具有`Left`属性，则可能需要完全限定`Left`函数。  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`不包含任何其他类型，它会返回对象的大小，因为它将写入到由文件`FilePut`函数。  
  
 `VBFixedString`特性可以应用于对象，来指示写入时的大小的字符串，以字节为单位中的字符串字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，确定的大小时`Object`变量。  
  
> [!NOTE]
>  `Len`函数可能不能确定实际所需的可变长度字符串用户定义数据类型中使用的存储字节数。  
  
> [!NOTE]
>  `LenB`中早期版本的 Visual Basic 函数返回一个字符串，而不是字符中的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`LenB`不再受支持。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len`函数仅接受`String`和`Object`变量作为参数。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`不包含任何其他类型，将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source">必需。 <see langword="String" /> 表达式。 字符串变量的名称。</param>
        <param name="Length">必需。 <see langword="Integer" /> 表达式。 返回的字符串的长度。</param>
        <summary>返回一个左对齐字符串，该字符串包含调整为指定长度的指定的字符串。</summary>
        <returns>一个左对齐字符串，该字符串包含调整为指定长度的指定的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的字符串的长度超过指定的长度，则返回的字符串被缩写为指定的长度。 如果指定的字符串的长度小于指定长度，添加空格，右端的返回的字符串以生成适当的长度。  
  
   
  
## Examples  
 此示例演示如何使用`LSet`函数。  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">有效使用数据类型</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <summary>返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</summary>
        <returns>一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`， `RTrim`，和`Trim`函数从字符串末尾删除空格。  
  
   
  
## Examples  
 此示例使用 `LTrim` 函数去除字符串变量的前导空格，使用 `RTrim` 函数去除尾随空格， 并使用 `Trim` 函数同时去除这两种类型的空格。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个字符串，该字符串包含来自指定字符串的字符。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">必需。 <see langword="String" /> 表达式，从该表达式返回字符。</param>
        <param name="Start">必需。 <see langword="Integer" /> 表达式。 要返回字符的开始位置。 如果 <paramref name="Start" /> 大于 <paramref name="str" /> 中的字符个数，则 <see langword="Mid" /> 函数返回零长度字符串 ("")。 <paramref name="Start" /> 从一开始。</param>
        <summary>返回字符串，该字符串包含从字符串中的指定位置开始的所有字符。</summary>
        <returns>由从字符串中指定位置开始的所有字符组成的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定中的字符数`str`，使用`Len`函数。  
  
 Visual Basic 具有`Mid`函数和一个`Mid`语句。 都按指定数目的字符在字符串中，运行这些元素，但`Mid`函数将返回字符，而`Mid`语句替换的字符。 有关详细信息，请参阅[Mid 语句](~/docs/visual-basic/language-reference/statements/mid-statement.md)。  
  
> [!NOTE]
>  `MidB`函数在以前版本的 Visual Basic 中字节而不是字符返回的字符串。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有 Visual Basic 字符串都是 Unicode，和`MidB`不再受支持。  
  
   
  
## Examples  
 此示例中的最后一行对 `Mid` 函数使用此重载以返回字符串中第 5 个字符之后的字符（包括第 5 个字符）。  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 或 <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">字符串 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">字符串介绍 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid 语句</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">必需。 <see langword="String" /> 表达式，从该表达式返回字符。</param>
        <param name="Start">必需。 <see langword="Integer" /> 表达式。 要返回字符的开始位置。 如果 <paramref name="Start" /> 大于 <paramref name="str" /> 中的字符个数，则 <see langword="Mid" /> 函数返回零长度字符串 ("")。 <paramref name="Start" /> 从 1 开始。</param>
        <param name="Length">可选。 <see langword="Integer" /> 表达式。 要返回的字符数。 如果 <paramref name="Length" /> 省略或超过文本的字符（包括 <paramref name="Start" /> 处的字符）数，则返回从字符串开始位置到结尾的所有字符。</param>
        <summary>返回字符串，该字符串包含从字符串中的指定位置开始的指定数量的字符。</summary>
        <returns>由从字符串中指定位置开始的指定数量的字符组成的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定中的字符数`str`，使用`Len`函数。  
  
 Visual Basic 具有`Mid`函数和一个`Mid`语句。 都按指定数目的字符在字符串中，运行这些元素，但`Mid`函数将返回字符，而`Mid`语句替换的字符。 有关详细信息，请参阅[Mid 语句](~/docs/visual-basic/language-reference/statements/mid-statement.md)。  
  
> [!NOTE]
>  `MidB`函数在以前版本的 Visual Basic 中字节而不是字符返回的字符串。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有 Visual Basic 字符串都是 Unicode，和`MidB`不再受支持。  
  
   
  
## Examples  
 此示例中的前两个 `Mid` 函数从字符串中的指定位置开始返回指定数量的字符。 （最后一个函数阐释 <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> 重载，并且仅指定字符串提取的起点。）  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 或 <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">字符串 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">字符串介绍 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid 语句</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Find" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Replacement" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Start" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Count" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必需。 字符串表达式，包含要替换的子字符串。</param>
        <param name="Find">必需。 搜索的子字符串。</param>
        <param name="Replacement">必需。 替换用的子字符串。</param>
        <param name="Start">可选。 <paramref name="Expression" /> 内部要替换的子字符串的开始的位置。 <see langword="Replace" /> 的返回值是字符串，在 <paramref name="Start" /> 开始，具有相应的子情况。 如果省略，则假定为 1。</param>
        <param name="Count">可选。 执行子字符串替换的数目。 如果省略，则默认值是 -1，表示“进行所有可能的替换”。</param>
        <param name="Compare">可选。 数值，指示对子字符串求值时使用的比较类型。 具体的值请参见"设置"。</param>
        <summary>返回一个字符串，其中的指定子字符串已由另一个子字符串替换了指定的次数。</summary>
        <returns><see langword="Replace" /> 返回下列值。  
  
 <list type="table"><item><term> 如果 
 </term><description> Replace 返回 
 </description></item><item><term><paramref name="Find" /> 的长度为零或 <see langword="Nothing" /></term><description> <paramref name="Expression" /> 的副本</description></item><item><term><paramref name="Replace" /> 的长度为零 
 </term><description> <paramref name="Expression" /> 的副本，不带 <paramref name="Find" /> 匹配项</description></item><item><term><paramref name="Expression" /> 的长度为零或 <see langword="Nothing" />，或者 <paramref name="Start" /> 大于 <paramref name="Expression" /> 的长度</term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> 是 0 
 </term><description> <paramref name="Expression" /> 的副本</description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回值`Replace`函数是一个字符串，则从指定的位置开始`Start`，并在末尾结束`Expression`具有进行的替换字符串所指定的`Find`和`Replace`值。  
  
 `Compare`自变量可具有以下值。  
  
|返回的常量|描述|  
|-|-|  
|`Binary`|执行二进制比较|  
|`Text`|执行文本比较|  
  
   
  
## Examples  
 此示例演示`Replace`函数。  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Count" /> &lt; -1 或 <paramref name="Start" /> &lt;= 0。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">必需。 一个 <see langword="String" /> 表达式，从中返回最右侧的那些字符。</param>
        <param name="Length">必需。 <see langword="Integer" />。 指示要返回的字符数的数值表达式。 如果为 0，则返回零长度字符串 ("")。 如果大于或等于 <paramref name="str" /> 的字符数，则返回整个字符串。</param>
        <summary>返回一个字符串，其中包含从某个字符串右端开始的指定数量的字符。</summary>
        <returns>一个字符串，其中包含从某个字符串右端开始的指定数量的字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定中的字符数`str`，使用`Len`函数。 如果在 Windows 窗体或具有任何其他类中使用`Right`属性，必须完全限定的函数`Microsoft.VisualBasic.Strings.Right`。  
  
> [!NOTE]
>  `RightB`早期版本的 Visual Basic 中的函数返回字节，而不是字符的字符串。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串是 Unicode，和`RightB`不再受支持。  
  
   
  
## Examples  
 此示例演示如何使用`Right`函数返回的子字符串给定`String`。 在类具有`Right`属性，则可能需要完全限定`Right`函数。  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source">必需。 <see langword="String" /> 表达式。 字符串变量的名称。</param>
        <param name="Length">必需。 <see langword="Integer" /> 表达式。 返回的字符串的长度。</param>
        <summary>返回包含调整为指定长度的指定字符串的右对齐字符串。</summary>
        <returns>包含调整为指定长度的指定字符串的右对齐字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Source`长于`Length`，`RSet`放置仅最左边的字符，最长`Source`，返回的字符串中。 如果指定的字符串的长度小于指定长度，以生成适当的长度的字符串的左端添加空格。 如果指定的字符串的长度超过指定的长度，则将它缩短为指定长度。  
  
   
  
## Examples  
 此示例演示如何使用`RSet`函数。  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">有效使用数据类型</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <summary>返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</summary>
        <returns>一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`， `RTrim`，和`Trim`函数从字符串末尾删除空格。  
  
   
  
## Examples  
 此示例使用 `LTrim` 函数去除字符串变量的前导空格，使用 `RTrim` 函数去除尾随空格， 并使用 `Trim` 函数同时去除这两种类型的空格。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Integer" /> 表达式。 希望字符串包含的空格数。</param>
        <summary>返回由指定数量空格组成的字符串。</summary>
        <returns>由指定数量空格组成的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space`函数可用于格式化输出，并清除固定长度字符串中的数据。  
  
   
  
## Examples  
 此示例使用`Space`函数返回一个包含指定数量的空格的字符串。  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Limit" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必需。 包含子字符串和分隔符的 <see langword="String" /> 表达式。</param>
        <param name="Delimiter">可选。 用于标识子字符串的界限的任何单个字符。 如果省略了 <paramref name="Delimiter" />，则假定空白字符 (" ") 为分隔符。</param>
        <param name="Limit">可选。 输入字符串应拆分到的子字符串的最大数量。 默认值为 -1，指示在 <paramref name="Delimiter" /> 字符串的每个匹配项处都拆分输入字符串。</param>
        <param name="Compare">可选。 数值，指示计算子字符串时使用的比较模式。 请参阅“设置”，以获取值。</param>
        <summary>返回一个从零开始的一维数组，其中包含指定数量的子字符串。</summary>
        <returns><see langword="String" /> 数组。 如果 <paramref name="Expression" /> 为零长度字符串 ("")，则 <see langword="Split" /> 返回包含零长度字符串的单个元素数组。 如果 <paramref name="Delimiter" /> 为零长度字符串，或如果它不在 <paramref name="Expression" /> 中的任何位置出现，则 <see langword="Split" /> 将返回包含整个 <paramref name="Expression" /> 字符串的单个元素数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，或者当`Limit`等于-1，`Split`函数拆分输入的字符串的分隔符字符串，每个匹配项处，并返回数组中的子字符串。 当`Limit`参数是大于零，`Split`函数将在第一个字符串拆分`Limit`-1 出现的分隔符，并返回一个包含生成的子字符串的数组。 例如，`Split("a:b:c", ":")`返回的数组`{"a", "b", "c"}`，而`Split("a:b:c", ":", 2)`返回的数组`{"a", "b:c"}`。  
  
 当`Split`函数遇到某行中，两个分隔符或分隔符的开头或字符串的末尾，会将其解释为围绕一个空字符串 ("")。 例如，`Split("xx", "x")`返回数组，其中包含三个空字符串： 之一开头的字符串和"x"，第二个介于两个"x"字符串，第一个和最后一个"x"和字符串的末尾之间的一个。  
  
 此表说明了如何可选`Delimiter`， `Limit`，并`Compare`参数可以更改的行为`Split`函数。  
  
|拆分调用|返回值|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice 和 Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice"，"Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone", "example.com"}|  
  
 `Compare`自变量可具有以下值。  
  
|返回的常量|描述|值|  
|-|-|-|  
|`CompareMethod.Binary`|执行二进制比较|0|  
|`CompareMethod.Text`|执行文本比较|1|  
  
   
  
## Examples  
 下面的示例演示如何将一个字符串的空格处拆分。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 下面的示例演示如何拆分有行中的多个分隔符的字符串并筛选出空字符串。  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <param name="String2">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <param name="Compare">可选。 指定字符串比较的类型。 如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</param>
        <summary>根据字符串的比较结果返回 -1、0 或 1。</summary>
        <returns><see langword="StrComp" /> 函数具有下列返回值：  
  
 <list type="table"><item><term> 如果 
 </term><description> StrComp 返回 
 </description></item><item><term><paramref name="String1" /> 排在 <paramref name="String2" /> 的前面</term><description> -1 
 </description></item><item><term><paramref name="String1" /> 等于 <paramref name="String2" /></term><description> 0 
 </description></item><item><term><paramref name="String1" /> 排在 <paramref name="String2" /> 的后面</term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 开头的第一个字符的字母数字排序值的比较字符串。 二进制比较、 文本比较和排序顺序的详细信息，请参阅[Option 比较语句](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)。  
  
 `Compare` 参数的设置是：  
  
|返回的常量|描述|  
|-|-|  
|`Binary`|执行二进制比较，而基于派生自的内部二进制表示形式的字符的排序顺序。|  
|`Text`|执行文本比较，基于由您的系统的不区分大小写的文本排序顺序`LocaleID`值。|  
  
   
  
## Examples  
 此示例使用`StrComp`函数以返回的字符串比较的结果。  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Compare" /> 值无效。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">字符串 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="LocaleID" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str">必需。 要转换的 <see langword="String" /> 表达式。</param>
        <param name="Conversion">必需。 <see cref="T:Microsoft.VisualBasic.VbStrConv" /> 成员。 指定要执行的转换类型的枚举值。</param>
        <param name="LocaleID">可选。 <see langword="LocaleID" /> 值（如果与系统 <see langword="LocaleID" /> 值不同）。 （系统 <see langword="LocaleID" /> 值为默认值。）</param>
        <summary>返回按照指定方式转换的字符串。</summary>
        <returns>按照指定方式转换的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 常量`VbStrConv.Wide`， `VbStrConv.Narrow`， `VbStrConv.SimplifiedChinese`， `VbStrConv.TraditionalChinese`， `VbStrConv.Katakana`，和`VbStrConv.Hiragana`可能会导致运行时错误时使用在区域设置中，它们不适用，但并不总是： 常量`VbStrConv.Katakana`和`VbStrConv.Hiragana`可用于非日语系统中安装了日语语言包。 此外，使用的常量`VbStrConv.Wide`和`VbStrConv.Narrow`使用东亚语言安装支持在任何系统上。  
  
 此函数，以便在其中使用该应用程序的区域设置相应的大小写更改操作字符串时使用应用程序的区域性信息。  
  
> [!IMPORTANT]
>  如果你的应用程序做出安全决策基于比较或大小写更改操作的结果，则该操作应使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，并传入<xref:System.StringComparison.Ordinal>或<xref:System.StringComparison.OrdinalIgnoreCase>为`comparisonType`参数。 有关详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
 `Conversion` 参数的设置是：  
  
|枚举成员|描述|  
|-|-|  
|`VbStrConv.None`|不执行任何转换|  
|`VbStrConv.LinguisticCasing`|使用语言规则进行大小写，而不是文件系统 （默认值）。 有效，且`VbStrConv.UpperCase`和`VbStrConv.LowerCase`仅。|  
|`VbStrConv.UpperCase`|将字符串转换为大写字符。|  
|`VbStrConv.LowerCase`|将字符串转换为小写字符。|  
|`VbStrConv.ProperCase`|将转换为大写的字符串中每个单词的第一个字母。|  
|`VbStrConv.Wide` <sup>*</sup>|将窄 （半） 为宽 （全角） 字符在字符串中的字符转换。 [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|将转换为窄 （半） 字符的字符串中的宽 （全角） 字符。|  
|`VbStrConv.Katakana` <sup>**</sup>|将字符串中的平假名字符转换为片假名字符。|  
|`VbStrConv.Hiragana` <sup>**</sup>|将字符串中片假名字符的转换为平假名字符。|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|将繁体中文字符转换为简体中文。|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|将简体中文字符转换为繁体中文。|  
  
 <sup>*</sup> 适用于亚洲区域设置。  
  
 <sup>**</sup> 仅适用于日本。  
  
> [!NOTE]
>  这些常量指定.NET Framework 公共语言运行时中。 因此，它们可以使用任意位置代替实际值在代码中。 可组合 (例如， `UpperCase + Wide`)，除非它们是互斥 (例如， `VbStrConv.Wide + VbStrConv.Narrow`)。  
  
 以下是正确的大小写的有效单词分隔符：Null (`Chr$(0)`)，水平制表符 (`Chr$(9)`)，换行符 (`Chr$(10)`)，垂直制表符 (`Chr$(11)`)，换页符 (`Chr$(12)`)、 回车符 (`Chr$(13)`)，空间 （单字节字符集） (`Chr$(32)`)。 空格，这可以是全角或半角，实际值因国家/地区的东亚语言区域性而异。  
  
   
  
## Examples  
 此示例将所有小写字母转换为文本。  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">不支持 <paramref name="LocaleID" />、<paramref name="Conversion" /> &lt; 0 或 &gt; 2048，或不支持指定区域设置的转换。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回由指定字符重复指定次数后形成的字符串或对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Char" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Integer" /> 表达式。 要返回的字符串的长度。</param>
        <param name="Character">必需。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。 将只使用表达式的第一个字符。 如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
        <summary>返回由指定字符重复指定次数后形成的字符串或对象。</summary>
        <returns>由指定字符重复指定次数后形成的字符串或对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此函数将返回`String`的重复字符组成。 构成的字符串的字符是中的第一个字符`Character`参数，并且它重复`Number`次数。  
  
   
  
## Examples  
 此示例使用`StrDup`函数以返回字符串的重复字符。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> 为 <see langword="Nothing" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Integer" /> 表达式。 要返回的字符串的长度。</param>
        <param name="Character">必需。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。 将只使用表达式的第一个字符。 如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
        <summary>返回由指定字符重复指定次数后形成的字符串或对象。</summary>
        <returns>由指定字符重复指定次数后形成的字符串或对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此函数将返回`String`的重复字符组成。 构成的字符串的字符是中的第一个字符`Character`参数，并且它重复`Number`次数。  
  
   
  
## Examples  
 此示例使用`StrDup`函数以返回字符串的重复字符。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> 为 <see langword="Nothing" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Integer" /> 表达式。 要返回的字符串的长度。</param>
        <param name="Character">必需。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。 将只使用表达式的第一个字符。 如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
        <summary>返回由指定字符重复指定次数后形成的字符串或对象。</summary>
        <returns>由指定字符重复指定次数后形成的字符串或对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此函数将返回`String`的重复字符组成。 构成的字符串的字符是中的第一个字符`Character`参数，并且它重复`Number`次数。  
  
   
  
## Examples  
 此示例使用`StrDup`函数以返回字符串的重复字符。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> 为 <see langword="Nothing" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 字符反转的字符串表达式。 如果 <paramref name="Expression" /> 是一个零长度字符串 ("")，则返回一个零长度字符串。</param>
        <summary>返回指定字符串的字符顺序是相反的字符串。</summary>
        <returns>指定字符串的字符顺序是相反的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StrReverse`函数将返回一个字符串，包含相同字符作为`Expression`，但顺序相反。  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <summary>返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</summary>
        <returns>一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`， `RTrim`，和`Trim`函数从字符串末尾删除空格。  
  
   
  
## Examples  
 此示例使用 `LTrim` 函数去除字符串变量的前导空格，使用 `RTrim` 函数去除尾随空格， 并使用 `Trim` 函数同时去除这两种类型的空格。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个字符串或字符，其中包含转换为大写的指定字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
        <summary>返回一个字符串或字符，其中包含转换为大写的指定字符串。</summary>
        <returns>一个字符串或字符，其中包含转换为大写的指定字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只包含小写字母都转换为大写;所有大写字母和 nonletter 字符都保持不变。  
  
 此函数，以便在其中使用该应用程序的区域设置相应的大小写更改操作字符串时使用应用程序的区域性信息。  
  
> [!IMPORTANT]
>  如果你的应用程序做出安全决策基于比较或大小写更改操作的结果，则该操作应使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，并传入<xref:System.StringComparison.Ordinal>或<xref:System.StringComparison.OrdinalIgnoreCase>为`comparisonType`参数。 有关详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
   
  
## Examples  
 本例使用 `UCase` 函数返回字符串的大写版本。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">字符串 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
        <summary>返回一个字符串或字符，其中包含转换为大写的指定字符串。</summary>
        <returns>一个字符串或字符，其中包含转换为大写的指定字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只包含小写字母都转换为大写;所有大写字母和 nonletter 字符都保持不变。  
  
 此函数，以便在其中使用该应用程序的区域设置相应的大小写更改操作字符串时使用应用程序的区域性信息。  
  
> [!IMPORTANT]
>  如果你的应用程序做出安全决策基于比较或大小写更改操作的结果，则该操作应使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，并传入<xref:System.StringComparison.Ordinal>或<xref:System.StringComparison.OrdinalIgnoreCase>为`comparisonType`参数。 有关详细信息，请参阅[如何区域性会影响字符串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
   
  
## Examples  
 本例使用 `UCase` 函数返回字符串的大写版本。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字符串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">字符串 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
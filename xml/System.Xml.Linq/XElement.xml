<Type Name="XElement" FullName="System.Xml.Linq.XElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1067871315c00671d79ee0b81cecbe33cd7d7757" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69426786" /></Metadata><TypeSignature Language="C#" Value="public class XElement : System.Xml.Linq.XContainer, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XElement extends System.Xml.Linq.XContainer implements class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XElement" />
  <TypeSignature Language="VB.NET" Value="Public Class XElement&#xA;Inherits XContainer&#xA;Implements IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XElement : System::Xml::Linq::XContainer, System::Xml::Serialization::IXmlSerializable" />
  <TypeSignature Language="F#" Value="type XElement = class&#xA;    inherit XContainer&#xA;    interface IXmlSerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1&lt;System.Xml.Linq.XElement&gt;))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider(null, IsAny=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(System.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1&lt;System.Xml.Linq.XElement&gt;))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Xml.Serialization.XmlTypeConvertor("ConvertForAssignment")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c3714-101">表示一个 XML 元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-101">Represents an XML element.</span></span>  <span data-ttu-id="c3714-102">有关用法信息和示例，请参阅本页的 <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/concepts/linq/xelement-class-overview">XElement 类概述</see>和“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="c3714-102">See <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/concepts/linq/xelement-class-overview">XElement Class Overview</see> and the Remarks section on this page for usage information and examples.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-103">此类表示 XML 元素, 这是基本的 XML 构造。</span><span class="sxs-lookup"><span data-stu-id="c3714-103">This class represents an XML element, the fundamental XML construct.</span></span>  <span data-ttu-id="c3714-104">有关其他用法信息, 请参阅[System.xml.linq.xelement> 类概述](~/docs/csharp/programming-guide/concepts/linq/xelement-class-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="c3714-104">See [XElement Class Overview](~/docs/csharp/programming-guide/concepts/linq/xelement-class-overview.md) for other usage information.</span></span>  
  
 <span data-ttu-id="c3714-105">元素具有<xref:System.Xml.Linq.XName>、选择性地包含一个或多个属性, 还可以选择包含内容 (有关详细信息, <xref:System.Xml.Linq.XContainer.Nodes%2A>请参阅)。</span><span class="sxs-lookup"><span data-stu-id="c3714-105">An element has an <xref:System.Xml.Linq.XName>, optionally one or more attributes, and can optionally contain content (for more information, see <xref:System.Xml.Linq.XContainer.Nodes%2A>).</span></span>  
  
 <span data-ttu-id="c3714-106"><xref:System.Xml.Linq.XElement>可以包含以下类型的内容:</span><span class="sxs-lookup"><span data-stu-id="c3714-106">An <xref:System.Xml.Linq.XElement> can contain the following types of content:</span></span>  
  
-   <xref:System.Xml.Linq.XElement>  
  
-   <xref:System.Xml.Linq.XComment>  
  
-   <xref:System.Xml.Linq.XProcessingInstruction>  
  
-   <xref:System.Xml.Linq.XText>  
  
 <span data-ttu-id="c3714-107">有关的有效内容<xref:System.Xml.Linq.XElement>的详细信息, 请参阅[system.xml.linq.xelement> 和 XDocument 对象的有效内容](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="c3714-107">For details about the valid content of an <xref:System.Xml.Linq.XElement>, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c3714-108"><xref:System.Xml.Linq.XElement>派生自<xref:System.Xml.Linq.XNode>, 它派生自。 <xref:System.Xml.Linq.XContainer></span><span class="sxs-lookup"><span data-stu-id="c3714-108"><xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, which derives from <xref:System.Xml.Linq.XNode>.</span></span>  
  
 <span data-ttu-id="c3714-109">某些<xref:System.Xml.Linq.XElement>方法可从 XAML 使用。</span><span class="sxs-lookup"><span data-stu-id="c3714-109">Some <xref:System.Xml.Linq.XElement> methods can be used from XAML.</span></span> <span data-ttu-id="c3714-110">有关详细信息，请参阅 [LINQ to XML 动态属性](https://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012)。</span><span class="sxs-lookup"><span data-stu-id="c3714-110">For more information, see [LINQ to XML Dynamic Properties](https://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-111">下面的示例创建一个 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-111">The following example creates an XML tree.</span></span> <span data-ttu-id="c3714-112">新元素的内容来自 LINQ 查询。</span><span class="sxs-lookup"><span data-stu-id="c3714-112">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="c3714-113">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-113">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="c3714-114">下面是同一个示例, 但在这种情况下, XML 位于命名空间中。</span><span class="sxs-lookup"><span data-stu-id="c3714-114">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="c3714-115">有关详细信息, 请参阅使用[XML 命名空间](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="c3714-115">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree1 = new XElement(aw + "Root",  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5),  
    new XElement(aw + "Child6", 6)  
);  
  
XElement xmlTree2 = new XElement(aw + "Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree1 As XElement = _  
            <Root>  
                <Child1>1</Child1>  
                <Child2>2</Child2>  
                <Child3>3</Child3>  
                <Child4>4</Child4>  
                <Child5>5</Child5>  
                <Child6>6</Child6>  
            </Root>  
  
        Dim xmlTree2 As XElement = _   
            <Root>  
                <%= From el In xmlTree1.Elements() _  
                    Where el.Value >= 3 And el.Value <= 5 _  
                    Select el %>  
            </Root>  
  
        Console.WriteLine(xmlTree2)  
    End SUb  
End Module  
```  
  
 <span data-ttu-id="c3714-116">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-116">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-117">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-117">LINQ to XML</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012"><span data-ttu-id="c3714-118">LINQ to XML 动态属性</span><span class="sxs-lookup"><span data-stu-id="c3714-118">LINQ to XML Dynamic Properties</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3714-119">初始化 <see cref="T:System.Xml.Linq.XElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c3714-119">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-120">有关可传递到此构造函数的有效内容的详细信息, 请参阅[system.xml.linq.xelement> 和 XDocument 对象的有效内容](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="c3714-120">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c3714-121">存在从字符串到<xref:System.Xml.Linq.XName>的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="c3714-121">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3714-122">此构造函数的典型用法是将字符串指定为参数, 而不是创建新<xref:System.Xml.Linq.XName>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-122">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="c3714-123">在命名空间中创建元素时, 典型用途是将加法运算符重载<xref:System.Xml.Linq.XNamespace>用于, 并使用字符串<xref:System.Xml.Linq.XName>创建。</span><span class="sxs-lookup"><span data-stu-id="c3714-123">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3714-124">有关详细信息, 请参阅使用[XML 命名空间](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="c3714-124">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-125">下面的示例创建一个 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-125">The following example creates an XML tree.</span></span> <span data-ttu-id="c3714-126">新元素的内容来自 LINQ 查询。</span><span class="sxs-lookup"><span data-stu-id="c3714-126">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5),  
    new XElement("Child", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
            <Child>2</Child>  
            <Child>3</Child>  
            <Child>4</Child>  
            <Child>5</Child>  
            <Child>6</Child>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="c3714-127">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-127">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-128">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-128">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XElement ^ other);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XElement : System.Xml.Linq.XElement -&gt; System.Xml.Linq.XElement" Usage="new System.Xml.Linq.XElement other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="c3714-129">要从其复制的 <see cref="T:System.Xml.Linq.XElement" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c3714-129">An <see cref="T:System.Xml.Linq.XElement" /> object to copy from.</span></span></param>
        <summary><span data-ttu-id="c3714-130">从另一个 <see cref="T:System.Xml.Linq.XElement" /> 对象初始化 <see cref="T:System.Xml.Linq.XElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c3714-130">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from another <see cref="T:System.Xml.Linq.XElement" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-131">此构造函数生成元素的深层副本。</span><span class="sxs-lookup"><span data-stu-id="c3714-131">This constructor makes a deep copy of an element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-132">下面的示例创建一个 XML 树, 创建该树的一个克隆, 然后调用<xref:System.Xml.Linq.XNode.DeepEquals%2A>, 这会测试两个 XML 树是否相等。</span><span class="sxs-lookup"><span data-stu-id="c3714-132">The following example creates an XML tree, creates a clone of the tree, and then calls <xref:System.Xml.Linq.XNode.DeepEquals%2A>, which tests whether the two XML trees are equal.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2)  
);  
  
// Create a clone of the tree.  
XElement treeClone = new XElement(xmlTree);  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
  
// Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(new XElement("Child3", 3));  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root Att1="1">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
        </Root>  
  
' Create a clone of the tree.  
Dim treeClone As XElement = New XElement(xmlTree)  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
  
' Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(New XElement("Child3", 3))  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
```  
  
 <span data-ttu-id="c3714-133">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-133">This example produces the following output:</span></span>  
  
```  
xmlTree = treeClone: True  
xmlTree = treeClone: False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-134">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-134">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XElement : System.Xml.Linq.XName -&gt; System.Xml.Linq.XElement" Usage="new System.Xml.Linq.XElement name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3714-135">一个包含元素名称的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-135">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</span></span></param>
        <summary><span data-ttu-id="c3714-136">用指定的名称初始化 <see cref="T:System.Xml.Linq.XElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c3714-136">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-137">此构造函数将创建一个不带任何内容且没有属性的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-137">This constructor creates an element with no content and no attributes.</span></span>  
  
 <span data-ttu-id="c3714-138">存在从字符串到<xref:System.Xml.Linq.XName>的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="c3714-138">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3714-139">此构造函数的典型用法是将字符串指定为参数, 而不是创建新<xref:System.Xml.Linq.XName>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-139">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3714-140">在命名空间中创建元素时, 典型用途是将加法运算符重载<xref:System.Xml.Linq.XNamespace>用于, 并使用字符串<xref:System.Xml.Linq.XName>创建。</span><span class="sxs-lookup"><span data-stu-id="c3714-140">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3714-141">有关详细信息, 请参阅使用[XML 命名空间](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="c3714-141">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-142">下面的示例创建一个无内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-142">The following example creates an element with no content.</span></span>  
  
```csharp  
XElement el = new XElement("Root");  
Console.WriteLine(el);  
```  
  
```vb  
Dim el As XElement = <Root/>  
Console.WriteLine(el)  
```  
  
 <span data-ttu-id="c3714-143">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-143">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 <span data-ttu-id="c3714-144">下面的示例在命名空间中创建不含任何内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-144">The following example creates an element in a namespace with no content.</span></span> <span data-ttu-id="c3714-145">有关详细信息, 请参阅使用[XML 命名空间](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="c3714-145">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```  

XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root = <Root/>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3714-146">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-146">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-147">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-147">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XStreamingElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XStreamingElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XStreamingElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XStreamingElement ^ other);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XElement : System.Xml.Linq.XStreamingElement -&gt; System.Xml.Linq.XElement" Usage="new System.Xml.Linq.XElement other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XStreamingElement" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="c3714-148">一个包含未求值查询的 <see cref="T:System.Xml.Linq.XStreamingElement" />，将对此 <see cref="T:System.Xml.Linq.XElement" /> 的内容循环进行这样的查询。</span><span class="sxs-lookup"><span data-stu-id="c3714-148">An <see cref="T:System.Xml.Linq.XStreamingElement" /> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="c3714-149">从 <see cref="T:System.Xml.Linq.XElement" /> 对象初始化 <see cref="T:System.Xml.Linq.XStreamingElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c3714-149">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from an <see cref="T:System.Xml.Linq.XStreamingElement" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-150">此构造函数循环访问指定<xref:System.Xml.Linq.XStreamingElement>的的内容, 并创建具有其内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-150">This constructor iterates through the contents of the specified <xref:System.Xml.Linq.XStreamingElement>, and creates an element with its contents.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-151">下面的示例创建一个源 xml 树, 然后基于源 xml <xref:System.Xml.Linq.XStreamingElement>树上的查询创建一个。</span><span class="sxs-lookup"><span data-stu-id="c3714-151">The following example creates a source XML tree, and then creates an <xref:System.Xml.Linq.XStreamingElement> from a query on the source XML tree.</span></span> <span data-ttu-id="c3714-152">然后, 它将<xref:System.Xml.Linq.XStreamingElement>序列化为控制台, 将新元素添加到源 XML 树, 然后<xref:System.Xml.Linq.XStreamingElement>再次序列化。</span><span class="sxs-lookup"><span data-stu-id="c3714-152">It then serializes the <xref:System.Xml.Linq.XStreamingElement> to the console, adds a new element to the source XML tree, and then serializes the <xref:System.Xml.Linq.XStreamingElement> again.</span></span> <span data-ttu-id="c3714-153">您可以看到, 新添加到源 XML 树的元素不包含在第一个序列化中, 而是在第二个序列中包含。</span><span class="sxs-lookup"><span data-stu-id="c3714-153">You can see that element newly added to the source XML tree is not included in the first serialization, but is included in the second.</span></span>  
  
```csharp  
XElement src = new XElement("Root",  
                   new XElement("Child1", 1),  
                   new XElement("Child2", 2),  
                   new XElement("Child3", 3)  
               );  
XStreamingElement xse = new XStreamingElement("NewRoot",  
                            from el in src.Elements()  
                            where (int)el >= 2  
                            select el  
                        );  
Console.WriteLine(xse);  
src.Add(new XElement("Child4", 4));  
Console.WriteLine("----");  
Console.WriteLine(xse);  
```  
  
```vb  
Dim src As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
Dim xse As XStreamingElement = New XStreamingElement("NewRoot", _  
        From el In src.Elements() _  
        Where (CInt(el) >= 2) _  
        Select el _  
)  
Console.WriteLine(xse)  
src.Add(New XElement("Child4", 4))  
Console.WriteLine("----")  
Console.WriteLine(xse)  
```  
  
 <span data-ttu-id="c3714-154">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-154">This example produces the following output:</span></span>  
  
```  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</NewRoot>  
----  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
</NewRoot>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-155">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-155">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, System::Object ^ content);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XElement : System.Xml.Linq.XName * obj -&gt; System.Xml.Linq.XElement" Usage="new System.Xml.Linq.XElement (name, content)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3714-156">一个包含元素名称的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-156">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span></span></param>
        <param name="content"><span data-ttu-id="c3714-157">元素的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-157">The contents of the element.</span></span></param>
        <summary><span data-ttu-id="c3714-158">用指定的名称和内容初始化 <see cref="T:System.Xml.Linq.XElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c3714-158">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-159">此构造函数使用指定的内容和特性创建一个元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-159">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="c3714-160">存在从字符串到<xref:System.Xml.Linq.XName>的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="c3714-160">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3714-161">此构造函数的典型用法是将字符串指定为参数, 而不是创建新<xref:System.Xml.Linq.XName>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-161">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="c3714-162">在命名空间中创建元素时, 典型用途是将加法运算符重载<xref:System.Xml.Linq.XNamespace>用于, 并使用字符串<xref:System.Xml.Linq.XName>创建。</span><span class="sxs-lookup"><span data-stu-id="c3714-162">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3714-163">有关详细信息, 请参阅使用[XML 命名空间](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="c3714-163">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="c3714-164">有关可传递到此构造函数的有效内容的详细信息, 请参阅[system.xml.linq.xelement> 和 XDocument 对象的有效内容](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="c3714-164">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-165">下面的示例创建一个 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-165">The following example creates an XML tree.</span></span> <span data-ttu-id="c3714-166">新元素的内容来自 LINQ 查询。</span><span class="sxs-lookup"><span data-stu-id="c3714-166">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="c3714-167">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-167">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="c3714-168">下面的示例创建一个 XML 树, 其中包含各种类型的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-168">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-169">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-169">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="c3714-170">下面的示例在命名空间中创建一个 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-170">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-171">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-171">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="c3714-172">下面的示例创建一个带有嵌套命名空间的 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-172">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XDocument root = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XElement(aw + "Root",  
        new XElement(fc + "Child",  
            new XElement(aw + "DifferentChild", "other content")  
        )  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-173">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-173">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-174">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-174">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, ... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XElement : System.Xml.Linq.XName * obj[] -&gt; System.Xml.Linq.XElement" Usage="new System.Xml.Linq.XElement (name, content)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3714-175">一个包含元素名称的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-175">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span></span></param>
        <param name="content"><span data-ttu-id="c3714-176">元素的初始内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-176">The initial content of the element.</span></span></param>
        <summary><span data-ttu-id="c3714-177">用指定的名称和内容初始化 <see cref="T:System.Xml.Linq.XElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c3714-177">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-178">此构造函数使用指定的内容和特性创建一个元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-178">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="c3714-179">存在从字符串到<xref:System.Xml.Linq.XName>的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="c3714-179">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3714-180">此构造函数的典型用法是将字符串指定为参数, 而不是创建新<xref:System.Xml.Linq.XName>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-180">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="c3714-181">在命名空间中创建元素时, 典型用途是将加法运算符重载<xref:System.Xml.Linq.XNamespace>用于, 并使用字符串<xref:System.Xml.Linq.XName>创建。</span><span class="sxs-lookup"><span data-stu-id="c3714-181">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c3714-182">有关详细信息, 请参阅使用[XML 命名空间](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="c3714-182">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="c3714-183">有关可传递到此构造函数的有效内容的详细信息, 请参阅[system.xml.linq.xelement> 和 XDocument 对象的有效内容](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="c3714-183">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-184">下面的示例创建一个 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-184">The following example creates an XML tree.</span></span> <span data-ttu-id="c3714-185">新元素的内容来自 LINQ 查询。</span><span class="sxs-lookup"><span data-stu-id="c3714-185">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="c3714-186">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-186">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="c3714-187">下面的示例创建一个 XML 树, 其中包含各种类型的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-187">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-188">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-188">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="c3714-189">下面的示例在命名空间中创建一个 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-189">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-190">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-190">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="c3714-191">下面的示例创建一个带有嵌套命名空间的 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-191">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(fc + "Child",  
        new XElement(aw + "DifferentChild", "other content")  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-192">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-192">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-193">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-193">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AncestorsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3714-194">返回元素集合，其中包含此元素及其上级。</span><span class="sxs-lookup"><span data-stu-id="c3714-194">Returns a collection of elements that contain this element, and the ancestors of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-195">返回的集合中的元素的顺序与文档顺序相反。</span><span class="sxs-lookup"><span data-stu-id="c3714-195">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="c3714-196">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="c3714-196">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-197">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-197">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf();" />
      <MemberSignature Language="F#" Value="member this.AncestorsAndSelf : unit -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xElement.AncestorsAndSelf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3714-198">返回元素集合，其中包含此元素及其上级。</span><span class="sxs-lookup"><span data-stu-id="c3714-198">Returns a collection of elements that contain this element, and the ancestors of this element.</span></span></summary>
        <returns><span data-ttu-id="c3714-199">元素（其中包含此元素及其上级）的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-199">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-200">返回的集合中的元素的顺序与文档顺序相反。</span><span class="sxs-lookup"><span data-stu-id="c3714-200">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="c3714-201">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="c3714-201">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-202">下面的示例创建一个 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-202">The following example creates an XML tree.</span></span> <span data-ttu-id="c3714-203">然后, 它查找`GrandChild`该元素, 然后打印该元素的上级。</span><span class="sxs-lookup"><span data-stu-id="c3714-203">It then finds the `GrandChild` element, and then prints the ancestors of it.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas =  
    from el in gc.AncestorsAndSelf()  
    select el;  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
  
Dim aas As IEnumerable(Of XElement) = _  
    From el In GC.AncestorsAndSelf() _  
    Select el  
  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="c3714-204">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-204">This example produces the following output:</span></span>  
  
```  
GrandChild  
Child  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-205">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-205">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.AncestorsAndSelf : System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xElement.AncestorsAndSelf name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3714-206">要匹配的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-206">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="c3714-207">返回经过筛选的元素集合，其中包含此元素及其上级。</span><span class="sxs-lookup"><span data-stu-id="c3714-207">Returns a filtered collection of elements that contain this element, and the ancestors of this element.</span></span> <span data-ttu-id="c3714-208">集合中仅包括具有匹配 <see cref="T:System.Xml.Linq.XName" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-208">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="c3714-209"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含此元素及其上级。</span><span class="sxs-lookup"><span data-stu-id="c3714-209">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element.</span></span> <span data-ttu-id="c3714-210">集合中仅包括具有匹配 <see cref="T:System.Xml.Linq.XName" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-210">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-211">返回的集合中的元素的顺序与文档顺序相反。</span><span class="sxs-lookup"><span data-stu-id="c3714-211">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="c3714-212">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="c3714-212">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-213">下面的示例使用此。</span><span class="sxs-lookup"><span data-stu-id="c3714-213">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas = gc.AncestorsAndSelf("Child");  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
Dim aas As IEnumerable(Of XElement) = GC.AncestorsAndSelf("Child")  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="c3714-214">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-214">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-215">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-215">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute Attribute (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XAttribute Attribute(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attribute (name As XName) As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XAttribute ^ Attribute(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.Attribute : System.Xml.Linq.XName -&gt; System.Xml.Linq.XAttribute" Usage="xElement.Attribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3714-216">要获取的 <see cref="T:System.Xml.Linq.XName" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-216">The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.</span></span></param>
        <summary><span data-ttu-id="c3714-217">返回具有指定 <see cref="T:System.Xml.Linq.XAttribute" /> 的此 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-217">Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-218">具有指定 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.Xml.Linq.XName" />；如果没有具有指定名称的属性，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-218">An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; <see langword="null" /> if there is no attribute with the specified name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-219">某些[轴方法](https://msdn.microsoft.com/library/f25da2f0-6c42-4ae3-8939-88ed2110ea3f)返回元素或属性的集合。</span><span class="sxs-lookup"><span data-stu-id="c3714-219">Some [axis methods](https://msdn.microsoft.com/library/f25da2f0-6c42-4ae3-8939-88ed2110ea3f) return collections of elements or attributes.</span></span> <span data-ttu-id="c3714-220">此方法只返回一个属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-220">This method returns only a single attribute.</span></span> <span data-ttu-id="c3714-221">有时, 这称为*单一实例*(与*集合*相比)。</span><span class="sxs-lookup"><span data-stu-id="c3714-221">Sometimes this is referred to as a *singleton* (in contrast to a *collection*).</span></span>  
  
 <span data-ttu-id="c3714-222">Visual Basic 用户可以使用集成属性轴检索具有指定名称的属性的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-222">Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-223">下面的示例创建一个具有特性的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-223">The following example creates an element with an attribute.</span></span> <span data-ttu-id="c3714-224">然后, 它使用此方法检索特性。</span><span class="sxs-lookup"><span data-stu-id="c3714-224">It then retrieves the attribute using this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute("Att");  
Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att="attribute content"/>  
  
Dim att As XAttribute = xmlTree.Attribute("Att")  
Console.WriteLine(att)  
```  
  
 <span data-ttu-id="c3714-225">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-225">This example produces the following output:</span></span>  
  
```  
Att="attribute content"  
```  
  
 <span data-ttu-id="c3714-226">下面是同一个示例, 但在这种情况下, XML 位于命名空间中。</span><span class="sxs-lookup"><span data-stu-id="c3714-226">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="c3714-227">有关详细信息, 请参阅使用[XML 命名空间](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="c3714-227">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute(aw + "Att");  
Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att="attribute content"/>  
  
        Dim att As XAttribute = xmlTree.Attribute(GetXmlNamespace(aw) + "Att")  
        Console.WriteLine(att)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3714-228">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-228">This example produces the following output:</span></span>  
  
```  
aw:Att="attribute content"  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-229">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-229">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3714-230">返回此元素的属性集合。</span><span class="sxs-lookup"><span data-stu-id="c3714-230">Returns a collection of attributes of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-231">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="c3714-231">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-232">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-232">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes () As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes();" />
      <MemberSignature Language="F#" Value="member this.Attributes : unit -&gt; seq&lt;System.Xml.Linq.XAttribute&gt;" Usage="xElement.Attributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3714-233">返回此元素的属性集合。</span><span class="sxs-lookup"><span data-stu-id="c3714-233">Returns a collection of attributes of this element.</span></span></summary>
        <returns><span data-ttu-id="c3714-234">此元素的属性的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-234">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-235">返回的集合中的属性按照添加到元素中的顺序排列。</span><span class="sxs-lookup"><span data-stu-id="c3714-235">The attributes in the returned collection are in the order that they were added to the element.</span></span> <span data-ttu-id="c3714-236">如果 XML 树是从 XML 进行分析的, 则这些属性将按文档顺序返回。</span><span class="sxs-lookup"><span data-stu-id="c3714-236">If the XML tree was parsed from XML, the attributes are returned in document order.</span></span>  
  
 <span data-ttu-id="c3714-237">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="c3714-237">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-238">下面的示例创建一个具有两个属性的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-238">The following example creates an element with two attributes.</span></span> <span data-ttu-id="c3714-239">然后, 它使用它来检索元素的所有属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-239">It then uses this  to retrieve all attributes of the element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = _  
From at In xmlTree.Attributes() _  
Select at  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="c3714-240">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-240">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
Att2="content2"  
```  
  
 <span data-ttu-id="c3714-241">下面是同一个示例, 但在这种情况下, XML 位于命名空间中。</span><span class="sxs-lookup"><span data-stu-id="c3714-241">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="c3714-242">有关详细信息, 请参阅使用[XML 命名空间](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="c3714-242">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2"),  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = _  
            From at In xmlTree.Attributes() _  
            Select at  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3714-243">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-243">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
aw:Att2="content2"  
xmlns:aw="http://www.adventure-works.com"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-244">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-244">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes (name As XName) As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XAttribute&gt;" Usage="xElement.Attributes name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3714-245">要匹配的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-245">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="c3714-246">返回经过筛选的此元素的属性集合。</span><span class="sxs-lookup"><span data-stu-id="c3714-246">Returns a filtered collection of attributes of this element.</span></span> <span data-ttu-id="c3714-247">集合中仅包括具有匹配 <see cref="T:System.Xml.Linq.XName" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-247">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="c3714-248"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />，其中包含此元素的属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-248">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element.</span></span> <span data-ttu-id="c3714-249">集合中仅包括具有匹配 <see cref="T:System.Xml.Linq.XName" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-249">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-250">属性名称在元素中必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="c3714-250">Attribute names must be unique within an element.</span></span> <span data-ttu-id="c3714-251">因此, 这可能会返回只包含一个属性的集合, 或返回一个空集合。</span><span class="sxs-lookup"><span data-stu-id="c3714-251">Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.</span></span>  
  
 <span data-ttu-id="c3714-252">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="c3714-252">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-253">下面的示例使用此。</span><span class="sxs-lookup"><span data-stu-id="c3714-253">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes("Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes("Att1")  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="c3714-254">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-254">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
```  
  
 <span data-ttu-id="c3714-255">下面是同一个示例, 但在这种情况下, XML 位于命名空间中。</span><span class="sxs-lookup"><span data-stu-id="c3714-255">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="c3714-256">有关详细信息, 请参阅使用[XML 命名空间](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="c3714-256">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes(aw + "Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(GetXmlNamespace(aw) + "Att1")  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3714-257">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-257">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-258">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-258">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodesAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodesAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodesAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantNodesAndSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodesAndSelf();" />
      <MemberSignature Language="F#" Value="member this.DescendantNodesAndSelf : unit -&gt; seq&lt;System.Xml.Linq.XNode&gt;" Usage="xElement.DescendantNodesAndSelf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3714-259">返回节点的集合，而这些节点包含此元素以及此元素的所有子代节点，并将它们按文档顺序排列。</span><span class="sxs-lookup"><span data-stu-id="c3714-259">Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</span></span></summary>
        <returns><span data-ttu-id="c3714-260">一个包含此元素以及此元素的所有子代节点（按文档顺序排列）的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-260">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-261">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="c3714-261">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-262">下面的示例创建一个 XML 树, 然后使用此树。</span><span class="sxs-lookup"><span data-stu-id="c3714-262">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    // Attributes are not nodes, so will not be returned by DescendantNodesAndSelf.  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XNode> dnas =  
    from node in xmlTree.DescendantNodesAndSelf()  
    select node;  
foreach (XNode node in dnas)  
{  
    if (node is XElement)  
        Console.WriteLine((node as XElement).Name);  
    else  
        Console.WriteLine(node);  
}  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text<GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim dnas As IEnumerable(Of XNode) = _  
    From node In xmlTree.DescendantNodesAndSelf() _  
    Select node  
  
For Each node In dnas  
    If TypeOf node Is XElement Then  
        Console.WriteLine(DirectCast(node, XElement).Name)  
    Else  
        Console.WriteLine(node)  
    End If  
Next  
```  
  
 <span data-ttu-id="c3714-263">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-263">This example produces the following output:</span></span>  
  
```  
Root  
Child  
Some text  
GrandChild  
element content  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-264">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-264">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DescendantsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3714-265">返回元素的集合，而这些元素包含此元素以及此元素的所有子代元素，并按文档顺序排列它们。</span><span class="sxs-lookup"><span data-stu-id="c3714-265">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-266">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="c3714-266">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-267">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-267">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf();" />
      <MemberSignature Language="F#" Value="member this.DescendantsAndSelf : unit -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xElement.DescendantsAndSelf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3714-268">返回元素的集合，而这些元素包含此元素以及此元素的所有子代元素，并按文档顺序排列它们。</span><span class="sxs-lookup"><span data-stu-id="c3714-268">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span></summary>
        <returns><span data-ttu-id="c3714-269">元素（其中包含此元素以及此元素的所有子代元素，并按文档顺序排列）的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-269">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-270">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="c3714-270">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-271">下面的示例创建一个 XML 树, 然后使用此树。</span><span class="sxs-lookup"><span data-stu-id="c3714-271">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das =  
    from el in xmlTree.DescendantsAndSelf()  
    select el;  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = _  
    From el In xmlTree.DescendantsAndSelf() _  
    Select el  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="c3714-272">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-272">This example produces the following output:</span></span>  
  
```  
Root  
Child  
GrandChild  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-273">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-273">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.DescendantsAndSelf : System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xElement.DescendantsAndSelf name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3714-274">要匹配的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-274">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="c3714-275">返回经过筛选的元素集合，这些元素包含此元素以及此元素的所有子代元素，并按文档顺序排列它们。</span><span class="sxs-lookup"><span data-stu-id="c3714-275">Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span> <span data-ttu-id="c3714-276">集合中仅包括具有匹配 <see cref="T:System.Xml.Linq.XName" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-276">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="c3714-277">元素（其中包含此元素以及此元素的所有子代元素，并按文档顺序排列）的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-277">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order.</span></span> <span data-ttu-id="c3714-278">集合中仅包括具有匹配 <see cref="T:System.Xml.Linq.XName" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-278">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-279">此方法使用延迟执行。</span><span class="sxs-lookup"><span data-stu-id="c3714-279">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-280">下面的示例创建一个 XML 树, 然后使用此树。</span><span class="sxs-lookup"><span data-stu-id="c3714-280">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das = xmlTree.DescendantsAndSelf("Child");  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = xmlTree.DescendantsAndSelf("Child")  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="c3714-281">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-281">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-282">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-282">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EmptySequence">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; EmptySequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; EmptySequence" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.EmptySequence" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EmptySequence As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ EmptySequence { System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EmptySequence : seq&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.XElement.EmptySequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3714-283">获取空的元素集合。</span><span class="sxs-lookup"><span data-stu-id="c3714-283">Gets an empty collection of elements.</span></span></summary>
        <value><span data-ttu-id="c3714-284">一个包含空集合的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-284">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-285">此属性通常由类实现者在编写返回元素集合的方法时使用。</span><span class="sxs-lookup"><span data-stu-id="c3714-285">This property is typically used by class implementers when writing a method that returns a collection of elements.</span></span> <span data-ttu-id="c3714-286">如果该方法必须不返回任何元素, 则它可以使用此属性来获取空的<xref:System.Xml.Linq.XElement>对象集合。</span><span class="sxs-lookup"><span data-stu-id="c3714-286">If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-287">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-287">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FirstAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute FirstAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute FirstAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.FirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ FirstAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FirstAttribute : System.Xml.Linq.XAttribute" Usage="System.Xml.Linq.XElement.FirstAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3714-288">获取此元素的第一个属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-288">Gets the first attribute of this element.</span></span></summary>
        <value><span data-ttu-id="c3714-289">一个包含此元素第一个属性的 <see cref="T:System.Xml.Linq.XAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-289">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the first attribute of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-290">特性按其添加到元素中的顺序存储在元素中。</span><span class="sxs-lookup"><span data-stu-id="c3714-290">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-291">下面的示例使用此属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-291">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.FirstAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.FirstAttribute)  
```  
  
 <span data-ttu-id="c3714-292">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-292">This example produces the following output:</span></span>  
  
```  
Att1="1"  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-293">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-293">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultNamespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetDefaultNamespace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetDefaultNamespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetDefaultNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefaultNamespace () As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetDefaultNamespace();" />
      <MemberSignature Language="F#" Value="member this.GetDefaultNamespace : unit -&gt; System.Xml.Linq.XNamespace" Usage="xElement.GetDefaultNamespace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3714-294">获取此 <see cref="T:System.Xml.Linq.XNamespace" /> 的默认 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-294">Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-295">一个 <see cref="T:System.Xml.Linq.XNamespace" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的默认命名空间。</span><span class="sxs-lookup"><span data-stu-id="c3714-295">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-296">命名空间声明可以作为属性保留在 XML 树中。</span><span class="sxs-lookup"><span data-stu-id="c3714-296">Namespace declarations may be persisted as attributes in the XML tree.</span></span> <span data-ttu-id="c3714-297">这些特殊属性声明命名空间, 包括默认命名空间。</span><span class="sxs-lookup"><span data-stu-id="c3714-297">These special attributes declare namespaces, including default namespaces.</span></span> <span data-ttu-id="c3714-298">此方法查找声明默认命名空间 (如果有) 的命名空间声明, 并返回默认命名<xref:System.Xml.Linq.XNamespace>空间的。</span><span class="sxs-lookup"><span data-stu-id="c3714-298">This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace.</span></span>  
  
 <span data-ttu-id="c3714-299">如果没有声明默认命名空间的属性, 则此方法返回<xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c3714-299">If there is no attribute that declares the default namespace, then this method returns <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="c3714-300">使用C#创建 xml 树时, 即使 xml 树将使用默认命名空间进行序列化, 如果该命名空间未在 xml 树中保留为属性, 则此方法不会将命名空间报告为默认命名空间。</span><span class="sxs-lookup"><span data-stu-id="c3714-300">When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.</span></span>  
  
 <span data-ttu-id="c3714-301">当使用 Visual Basic 和 XML 文本创建 XML 树时, 如果在默认命名空间中使用 Imports 语句创建 XML, 则 Visual Basic 编译器将在树中创建命名空间属性, 此方法将报告该命名空间。</span><span class="sxs-lookup"><span data-stu-id="c3714-301">When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-302">下面的示例创建一个具有默认命名空间的 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-302">The following example creates an XML tree that has a default namespace.</span></span> <span data-ttu-id="c3714-303">然后, 它使用此方法检索默认命名空间。</span><span class="sxs-lookup"><span data-stu-id="c3714-303">It then uses this method to retrieve the default namespace.</span></span>  
  
```csharp  
String xml = "<root xmlns='http://www.adventure-works.com'/>";  
XElement e = XElement.Parse(xml);  
Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim e As XElement = <root/>  
        Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3714-304">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-304">This example produces the following output:</span></span>  
  
```  
Default namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-305">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-305">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetNamespaceOfPrefix">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetNamespaceOfPrefix (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetNamespaceOfPrefix(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNamespaceOfPrefix (prefix As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetNamespaceOfPrefix(System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="member this.GetNamespaceOfPrefix : string -&gt; System.Xml.Linq.XNamespace" Usage="xElement.GetNamespaceOfPrefix prefix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="c3714-306">包含要查找的命名空间前缀的字符串。</span><span class="sxs-lookup"><span data-stu-id="c3714-306">A string that contains the namespace prefix to look up.</span></span></param>
        <summary><span data-ttu-id="c3714-307">获取此 <see cref="T:System.Xml.Linq.XElement" /> 的与特定前缀关联的命名空间。</span><span class="sxs-lookup"><span data-stu-id="c3714-307">Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-308">与此 <see cref="T:System.Xml.Linq.XNamespace" /> 的前缀关联的命名空间的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-308">An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-309">此方法通过 XML 树查找此元素范围内的命名空间属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-309">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="c3714-310">命名空间前缀在 XML 树中的命名空间属性中指定。</span><span class="sxs-lookup"><span data-stu-id="c3714-310">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-311">下面的示例创建一个 XML 树, 该树具有具有关联前缀的命名空间。</span><span class="sxs-lookup"><span data-stu-id="c3714-311">The following example creates an XML tree that has a namespace with an associated prefix.</span></span> <span data-ttu-id="c3714-312">然后, 它使用此方法检索<xref:System.Xml.Linq.XNamespace>前缀的。</span><span class="sxs-lookup"><span data-stu-id="c3714-312">It then uses this method to retrieve the <xref:System.Xml.Linq.XNamespace> for the prefix.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
XNamespace awNamespace = xmlTree.GetNamespaceOfPrefix("aw");  
Console.WriteLine("Namespace: {0}", awNamespace);  
```  
  
 <span data-ttu-id="c3714-313">使用 Visual Basic 时, 通常使用[GetXmlNamespace 运算符](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md)运算符, 如下所示</span><span class="sxs-lookup"><span data-stu-id="c3714-313">When using Visual Basic, you would typically use the [GetXmlNamespace Operator](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) operator, as follows</span></span>  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim awNamespace As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine("Namespace: {0}", awNamespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3714-314">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-314">This example produces the following output:</span></span>  
  
```  
Namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-315">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-315">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPrefixOfNamespace">
      <MemberSignature Language="C#" Value="public string GetPrefixOfNamespace (System.Xml.Linq.XNamespace ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPrefixOfNamespace(class System.Xml.Linq.XNamespace ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrefixOfNamespace (ns As XNamespace) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPrefixOfNamespace(System::Xml::Linq::XNamespace ^ ns);" />
      <MemberSignature Language="F#" Value="member this.GetPrefixOfNamespace : System.Xml.Linq.XNamespace -&gt; string" Usage="xElement.GetPrefixOfNamespace ns" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="ns"><span data-ttu-id="c3714-316">要查找的 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-316">An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.</span></span></param>
        <summary><span data-ttu-id="c3714-317">获取与此 <see cref="T:System.Xml.Linq.XElement" /> 的命名空间关联的前缀。</span><span class="sxs-lookup"><span data-stu-id="c3714-317">Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-318">一个包含命名空间前缀的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-318">A <see cref="T:System.String" /> that contains the namespace prefix.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-319">此方法通过 XML 树查找此元素范围内的命名空间属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-319">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="c3714-320">命名空间前缀在 XML 树中的命名空间属性中指定。</span><span class="sxs-lookup"><span data-stu-id="c3714-320">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
 <span data-ttu-id="c3714-321">如果命名空间为默认命名空间, 并且没有命名空间的前缀, 则此方法返回 null。</span><span class="sxs-lookup"><span data-stu-id="c3714-321">If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-322">下面的示例创建一个包含带有前缀的命名空间的 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-322">The following example creates an XML tree that contains a namespace with a prefix.</span></span> <span data-ttu-id="c3714-323">然后, 它使用此方法检索命名空间的前缀。</span><span class="sxs-lookup"><span data-stu-id="c3714-323">It then uses this method to retrieve the prefix for the namespace.</span></span> <span data-ttu-id="c3714-324">请注意, 在调用此方法时, 此示例<xref:System.Xml.Linq.XNamespace>使用从字符串到的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="c3714-324">Notice that this example uses the implicit conversion from string to <xref:System.Xml.Linq.XNamespace> when calling this method.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
string prefix = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com");  
Console.WriteLine("Prefix: {0}", prefix);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim prefix As String = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com")  
        Console.WriteLine("Prefix: {0}", prefix)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3714-325">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-325">This example produces the following output:</span></span>  
  
```  
Prefix: aw  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-326">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-326">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAttributes { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAttributes : bool" Usage="System.Xml.Linq.XElement.HasAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3714-327">获取一个值，该值指示此元素是否至少具有一个属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-327">Gets a value indicating whether this element has at least one attribute.</span></span></summary>
        <value><span data-ttu-id="c3714-328">如果此元素至少具有一个属性，则为 <see langword="true" />；否则为<see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="c3714-328"><see langword="true" /> if this element has at least one attribute; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3714-329">下面的示例使用此属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-329">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1)  
);  
Console.WriteLine(xmlTree1.HasAttributes);  
XElement xmlTree2 = new XElement("Root");  
Console.WriteLine(xmlTree2.HasAttributes);  
```  
  
```vb  
Dim xmlTree1 As XElement = <Root Att1="1"/>  
Console.WriteLine(xmlTree1.HasAttributes)  
  
Dim xmlTree2 As XElement = <Root/>  
Console.WriteLine(xmlTree2.HasAttributes)  
```  
  
 <span data-ttu-id="c3714-330">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-330">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-331">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-331">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasElements">
      <MemberSignature Language="C#" Value="public bool HasElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElements As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElements { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElements : bool" Usage="System.Xml.Linq.XElement.HasElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3714-332">获取一个值，该值指示此元素是否至少具有一个子元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-332">Gets a value indicating whether this element has at least one child element.</span></span></summary>
        <value><span data-ttu-id="c3714-333">如果此元素至少具有一个子元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-333"><see langword="true" /> if this element has at least one child element; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3714-334">下面的示例使用此属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-334">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1)  
);  
Console.WriteLine(xmlTree1.HasElements);  
XElement xmlTree2 = new XElement("Root", "contents");  
Console.WriteLine(xmlTree2.HasElements);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
        </Root>  
Console.WriteLine(xmlTree1.HasElements)  
  
Dim xmlTree2 As XElement = <Root>contents</Root>  
Console.WriteLine(xmlTree2.HasElements)  
```  
  
 <span data-ttu-id="c3714-335">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-335">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-336">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-336">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Xml.Linq.XElement.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3714-337">获取一个值，该值指示此元素是否不包含内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-337">Gets a value indicating whether this element contains no content.</span></span></summary>
        <value><span data-ttu-id="c3714-338">如果元素不包含内容，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-338"><see langword="true" /> if this element contains no content; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-339">请注意, 包含标记之间没有内容的开始标记和结束标记的元素不会被视为空元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-339">Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element.</span></span> <span data-ttu-id="c3714-340">它包含没有长度的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-340">It has content with no length.</span></span> <span data-ttu-id="c3714-341">只有仅包含开始标记的元素表示为终止的空元素, 才被视为空元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-341">Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-342">下面的示例创建了各种 XML 树, 并显示了每个树的此属性的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-342">The following example creates a variety of XML trees, and shows the value of this property with each tree.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root");  
Console.WriteLine(el1);  
Console.WriteLine(el1.IsEmpty);  
Console.WriteLine();  
XElement el2 = new XElement("Root", "content");  
Console.WriteLine(el2);  
Console.WriteLine(el2.IsEmpty);  
Console.WriteLine();  
XElement el3 = new XElement("Root", "");  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
Console.WriteLine();  
el3.ReplaceAll(null);  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
```  
  
```vb  
Dim el1 As XElement = <Root/>  
Console.WriteLine(el1)  
Console.WriteLine(el1.IsEmpty)  
Console.WriteLine()  
Dim el2 As XElement = <Root>content</Root>  
Console.WriteLine(el2)  
Console.WriteLine(el2.IsEmpty)  
Console.WriteLine()  
Dim el3 As XElement = <Root></Root>  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
Console.WriteLine()  
el3.ReplaceAll(Nothing)  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
```  
  
 <span data-ttu-id="c3714-343">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-343">This example produces the following output:</span></span>  
  
```  
<Root />  
True  
  
<Root>content</Root>  
False  
  
<Root></Root>  
False  
  
<Root />  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-344">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-344">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LastAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute LastAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute LastAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.LastAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ LastAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LastAttribute : System.Xml.Linq.XAttribute" Usage="System.Xml.Linq.XElement.LastAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3714-345">获取此元素的最后一个属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-345">Gets the last attribute of this element.</span></span></summary>
        <value><span data-ttu-id="c3714-346">一个包含此元素最后一个属性的 <see cref="T:System.Xml.Linq.XAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-346">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the last attribute of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-347">特性按其添加到元素中的顺序存储在元素中。</span><span class="sxs-lookup"><span data-stu-id="c3714-347">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-348">下面的示例创建一个具有三个属性的 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-348">The following example creates an XML tree with three attributes.</span></span> <span data-ttu-id="c3714-349">然后, 它将最后一个属性写入输出。</span><span class="sxs-lookup"><span data-stu-id="c3714-349">It then writes the last attribute as output.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.LastAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.LastAttribute)  
```  
  
 <span data-ttu-id="c3714-350">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-350">This example produces the following output:</span></span>  
  
```  
Att3="3"  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-351">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-351">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3714-352">从 URI 所指定的文件、<see cref="T:System.Xml.Linq.XElement" /> 或 <see cref="T:System.IO.TextReader" /> 创建新 <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-352">Creates a new <see cref="T:System.Xml.Linq.XElement" /> from a file specified by a URI, from an <see cref="T:System.IO.TextReader" />, or from an <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-353">您可以使用此方法的重载之一<xref:System.Xml.Linq.XElement>从文件<xref:System.IO.TextReader>、或<xref:System.Xml.XmlReader>加载。</span><span class="sxs-lookup"><span data-stu-id="c3714-353">You can use one of the overloads of this method to load an <xref:System.Xml.Linq.XElement> from a file, a <xref:System.IO.TextReader>, or an <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="c3714-354">若要<xref:System.Xml.Linq.XElement>从包含 XML 的字符串创建, 请使用<xref:System.Xml.Linq.XElement.Parse%2A>。</span><span class="sxs-lookup"><span data-stu-id="c3714-354">To create an <xref:System.Xml.Linq.XElement> from a string that contains XML, use <xref:System.Xml.Linq.XElement.Parse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-355">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-355">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3714-356">包含 XML 数据的流。</span><span class="sxs-lookup"><span data-stu-id="c3714-356">The stream that contains the XML data.</span></span></param>
        <summary><span data-ttu-id="c3714-357">使用指定的流创建一个新的 <see cref="T:System.Xml.Linq.XElement" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="c3714-357">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream.</span></span></summary>
        <returns><span data-ttu-id="c3714-358">一个用于读取流中所包含数据的 <see cref="T:System.Xml.Linq.XElement" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c3714-358">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that is contained in the stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-359">如果要控制加载选项, 请使用<xref:System.Xml.Linq.XElement.Load%2A>采用<xref:System.Xml.Linq.LoadOptions>作为参数的重载。</span><span class="sxs-lookup"><span data-stu-id="c3714-359">If you want to control load options, use the <xref:System.Xml.Linq.XElement.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="c3714-360">LINQ to XML 的加载功能是基于生成<xref:System.Xml.XmlReader>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-360">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-361">因此, 你可能会捕获<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>重载方法所引发的任何异常<xref:System.Xml.XmlReader>和读取和分析文档的方法。</span><span class="sxs-lookup"><span data-stu-id="c3714-361">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="c3714-362">如果必须修改<xref:System.Xml.XmlReaderSettings>, 请执行以下步骤:</span><span class="sxs-lookup"><span data-stu-id="c3714-362">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="c3714-363">通过调用<xref:System.Xml.XmlReader.Create%2A> 采用<xref:System.Xml.XmlReaderSettings>作为参数的重载之一来创建。 <xref:System.Xml.XmlReader></span><span class="sxs-lookup"><span data-stu-id="c3714-363">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="c3714-364">将传递<xref:System.Xml.Linq.XElement.Load%2A> <xref:System.Xml.Linq.XElement> <xref:System.Xml.XmlReader>给作为参数的重载之一。 <xref:System.Xml.XmlReader></span><span class="sxs-lookup"><span data-stu-id="c3714-364">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader"><span data-ttu-id="c3714-365">一个从其读取 <see cref="T:System.IO.TextReader" /> 内容的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-365">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span></span></param>
        <summary><span data-ttu-id="c3714-366">从 <see cref="T:System.Xml.Linq.XElement" /> 加载 <see cref="T:System.IO.TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-366">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-367">一个 <see cref="T:System.Xml.Linq.XElement" />，其中包含从指定的 <see cref="T:System.IO.TextReader" /> 读取的 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-367">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-368">此方法将原始 XML 读入到 XML 树中。</span><span class="sxs-lookup"><span data-stu-id="c3714-368">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="c3714-369">它将丢弃文件中所有无意义的空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-369">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="c3714-370">LINQ to XML 的加载功能是基于生成<xref:System.Xml.XmlReader>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-370">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-371">因此, 你可能会捕获<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>重载方法所引发的任何异常<xref:System.Xml.XmlReader>和读取和分析文档的方法。</span><span class="sxs-lookup"><span data-stu-id="c3714-371">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-372">下面的示例从加载一个<xref:System.IO.StringReader>元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-372">The following example loads an element from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader sr = new StringReader("<Root><Child/></Root>");  
XElement xmlTree = XElement.Load(sr);  
sr.Close();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim sr As TextReader = New StringReader("<Root><Child/></Root>")  
Dim xmlTree As XElement = XElement.Load(sr)  
sr.Close()  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="c3714-373">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-373">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-374">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-374">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="c3714-375">一个 URI 字符串，用来引用要加载到新 <see cref="T:System.Xml.Linq.XElement" /> 中的文件。</span><span class="sxs-lookup"><span data-stu-id="c3714-375">A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="c3714-376">从文件加载 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-376">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file.</span></span></summary>
        <returns><span data-ttu-id="c3714-377">一个包含指定文件的内容的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-377">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-378">此方法将原始 XML 读入到 XML 树中。</span><span class="sxs-lookup"><span data-stu-id="c3714-378">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="c3714-379">它将丢弃文件中所有无意义的空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-379">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="c3714-380">LINQ to XML 的加载功能是基于生成<xref:System.Xml.XmlReader>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-380">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-381">因此, 你可能会捕获<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>重载方法所引发的任何异常<xref:System.Xml.XmlReader>和读取和分析文档的方法。</span><span class="sxs-lookup"><span data-stu-id="c3714-381">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-382">下面的示例创建一个 XML 树, 并将其保存到文件, 然后使用此方法<xref:System.Xml.Linq.XElement>从文件中加载。</span><span class="sxs-lookup"><span data-stu-id="c3714-382">The following example creates an XML tree, saves it to a file, and then uses this method to load the <xref:System.Xml.Linq.XElement> from the file.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", "content")  
);  
xmlTree1.Save("Tree.xml");  
  
XElement xmlTree2 = XElement.Load("Tree.xml");  
Console.WriteLine(xmlTree2.Name);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>Content</Child>  
        </Root>  
xmlTree1.Save("Tree.xml")  
  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml")  
Console.WriteLine(xmlTree2.Name)  
```  
  
 <span data-ttu-id="c3714-383">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-383">This example produces the following output:</span></span>  
  
```  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-384">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-384">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3714-385">一个从其读取 <see cref="T:System.Xml.XmlReader" /> 内容的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-385">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="c3714-386">从 <see cref="T:System.Xml.Linq.XElement" /> 加载 <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-386">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-387">一个 <see cref="T:System.Xml.Linq.XElement" />，其中包含从指定的 <see cref="T:System.Xml.XmlReader" /> 读取的 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-387">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-388">通过<xref:System.Xml.XmlNodeReader>从 DOM 文档创建, 然后<xref:System.Xml.XmlNodeReader>使用创建<xref:System.Xml.Linq.XElement>, 此方法可用于在 LINQ to XML 树中创建 DOM 文档的副本。</span><span class="sxs-lookup"><span data-stu-id="c3714-388">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="c3714-389">LINQ to XML 的加载功能是基于生成<xref:System.Xml.XmlReader>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-389">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-390">因此, 你可能会捕获<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>重载方法所引发的任何异常<xref:System.Xml.XmlReader>和读取和分析文档的方法。</span><span class="sxs-lookup"><span data-stu-id="c3714-390">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-391">下面的示例创建一个 dom 文档, <xref:System.Xml.XmlNodeReader>从 DOM 文档创建, 然后从读取器实例化树。</span><span class="sxs-lookup"><span data-stu-id="c3714-391">The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, instantiates a tree from the reader.</span></span> <span data-ttu-id="c3714-392">此代码将有效地将 DOM 文档复制到 LINQ to XML 树中。</span><span class="sxs-lookup"><span data-stu-id="c3714-392">This code effectively copies a DOM document into a LINQ to XML tree.</span></span>  
  
```csharp  
// Create a DOM document with some content.  
XmlDocument doc = new XmlDocument();  
XmlElement child = doc.CreateElement("Child");  
child.InnerText = "child contents";  
XmlElement root = doc.CreateElement("Root");  
root.AppendChild(child);  
doc.AppendChild(root);  
  
// Create a reader and move to the content.  
using (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader);  
    Console.WriteLine(xRoot);  
}  
```  
  
```vb  
' Create a DOM document with some content.  
Dim doc As XmlDocument = New XmlDocument()  
Dim child As XmlElement = doc.CreateElement("Child")  
child.InnerText = "child contents"  
Dim root As XmlElement = doc.CreateElement("Root")  
root.AppendChild(child)  
doc.AppendChild(root)  
  
' Create a reader and move to the content.  
Using nodeReader = New XmlNodeReader(doc)  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader)  
    Console.WriteLine(xRoot)  
End Using  
```  
  
 <span data-ttu-id="c3714-393">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-393">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>child contents</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-394">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-394">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load (stream, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3714-395">包含 XML 数据的流。</span><span class="sxs-lookup"><span data-stu-id="c3714-395">The stream containing the XML data.</span></span></param>
        <param name="options"><span data-ttu-id="c3714-396">一个 <see cref="T:System.Xml.Linq.LoadOptions" /> 对象，指定是否加载基 URI 和行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-396">A <see cref="T:System.Xml.Linq.LoadOptions" /> object that specifies whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="c3714-397">使用指定流创建新的 <see cref="T:System.Xml.Linq.XElement" /> 实例，也可以选择保留空白，设置基 URI 和保留行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-397">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="c3714-398">一个用于读取流中所包含数据的 <see cref="T:System.Xml.Linq.XElement" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c3714-398">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that the stream contains.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-399">LINQ to XML 的加载功能是基于生成<xref:System.Xml.XmlReader>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-399">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-400">因此, 你可能会捕获<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>重载方法所引发的任何异常<xref:System.Xml.XmlReader>和读取和分析文档的方法。</span><span class="sxs-lookup"><span data-stu-id="c3714-400">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="c3714-401">如果必须修改<xref:System.Xml.XmlReaderSettings>, 请执行以下步骤:</span><span class="sxs-lookup"><span data-stu-id="c3714-401">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="c3714-402">通过调用<xref:System.Xml.XmlReader.Create%2A> 采用<xref:System.Xml.XmlReaderSettings>作为参数的重载之一来创建。 <xref:System.Xml.XmlReader></span><span class="sxs-lookup"><span data-stu-id="c3714-402">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="c3714-403">将传递<xref:System.Xml.Linq.XElement.Load%2A> <xref:System.Xml.Linq.XElement> <xref:System.Xml.XmlReader>给作为参数的重载之一。 <xref:System.Xml.XmlReader></span><span class="sxs-lookup"><span data-stu-id="c3714-403">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load (textReader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="textReader"><span data-ttu-id="c3714-404">一个从其读取 <see cref="T:System.IO.TextReader" /> 内容的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-404">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span></span></param>
        <param name="options"><span data-ttu-id="c3714-405">一个 <see cref="T:System.Xml.Linq.LoadOptions" />，指定空白行为以及是否加载基 URI 和行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-405">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="c3714-406">从 <see cref="T:System.Xml.Linq.XElement" /> 加载 <see cref="T:System.IO.TextReader" />，还可以选择保留空白和行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-406">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="c3714-407">一个 <see cref="T:System.Xml.Linq.XElement" />，其中包含从指定的 <see cref="T:System.IO.TextReader" /> 读取的 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-407">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-408">如果源 xml 已缩进, 则在<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>中`options`设置标志将导致读取器读取源 xml 中的所有空格。</span><span class="sxs-lookup"><span data-stu-id="c3714-408">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="c3714-409">为有效空白<xref:System.Xml.Linq.XText>和无意义空白创建类型的节点。</span><span class="sxs-lookup"><span data-stu-id="c3714-409">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="c3714-410">如果源 xml 已缩进, 则未在<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>中`options`设置标志将导致读取器忽略源 xml 中所有无意义的空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-410">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="c3714-411">创建 XML 树时无需任何文本节点, 无意义的空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-411">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="c3714-412">如果未缩进源 XML, 则在中<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> `options`设置标志不起作用。</span><span class="sxs-lookup"><span data-stu-id="c3714-412">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="c3714-413">仍保留了有效空白, 并且不存在任何可能导致创建更多空白文本节点的无意义空白区域。</span><span class="sxs-lookup"><span data-stu-id="c3714-413">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="c3714-414">有关详细信息, 请参阅在[加载或分析 XML 时保留空白](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d), 并[在序列化时保留空白区域](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="c3714-414">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="c3714-415">使用<xref:System.Xml.Linq.XElement.Parse%2A> <xref:System.Xml.Linq.XElement>从包含 XML 的字符串创建。</span><span class="sxs-lookup"><span data-stu-id="c3714-415">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="c3714-416">从加载时<xref:System.Xml.Linq.LoadOptions.SetBaseUri> ,设置将不起作用。<xref:System.IO.TextReader></span><span class="sxs-lookup"><span data-stu-id="c3714-416">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when loading from a <xref:System.IO.TextReader>.</span></span>  
  
 <span data-ttu-id="c3714-417">如果设置了<xref:System.Xml.Linq.LoadOptions.SetLineInfo>标志, 则会对性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="c3714-417">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="c3714-418">行信息在加载 XML 文档后立即准确无误。</span><span class="sxs-lookup"><span data-stu-id="c3714-418">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="c3714-419">如果在加载文档后修改 XML 树, 行信息可能会变得毫无意义。</span><span class="sxs-lookup"><span data-stu-id="c3714-419">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="c3714-420">LINQ to XML 的加载功能是基于生成<xref:System.Xml.XmlReader>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-420">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-421">因此, 你可能会捕获<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>重载方法所引发的任何异常<xref:System.Xml.XmlReader>和读取和分析文档的方法。</span><span class="sxs-lookup"><span data-stu-id="c3714-421">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-422">下面的示例<xref:System.Xml.Linq.XElement>通过两种不同<xref:System.IO.StringReader>的方式从中加载: 保留空白, 而不保留空格。</span><span class="sxs-lookup"><span data-stu-id="c3714-422">The following example loads an <xref:System.Xml.Linq.XElement> from a <xref:System.IO.StringReader> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="c3714-423">然后, 它使用查询来确定生成的 XML 树中的空白节点数。</span><span class="sxs-lookup"><span data-stu-id="c3714-423">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
TextReader sr;  
int whiteSpaceNodes;  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree1 = XElement.Load(sr, LoadOptions.None);  
sr.Close();  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree2 = XElement.Load(sr, LoadOptions.PreserveWhitespace);  
sr.Close();  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim sr As TextReader  
Dim whiteSpaceNodes As Integer  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree1 As XElement = XElement.Load(sr, LoadOptions.None)  
sr.Close()  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree2 As XElement = XElement.Load(sr, LoadOptions.PreserveWhitespace)  
sr.Close()  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="c3714-424">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-424">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="c3714-425">下面的示例加载从中<xref:System.IO.TextReader>加载的行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-425">The following example loads the line information as it loads from the <xref:System.IO.TextReader>.</span></span> <span data-ttu-id="c3714-426">然后打印行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-426">It then prints the line information.</span></span>  
  
```csharp  
TextReader sr = new StringReader(  
@"<Root>  
  <Child>  
    <GrandChild1/>  
    <GrandChild2/>  
  </Child>  
</Root>");  
XElement po = XElement.Load(sr,  
    LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim sr As TextReader = New StringReader( _  
    "<Root>" & Environment.NewLine & _  
    "  <Child>" & Environment.NewLine & _  
    "    <GrandChild1/>" & Environment.NewLine & _  
    "    <GrandChild2/>" & Environment.NewLine & _  
    "  </Child>" & Environment.NewLine & _  
    "</Root>")  
Dim po As XElement = XElement.Load(sr, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="c3714-427">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-427">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    4  
    GrandChild1     3    6  
    GrandChild2     4    6  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-428">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-428">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : string * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load (uri, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="c3714-429">一个 URI 字符串，它引用要加载到 <see cref="T:System.Xml.Linq.XElement" /> 中的文件。</span><span class="sxs-lookup"><span data-stu-id="c3714-429">A URI string referencing the file to load into an <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <param name="options"><span data-ttu-id="c3714-430">一个 <see cref="T:System.Xml.Linq.LoadOptions" />，指定空白行为以及是否加载基 URI 和行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-430">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="c3714-431">从文件加载 <see cref="T:System.Xml.Linq.XElement" />，还可以选择保留空白、设置基 URI 和保留行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-431">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="c3714-432">一个包含指定文件的内容的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-432">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-433">如果源 xml 已缩进, 则在<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>中`options`设置标志将导致读取器读取源 xml 中的所有空格。</span><span class="sxs-lookup"><span data-stu-id="c3714-433">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="c3714-434">为有效空白<xref:System.Xml.Linq.XText>和无意义空白创建类型的节点。</span><span class="sxs-lookup"><span data-stu-id="c3714-434">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="c3714-435">如果源 xml 已缩进, 则未在<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>中`options`设置标志将导致读取器忽略源 xml 中所有无意义的空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-435">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="c3714-436">创建 XML 树时无需任何文本节点, 无意义的空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-436">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="c3714-437">如果未缩进源 XML, 则在中<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> `options`设置标志不起作用。</span><span class="sxs-lookup"><span data-stu-id="c3714-437">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="c3714-438">仍保留了有效空白, 并且不存在任何可能导致创建更多空白文本节点的无意义空白区域。</span><span class="sxs-lookup"><span data-stu-id="c3714-438">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="c3714-439">有关详细信息, 请参阅在[加载或分析 XML 时保留空白](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d), 并[在序列化时保留空白区域](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="c3714-439">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="c3714-440">使用<xref:System.Xml.Linq.XElement.Parse%2A> <xref:System.Xml.Linq.XElement>从包含 XML 的字符串创建。</span><span class="sxs-lookup"><span data-stu-id="c3714-440">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="c3714-441">如果设置了<xref:System.Xml.Linq.LoadOptions.SetBaseUri> <xref:System.Xml.Linq.LoadOptions.SetLineInfo>和标志, 则会降低性能。</span><span class="sxs-lookup"><span data-stu-id="c3714-441">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.</span></span>  
  
 <span data-ttu-id="c3714-442">在加载 XML 文档后, 基本 URI 和行信息立即准确无误。</span><span class="sxs-lookup"><span data-stu-id="c3714-442">The base URI and the line information are accurate immediately after loading the XML document.</span></span> <span data-ttu-id="c3714-443">如果在加载文档后修改 XML 树, 则基本 URI 和行信息可能会变得毫无意义。</span><span class="sxs-lookup"><span data-stu-id="c3714-443">If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</span></span>  
  
 <span data-ttu-id="c3714-444">LINQ to XML 的加载功能是基于生成<xref:System.Xml.XmlReader>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-444">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-445">因此, 你可能会捕获<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>重载方法所引发的任何异常<xref:System.Xml.XmlReader>和读取和分析文档的方法。</span><span class="sxs-lookup"><span data-stu-id="c3714-445">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-446">下面的示例<xref:System.Xml.Linq.XElement>通过两种不同的方式从文件中加载: 保留空白, 而不保留空格。</span><span class="sxs-lookup"><span data-stu-id="c3714-446">The following example loads an <xref:System.Xml.Linq.XElement> from a file in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="c3714-447">然后, 它使用查询来确定生成的 XML 树中的空白节点数。</span><span class="sxs-lookup"><span data-stu-id="c3714-447">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
XElement xmlTree1 = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace);  
xmlTree1.Save("Tree.xml");  
Console.WriteLine(xmlTree1);  
  
int whiteSpaceNodes;  
XElement xmlTree2 = XElement.Load("Tree.xml",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
XElement xmlTree3 = XElement.Load("Tree.xml",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree3  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace)  
xmlTree1.Save("Tree.xml")  
Console.WriteLine(xmlTree1)  
  
Dim whiteSpaceNodes As Integer  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml", LoadOptions.None)  
whiteSpaceNodes = xmlTree2 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree3 As XElement = XElement.Load("Tree.xml", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree3 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="c3714-448">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-448">This example produces the following output:</span></span>  
  
```  
<Root> <Child>  </Child> </Root>  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="c3714-449">下面的示例在加载文件时加载基 URI 和行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-449">The following example loads the base URI and line information as it loads the file.</span></span> <span data-ttu-id="c3714-450">然后打印基本 URI 和行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-450">It then prints the base URI and the line information.</span></span>  
  
 <span data-ttu-id="c3714-451">此示例使用以下资源文件:[示例 XML 文件：典型采购订单 (LINQ to XML)](https://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)。</span><span class="sxs-lookup"><span data-stu-id="c3714-451">This example uses the following resource file: [Sample XML File: Typical Purchase Order (LINQ to XML)](https://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span></span>  
  
```csharp  
XElement po = XElement.Load("PurchaseOrder.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim po As XElement = XElement.Load("PurchaseOrder.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
Dim splitUri() As String = po.BaseUri.Split("/")  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="c3714-452">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-452">This example produces the following output:</span></span>  
  
```  
BaseUri: PurchaseOrder.xml  
  
Element Name        Line Position  
------------        ---- --------  
PurchaseOrder       2    2  
  Address           3    4  
    Name            4    6  
    Street          5    6  
    City            6    6  
    State           7    6  
    Zip             8    6  
    Country         9    6  
  Address           11   4  
    Name            12   6  
    Street          13   6  
    City            14   6  
    State           15   6  
    Zip             16   6  
    Country         17   6  
  DeliveryNotes     19   4  
  Items             20   4  
    Item            21   6  
      ProductName   22   8  
      Quantity      23   8  
      USPrice       24   8  
      Comment       25   8  
    Item            27   6  
      ProductName   28   8  
      Quantity      29   8  
      USPrice       30   8  
      ShipDate      31   8  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-453">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-453">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3714-454">一个从其读取 <see cref="T:System.Xml.XmlReader" /> 内容的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-454">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <param name="options"><span data-ttu-id="c3714-455">一个 <see cref="T:System.Xml.Linq.LoadOptions" />，指定空白行为以及是否加载基 URI 和行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-455">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="c3714-456">从 <see cref="T:System.Xml.Linq.XElement" /> 加载 <see cref="T:System.Xml.XmlReader" /> 时，可以选择保留空白、设置基 URI 和保留行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-456">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="c3714-457">一个 <see cref="T:System.Xml.Linq.XElement" />，其中包含从指定的 <see cref="T:System.Xml.XmlReader" /> 读取的 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-457">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-458">通过<xref:System.Xml.XmlNodeReader>从 DOM 文档创建, 然后<xref:System.Xml.XmlNodeReader>使用创建<xref:System.Xml.Linq.XElement>, 此方法可用于在 LINQ to XML 树中创建 DOM 文档的副本。</span><span class="sxs-lookup"><span data-stu-id="c3714-458">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="c3714-459">使用<xref:System.Xml.Linq.XElement.Parse%2A> <xref:System.Xml.Linq.XElement>从包含 XML 的字符串创建。</span><span class="sxs-lookup"><span data-stu-id="c3714-459">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="c3714-460">从加载时, 设置<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>无效。 <xref:System.Xml.XmlReader></span><span class="sxs-lookup"><span data-stu-id="c3714-460">Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-461"><xref:System.Xml.XmlReader>将配置为读取空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-461">The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not.</span></span> <span data-ttu-id="c3714-462">LINQ to XML 树将用读取器所表示的空白节点填充。</span><span class="sxs-lookup"><span data-stu-id="c3714-462">The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</span></span> <span data-ttu-id="c3714-463">不管是否<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>设置了, 这将是行为。</span><span class="sxs-lookup"><span data-stu-id="c3714-463">This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.</span></span>  
  
 <span data-ttu-id="c3714-464"><xref:System.Xml.XmlReader>可能具有有效的基 URI。</span><span class="sxs-lookup"><span data-stu-id="c3714-464">The <xref:System.Xml.XmlReader> may have a valid base URI or not.</span></span> <span data-ttu-id="c3714-465">如果设置<xref:System.Xml.Linq.LoadOptions.SetBaseUri>了, 则将从报告<xref:System.Xml.XmlReader>的基本 uri 的 XML 树中设置基本 uri。</span><span class="sxs-lookup"><span data-stu-id="c3714-465">If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="c3714-466"><xref:System.Xml.XmlReader>可能有有效的行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-466">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="c3714-467">如果设置<xref:System.Xml.Linq.LoadOptions.SetLineInfo>了, 则将从报告<xref:System.Xml.XmlReader>的行信息在 XML 树中设置行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-467">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="c3714-468">如果设置了<xref:System.Xml.Linq.LoadOptions.SetLineInfo>标志, 则会对性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="c3714-468">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="c3714-469">行信息在加载 XML 文档后立即准确无误。</span><span class="sxs-lookup"><span data-stu-id="c3714-469">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="c3714-470">如果在加载文档后修改 XML 树, 行信息可能会变得毫无意义。</span><span class="sxs-lookup"><span data-stu-id="c3714-470">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="c3714-471">LINQ to XML 的加载功能是基于生成<xref:System.Xml.XmlReader>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-471">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-472">因此, 你可能会捕获<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>重载方法所引发的任何异常<xref:System.Xml.XmlReader>和读取和分析文档的方法。</span><span class="sxs-lookup"><span data-stu-id="c3714-472">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-473">下面的示例加载从中<xref:System.Xml.XmlReader>加载的行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-473">The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-474">然后打印行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-474">It then prints the line information.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
// Create a reader and move to the content.  
using (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  
{  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader, LoadOptions.SetLineInfo);  
    Console.WriteLine("{0}{1}{2}",  
        "Element Name".PadRight(20),  
        "Line".PadRight(5),  
        "Position");  
    Console.WriteLine("{0}{1}{2}",  
        "------------".PadRight(20),  
        "----".PadRight(5),  
        "--------");  
    foreach (XElement e in xRoot.DescendantsAndSelf())  
        Console.WriteLine("{0}{1}{2}",  
            ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
            ((IXmlLineInfo)e).LinePosition);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child>" & Environment.NewLine & _  
    "        <GrandChild/>" & Environment.NewLine & _  
    "    </Child>" & Environment.NewLine & _  
    "</Root>"  
  
' Create a reader and move to the content.  
Using nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  
  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader, LoadOptions.SetLineInfo)  
    Console.WriteLine("{0}{1}{2}", _  
        "Element Name".PadRight(20), _  
        "Line".PadRight(5), _  
        "Position")  
    Console.WriteLine("{0}{1}{2}", _  
        "------------".PadRight(20), _  
        "----".PadRight(5), _  
        "--------")  
    For Each e As XElement In xRoot.DescendantsAndSelf()  
        Console.WriteLine("{0}{1}{2}", _  
            ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
            (DirectCast(e, IXmlLineInfo)).LinePosition)  
    Next  
End Using  
```  
  
 <span data-ttu-id="c3714-475">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-475">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-476">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-476">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.IO.Stream * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.XElement.LoadAsync (stream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.IO.TextReader * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.XElement.LoadAsync (textReader, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="textReader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.Xml.XmlReader * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.XElement.LoadAsync (reader, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XName Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XName ^ Name { System::Xml::Linq::XName ^ get(); void set(System::Xml::Linq::XName ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : System.Xml.Linq.XName with get, set" Usage="System.Xml.Linq.XElement.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3714-477">获取或设置此元素的名称。</span><span class="sxs-lookup"><span data-stu-id="c3714-477">Gets or sets the name of this element.</span></span></summary>
        <value><span data-ttu-id="c3714-478">一个包含此元素的名称的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-478">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-479">设置此属性将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-479">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-480">下面的示例使用此属性来确定元素的名称。</span><span class="sxs-lookup"><span data-stu-id="c3714-480">The following example uses this property to determine the name of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.Name);  
  
XNamespace ns = "http://www.adventure-works.com";  
XElement el2 = new XElement(ns + "Root", "content");  
Console.WriteLine(el2.Name);  
Console.WriteLine(el2.Name.Namespace);  
Console.WriteLine(el2.Name.LocalName);  
el2.Name = ns + "NewName";  
Console.WriteLine(el2.Name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el1 As XElement = <Root>content</Root>  
        Console.WriteLine(el1.Name)  
  
        Dim el2 As XElement = <aw:Root>content</aw:Root>  
        Console.WriteLine(el2.Name)  
        Console.WriteLine(el2.Name.Namespace)  
        Console.WriteLine(el2.Name.LocalName)  
        Dim aw as XNamespace = GetXmlNamespace(aw)  
        el2.Name = aw + "NewName"  
        Console.WriteLine(el2.Name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c3714-481">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-481">This example produces the following output:</span></span>  
  
```  
Root  
{http://www.adventure-works.com}Root  
http://www.adventure-works.com  
Root  
{http://www.adventure-works.com}NewName  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-482">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-482">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.Linq.XElement.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3714-483">获取此节点的节点类型。</span><span class="sxs-lookup"><span data-stu-id="c3714-483">Gets the node type for this node.</span></span></summary>
        <value><span data-ttu-id="c3714-484">节点类型。</span><span class="sxs-lookup"><span data-stu-id="c3714-484">The node type.</span></span> <span data-ttu-id="c3714-485">对于 <see cref="T:System.Xml.Linq.XElement" /> 对象，此值为 <see cref="F:System.Xml.XmlNodeType.Element" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-485">For <see cref="T:System.Xml.Linq.XElement" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Element" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-486">由于派生自<xref:System.Xml.Linq.XObject>的所有类都包含<xref:System.Xml.Linq.XObject.NodeType%2A>一个属性, 因此你可以编写对的具体子类的<xref:System.Xml.Linq.XObject>集合进行操作的代码。</span><span class="sxs-lookup"><span data-stu-id="c3714-486">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="c3714-487">然后, 你的代码可以测试集合中每个节点的节点类型。</span><span class="sxs-lookup"><span data-stu-id="c3714-487">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-488">下面的示例使用此属性来打印元素的节点类型。</span><span class="sxs-lookup"><span data-stu-id="c3714-488">The following example uses this property to print the node type of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.NodeType);  
Console.WriteLine();  
```  
  
```vb  
Dim el1 As XElement = <Root>content</Root>  
Console.WriteLine(el1.NodeType.ToString())  
Console.WriteLine()  
```  
  
 <span data-ttu-id="c3714-489">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-489">This example produces the following output:</span></span>  
  
```  
Element  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-490">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-490">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator bool (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator bool(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; bool" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-491">要强制转换为 <see cref="T:System.Boolean" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-491">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Boolean" />.</span></span></param>
        <summary><span data-ttu-id="c3714-492">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-492">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-493">一个 <see cref="T:System.Boolean" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-493">A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-494">从特性或<xref:System.Boolean>元素转换为时, 允许的值为 "0"、"1" 和在修整和转换为小写后生成 "true" 或 "false" 的任何字符串。</span><span class="sxs-lookup"><span data-stu-id="c3714-494">When converting to <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="c3714-495">下面的示例创建一些具有布尔值的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-495">The following example creates some elements with boolean values.</span></span> <span data-ttu-id="c3714-496">然后将其转换为<xref:System.Boolean>。</span><span class="sxs-lookup"><span data-stu-id="c3714-496">It then casts them to <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false)  
);  
bool bool1 = (bool)root.Element("BoolValue1");  
bool bool2 = (bool)root.Element("BoolValue2");  
Console.WriteLine("(bool)BoolValue1={0}", bool1);  
Console.WriteLine("(bool)BoolValue2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
Dim bool1 As Boolean = CBool(root.Element("BoolValue1"))  
Dim bool2 As Boolean = CBool(root.Element("BoolValue2"))  
Console.WriteLine("(bool)BoolValue1={0}", bool1)  
Console.WriteLine("(bool)BoolValue2={0}", bool2)  
```  
  
 <span data-ttu-id="c3714-497">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-497">This example produces the following output:</span></span>  
  
```  
(bool)BoolValue1=True  
(bool)BoolValue2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-498">元素不包含有效的 <see cref="T:System.Boolean" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-498">The element does not contain a valid <see cref="T:System.Boolean" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-499"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-499">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-500">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-500">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTime (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTime(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; DateTime" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-501">要强制转换为 <see cref="T:System.DateTime" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-501">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTime" />.</span></span></param>
        <summary><span data-ttu-id="c3714-502">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.DateTime" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-502">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-503">一个 <see cref="T:System.DateTime" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-503">A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-504">包含日期和时间内容的属性或元素的值空间与 ISO 8601 中所述的日期和时间密切相关。</span><span class="sxs-lookup"><span data-stu-id="c3714-504">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="c3714-505">当创建包含日期和时间内容的属性或元素时, 将根据 W3C 规范设置属性或元素值的格式。</span><span class="sxs-lookup"><span data-stu-id="c3714-505">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="c3714-506">有关更多详细信息, 请参阅 W3C 规范。</span><span class="sxs-lookup"><span data-stu-id="c3714-506">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="c3714-507"><xref:System.DateTime>从特性或元素强制转换为时, 行为是不严格的。</span><span class="sxs-lookup"><span data-stu-id="c3714-507">Behavior is lax when casting to a <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="c3714-508">即使属性或元素值的格式设置与 W3C 规范的格式完全相同, 此值也会相应地转换<xref:System.DateTime>为。</span><span class="sxs-lookup"><span data-stu-id="c3714-508">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="c3714-509">此转换运算符使用<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> <xref:System.DateTime>从转换。</span><span class="sxs-lookup"><span data-stu-id="c3714-509">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>

## Examples  
 <span data-ttu-id="c3714-510">下面的示例创建一个具有日期和时间内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-510">The following example creates an element with date and time content.</span></span> <span data-ttu-id="c3714-511">然后将其转换为<xref:System.DateTime>以检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-511">It then casts it to <xref:System.DateTime> to retrieve the value.</span></span>  
  
```csharp  
// Behavior is strict when formatting an XML element or attribute from a DateTime,  
// but behavior is lax when casting to a DateTime from an element or attribute.  
XElement root = new XElement("Root", new DateTime(2006, 10, 6, 12, 30, 0));  
Console.WriteLine(root);  
  
// Cast from a strictly formatted XML element.  
DateTime dt = (DateTime)root;  
Console.WriteLine("dt={0}", dt);  
Console.WriteLine("-----");  
  
// If root is formatted in some different way:  
XElement dtElement = new XElement("OrderDate", "October 6, 2006");  
Console.WriteLine(dtElement);  
DateTime orderDate = (DateTime)dtElement;  
Console.WriteLine("orderDate={0:d}", orderDate);  
```  
  
```vb  
' Behavior is strict when formatting an XML element or attribute from a DateTime,  
' but behavior is lax when casting to a DateTime from an element or attribute.  
Dim root As XElement = <Root><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Root>  
Console.WriteLine(root)  
  
' Cast from a strictly formatted XML element.  
Dim dt As DateTime = CType(root, DateTime)  
Console.WriteLine("dt={0}", dt)  
Console.WriteLine("-----")  
  
' If root is formatted in some different way:  
Dim dtElement As XElement = <OrderDate>October 6, 2006</OrderDate>  
Console.WriteLine(dtElement)  
Dim orderDate As DateTime = CType(dtElement, DateTime)  
Console.WriteLine("orderDate={0:d}", orderDate)  
```  
  
 <span data-ttu-id="c3714-512">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-512">This example produces the following output:</span></span>  
  
```  
<Root>2006-10-06T12:30:00</Root>  
dt=10/6/2006 12:30:00 PM  
-----  
<OrderDate>October 6, 2006</OrderDate>  
orderDate=10/6/2006  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-513">元素不包含有效的 <see cref="T:System.DateTime" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-513">The element does not contain a valid <see cref="T:System.DateTime" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-514"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-514">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-515">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-515">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTimeOffset (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTimeOffset(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; DateTimeOffset" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-516">要强制转换为 <see cref="T:System.DateTimeOffset" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-516">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTimeOffset" />.</span></span></param>
        <summary><span data-ttu-id="c3714-517">将此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值强制转换为 <see cref="T:System.DateTimeOffset" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-517">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-518">一个 <see cref="T:System.DateTimeOffset" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-518">A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-519">此转换运算符使用<xref:System.Xml.XmlConvert>类来执行转换。</span><span class="sxs-lookup"><span data-stu-id="c3714-519">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>  
  
## Examples  
 <span data-ttu-id="c3714-520">下面的示例创建一个具有日期和时间内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-520">The following example creates an element with date and time content.</span></span> <span data-ttu-id="c3714-521">然后, 将转换<xref:System.DateTimeOffset>为以检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-521">It then casts to <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset dt = (DateTimeOffset)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As DateTimeOffset = CType(root.<Child>(0), DateTimeOffset)  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="c3714-522">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-522">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-523">元素不包含有效的 <see cref="T:System.DateTimeOffset" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-523">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-524"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-524">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-525">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-525">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; decimal" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-526">要强制转换为 <see cref="T:System.Decimal" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-526">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="c3714-527">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Decimal" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-527">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-528">一个 <see cref="T:System.Decimal" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-528">A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="c3714-529">下面的示例创建一个具有十进制值的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-529">The following example creates an element with a decimal value.</span></span> <span data-ttu-id="c3714-530">然后, 它通过强制转换为来<xref:System.Decimal>检索特性的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-530">It then retrieves the value of the attribute by casting to <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "79228162514264337593543950335");  
decimal value = (decimal)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>79228162514264337593543950335</Root>  
Dim value As Decimal = CDec(root)  
Console.WriteLine("value={0}", value)  
  
```  
  
 <span data-ttu-id="c3714-531">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-531">This example produces the following output:</span></span>  
  
```  
value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-532">元素不包含有效的 <see cref="T:System.Decimal" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-532">The element does not contain a valid <see cref="T:System.Decimal" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-533"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-533">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-534">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-534">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; double" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-535">要强制转换为 <see cref="T:System.Double" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-535">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="c3714-536">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-536">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-537">一个 <see cref="T:System.Double" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-537">A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Examples  
 <span data-ttu-id="c3714-538">下面的示例创建一个包含`double`内容的属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-538">The following example creates an attribute with `double` content.</span></span> <span data-ttu-id="c3714-539">然后, 它通过强制转换为来<xref:System.Double>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-539">It then retrieves the value by casting to <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 1.79769313486231e308);  
double value = (double)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>1.79769313486231E+308</Root>  
Dim value As Double = CDbl(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="c3714-540">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-540">This example produces the following output:</span></span>  
  
```  
value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-541">元素不包含有效的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-541">The element does not contain a valid <see cref="T:System.Double" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-542"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-542">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-543">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-543">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Guid (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Guid op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Guid(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Guid" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-544">要强制转换为 <see cref="T:System.Guid" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-544">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Guid" />.</span></span></param>
        <summary><span data-ttu-id="c3714-545">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-545">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-546">一个 <see cref="T:System.Guid" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-546">A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="c3714-547">下面的示例创建一个元素, 并将 guid 作为内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-547">The following example creates an element with a guid as content.</span></span> <span data-ttu-id="c3714-548">然后, 它通过强制转换为来<xref:System.Guid>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-548">It then retrieves the value by casting to <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"));  
Guid value = (Guid)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Root>  
Dim value As Guid = CType(root, Guid)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="c3714-549">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-549">This example produces the following output:</span></span>  
  
```  
value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-550">元素不包含有效的 <see cref="T:System.Guid" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-550">The element does not contain a valid <see cref="T:System.Guid" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-551"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-551">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-552">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-552">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; int" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-553">要强制转换为 <see cref="T:System.Int32" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-553">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int32" />.</span></span></param>
        <summary><span data-ttu-id="c3714-554">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-554">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-555">一个 <see cref="T:System.Int32" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-555">A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="c3714-556">下面的示例创建一个元素, 其中包含整数作为内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-556">The following example creates an element with an integer as content.</span></span> <span data-ttu-id="c3714-557">然后, 它通过强制转换为来<xref:System.Int32>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-557">It then retrieves the value by casting to <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 2147483647);  
int value = (int)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>2147483647</Root>  
Dim value As Integer = CInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="c3714-558">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-558">This example produces the following output:</span></span>  
  
```  
value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-559">元素不包含有效的 <see cref="T:System.Int32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-559">The element does not contain a valid <see cref="T:System.Int32" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-560"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-560">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-561">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-561">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; int64" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-562">要强制转换为 <see cref="T:System.Int64" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-562">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int64" />.</span></span></param>
        <summary><span data-ttu-id="c3714-563">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-563">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-564">一个 <see cref="T:System.Int64" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-564">A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="c3714-565">下面的示例创建一个具有长整数作为内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-565">The following example creates an element with a long integer as content.</span></span> <span data-ttu-id="c3714-566">然后, 它通过强制转换为来<xref:System.Int64>检索元素的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-566">It then retrieves the value of the element by casting to <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 9223372036854775807);  
long value = (long)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>9223372036854775807</Root>  
Dim value As Long = CLng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="c3714-567">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-567">This example produces the following output:</span></span>  
  
```  
value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-568">元素不包含有效的 <see cref="T:System.Int64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-568">The element does not contain a valid <see cref="T:System.Int64" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-569"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-569">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-570">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-570">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;bool&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;bool&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;bool&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;bool&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-571">要强制转换为 <see cref="T:System.Boolean" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-571">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span></span></param>
        <summary><span data-ttu-id="c3714-572">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Boolean" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-572">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-573">一个 <see cref="T:System.Boolean" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-573">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-574">从特性或<xref:System.Nullable%601>元素转换为时, 允许的值为 "0"、"1" 和在修整和转换为小写后生成 "true" 或 "false" 的任何字符串。 <xref:System.Boolean></span><span class="sxs-lookup"><span data-stu-id="c3714-574">When converting to <xref:System.Nullable%601> of <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="c3714-575">下面的示例创建一个具有布尔内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-575">The following example creates an element with boolean content.</span></span> <span data-ttu-id="c3714-576">然后, 它通过强制转换为来<xref:System.Nullable%601> <xref:System.Boolean>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-576">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false));  
bool? bool1 = (bool?)root.Element("BoolValue1");  
bool? bool2 = (bool?)root.Element("BoolValue2");  
Console.WriteLine("Nullable Boolean: value1={0}", bool1);  
Console.WriteLine("Nullable Boolean: value2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
  
Dim value1 As Nullable(Of Boolean) = CType(root.Element("BoolValue1"), Nullable(Of Boolean))  
Dim value2 As Nullable(Of Boolean) = CType(root.Element("BoolValue2"), Nullable(Of Boolean))  
Console.WriteLine("Nullable Boolean: value1={0}", IIf(value1.HasValue, value1.ToString(), "null"))  
Console.WriteLine("Nullable Boolean: value2={0}", IIf(value2.HasValue, value2.ToString(), "null"))  
```  
  
 <span data-ttu-id="c3714-577">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-577">This example produces the following output:</span></span>  
  
```  
Nullable Boolean: value1=True  
Nullable Boolean: value2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-578">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Boolean" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-578">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Boolean" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-579">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-579">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTime&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTime&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;DateTime&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-580">要强制转换为 <see cref="T:System.DateTime" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-580">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span></span></param>
        <summary><span data-ttu-id="c3714-581">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.DateTime" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-581">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-582">一个 <see cref="T:System.DateTime" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-582">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-583">包含日期和时间内容的属性或元素的值空间与 ISO 8601 中所述的日期和时间密切相关。</span><span class="sxs-lookup"><span data-stu-id="c3714-583">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="c3714-584">当创建包含日期和时间内容的属性或元素时, 将根据 W3C 规范设置属性或元素值的格式。</span><span class="sxs-lookup"><span data-stu-id="c3714-584">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="c3714-585">有关更多详细信息, 请参阅 W3C 规范。</span><span class="sxs-lookup"><span data-stu-id="c3714-585">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="c3714-586">从特性或元素强制转换到<xref:System.Nullable%601>的<xref:System.DateTime>时, 行为是不严格的。</span><span class="sxs-lookup"><span data-stu-id="c3714-586">The behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="c3714-587">即使属性或元素值的格式设置与 W3C 规范的格式完全相同, 此值也会相应地转换<xref:System.Nullable%601>为<xref:System.DateTime>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-587">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="c3714-588">此转换运算符使用<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> <xref:System.DateTime>从转换。</span><span class="sxs-lookup"><span data-stu-id="c3714-588">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>
  
## Examples  
 <span data-ttu-id="c3714-589">下面的示例创建一个元素, 该元素具有作为内容的日期和时间。</span><span class="sxs-lookup"><span data-stu-id="c3714-589">The following example creates an element with a date and time as content.</span></span> <span data-ttu-id="c3714-590">然后, 它通过强制转换为来<xref:System.Nullable%601> <xref:System.DateTime>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-590">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
```csharp
XElement root = new XElement("Root",  
    new XElement("Value", new DateTime(2006, 10, 6, 12, 30, 0))  
);  
DateTime? value = (DateTime?)root.Element("Value");  
Console.WriteLine("Nullable DateTime: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Value>  
    </Root>  
Dim value As Nullable(Of DateTime) = CType(root.Element("Value"), Nullable(Of DateTime))  
Console.WriteLine("Nullable DateTime: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="c3714-591">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-591">This example produces the following output:</span></span>  
  
```  
Nullable DateTime: value=10/6/2006 12:30:00 PM  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-592">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.DateTime" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-592">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.DateTime" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-593">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-593">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTimeOffset&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTimeOffset&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;DateTimeOffset&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTimeOffset&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-594">强制转换为 <see cref="T:System.Xml.Linq.XElement" /> 类型的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-594">The <see cref="T:System.Xml.Linq.XElement" /> to cast to an <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span></span></param>
        <summary><span data-ttu-id="c3714-595">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.DateTimeOffset" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-595">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-596">一个 <see cref="T:System.DateTimeOffset" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-596">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-597">此转换运算符使用<xref:System.Xml.XmlConvert>类来执行转换。</span><span class="sxs-lookup"><span data-stu-id="c3714-597">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>
  
## Examples  
 <span data-ttu-id="c3714-598">下面的示例创建一个具有日期和时间内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-598">The following example creates an element with date and time content.</span></span> <span data-ttu-id="c3714-599">然后, 将转换<xref:System.Nullable%601>为<xref:System.DateTimeOffset>的以检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-599">It then casts to <xref:System.Nullable%601> of <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset? dt = (DateTimeOffset?)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As Nullable(Of DateTimeOffset) = CType(root.<Child>(0), Nullable(Of DateTimeOffset))  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="c3714-600">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-600">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-601">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.DateTimeOffset" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-601">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-602">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-602">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;decimal&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::Decimal&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;decimal&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-603">要强制转换为 <see cref="T:System.Decimal" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-603">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="c3714-604">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Decimal" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-604">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-605">一个 <see cref="T:System.Decimal" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-605">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="c3714-606">下面的示例创建一个包含 decimal 内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-606">The following example creates an element with decimal content.</span></span> <span data-ttu-id="c3714-607">然后, 它通过强制转换为来<xref:System.Nullable%601> <xref:System.Decimal>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-607">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", "79228162514264337593543950335")  
);  
decimal? value = (decimal?)root.Element("Value");  
Console.WriteLine("Nullable decimal: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value>79228162514264337593543950335</Value>  
    </Root>  
Dim value As Nullable(Of Decimal) = CType(root.Element("Value"), Nullable(Of Decimal))  
Console.WriteLine("Nullable decimal: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="c3714-608">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-608">This example produces the following output:</span></span>  
  
```  
Nullable decimal: value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-609">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Decimal" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-609">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Decimal" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-610">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-610">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;double&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;double&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;double&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-611">要强制转换为 <see cref="T:System.Double" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-611">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="c3714-612">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Double" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-612">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-613">一个 <see cref="T:System.Double" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-613">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="c3714-614">下面的示例创建一个具有双精度浮点数内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-614">The following example creates an element with double precision floating point content.</span></span> <span data-ttu-id="c3714-615">然后, 它通过强制转换为来<xref:System.Nullable%601> <xref:System.Double>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-615">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", 1.79769313486231e308)  
);  
double? value = (double?)root.Element("Value");  
Console.WriteLine("Nullable double: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
        <Root>  
            <Value>1.79769313486231e308</Value>  
        </Root>  
  
Dim value As Nullable(Of Double) = CType(root.Element("Value"), Nullable(Of Double))  
Console.WriteLine("Nullable double: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="c3714-616">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-616">This example produces the following output:</span></span>  
  
```  
Nullable double: value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-617">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-617">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Double" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-618">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-618">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;Guid&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Guid&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;Guid&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;Guid&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-619">要强制转换为 <see cref="T:System.Guid" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-619">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span></span></param>
        <summary><span data-ttu-id="c3714-620">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Guid" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-620">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-621">一个 <see cref="T:System.Guid" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-621">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="c3714-622">下面的示例创建一个具有 guid 内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-622">The following example creates an element with guid content.</span></span> <span data-ttu-id="c3714-623">然后, 它通过强制转换为来<xref:System.Nullable%601> <xref:System.Guid>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-623">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"))  
);  
Guid? value = (Guid?)root.Element("Value");  
Console.WriteLine("Nullable Guid: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Value>  
    </Root>  
Dim value As Nullable(Of Guid) = CType(root.Element("Value"), Nullable(Of Guid))  
Console.WriteLine("Nullable Guid: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="c3714-624">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-624">This example produces the following output:</span></span>  
  
```  
Nullable Guid: value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-625">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Guid" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-625">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Guid" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-626">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-626">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;int&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;int&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;int&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-627">要强制转换为 <see cref="T:System.Int32" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-627">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span></span></param>
        <summary><span data-ttu-id="c3714-628">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Int32" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-628">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-629">一个 <see cref="T:System.Int32" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-629">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="c3714-630">下面的示例创建一个具有无符号整数内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-630">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="c3714-631">然后, 它通过强制转换为来<xref:System.Nullable%601> <xref:System.Int32>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-631">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 2147483647)  
);  
int? value = (int?)root.Element("Value");  
Console.WriteLine("Nullable integer: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>2147483647</Value>  
        </Root>  
Dim value As Nullable(Of Integer) = CType(root.Element("Value"), Nullable(Of Integer))  
Console.WriteLine("Nullable integer: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
  
```  
  
 <span data-ttu-id="c3714-632">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-632">This example produces the following output:</span></span>  
  
```  
Nullable integer: value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-633">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Int32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-633">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Int32" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-634">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-634">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;long&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;long&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;int64&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-635">要强制转换为 <see cref="T:System.Int64" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-635">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span></span></param>
        <summary><span data-ttu-id="c3714-636">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Int64" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-636">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-637">一个 <see cref="T:System.Int64" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-637">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="c3714-638">下面的示例创建一个具有长整数内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-638">The following example creates an element with long integer content.</span></span> <span data-ttu-id="c3714-639">然后, 它通过强制转换为来<xref:System.Nullable%601> <xref:System.Int64>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-639">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",    
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="c3714-640">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-640">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-641">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Int64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-641">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Int64" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-642">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-642">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;float&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;float&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;single&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-643">要强制转换为 <see cref="T:System.Single" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-643">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span></span></param>
        <summary><span data-ttu-id="c3714-644">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Single" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-644">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-645">一个 <see cref="T:System.Single" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-645">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="c3714-646">下面的示例创建一个具有单精度浮点数内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-646">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="c3714-647">然后, 它通过强制转换为来<xref:System.Nullable%601> <xref:System.Single>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-647">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 3.402823e38)  
);  
float? value = (float?)root.Element("Value");  
Console.WriteLine("Nullable Single: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>3.402823e38</Value>  
        </Root>  
Dim value As Nullable(Of Single) = CType(root.Element("Value"), Nullable(Of Single))  
Console.WriteLine("Nullable Single: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="c3714-648">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-648">This example produces the following output:</span></span>  
  
```  
Nullable Single: value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-649">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Single" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-649">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Single" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-650">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-650">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;TimeSpan&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;TimeSpan&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;TimeSpan&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-651">要强制转换为 <see cref="T:System.TimeSpan" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-651">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span></span></param>
        <summary><span data-ttu-id="c3714-652">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.TimeSpan" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-652">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-653">一个 <see cref="T:System.TimeSpan" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-653">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-654">包含时间跨度内容的属性或元素的值空间与持续时间内容密切相关, 如 ISO 8601 中所述。</span><span class="sxs-lookup"><span data-stu-id="c3714-654">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="c3714-655">在创建包含时间跨度内容的属性或元素时, 将根据 W3C 规范设置属性或元素值的格式。</span><span class="sxs-lookup"><span data-stu-id="c3714-655">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="c3714-656">有关更多详细信息, 请参阅 W3C 规范。</span><span class="sxs-lookup"><span data-stu-id="c3714-656">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="c3714-657">从特性或元素强制转换到<xref:System.Nullable%601>的<xref:System.TimeSpan>时, 行为是不严格的。</span><span class="sxs-lookup"><span data-stu-id="c3714-657">Behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="c3714-658">即使属性或元素值的格式设置与 W3C 规范的格式完全相同, 此值也会相应地转换<xref:System.Nullable%601>为<xref:System.TimeSpan>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-658">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="c3714-659">下面的示例创建一个具有时间跨度内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-659">The following example creates an element with time span content.</span></span> <span data-ttu-id="c3714-660">然后, 它通过强制转换为来<xref:System.Nullable%601> <xref:System.TimeSpan>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-660">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new TimeSpan(1, 5, 30))  
);  
TimeSpan? value = (TimeSpan?)root.Element("Value");  
Console.WriteLine("Nullable TimeSpan: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Value><%= New TimeSpan(1, 5, 30) %></Value>  
    </Root>  
Dim value As Nullable(Of TimeSpan) = CType(root.Element("Value"), Nullable(Of TimeSpan))  
Console.WriteLine("Nullable TimeSpan: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="c3714-661">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-661">This example produces the following output:</span></span>  
  
```  
Nullable TimeSpan: value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-662">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.TimeSpan" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-662">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.TimeSpan" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-663">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-663">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;uint&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt32&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;uint32&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-664">要强制转换为 <see cref="T:System.UInt32" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-664">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span></span></param>
        <summary><span data-ttu-id="c3714-665">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.UInt32" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-665">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-666">一个 <see cref="T:System.UInt32" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-666">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="c3714-667">下面的示例创建一个具有无符号整数内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-667">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="c3714-668">然后, 它通过强制转换为来<xref:System.Nullable%601> <xref:System.UInt32>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-668">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 4294967295)  
);  
uint? value = (uint?)root.Element("Value");  
Console.WriteLine("Nullable uint: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>4294967295</Value>  
        </Root>  
Dim value As Nullable(Of UInteger) = CType(root.Element("Value"), Nullable(Of UInteger))  
Console.WriteLine("Nullable uint: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="c3714-669">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-669">This example produces the following output:</span></span>  
  
```  
Nullable uint: value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-670">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.UInt32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-670">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.UInt32" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-671">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-671">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;ulong&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt64&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;uint64&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-672">要强制转换为 <see cref="T:System.UInt64" /> 的 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-672">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span></span></param>
        <summary><span data-ttu-id="c3714-673">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.UInt64" /> 的 <see cref="T:System.Nullable`1" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-673">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-674">一个 <see cref="T:System.UInt64" /> 的 <see cref="T:System.Nullable`1" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-674">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="c3714-675">下面的示例创建一个元素, 该元素具有无符号长整数内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-675">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="c3714-676">然后, 它通过强制转换为来<xref:System.Nullable%601> <xref:System.UInt64>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-676">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="c3714-677">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-677">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-678">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.UInt64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-678">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.UInt64" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-679">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-679">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; single" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-680">要强制转换为 <see cref="T:System.Single" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-680">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Single" />.</span></span></param>
        <summary><span data-ttu-id="c3714-681">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.Single" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-681">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-682">一个 <see cref="T:System.Single" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-682">A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="c3714-683">下面的示例创建一个具有单精度浮点数内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-683">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="c3714-684">然后, 它通过强制转换为来<xref:System.Single>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-684">It then retrieves the value by casting to <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 3.402823e38);  
float value = (float)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>3.402823E+38</Root>  
Dim value As Single = CSng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="c3714-685">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-685">This example produces the following output:</span></span>  
  
```  
value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-686">元素不包含有效的 <see cref="T:System.Single" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-686">The element does not contain a valid <see cref="T:System.Single" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-687"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-687">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-688">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-688">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator string (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname string op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::String ^(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; string" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-689">要强制转换为 <see cref="T:System.String" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-689">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="c3714-690">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-690">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-691">一个 <see cref="T:System.String" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-691">A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-692"><xref:System.Xml.Linq.XElement>如果有子级, 则返回该元素的所有文本和子代文本的连接字符串值。</span><span class="sxs-lookup"><span data-stu-id="c3714-692">If the <xref:System.Xml.Linq.XElement> has children, the concatenated string value of all of the element's text and descendant's text is returned.</span></span>  
  
## Examples  
 <span data-ttu-id="c3714-693">下面的示例创建一个包含字符串内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-693">The following example creates an element with string content.</span></span> <span data-ttu-id="c3714-694">然后, 它通过强制转换为来<xref:System.String>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-694">It then retrieves the value by casting to <xref:System.String>.</span></span>  
  
```csharp  
XElement root = XElement.Parse("<Root>abc <b>def </b>ghi</Root>");  
Console.WriteLine("(string)root={0}", (string)root);  
```  
  
```vb  
Dim root As XElement = <Root>abc <b>def </b>ghi</Root>  
Console.WriteLine("(string)root={0}", root.Value)  
```  
  
 <span data-ttu-id="c3714-695">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-695">This example produces the following output:</span></span>  
  
```  
(string)root=abc def ghi  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-696">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-696">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator TimeSpan (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator TimeSpan(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; TimeSpan" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-697">要强制转换为 <see cref="T:System.TimeSpan" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-697">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.TimeSpan" />.</span></span></param>
        <summary><span data-ttu-id="c3714-698">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-698">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.TimeSpan" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-699">一个 <see cref="T:System.TimeSpan" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-699">A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-700">包含时间跨度内容的属性或元素的值空间与持续时间内容密切相关, 如 ISO 8601 中所述。</span><span class="sxs-lookup"><span data-stu-id="c3714-700">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="c3714-701">在创建包含时间跨度内容的属性或元素时, 将根据 W3C 规范设置属性或元素值的格式。</span><span class="sxs-lookup"><span data-stu-id="c3714-701">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="c3714-702">有关更多详细信息, 请参阅 W3C 规范。</span><span class="sxs-lookup"><span data-stu-id="c3714-702">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="c3714-703"><xref:System.TimeSpan>从特性或元素强制转换为时, 行为是不严格的。</span><span class="sxs-lookup"><span data-stu-id="c3714-703">Behavior is lax when casting to a <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="c3714-704">即使属性或元素值的格式设置与 W3C 规范的格式完全相同, 此值也会相应地转换<xref:System.TimeSpan>为。</span><span class="sxs-lookup"><span data-stu-id="c3714-704">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="c3714-705">下面的示例创建一个具有时间跨度内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-705">The following example creates an element with time span content.</span></span> <span data-ttu-id="c3714-706">然后, 它通过强制转换为来<xref:System.TimeSpan>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-706">It then retrieves the value by casting to <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new TimeSpan(1, 5, 30));  
TimeSpan value = (TimeSpan)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New TimeSpan(1, 5, 30) %></Root>  
Dim value As TimeSpan = CType(root, TimeSpan)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="c3714-707">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-707">This example produces the following output:</span></span>  
  
```  
value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-708">元素不包含有效的 <see cref="T:System.TimeSpan" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-708">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-709"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-709">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-710">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-710">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; uint32" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-711">要强制转换为 <see cref="T:System.UInt32" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-711">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt32" />.</span></span></param>
        <summary><span data-ttu-id="c3714-712">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.UInt32" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-712">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-713">一个 <see cref="T:System.UInt32" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-713">A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="c3714-714">下面的示例创建一个具有无符号整数内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-714">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="c3714-715">然后, 它通过强制转换为来<xref:System.UInt32>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-715">It then retrieves the value by casting to <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 4294967295);  
uint value = (uint)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>4294967295</Root>  
Dim value As UInteger = CUInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="c3714-716">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-716">This example produces the following output:</span></span>  
  
```  
value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-717">元素不包含有效的 <see cref="T:System.UInt32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-717">The element does not contain a valid <see cref="T:System.UInt32" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-718"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-718">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-719">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-719">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; uint64" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="c3714-720">要强制转换为 <see cref="T:System.UInt64" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-720">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt64" />.</span></span></param>
        <summary><span data-ttu-id="c3714-721">将此 <see cref="T:System.Xml.Linq.XElement" /> 的值强制转换为 <see cref="T:System.UInt64" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-721">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="c3714-722">一个 <see cref="T:System.UInt64" />，其中包含此 <see cref="T:System.Xml.Linq.XElement" /> 的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-722">A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="c3714-723">下面的示例创建一个元素, 该元素具有无符号长整数内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-723">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="c3714-724">然后, 它通过强制转换为来<xref:System.UInt64>检索值。</span><span class="sxs-lookup"><span data-stu-id="c3714-724">It then retrieves the value by casting to <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 18446744073709551615);  
ulong value = (ulong)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>18446744073709551615</Root>  
Dim value As ULong = CULng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="c3714-725">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-725">This example produces the following output:</span></span>  
  
```  
value=18446744073709551615  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c3714-726">元素不包含有效的 <see cref="T:System.UInt64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c3714-726">The element does not contain a valid <see cref="T:System.UInt64" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-727"><paramref name="element" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-727">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-728">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-728">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3714-729">从包含 XML 的字符串加载 <see cref="T:System.Xml.Linq.XElement" />，还可以选择保留空白和行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-729">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-730">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-730">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Parse text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="c3714-731">一个包含 XML 的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-731">A <see cref="T:System.String" /> that contains XML.</span></span></param>
        <summary><span data-ttu-id="c3714-732">从包含 XML 的字符串加载 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-732">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML.</span></span></summary>
        <returns><span data-ttu-id="c3714-733">一个使用包含 XML 的字符串填充的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-733">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-734">此方法不保留空格。</span><span class="sxs-lookup"><span data-stu-id="c3714-734">This method does not preserve white space.</span></span> <span data-ttu-id="c3714-735">如果要保留 XML 树中的空白, 请使用采用<xref:System.Xml.Linq.XElement.Parse%2A> <xref:System.Xml.Linq.LoadOptions>作为参数的方法的重载。</span><span class="sxs-lookup"><span data-stu-id="c3714-735">If you want to preserve white space in the XML tree, use the overload of the <xref:System.Xml.Linq.XElement.Parse%2A> method that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span> <span data-ttu-id="c3714-736">有关详细信息, 请参阅在[加载或分析 XML 时保留空白](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d), 并[在序列化时保留空白区域](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="c3714-736">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="c3714-737">LINQ to XML 的加载功能是基于生成<xref:System.Xml.XmlReader>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-737">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-738">因此, 你可能会捕获<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>重载方法所引发的任何异常<xref:System.Xml.XmlReader>和读取和分析文档的方法。</span><span class="sxs-lookup"><span data-stu-id="c3714-738">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-739">下面的示例创建一个包含 XML 的字符串。</span><span class="sxs-lookup"><span data-stu-id="c3714-739">The following example creates a string that contains XML.</span></span> <span data-ttu-id="c3714-740">然后, 将该字符串分析为<xref:System.Xml.Linq.XElement>。</span><span class="sxs-lookup"><span data-stu-id="c3714-740">It then parses the string into an <xref:System.Xml.Linq.XElement>.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root> <Child> </Child> </Root>");  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = <Root><Child></Child></Root>  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="c3714-741">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-741">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child></Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-742">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-742">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Parse (text, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="c3714-743">一个包含 XML 的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-743">A <see cref="T:System.String" /> that contains XML.</span></span></param>
        <param name="options"><span data-ttu-id="c3714-744">一个 <see cref="T:System.Xml.Linq.LoadOptions" />，指定空白行为以及是否加载基 URI 和行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-744">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="c3714-745">从包含 XML 的字符串加载 <see cref="T:System.Xml.Linq.XElement" />，还可以选择保留空白和行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-745">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="c3714-746">一个使用包含 XML 的字符串填充的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-746">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-747">如果源 xml 已缩进, 则在<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>中`options`设置标志将导致读取器读取源 xml 中的所有空格。</span><span class="sxs-lookup"><span data-stu-id="c3714-747">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="c3714-748">为有效空白<xref:System.Xml.Linq.XText>和无意义空白创建类型的节点。</span><span class="sxs-lookup"><span data-stu-id="c3714-748">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="c3714-749">如果源 xml 已缩进, 则未在<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>中`options`设置标志将导致读取器忽略源 xml 中所有无意义的空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-749">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="c3714-750">创建 XML 树时无需任何文本节点, 无意义的空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-750">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="c3714-751">如果未缩进源 XML, 则在中<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> `options`设置标志不起作用。</span><span class="sxs-lookup"><span data-stu-id="c3714-751">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="c3714-752">仍保留了有效空白, 并且不存在任何可能导致创建更多空白文本节点的无意义空白区域。</span><span class="sxs-lookup"><span data-stu-id="c3714-752">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="c3714-753">有关详细信息, 请参阅在[加载或分析 XML 时保留空白](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d), 并[在序列化时保留空白区域](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="c3714-753">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="c3714-754"><xref:System.Xml.Linq.LoadOptions.SetBaseUri> 在<xref:System.String>从分析时, 设置将不起作用。</span><span class="sxs-lookup"><span data-stu-id="c3714-754">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when parsing from a <xref:System.String>.</span></span>  
  
 <span data-ttu-id="c3714-755"><xref:System.Xml.XmlReader>可能有有效的行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-755">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="c3714-756">如果设置<xref:System.Xml.Linq.LoadOptions.SetLineInfo>了, 则将从报告<xref:System.Xml.XmlReader>的行信息在 XML 树中设置行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-756">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="c3714-757">如果设置了<xref:System.Xml.Linq.LoadOptions.SetLineInfo>标志, 则会对性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="c3714-757">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="c3714-758">行信息在加载 XML 文档后立即准确无误。</span><span class="sxs-lookup"><span data-stu-id="c3714-758">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="c3714-759">如果在加载文档后修改 XML 树, 行信息可能会变得毫无意义。</span><span class="sxs-lookup"><span data-stu-id="c3714-759">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="c3714-760">LINQ to XML 的加载功能是基于生成<xref:System.Xml.XmlReader>的。</span><span class="sxs-lookup"><span data-stu-id="c3714-760">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="c3714-761">因此, 你可能会捕获<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>重载方法所引发的任何异常<xref:System.Xml.XmlReader>和读取和分析文档的方法。</span><span class="sxs-lookup"><span data-stu-id="c3714-761">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-762">下面的示例通过两种不同的<xref:System.Xml.Linq.XElement>方式将字符串分析为: 保留空白和不保留空格。</span><span class="sxs-lookup"><span data-stu-id="c3714-762">The following example parses a string into an <xref:System.Xml.Linq.XElement> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="c3714-763">然后, 它使用查询来确定生成的 XML 树中的空白节点数。</span><span class="sxs-lookup"><span data-stu-id="c3714-763">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
int whiteSpaceNodes;  
  
XElement xmlTree1 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}",  
    whiteSpaceNodes);  
  
XElement xmlTree2 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}",  
    whiteSpaceNodes);  
```  
  
```vb  
Dim whiteSpaceNodes As Integer  
  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.None)  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree2 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="c3714-764">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-764">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="c3714-765">下面的示例在分析字符串时保留行信息。</span><span class="sxs-lookup"><span data-stu-id="c3714-765">The following example retains line information as it parses the string.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
XElement xRoot = XElement.Parse(markup, LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in xRoot.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim markup As String = _  
"<Root>" & Environment.NewLine & _  
"    <Child>" & Environment.NewLine & _  
"        <GrandChild/>" & Environment.NewLine & _  
"    </Child>" & Environment.NewLine & _  
"</Root>"  
  
Dim xRoot As XElement = XElement.Parse(markup, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In xRoot.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
        DirectCast(e, IXmlLineInfo).LinePosition)  
Next  
```  
  
 <span data-ttu-id="c3714-766">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-766">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-767">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-767">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : unit -&gt; unit" Usage="xElement.RemoveAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3714-768">从此 <see cref="T:System.Xml.Linq.XElement" /> 中移除节点和属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-768">Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-769">此方法将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-769">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-770">下面的示例创建一个具有属性和子元素的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-770">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="c3714-771">然后, 它调用此方法以删除属性和子元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-771">It then calls this method to remove both the attributes and the child elements.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAll();   // removes children elements and attributes of root  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root Attr1="1" Attr2="2" Attr3="3">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
  
root.RemoveAll()   ' removes children elements and attributes of root  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-772">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-772">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-773">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-773">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveAttributes">
      <MemberSignature Language="C#" Value="public void RemoveAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAttributes();" />
      <MemberSignature Language="F#" Value="member this.RemoveAttributes : unit -&gt; unit" Usage="xElement.RemoveAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3714-774">移除此 <see cref="T:System.Xml.Linq.XElement" /> 的属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-774">Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-775">此方法将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-775">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-776">下面的示例创建一个具有属性和子元素的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-776">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="c3714-777">然后, 它调用此方法以删除这些属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-777">It then calls this method to remove the attributes.</span></span> <span data-ttu-id="c3714-778">子元素保留。</span><span class="sxs-lookup"><span data-stu-id="c3714-778">The child elements remain.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAttributes();  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root Attr1="1" Attr2="2" Attr3="3">  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <Child3>3</Child3>  
     </Root>  
  
root.RemoveAttributes()  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-779">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-779">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</Root>   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAll" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-780">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-780">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAll">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3714-781">使用指定的内容替换此元素的子节点和属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-781">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-782">此方法使用快照语义, 也就是说, 它会在将当前元素的内容替换为新内容之前创建新内容的单独副本。</span><span class="sxs-lookup"><span data-stu-id="c3714-782">This method uses snapshot semantics - that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="c3714-783">这意味着你可以查询当前元素的内容, 并使用查询结果作为指定的新内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-783">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="c3714-784">有关可传递到此函数的有效内容的详细信息, 请参阅[system.xml.linq.xelement> 和 XDocument 对象的有效内容](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="c3714-784">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c3714-785">此方法将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-785">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-786">下面的示例将 LINQ 查询的结果传递给此方法, 并将元素的内容替换为查询结果。</span><span class="sxs-lookup"><span data-stu-id="c3714-786">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span> <span data-ttu-id="c3714-787">它将查询替换其内容的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-787">It queries the element that is having its contents replaced.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Data", 1),  
    new XElement("Data", 2),  
    new XElement("Data", 3),  
    new XElement("Data", 4),  
    new XElement("Data", 5)  
);  
  
Console.WriteLine(xmlTree);  
Console.WriteLine("-----");  
  
xmlTree.ReplaceAll(  
    from el in xmlTree.Elements()  
    where (int)el >= 3  
    select new XElement("NewData", (int)el)  
);  
  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Data>1</Data>  
        <Data>2</Data>  
        <Data>3</Data>  
        <Data>4</Data>  
        <Data>5</Data>  
    </Root>  
  
Console.WriteLine(xmlTree)  
Console.WriteLine("-----")  
  
xmlTree.ReplaceAll( _  
    From el In xmlTree.Elements _  
    Where el.Value >= 3 _  
    Select <NewData><%= el.Value %></NewData> _  
)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="c3714-788">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-788">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Data>1</Data>  
  <Data>2</Data>  
  <Data>3</Data>  
  <Data>4</Data>  
  <Data>5</Data>  
</Root>  
-----  
<Root>  
  <NewData>3</NewData>  
  <NewData>4</NewData>  
  <NewData>5</NewData>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-789">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-789">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(System::Object ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceAll : obj -&gt; unit" Usage="xElement.ReplaceAll content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="c3714-790">替换此元素的子节点和属性时将使用的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-790">The content that will replace the child nodes and attributes of this element.</span></span></param>
        <summary><span data-ttu-id="c3714-791">使用指定的内容替换此元素的子节点和属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-791">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-792">此方法首先删除现有内容和属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-792">This method first removes existing content and attributes.</span></span> <span data-ttu-id="c3714-793">然后添加指定`content`的。</span><span class="sxs-lookup"><span data-stu-id="c3714-793">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="c3714-794">此方法使用快照语义, 也就是说, 它会在将当前元素的内容替换为新内容之前创建新内容的单独副本。</span><span class="sxs-lookup"><span data-stu-id="c3714-794">This method uses snapshot semantics - that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="c3714-795">这意味着你可以查询当前元素的内容, 并使用查询结果作为指定的新内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-795">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="c3714-796">有关可传递到此函数的有效内容的详细信息, 请参阅[system.xml.linq.xelement> 和 XDocument 对象的有效内容](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="c3714-796">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c3714-797">此方法将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-797">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-798">下面的示例使用此方法。</span><span class="sxs-lookup"><span data-stu-id="c3714-798">The following example uses this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
// ReplaceAll with an XElement object.  
root.ReplaceAll(new XElement("NewChild", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with an XAttribute object.  
root.ReplaceAll(new XAttribute("NewAttribute", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with a string.  
root.ReplaceAll("Some text");  
Console.WriteLine(root);  
  
// ReplaceAll with a double.  
double dbl = 12.345;  
root.ReplaceAll(dbl);  
Console.WriteLine(root);  
  
// ReplaceAll with a DateTime object.  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root.ReplaceAll(dt);  
Console.WriteLine(root);  
  
// ReplaceAll with a string array.  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root.ReplaceAll(stringArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XElement objects.  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root.ReplaceAll(ellArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XAttribute objects.  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root.ReplaceAll(attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>child content</Child>  
    </Root>  
  
' ReplaceAll with an XElement object.  
root.ReplaceAll(<NewChild>n</NewChild>)  
Console.WriteLine(root)  
  
' ReplaceAll with an XAttribute object.  
root.ReplaceAll(New XAttribute("NewAttribute", "n"))  
Console.WriteLine(root)  
  
' ReplaceAll with a string.  
root.ReplaceAll("Some text")  
Console.WriteLine(root)  
  
' ReplaceAll with a double.  
Dim dbl As Double = 12.345  
root.ReplaceAll(dbl)  
Console.WriteLine(root)  
  
' ReplaceAll with a DateTime object.  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root.ReplaceAll(dt)  
Console.WriteLine(root)  
  
' ReplaceAll with a string array.  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root.ReplaceAll(stringArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XElement objects.  
Dim ellArray As XElement() = { _  
    New XElement("NewChild1", 1), _  
    New XElement("NewChild2", 2), _  
    New XElement("NewChild3", 3) _  
}  
root.ReplaceAll(ellArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XAttribute objects.  
Dim attArray As XAttribute() = { _  
New XAttribute("NewAtt1", 1), _  
New XAttribute("NewAtt2", 2), _  
New XAttribute("NewAtt3", 3) _  
}  
root.ReplaceAll(attArray)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-799">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-799">This example produces the following output:</span></span>  
  
```  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>Some text</Root>  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-800">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-800">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceAll : obj[] -&gt; unit" Usage="xElement.ReplaceAll content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="c3714-801">内容对象的参数列表。</span><span class="sxs-lookup"><span data-stu-id="c3714-801">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="c3714-802">使用指定的内容替换此元素的子节点和属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-802">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-803">此方法首先删除现有内容和属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-803">This method first removes existing content and attributes.</span></span> <span data-ttu-id="c3714-804">然后添加指定`content`的。</span><span class="sxs-lookup"><span data-stu-id="c3714-804">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="c3714-805">此方法使用快照语义, 也就是说, 它会在将当前元素的内容替换为新内容之前创建新内容的单独副本。</span><span class="sxs-lookup"><span data-stu-id="c3714-805">This method uses snapshot semantics - that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="c3714-806">这意味着你可以查询当前元素的内容, 并使用查询结果作为指定的新内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-806">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="c3714-807">有关可传递到此函数的有效内容的详细信息, 请参阅[system.xml.linq.xelement> 和 XDocument 对象的有效内容](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="c3714-807">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c3714-808">此方法将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-808">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-809">下面的示例将 LINQ 查询的结果传递给此方法, 并将元素的内容替换为查询结果。</span><span class="sxs-lookup"><span data-stu-id="c3714-809">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
root.ReplaceAll(  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim root As XElement = <Root>  
                           <Child>child content</Child>  
                       </Root>  
  
root.ReplaceAll( _  
    From el In xmlTree1.Elements() _  
    Where el.Value >= 3 And el.Value <= 5 _  
    Select el _  
)  
  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-810">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-810">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-811">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-811">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3714-812">使用指定的内容替换此元素的属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-812">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-813">此方法将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-813">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="c3714-814">有关可传递到此函数的有效内容的详细信息, 请参阅[system.xml.linq.xelement> 和 XDocument 对象的有效内容](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="c3714-814">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-815">下面的示例创建一个具有三个属性的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-815">The following example creates an element with three attributes.</span></span> <span data-ttu-id="c3714-816">然后, 它使用此方法将该元素的所有属性替换为单个属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-816">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-817">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-817">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-818">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-818">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(System::Object ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceAttributes : obj -&gt; unit" Usage="xElement.ReplaceAttributes content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="c3714-819">替换此元素的属性时将使用的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-819">The content that will replace the attributes of this element.</span></span></param>
        <summary><span data-ttu-id="c3714-820">使用指定的内容替换此元素的属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-820">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-821">此方法首先删除现有属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-821">This method first removes existing attributes.</span></span> <span data-ttu-id="c3714-822">然后添加指定`content`的。</span><span class="sxs-lookup"><span data-stu-id="c3714-822">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="c3714-823">有关可传递到此函数的有效内容的详细信息, 请参阅[system.xml.linq.xelement> 和 XDocument 对象的有效内容](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="c3714-823">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c3714-824">此方法将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-824">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-825">下面的示例创建一个具有三个属性的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-825">The following example creates an element with three attributes.</span></span> <span data-ttu-id="c3714-826">然后, 它使用此方法将该元素的所有属性替换为单个属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-826">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-827">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-827">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-828">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-828">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceAttributes : obj[] -&gt; unit" Usage="xElement.ReplaceAttributes content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="c3714-829">内容对象的参数列表。</span><span class="sxs-lookup"><span data-stu-id="c3714-829">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="c3714-830">使用指定的内容替换此元素的属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-830">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-831">此方法首先删除现有属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-831">This method first removes existing attributes.</span></span> <span data-ttu-id="c3714-832">然后添加指定`content`的。</span><span class="sxs-lookup"><span data-stu-id="c3714-832">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="c3714-833">有关可传递到此函数的有效内容的详细信息, 请参阅[system.xml.linq.xelement> 和 XDocument 对象的有效内容](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="c3714-833">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c3714-834">此方法将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-834">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-835">下面的示例创建一个具有三个属性的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-835">The following example creates an element with three attributes.</span></span> <span data-ttu-id="c3714-836">然后, 将属性替换为其他特性。</span><span class="sxs-lookup"><span data-stu-id="c3714-836">It then replaces the attributes with other attributes.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101),  
    new XAttribute("NewAtt2", 102),  
    new XAttribute("NewAtt3", 103)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes( _  
New XAttribute("NewAtt1", 101), _  
New XAttribute("NewAtt2", 102), _  
New XAttribute("NewAtt3", 103))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-837">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-837">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" NewAtt2="102" NewAtt3="103" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-838">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-838">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3714-839">序列化此元素的基础 XML 树。</span><span class="sxs-lookup"><span data-stu-id="c3714-839">Serialize this element's underlying XML tree.</span></span> <span data-ttu-id="c3714-840">可以将输出保存到文件、<see cref="T:System.Xml.XmlTextWriter" />、<see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-840">The output can be saved to a file, an <see cref="T:System.Xml.XmlTextWriter" />, a <see cref="T:System.IO.TextWriter" />, or an <see cref="T:System.Xml.XmlWriter" />.</span></span> <span data-ttu-id="c3714-841">还可以禁用格式设置（缩进）。</span><span class="sxs-lookup"><span data-stu-id="c3714-841">Optionally, formatting (indenting) can be disabled.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-842">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-842">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream -&gt; unit" Usage="xElement.Save stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3714-843">将此 <see cref="T:System.Xml.Linq.XElement" /> 输出到的流。</span><span class="sxs-lookup"><span data-stu-id="c3714-843">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span></span></param>
        <summary><span data-ttu-id="c3714-844">将此 <see cref="T:System.Xml.Linq.XElement" /> 输出到指定的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-844">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-845">将缩进序列化的 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-845">The serialized XML will be indented.</span></span> <span data-ttu-id="c3714-846">将删除所有无意义的空白, 并会添加额外的空白, 以便正确缩进 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-846">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="c3714-847">此方法的行为是不会保留无意义的空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-847">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="c3714-848">如果要控制空白, 请使用<xref:System.Xml.Linq.XElement.Save%2A> <xref:System.Xml.Linq.SaveOptions>作为参数的的重载。</span><span class="sxs-lookup"><span data-stu-id="c3714-848">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="c3714-849"><xref:System.Xml.Linq.SaveOptions.DisableFormatting>使用选项保存未缩进的 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-849">Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML.</span></span> <span data-ttu-id="c3714-850">这将导致编写器完全按 XML 树中的表示形式写入所有空格。</span><span class="sxs-lookup"><span data-stu-id="c3714-850">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="c3714-851">如果要删除重复的命名空间声明, 请使用选项。<xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces></span><span class="sxs-lookup"><span data-stu-id="c3714-851">Use the <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter -&gt; unit" Usage="xElement.Save textWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="textWriter"><span data-ttu-id="c3714-852">将向其中写入 <see cref="T:System.IO.TextWriter" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-852">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span></span></param>
        <summary><span data-ttu-id="c3714-853">将此元素序列化为 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-853">Serialize this element to a <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-854">将缩进序列化的 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-854">The serialized XML will be indented.</span></span> <span data-ttu-id="c3714-855">将删除所有无意义的空白, 并会添加额外的空白, 以便正确缩进 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-855">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="c3714-856">此方法的行为是不会保留空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-856">The behavior of this method is that white space will not be preserved.</span></span>  
  
 <span data-ttu-id="c3714-857">如果要控制空白, 请使用<xref:System.Xml.Linq.XElement.Save%2A>的重载, 以便将指定<xref:System.Xml.Linq.SaveOptions>为参数。</span><span class="sxs-lookup"><span data-stu-id="c3714-857">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="c3714-858">有关详细信息, 请参阅在[加载或分析 XML 时保留空白](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d), 并[在序列化时保留空白区域](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="c3714-858">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-859">下面的示例创建一个<xref:System.Xml.Linq.XElement>, 将文档保存<xref:System.IO.StringWriter>到, 然后将该字符串打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="c3714-859">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
using (StringWriter sw = new StringWriter()) {  
    root.Save(sw);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
Using sw = New StringWriter()  
    root.Save(sw)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="c3714-860">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-860">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-861">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-861">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="xElement.Save fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="c3714-862">一个包含文件名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-862">A <see cref="T:System.String" /> that contains the name of the file.</span></span></param>
        <summary><span data-ttu-id="c3714-863">将此元素序列化为文件。</span><span class="sxs-lookup"><span data-stu-id="c3714-863">Serialize this element to a file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-864">将缩进序列化的 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-864">The serialized XML will be indented.</span></span> <span data-ttu-id="c3714-865">将删除所有无意义的空白, 并会添加额外的空白, 以便正确缩进 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-865">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="c3714-866">此方法的行为是不会保留 XML 树中无意义的空白节点。</span><span class="sxs-lookup"><span data-stu-id="c3714-866">The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</span></span>  
  
 <span data-ttu-id="c3714-867">如果要控制空白, 请使用<xref:System.Xml.Linq.XElement.Save%2A>的重载, 以便将指定<xref:System.Xml.Linq.SaveOptions>为参数。</span><span class="sxs-lookup"><span data-stu-id="c3714-867">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="c3714-868">有关详细信息, 请参阅在[加载或分析 XML 时保留空白](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d), 并[在序列化时保留空白区域](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="c3714-868">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-869">下面的示例创建一个<xref:System.Xml.Linq.XElement>, 将文档保存到文件, 然后将文件打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="c3714-869">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a file, and then prints the file to the console.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.Save("Root.xml");  
string str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
root.Save("Root.xml")  
Dim Str As String = File.ReadAllText("Root.xml")  
Console.WriteLine(Str)  
```  
  
 <span data-ttu-id="c3714-870">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-870">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>child content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-871">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-871">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Save : System.Xml.XmlWriter -&gt; unit" Usage="xElement.Save writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3714-872">将向其中写入 <see cref="T:System.Xml.XmlWriter" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-872">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span></span></param>
        <summary><span data-ttu-id="c3714-873">将此元素序列化为 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-873">Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3714-874">下面的示例演示如何将一个 <xref:System.Xml.Linq.XElement> 保存到一个 <xref:System.Xml.XmlWriter>。</span><span class="sxs-lookup"><span data-stu-id="c3714-874">The following example shows how to save an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    XElement root = new XElement("Root",  
        new XElement("Child", "child content")  
    );  
    root.Save(xw);  
}  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
Using xw = XmlWriter.Create(sb, xws)  
    Dim root As XElement = <Root>  
                               <Child>child content</Child>  
                           </Root>  
    root.Save(xw)  
End Using  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="c3714-875">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-875">This example produces the following output:</span></span>  
  
```xml  
<Root><Child>child content</Child></Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-876">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-876">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xElement.Save (stream, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3714-877">将此 <see cref="T:System.Xml.Linq.XElement" /> 输出到的流。</span><span class="sxs-lookup"><span data-stu-id="c3714-877">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span></span></param>
        <param name="options"><span data-ttu-id="c3714-878">一个 <see cref="T:System.Xml.Linq.SaveOptions" /> 对象，该对象指定格式设置行为。</span><span class="sxs-lookup"><span data-stu-id="c3714-878">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="c3714-879">将此 <see cref="T:System.Xml.Linq.XElement" /> 输出到指定的 <see cref="T:System.IO.Stream" />，（可选）并指定格式设置行为。</span><span class="sxs-lookup"><span data-stu-id="c3714-879">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-880">默认情况下`options` , 设置为<xref:System.Xml.Linq.SaveOptions.None>。</span><span class="sxs-lookup"><span data-stu-id="c3714-880">By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>.</span></span> <span data-ttu-id="c3714-881">此选项将删除所有无关的无意义空格, 并添加适当的无意义空白, 以便正确缩进 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-881">This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span>  
  
 <span data-ttu-id="c3714-882">如果要保存未缩进的 XML, 请<xref:System.Xml.Linq.SaveOptions.DisableFormatting>指定的`options`标志。</span><span class="sxs-lookup"><span data-stu-id="c3714-882">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="c3714-883">这将导致编写器完全按 XML 树中的表示形式写入所有空格。</span><span class="sxs-lookup"><span data-stu-id="c3714-883">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="c3714-884">如果<xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces>要删除重复的命名空间声明, 请使用选项。</span><span class="sxs-lookup"><span data-stu-id="c3714-884">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xElement.Save (textWriter, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="textWriter"><span data-ttu-id="c3714-885">要将 XML 输出到的 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-885">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</span></span></param>
        <param name="options"><span data-ttu-id="c3714-886">指定格式设置行为的 <see cref="T:System.Xml.Linq.SaveOptions" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-886">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="c3714-887">将此元素序列化为 <see cref="T:System.IO.TextWriter" />，并可以选择禁用格式设置。</span><span class="sxs-lookup"><span data-stu-id="c3714-887">Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-888">如果要保存未缩进的 XML, 请<xref:System.Xml.Linq.SaveOptions.DisableFormatting>指定的`options`标志。</span><span class="sxs-lookup"><span data-stu-id="c3714-888">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="c3714-889">这将导致编写器完全按 XML 树中的表示方式写入所有空格。</span><span class="sxs-lookup"><span data-stu-id="c3714-889">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="c3714-890">如果要保存缩进的 XML, 请勿为<xref:System.Xml.Linq.SaveOptions.DisableFormatting> `options`指定标志。</span><span class="sxs-lookup"><span data-stu-id="c3714-890">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="c3714-891">这将删除所有无关的无意义空格, 并添加适当的无意义空白, 以便正确缩进 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-891">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="c3714-892">这是默认行为, 以及<xref:System.Xml.Linq.XElement.Save%2A> `options`不作为参数的方法的重载行为。</span><span class="sxs-lookup"><span data-stu-id="c3714-892">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="c3714-893">有关详细信息, 请参阅在[加载或分析 XML 时保留空白](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d), 并[在序列化时保留空白区域](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="c3714-893">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-894">下面的示例演示了此方法的两种用法。</span><span class="sxs-lookup"><span data-stu-id="c3714-894">The following example shows two uses of this method.</span></span> <span data-ttu-id="c3714-895">第一次使用将保留空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-895">The first use preserves white space.</span></span> <span data-ttu-id="c3714-896">第二个序列<xref:System.Xml.Linq.XElement>化和格式设置。</span><span class="sxs-lookup"><span data-stu-id="c3714-896">The second serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span> <span data-ttu-id="c3714-897">由于文档在构造中没有空白, 因此保留空白将输出 XML 而不进行任何缩进。</span><span class="sxs-lookup"><span data-stu-id="c3714-897">Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.DisableFormatting);  
    Console.WriteLine(sw.ToString());  
}  
  
Console.WriteLine("=====");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.None);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.DisableFormatting)  
    Console.WriteLine(sw.ToString())  
End Using  
  
Console.WriteLine("=====")  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.None)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="c3714-898">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-898">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-16"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-899">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-899">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String, options As SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : string * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xElement.Save (fileName, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="c3714-900">一个包含文件名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-900">A <see cref="T:System.String" /> that contains the name of the file.</span></span></param>
        <param name="options"><span data-ttu-id="c3714-901">指定格式设置行为的 <see cref="T:System.Xml.Linq.SaveOptions" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-901">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="c3714-902">将此元素序列化为文件，并可以选择禁用格式设置。</span><span class="sxs-lookup"><span data-stu-id="c3714-902">Serialize this element to a file, optionally disabling formatting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-903">如果要保存未缩进的 XML, 请<xref:System.Xml.Linq.SaveOptions.DisableFormatting>指定的`options`标志。</span><span class="sxs-lookup"><span data-stu-id="c3714-903">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="c3714-904">这将导致编写器完全按 XML 树中的表示方式写入所有空格。</span><span class="sxs-lookup"><span data-stu-id="c3714-904">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="c3714-905">如果要保存缩进的 XML, 请勿为<xref:System.Xml.Linq.SaveOptions.DisableFormatting> `options`指定标志。</span><span class="sxs-lookup"><span data-stu-id="c3714-905">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="c3714-906">这将删除所有无关的无意义空格, 并添加适当的无意义空白, 以便正确缩进 XML。</span><span class="sxs-lookup"><span data-stu-id="c3714-906">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="c3714-907">这是默认行为, 以及<xref:System.Xml.Linq.XElement.Save%2A> `options`不作为参数的方法的重载行为。</span><span class="sxs-lookup"><span data-stu-id="c3714-907">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="c3714-908">有关详细信息, 请参阅在[加载或分析 XML 时保留空白](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d), 并[在序列化时保留空白区域](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="c3714-908">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-909">下面的示例演示了此方法的两种用法。</span><span class="sxs-lookup"><span data-stu-id="c3714-909">The following example shows two uses of this method.</span></span> <span data-ttu-id="c3714-910">第一次使用将保留空白。</span><span class="sxs-lookup"><span data-stu-id="c3714-910">The first use preserves white space.</span></span> <span data-ttu-id="c3714-911">第二个序列化<xref:System.Xml.Linq.XElement> , 并将设置为格式。</span><span class="sxs-lookup"><span data-stu-id="c3714-911">The second one serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span>  
  
```csharp  
string str;  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
root.Save("Root.xml", SaveOptions.DisableFormatting);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
  
Console.WriteLine("=====");  
  
root.Save("Root.xml", SaveOptions.None);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim str As String  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
root.Save("Root.xml", SaveOptions.DisableFormatting)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
  
Console.WriteLine("=====")  
  
root.Save("Root.xml", SaveOptions.None)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
```  
  
 <span data-ttu-id="c3714-912">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-912">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-913">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-913">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xElement.SaveAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.IO.Stream * System.Xml.Linq.SaveOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xElement.SaveAsync (stream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.IO.TextWriter * System.Xml.Linq.SaveOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xElement.SaveAsync (textWriter, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="textWriter">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttributeValue">
      <MemberSignature Language="C#" Value="public void SetAttributeValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttributeValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttributeValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAttributeValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetAttributeValue : System.Xml.Linq.XName * obj -&gt; unit" Usage="xElement.SetAttributeValue (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3714-914">一个 <see cref="T:System.Xml.Linq.XName" />，其中包含要更改的属性的名称。</span><span class="sxs-lookup"><span data-stu-id="c3714-914">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.</span></span></param>
        <param name="value"><span data-ttu-id="c3714-915">分配给属性 (Attribute) 的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-915">The value to assign to the attribute.</span></span> <span data-ttu-id="c3714-916">如果该值为 <see langword="null" />，则移除该属性 (Attribute)。</span><span class="sxs-lookup"><span data-stu-id="c3714-916">The attribute is removed if the value is <see langword="null" />.</span></span> <span data-ttu-id="c3714-917">否则，会将值转换为其字符串表示形式，并分配给该属性 (Attribute) 的 <see cref="P:System.Xml.Linq.XAttribute.Value" /> 属性 (Property)。</span><span class="sxs-lookup"><span data-stu-id="c3714-917">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.</span></span></param>
        <summary><span data-ttu-id="c3714-918">设置属性的值、添加属性或移除属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-918">Sets the value of an attribute, adds an attribute, or removes an attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-919">此方法旨在使名称/值对的列表易于维护为一组属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-919">This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes.</span></span> <span data-ttu-id="c3714-920">维护列表时, 需要添加对、修改对或删除对。</span><span class="sxs-lookup"><span data-stu-id="c3714-920">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="c3714-921">如果调用此方法时将不存在的名称作为属性传递, 则此方法会为你创建一个属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-921">If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you.</span></span> <span data-ttu-id="c3714-922">如果调用此方法来传递现有属性的名称, 则此方法会将属性的值修改为你指定的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-922">If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify.</span></span> <span data-ttu-id="c3714-923">如果传递`null`了`value`, 则此方法将删除该特性。</span><span class="sxs-lookup"><span data-stu-id="c3714-923">If you pass `null` for `value`, this method removes the attribute.</span></span>  
  
 <span data-ttu-id="c3714-924">此方法将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-924">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="c3714-925">该值将分配给具有指定名称的属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-925">The value is assigned to the attribute with the specified name.</span></span> <span data-ttu-id="c3714-926">如果不存在具有指定名称的属性, 则添加新的属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-926">If no attribute with the specified name exists, a new attribute is added.</span></span> <span data-ttu-id="c3714-927">如果值为`null`, 则删除具有指定名称的属性 (如果有)。</span><span class="sxs-lookup"><span data-stu-id="c3714-927">If the value is `null`, the attribute with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="c3714-928">有关详细信息, 请参阅[维护名称/值对](https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)。</span><span class="sxs-lookup"><span data-stu-id="c3714-928">For more information, see [Maintaining Name/Value Pairs](https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-929">下面的示例创建一个具有特性的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-929">The following example creates an element with an attribute.</span></span> <span data-ttu-id="c3714-930">然后, 它使用此方法来替换属性的内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-930">It then uses this method to replace the content of the attribute.</span></span>  
  
```csharp  
// Create an element with no content.  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetAttributeValue("Att1", 1);  
root.SetAttributeValue("Att2", 2);  
root.SetAttributeValue("Att3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetAttributeValue("Att1", 1)  
root.SetAttributeValue("Att2", 2)  
root.SetAttributeValue("Att3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-931">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-931">This example produces the following output:</span></span>  
  
```  
<Root Att1="1" Att2="2" Att3="3" />  
<Root Att1="1" Att2="22" Att3="3" />  
<Root Att1="1" Att2="22" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3714-932"><paramref name="value" /> 是 <see cref="T:System.Xml.Linq.XObject" /> 的一个实例。</span><span class="sxs-lookup"><span data-stu-id="c3714-932">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-933">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-933">LINQ to XML</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691"><span data-ttu-id="c3714-934">维护名称/值对</span><span class="sxs-lookup"><span data-stu-id="c3714-934">Maintaining Name/Value Pairs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetElementValue">
      <MemberSignature Language="C#" Value="public void SetElementValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetElementValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetElementValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetElementValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetElementValue : System.Xml.Linq.XName * obj -&gt; unit" Usage="xElement.SetElementValue (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3714-935">一个 <see cref="T:System.Xml.Linq.XName" />，其中包含要更改的子元素的名称。</span><span class="sxs-lookup"><span data-stu-id="c3714-935">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.</span></span></param>
        <param name="value"><span data-ttu-id="c3714-936">要分配给子元素的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-936">The value to assign to the child element.</span></span> <span data-ttu-id="c3714-937">如果值为 <see langword="null" />，则移除子元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-937">The child element is removed if the value is <see langword="null" />.</span></span> <span data-ttu-id="c3714-938">否则，会将值转换为其字符串表示形式，并将该值分配给子元素的 <see cref="P:System.Xml.Linq.XElement.Value" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="c3714-938">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.</span></span></param>
        <summary><span data-ttu-id="c3714-939">设置子元素的值、添加子元素或移除子元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-939">Sets the value of a child element, adds a child element, or removes a child element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-940">此方法旨在使名称/值对的列表易于维护为一组子元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-940">This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements.</span></span> <span data-ttu-id="c3714-941">维护列表时, 需要添加对、修改对或删除对。</span><span class="sxs-lookup"><span data-stu-id="c3714-941">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="c3714-942">如果调用此方法时将不存在的名称传递为子元素, 则此方法将为您创建一个子元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-942">If you call this method passing a name that does not exist as a child element, this method creates a child element for you.</span></span> <span data-ttu-id="c3714-943">如果调用此方法来传递现有子元素的名称, 则此方法将子元素的值修改为你指定的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-943">If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify.</span></span> <span data-ttu-id="c3714-944">如果传递`null` `value`, 则此方法将移除子元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-944">If you pass `null` for `value`, this method removes the child element.</span></span>  
  
 <span data-ttu-id="c3714-945">此方法将引发事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-945">This method will raise events.</span></span>  
  
 <span data-ttu-id="c3714-946">该值将分配给具有指定名称的第一个子元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-946">The value is assigned to the first child element with the specified name.</span></span> <span data-ttu-id="c3714-947">如果不存在具有指定名称的子元素, 则添加新的子元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-947">If no child element with the specified name exists, a new child element is added.</span></span> <span data-ttu-id="c3714-948">如果该值为 null, 则删除具有指定名称的第一个子元素 (如果有)。</span><span class="sxs-lookup"><span data-stu-id="c3714-948">If the value is null, the first child element with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="c3714-949">此方法不会将子节点或特性添加到指定的子元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-949">This method does not add child nodes or attributes to the specified child element.</span></span> <span data-ttu-id="c3714-950">如果派生自<xref:System.Xml.Linq.XObject>的任何对象作为`value`传递, 则此方法将引发异常。</span><span class="sxs-lookup"><span data-stu-id="c3714-950">This method throws an exception if any object that derives from <xref:System.Xml.Linq.XObject> is passed as `value`.</span></span>  
  
 <span data-ttu-id="c3714-951">有关详细信息, 请参阅[维护名称/值对](https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)。</span><span class="sxs-lookup"><span data-stu-id="c3714-951">For more information, see [Maintaining Name/Value Pairs](https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-952">下面的示例创建一个具有子元素的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-952">The following example creates an element with a child element.</span></span> <span data-ttu-id="c3714-953">然后, 它使用此方法设置子元素的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-953">It then uses this method to set the value of the child element.</span></span>  
  
```csharp  
// Create an element with no content  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetElementValue("Ele1", 1);  
root.SetElementValue("Ele2", 2);  
root.SetElementValue("Ele3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetElementValue("Ele3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetElementValue("Ele1", 1)  
root.SetElementValue("Ele2", 2)  
root.SetElementValue("Ele3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetElementValue("Ele3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-954">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-954">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>2</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3714-955"><paramref name="value" /> 是 <see cref="T:System.Xml.Linq.XObject" /> 的一个实例。</span><span class="sxs-lookup"><span data-stu-id="c3714-955">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-956">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-956">LINQ to XML</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691"><span data-ttu-id="c3714-957">维护名称/值对</span><span class="sxs-lookup"><span data-stu-id="c3714-957">Maintaining Name/Value Pairs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj -&gt; unit" Usage="xElement.SetValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c3714-958">要分配给此元素的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-958">The value to assign to this element.</span></span> <span data-ttu-id="c3714-959">将值转换为其字符串表示形式，并将此值分配给 <see cref="P:System.Xml.Linq.XElement.Value" /> 属性 (Property)。</span><span class="sxs-lookup"><span data-stu-id="c3714-959">The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.</span></span></param>
        <summary><span data-ttu-id="c3714-960">设置此元素的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-960">Sets the value of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-961">此方法将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-961">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="c3714-962">传递派生自<xref:System.Xml.Linq.XObject>的类的实例 ( <xref:System.Xml.Linq.XElement>如) 是无效的。</span><span class="sxs-lookup"><span data-stu-id="c3714-962">It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-963">下面的示例创建一个包含子元素的元素。</span><span class="sxs-lookup"><span data-stu-id="c3714-963">The following example creates an element that contains a child element.</span></span> <span data-ttu-id="c3714-964">然后, 它使用此方法设置元素的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-964">It then sets the value of the element using this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.SetValue("new content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
  
root.SetValue("new content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c3714-965">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-965">This example produces the following output:</span></span>  
  
```xml  
<Root>new content</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3714-966"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-966">The <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3714-967"><paramref name="value" /> 是一个 <see cref="T:System.Xml.Linq.XObject" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-967">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-968">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-968">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3714-969">获取说明此对象的 XML 表示形式的 XML 方案定义。</span><span class="sxs-lookup"><span data-stu-id="c3714-969">Gets an XML schema definition that describes the XML representation of this object.</span></span></summary>
        <returns><span data-ttu-id="c3714-970">一个 <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。</span><span class="sxs-lookup"><span data-stu-id="c3714-970">An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-971">此方法是<xref:System.Xml.Serialization.IXmlSerializable>接口的实现的一部分。</span><span class="sxs-lookup"><span data-stu-id="c3714-971">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="c3714-972">此方法在内部使用, 用于序列化包含 LINQ to XML 对象的对象图。</span><span class="sxs-lookup"><span data-stu-id="c3714-972">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="c3714-973">有关序列化包含 LINQ to XML 对象的对象图的示例, 请参阅[序列化包含 System.xml.linq.xelement> 对象的对象图](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)。</span><span class="sxs-lookup"><span data-stu-id="c3714-973">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3714-974">从其中反序列化对象的 <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-974">The <see cref="T:System.Xml.XmlReader" /> from which the object is deserialized.</span></span></param>
        <summary><span data-ttu-id="c3714-975">从对象的 XML 表示形式生成该对象。</span><span class="sxs-lookup"><span data-stu-id="c3714-975">Generates an object from its XML representation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-976">此方法是<xref:System.Xml.Serialization.IXmlSerializable>接口的实现的一部分。</span><span class="sxs-lookup"><span data-stu-id="c3714-976">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="c3714-977">此方法在内部使用, 用于序列化包含 LINQ to XML 对象的对象图。</span><span class="sxs-lookup"><span data-stu-id="c3714-977">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="c3714-978">有关序列化包含 LINQ to XML 对象的对象图的示例, 请参阅[序列化包含 System.xml.linq.xelement> 对象的对象图](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)。</span><span class="sxs-lookup"><span data-stu-id="c3714-978">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3714-979">将此对象序列化到的 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-979">The <see cref="T:System.Xml.XmlWriter" /> to which this object is serialized.</span></span></param>
        <summary><span data-ttu-id="c3714-980">将对象转换为其 XML 表示形式。</span><span class="sxs-lookup"><span data-stu-id="c3714-980">Converts an object into its XML representation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-981">此方法在内部使用, 用于封送包含 LINQ to XML 对象的对象图。</span><span class="sxs-lookup"><span data-stu-id="c3714-981">This method is used internally for marshaling object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="c3714-982">有关序列化包含 LINQ to XML 对象的对象图的示例, 请参阅[序列化包含 System.xml.linq.xelement> 对象的对象图](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)。</span><span class="sxs-lookup"><span data-stu-id="c3714-982">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : string with get, set" Usage="System.Xml.Linq.XElement.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3714-983">获取或设置此元素的串连文本内容。</span><span class="sxs-lookup"><span data-stu-id="c3714-983">Gets or sets the concatenated text contents of this element.</span></span></summary>
        <value><span data-ttu-id="c3714-984">一个包含此元素所有文本内容的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-984">A <see cref="T:System.String" /> that contains all of the text content of this element.</span></span> <span data-ttu-id="c3714-985">如果有多个文本节点，则将其连接起来。</span><span class="sxs-lookup"><span data-stu-id="c3714-985">If there are multiple text nodes, they will be concatenated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3714-986">使用此属性, 可获取或设置元素的值。</span><span class="sxs-lookup"><span data-stu-id="c3714-986">Using this property, you can get or set the value of an element.</span></span>  
  
 <span data-ttu-id="c3714-987">设置此属性将引发<xref:System.Xml.Linq.XObject.Changed> <xref:System.Xml.Linq.XObject.Changing>和事件。</span><span class="sxs-lookup"><span data-stu-id="c3714-987">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="c3714-988">如果要获取某个元素的值, 但不确定该元素是否存在, 更方便的方法是使用显式转换运算符, 并将该元素分配给可以为 null 的类型 (如`string` <xref:System.Int32>或<xref:System.Nullable%601> )。</span><span class="sxs-lookup"><span data-stu-id="c3714-988">If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>.</span></span> <span data-ttu-id="c3714-989">如果该元素不存在, 则将可为 null 的类型`null`设置为。</span><span class="sxs-lookup"><span data-stu-id="c3714-989">If the element does not exist, the nullable type is set to `null`.</span></span> <span data-ttu-id="c3714-990">相反, 如果要使用此属性, 您必须确保在访问此属性之前该<xref:System.Xml.Linq.XContainer.Element%2A>方法不会返回`null` 。</span><span class="sxs-lookup"><span data-stu-id="c3714-990">By contrast, if you want to use this property, you must make sure that the <xref:System.Xml.Linq.XContainer.Element%2A> method does not return `null` before you access this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3714-991">下面的示例使用此属性来检索包含混合内容的元素的文本。</span><span class="sxs-lookup"><span data-stu-id="c3714-991">The following example uses this property to retrieve the text of an element with mixed content.</span></span>  
  
```csharp  
XElement el = XElement.Parse("<Root>This is <b>mixed</b> content</Root>");  
Console.WriteLine("{0}", el.Value);  
```  
  
```vb  
Dim el As XElement = <Root>This is <b>mixed</b> content</Root>  
Console.WriteLine("{0}", el.Value)  
```  
  
 <span data-ttu-id="c3714-992">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-992">This example produces the following output:</span></span>  
  
```  
This is mixed content  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-993">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-993">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.WriteTo : System.Xml.XmlWriter -&gt; unit" Usage="xElement.WriteTo writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3714-994">此方法将写入其中的 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-994">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span></span></param>
        <summary><span data-ttu-id="c3714-995">将此元素写入 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c3714-995">Write this element to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3714-996">下面的示例演示如何将写入<xref:System.Xml.Linq.XElement>。 <xref:System.Xml.XmlWriter></span><span class="sxs-lookup"><span data-stu-id="c3714-996">The following example shows how to write an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span> <span data-ttu-id="c3714-997">请注意, 该示例未编写 XML 声明。</span><span class="sxs-lookup"><span data-stu-id="c3714-997">Note that the example did not write an XML declaration.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    xw.WriteStartElement("Root");  
  
    XElement child1 = new XElement("Child",  
        new XElement("GrandChild", "some content")  
    );  
    child1.WriteTo(xw);  
  
    XElement child2 = new XElement("AnotherChild",  
        new XElement("GrandChild", "different content")  
    );  
    child2.WriteTo(xw);  
  
    xw.WriteEndElement();  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    xw.WriteStartElement("Root")  
    Dim child1 As XElement = _  
        <Child>  
            <GrandChild>some content</GrandChild>  
        </Child>  
    child1.WriteTo(xw)  
    Dim child2 As XElement = _   
        <AnotherChild>  
            <GrandChild>different content</GrandChild>  
        </AnotherChild>  
    child2.WriteTo(xw)  
    xw.WriteEndElement()  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="c3714-998">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c3714-998">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>  
    <GrandChild>some content</GrandChild>  
  </Child>  
  <AnotherChild>  
    <GrandChild>different content</GrandChild>  
  </AnotherChild>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="c3714-999">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="c3714-999">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteToAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xElement.WriteToAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

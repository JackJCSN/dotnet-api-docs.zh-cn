<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf2012e335df413aaa522b1750b6d9875179b228" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64235853" /></Metadata><TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <TypeSignature Language="F#" Value="type IHttpHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义 ASP.NET 为使用自定义 HTTP 处理程序同步处理 HTTP Web 请求而实现的协定。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以编写自定义 HTTP 处理程序来处理特定的预定义任何的类型公共语言规范 (CLS) 符合语言中的 HTTP 请求。 在中定义的可执行代码`HttpHandler`类，而不是传统的 ASP 或 ASP.NET Web 页，对这些特定请求的响应。 HTTP 处理程序为您提供一种与低级别的请求和响应服务的 IIS Web 服务器进行交互，并提供功能非常类似于 ISAPI 扩展，但更简单的编程模型。  
  
 如果您的处理程序将访问会话状态的值，它必须实现<xref:System.Web.SessionState.IRequiresSessionState>接口 （不包含方法的标记接口）。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示其他请求是否可以使用 <see cref="T:System.Web.IHttpHandler" /> 实例。</summary>
        <value>如果 <see cref="T:System.Web.IHttpHandler" /> 实例可再次使用，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 显式设置<xref:System.Web.IHttpHandler.IsReusable%2A>属性设置为`true`或`false`由你提供的重写的代码<xref:System.Web.IHttpHandler.IsReusable%2A>属性访问器 (getter)。  
  
   
  
## Examples  
 下面的代码示例将四行的文本写入到 HTTP 输出流中一个名为 handler.aspx 页的客户端请求的响应。 Handler.aspx 的所有请求提供都服务通过`MyHttpHandler`命名空间中的类`HandlerExample`包含在程序集中 HandlerTest.dll。  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="iHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context"><see cref="T:System.Web.HttpContext" /> 对象，该对象提供对用于为 HTTP 请求提供服务的内部服务器对象（如 <see langword="Request" />、<see langword="Response" />、<see langword="Session" /> 和 <see langword="Server" />）的引用。</param>
        <summary>通过实现 <see cref="T:System.Web.IHttpHandler" /> 接口的自定义 <see langword="HttpHandler" /> 启用 HTTP Web 请求的处理。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将您的自定义`HttpHandler`中的代码的<xref:System.Web.IHttpHandler.ProcessRequest%2A>虚拟方法，如下面的示例中所示。  
  
   
  
## Examples  
 下面的代码示例将四行的文本写入到 HTTP 输出流中一个名为 handler.aspx 页的客户端请求的响应。 Handler.aspx 的所有请求提供都服务通过`MyHttpHandler`命名空间中的类`HandlerExample`包含在程序集中 HandlerTest.dll。  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
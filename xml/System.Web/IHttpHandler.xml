<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e5655ad9711abf55e5f8999628a276496ace8de" /><Meta Name="ms.sourcegitcommit" Value="970510b397dd7c122a05b054df74369fba502071" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/25/2019" /><Meta Name="ms.locfileid" Value="67351874" /></Metadata><TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <TypeSignature Language="F#" Value="type IHttpHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4fab3-101">定义 ASP.NET 为使用自定义 HTTP 处理程序同步处理 HTTP Web 请求而实现的协定。</span><span class="sxs-lookup"><span data-stu-id="4fab3-101">Defines the contract that ASP.NET implements to synchronously process HTTP Web requests using custom HTTP handlers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fab3-102">您可以编写自定义 HTTP 处理程序来处理特定的预定义任何的类型公共语言规范 (CLS) 符合语言中的 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="4fab3-102">You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any Common Language Specification (CLS) compliant language.</span></span> <span data-ttu-id="4fab3-103">在中定义的可执行代码`HttpHandler`类，而不是传统的 ASP 或 ASP.NET Web 页，对这些特定请求的响应。</span><span class="sxs-lookup"><span data-stu-id="4fab3-103">Executable code defined in the `HttpHandler` classes, rather than conventional ASP or ASP.NET Web pages, responds to these specific requests.</span></span> <span data-ttu-id="4fab3-104">HTTP 处理程序为您提供一种与低级别的请求和响应服务的 IIS Web 服务器进行交互，并提供功能非常类似于 ISAPI 扩展，但更简单的编程模型。</span><span class="sxs-lookup"><span data-stu-id="4fab3-104">HTTP handlers give you a means of interacting with the low-level request and response services of the IIS Web server and provide functionality much like ISAPI extensions but with a simpler programming model.</span></span>  
  
 <span data-ttu-id="4fab3-105">如果您的处理程序将访问会话状态的值，它必须实现<xref:System.Web.SessionState.IRequiresSessionState>接口 （不包含方法的标记接口）。</span><span class="sxs-lookup"><span data-stu-id="4fab3-105">If your handler will access session state values, it must implement the <xref:System.Web.SessionState.IRequiresSessionState> interface (a marker interface with no methods).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fab3-106">获取一个值，该值指示其他请求是否可以使用 <see cref="T:System.Web.IHttpHandler" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="4fab3-106">Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</span></span></summary>
        <value><span data-ttu-id="4fab3-107">如果 <see cref="T:System.Web.IHttpHandler" /> 实例可再次使用，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4fab3-107"><see langword="true" /> if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fab3-108">显式设置<xref:System.Web.IHttpHandler.IsReusable%2A>属性设置为`true`或`false`由你提供的重写的代码<xref:System.Web.IHttpHandler.IsReusable%2A>属性访问器 (getter)。</span><span class="sxs-lookup"><span data-stu-id="4fab3-108">You explicitly set the <xref:System.Web.IHttpHandler.IsReusable%2A> property to `true` or `false` by code you provide that overrides the <xref:System.Web.IHttpHandler.IsReusable%2A> property accessor (getter).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fab3-109">下面的代码示例将四行的文本写入到 HTTP 输出流中一个名为 handler.aspx 页的客户端请求的响应。</span><span class="sxs-lookup"><span data-stu-id="4fab3-109">The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx.</span></span> <span data-ttu-id="4fab3-110">Handler.aspx 的所有请求提供都服务通过`MyHttpHandler`命名空间中的类`HandlerExample`包含在程序集中 HandlerTest.dll。</span><span class="sxs-lookup"><span data-stu-id="4fab3-110">All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.</span></span>  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="iHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="4fab3-111"><see cref="T:System.Web.HttpContext" /> 对象，该对象提供对用于为 HTTP 请求提供服务的内部服务器对象（如 <see langword="Request" />、<see langword="Response" />、<see langword="Session" /> 和 <see langword="Server" />）的引用。</span><span class="sxs-lookup"><span data-stu-id="4fab3-111">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, <see langword="Request" />, <see langword="Response" />, <see langword="Session" />, and <see langword="Server" />) used to service HTTP requests.</span></span></param>
        <summary><span data-ttu-id="4fab3-112">通过实现 <see cref="T:System.Web.IHttpHandler" /> 接口的自定义 <see langword="HttpHandler" /> 启用 HTTP Web 请求的处理。</span><span class="sxs-lookup"><span data-stu-id="4fab3-112">Enables processing of HTTP Web requests by a custom <see langword="HttpHandler" /> that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fab3-113">将您的自定义`HttpHandler`中的代码<xref:System.Web.IHttpHandler.ProcessRequest%2A>虚拟方法，如中所示[示例](#examples)部分。</span><span class="sxs-lookup"><span data-stu-id="4fab3-113">Place your custom `HttpHandler` code in the <xref:System.Web.IHttpHandler.ProcessRequest%2A> virtual method, as shown in the [Examples](#examples) section.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="4fab3-114">下面的代码示例将四行的文本写入到 HTTP 输出流中一个名为 handler.aspx 页的客户端请求的响应。</span><span class="sxs-lookup"><span data-stu-id="4fab3-114">The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx.</span></span> <span data-ttu-id="4fab3-115">Handler.aspx 的所有请求提供都服务通过`MyHttpHandler`命名空间中的类`HandlerExample`包含在程序集中 HandlerTest.dll。</span><span class="sxs-lookup"><span data-stu-id="4fab3-115">All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.</span></span>  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

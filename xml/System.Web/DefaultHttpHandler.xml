<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ab0a3879d8998d81018620266d617c4acd9861e3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69228317" /></Metadata><TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.DefaultHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultHttpHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultHttpHandler : System::Web::IHttpAsyncHandler" />
  <TypeSignature Language="F#" Value="type DefaultHttpHandler = class&#xA;    interface IHttpAsyncHandler&#xA;    interface IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.IHttpHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示默认 HTTP 处理程序的属性和方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当两个请求拦截都通过 Internet Information Services (IIS) 6.0 配置, 并且没有显式绑定适用于请求的扩展时,对象会截获HTTP管道中的传入请求。<xref:System.Web.DefaultHttpHandler>  
  
 可以通过 IIS 6.0 中引入的通配符应用程序映射功能设置请求拦截。 有关详细信息, 请在[MSDN library](https://go.microsoft.com/fwlink/?linkid=37118)中搜索有关使用通配符应用程序映射重新映射 URL 的信息。  
  
 <xref:System.Web.DefaultHttpHandler> 类<xref:System.Web.IHttpAsyncHandler>实现接口以提供异步请求处理。 有关 HTTP 处理程序的一般信息, 请参阅[Http 处理程序和 Http 模块概述](https://msdn.microsoft.com/library/f540bdeb-d22e-4e1d-ba8a-fe6c9926283b)。 此外, 有关详细信息, 请参阅以下内容:  
  
-   有关创建异步 HTTP 处理程序的[信息, 请参阅演练:创建异步 HTTP 处理程序](https://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9)。  
  
-   有关注册 HTTP 处理程序的[信息, 请参阅如何:注册 HTTP 处理](https://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60)程序。  
  
 类可从<xref:System.Web.DefaultHttpHandler>类派生, 以提供对请求的自定义处理。 派生自的<xref:System.Web.DefaultHttpHandler>异步 HTTP 处理程序可能会<xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A>重写方法, 以更改处理请求的方式。  
  
 <xref:System.Web.DefaultHttpHandler>不使用 ASP.NET 错误。 使用 IIS 错误或适当 ISAPI 自定义错误机制的现有内容不会更改。  
  
   
  
## Examples  
 下面的代码示例演示如何通过从<xref:System.Web.DefaultHttpHandler>类派生来实现自定义 HTTP 处理程序。  
  
 [!code-csharp[System.Web.DefaultHttpHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/CS/source.cs#1)]
 [!code-vb[System.Web.DefaultHttpHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60">如何：注册 HTTP 处理程序</related>
    <related type="Article" href="https://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9">如何：创建异步 HTTP 处理程序</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultHttpHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.DefaultHttpHandler" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginProcessRequest (context As HttpContext, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="defaultHttpHandler.BeginProcessRequest (context, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">为用于服务 HTTP 请求的内部服务器对象提供引用的对象。</param>
        <param name="callback">将在完成异步方法调用时调用的方法。 如果 <paramref name="callback" /> 为 <see langword="null" />，则不调用委托。</param>
        <param name="state">处理请求所需的所有状态数据。</param>
        <summary>启动对 HTTP 处理程序的异步调用。</summary>
        <returns>包含有关进程状态信息的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建异步使用的 HTTP 处理程序时, 处理程序必须实现 ASP.NET 异步<xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A>调用<xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A>的异步和方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">处理请求的前提条件未满足，被请求的文件具有 .asp 后缀或请求是通过 POST 发送的。</exception>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.Context" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.DefaultHttpHandler.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与当前 <see cref="T:System.Web.DefaultHttpHandler" /> 对象关联的上下文。</summary>
        <value>一个包含当前上下文的 <see cref="T:System.Web.HttpContext" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性提供对派生类的当前<xref:System.Web.HttpContext>对象的访问。 <xref:System.Web.DefaultHttpHandler.Context%2A> 对象提供对请求的内部<xref:System.Web.HttpApplication.Request%2A>、 <xref:System.Web.HttpApplication.Response%2A>和<xref:System.Web.HttpApplication.Server%2A>属性的访问。 <xref:System.Web.HttpContext> 有关访问上下文信息的详细信息, 请<xref:System.Web.HttpContext>参阅。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndProcessRequest : IAsyncResult -&gt; unit&#xA;override this.EndProcessRequest : IAsyncResult -&gt; unit" Usage="defaultHttpHandler.EndProcessRequest result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">一个包含有关进程状态的信息的对象。</param>
        <summary>为异步进程提供一种结束方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A>方法来引发在异步过程中捕获的任何异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecuteUrlHeaders As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Specialized::NameValueCollection ^ ExecuteUrlHeaders { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteUrlHeaders : System.Collections.Specialized.NameValueCollection" Usage="System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要随请求一起传输的请求标头和请求值的集合。</summary>
        <value>包含请求标头和值的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性将返回一个空集合, 除非它在派生<xref:System.Web.DefaultHttpHandler>自类的类中填充。 <xref:System.Web.DefaultHttpHandler.ExecuteUrlHeaders%2A> 添加的标头将追加到请求中的标头集合, 然后再将请求传递回 Internet Information Services (IIS)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.DefaultHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个布尔值，该值指示另一个请求可以使用 <see cref="T:System.Web.DefaultHttpHandler" /> 类的当前实例。</summary>
        <value>如果 <see cref="T:System.Web.DefaultHttpHandler" /> 是可重用的，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.IsReusable%2A>若要将属性显式设置`true`为`false`或, 请<xref:System.Web.DefaultHttpHandler.IsReusable%2A>重写属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnExecuteUrlPreconditionFailure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnExecuteUrlPreconditionFailure();" />
      <MemberSignature Language="F#" Value="abstract member OnExecuteUrlPreconditionFailure : unit -&gt; unit&#xA;override this.OnExecuteUrlPreconditionFailure : unit -&gt; unit" Usage="defaultHttpHandler.OnExecuteUrlPreconditionFailure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在前提条件阻止 <see cref="T:System.Web.DefaultHttpHandler" /> 对象处理请求时被调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前提条件由客户端在请求标头字段中指定, 并在 Web 服务器上进行评估。 例如, 通过使用前提条件, 客户端可以防止将请求的方法 (例如 GET) 应用于所需资源以外的资源。 有关详细信息, 请参阅万维网联合会 (W3C) 网站上的[超文本传输协议-HTTP/1.1](https://go.microsoft.com/fwlink/?LinkID=73147)规范中的第14部分 "标头字段定义"。  
  
 当<xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A>前提条件<xref:System.Web.DefaultHttpHandler>阻止对象处理请求时, 将调用方法。 派生类可以重写<xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A>方法, 以便在前置条件失败时引发异常。 不<xref:System.Web.DefaultHttpHandler>会<xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A>在方法中引发异常。  
  
 以下任何操作都将导致前提条件失败:  
  
-   调用 <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>。  
  
-   调用 <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>。  
  
-   调用 <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>。  
  
-   更改响应的缓存策略。  
  
-   将对象作为筛选器添加<xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType>到属性。 <xref:System.IO.Stream>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OverrideExecuteUrlPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ OverrideExecuteUrlPath();" />
      <MemberSignature Language="F#" Value="abstract member OverrideExecuteUrlPath : unit -&gt; string&#xA;override this.OverrideExecuteUrlPath : unit -&gt; string" Usage="defaultHttpHandler.OverrideExecuteUrlPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重写当前请求的目标 URL。</summary>
        <returns>要在请求中使用的被重写的 URL；如果未提供被重写的 URL，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法返回`null` , 除非它在派生自<xref:System.Web.DefaultHttpHandler>类的类中被重写。 <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A>  
  
 仅当 ASP.NET 在 IIS 6.0 上的工作进程隔离模式下运行, 并且在调用<xref:System.Web.DefaultHttpHandler>对象之前未修改响应时, 才会调用方法。<xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> 响应由以下任意内容修改:  
  
-   调用 <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>。  
  
-   调用 <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>。  
  
-   调用 <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>。  
  
-   更改响应的缓存策略。  
  
-   将对象作为筛选器添加<xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType>到属性。 <xref:System.IO.Stream>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit&#xA;override this.ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="defaultHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">为用于服务 HTTP 请求的内部服务器对象提供引用的对象。</param>
        <summary>使 <see cref="T:System.Web.DefaultHttpHandler" /> 对象能够处理 HTTP Web 请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不<xref:System.Web.DefaultHttpHandler.ProcessRequest%2A>应同步调用此方法。 从<xref:System.Web.DefaultHttpHandler>类派生的类可以<xref:System.Web.DefaultHttpHandler.ProcessRequest%2A>重写, 以提供自定义的请求处理。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> 被同步地调用。</exception>
        <altmember cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
  </Members>
</Type>

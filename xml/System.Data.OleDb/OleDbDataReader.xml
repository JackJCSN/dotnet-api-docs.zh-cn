<Type Name="OleDbDataReader" FullName="System.Data.OleDb.OleDbDataReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="20e2aec6b6eccc6280842ad9d4a7ac130796b5b6" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67240588" /></Metadata><TypeSignature Language="C#" Value="public sealed class OleDbDataReader : System.Data.Common.DbDataReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OleDbDataReader extends System.Data.Common.DbDataReader" />
  <TypeSignature Language="DocId" Value="T:System.Data.OleDb.OleDbDataReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OleDbDataReader&#xA;Inherits DbDataReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class OleDbDataReader sealed : System::Data::Common::DbDataReader" />
  <TypeSignature Language="F#" Value="type OleDbDataReader = class&#xA;    inherit DbDataReader" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.OleDb</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbDataReader</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Docs>
    <summary>提供从数据源读取数据行的只进流的方法。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要创建<xref:System.Data.OleDb.OleDbDataReader>，必须调用<xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A>方法的<xref:System.Data.OleDb.OleDbCommand>对象，而不是直接使用构造函数。  
  
 在关闭之前<xref:System.Data.OleDb.OleDbConnection>，先关闭<xref:System.Data.OleDb.OleDbDataReader>对象。 您必须关闭<xref:System.Data.OleDb.OleDbDataReader>对象，如果计划重新<xref:System.Data.OleDb.OleDbCommand>对象。例如，不能检索输出参数，直到调用后<xref:System.Data.OleDb.OleDbDataReader.Close%2A>。  
  
 对结果集由另一个进程或线程读取数据时所做的更改可能会对用户可见<xref:System.Data.OleDb.OleDbDataReader>。 但是，确切的行为与时间有关。  
  
 <xref:System.Data.OleDb.OleDbDataReader.IsClosed%2A> 并<xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>是后可以调用的唯一属性<xref:System.Data.OleDb.OleDbDataReader>已关闭。 尽管<xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>可能会访问属性时<xref:System.Data.OleDb.OleDbDataReader>存在，始终调用<xref:System.Data.OleDb.OleDbDataReader.Close%2A>返回的值之前<xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>以保证返回精确的值。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>、 一个<xref:System.Data.OleDb.OleDbCommand>，和一个<xref:System.Data.OleDb.OleDbDataReader>。 该示例读取数据，将其写到控制台。 最后，该示例关闭<xref:System.Data.OleDb.OleDbDataReader>，然后<xref:System.Data.OleDb.OleDbConnection>。  
  
 [!code-csharp[Classic WebData OleDbDataReader Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataReader Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataReader Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataReader Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="oleDbDataReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须显式调用<xref:System.Data.OleDb.OleDbDataReader.Close%2A>方法时都是通过使用<xref:System.Data.OleDb.OleDbDataReader>使用关联<xref:System.Data.OleDb.OleDbConnection>用于任何其他用途。  
  
> [!CAUTION]
>  不要调用**关闭**或**Dispose**连接、 DataReader 或在任何其他托管的对象上**Finalize**类的方法。 在终结器中，您应仅释放类直接拥有的非托管的资源。 如果您的类不拥有任何非托管的资源，不包括**Finalize**在类定义中的方法。 有关详细信息，请参阅[垃圾回收](~/docs/standard/garbage-collection/index.md)。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>、 一个<xref:System.Data.OleDb.OleDbCommand>，和一个<xref:System.Data.OleDb.OleDbDataReader>。 该示例读取数据，将其写到控制台。 最后，该示例关闭<xref:System.Data.OleDb.OleDbDataReader>，然后<xref:System.Data.OleDb.OleDbConnection>。  
  
 [!code-csharp[Classic WebData IDataReader.Read Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDataReader.Read Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDataReader.Read Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDataReader.Read Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Depth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Depth : int" Usage="System.Data.OleDb.OleDbDataReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，用于指示当前行的嵌套深度。</summary>
        <value>当前行的嵌套深度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最外面的表的深度为零。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="FieldCount">
      <MemberSignature Language="C#" Value="public override int FieldCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FieldCount" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataReader.FieldCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FieldCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int FieldCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FieldCount : int" Usage="System.Data.OleDb.OleDbDataReader.FieldCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前行中的列数。</summary>
        <value>如果未放在有效的记录集中，则为 0；否则为当前记录的列数。 默认值为 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包括隐藏的字段。 使用 <xref:System.Data.OleDb.OleDbDataReader.VisibleFieldCount%2A> 可排除隐藏的字段。  
  
 执行不返回行，一个查询后<xref:System.Data.OleDb.OleDbDataReader.FieldCount%2A>返回 0。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">没有到数据源的当前连接。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~OleDbDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!OleDbDataReader ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="oleDbDataReader.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>允许对象在被“垃圾回收”之前尝试释放资源并执行其他清理操作。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public override bool GetBoolean (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetBoolean(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetBoolean(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBoolean (ordinal As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool GetBoolean(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetBoolean : int -&gt; bool" Usage="oleDbDataReader.GetBoolean ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>获取指定列的布尔值形式的值。</summary>
        <returns>列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换;因此检索到的数据必须已经是一个布尔值，或生成异常。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetByte">
      <MemberSignature Language="C#" Value="public override byte GetByte (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8 GetByte(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetByte(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByte (ordinal As Integer) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Byte GetByte(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetByte : int -&gt; byte" Usage="oleDbDataReader.GetByte ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>以字节的形式获取指定列的值。</summary>
        <returns>指定列的字节形式的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换;因此检索到的数据必须已经是一个字节。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override long GetBytes (int ordinal, long dataIndex, byte[] buffer, int bufferIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 GetBytes(int32 ordinal, int64 dataIndex, unsigned int8[] buffer, int32 bufferIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (ordinal As Integer, dataIndex As Long, buffer As Byte(), bufferIndex As Integer, length As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long GetBytes(int ordinal, long dataIndex, cli::array &lt;System::Byte&gt; ^ buffer, int bufferIndex, int length);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : int * int64 * byte[] * int * int -&gt; int64" Usage="oleDbDataReader.GetBytes (ordinal, dataIndex, buffer, bufferIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
        <Parameter Name="dataIndex" Type="System.Int64" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="bufferIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <param name="dataIndex">字段中作为读取操作起始位置的索引。</param>
        <param name="buffer">要读入字节流的缓冲区。</param>
        <param name="bufferIndex"><paramref name="buffer" /> 中写入操作开始位置的索引。</param>
        <param name="length">复制到缓冲区中的最大长度。</param>
        <summary>从按指定的列偏移量将字节流作为数组从给定的缓冲区偏移量开始读入缓冲区。</summary>
        <returns>读取的实际字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbDataReader.GetBytes%2A> 返回字段中的可用字节数。 大多数情况下，这是该字段的确切长度。 但是，返回的数字可能小于字段的真实长度如果`GetBytes`具有用于从字段中获取字节。 这可能是这种情况，例如，当<xref:System.Data.OleDb.OleDbDataReader>正在读取到缓冲区中的大型数据结构。 有关详细信息，请参阅`SequentialAccess`设置为<xref:System.Data.CommandBehavior>。  
  
 如果传递的缓冲区，则`null`，<xref:System.Data.OleDb.OleDbDataReader.GetBytes%2A>返回的字段长度以字节为单位。  
  
 不执行任何转换;因此，检索到的数据必须已经是一个字节数组。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public override char GetChar (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetChar(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetChar(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChar (ordinal As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetChar(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetChar : int -&gt; char" Usage="oleDbDataReader.GetChar ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>获取指定列的字符形式的值。</summary>
        <returns>指定列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于 <xref:System.Data.OleDb>，不受支持。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override long GetChars (int ordinal, long dataIndex, char[] buffer, int bufferIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 GetChars(int32 ordinal, int64 dataIndex, char[] buffer, int32 bufferIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (ordinal As Integer, dataIndex As Long, buffer As Char(), bufferIndex As Integer, length As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long GetChars(int ordinal, long dataIndex, cli::array &lt;char&gt; ^ buffer, int bufferIndex, int length);" />
      <MemberSignature Language="F#" Value="override this.GetChars : int * int64 * char[] * int * int -&gt; int64" Usage="oleDbDataReader.GetChars (ordinal, dataIndex, buffer, bufferIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
        <Parameter Name="dataIndex" Type="System.Int64" />
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="bufferIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <param name="dataIndex">行中作为读取操作起始位置的索引。</param>
        <param name="buffer">要向其中复制数据的缓冲区。</param>
        <param name="bufferIndex"><paramref name="buffer" /> 中写入操作开始位置的索引。</param>
        <param name="length">要读取的字符数。</param>
        <summary>从指定的列偏移量将字符流作为数组从给定的缓冲区偏移量开始读入缓冲区。</summary>
        <returns>读取的实际字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbDataReader.GetChars%2A> 返回字段中的可用字符数。 大多数情况下，这是该字段的确切长度。 但是，返回的数字可能小于字段的真实长度如果`GetChars`具有用于从字段获取字符。 这可能是这种情况，例如，当<xref:System.Data.OleDb.OleDbDataReader>正在读取到缓冲区中的大型数据结构。 有关详细信息，请参阅`SequentialAccess`设置为<xref:System.Data.CommandBehavior>。  
  
 如果传递的缓冲区，则`null`，<xref:System.Data.OleDb.OleDbDataReader.GetChars%2A>以字符为单位返回字段的长度。  
  
 不执行任何转换;因此，检索到的数据必须已经是字符数组。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbDataReader GetData (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OleDb.OleDbDataReader GetData(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetData(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (ordinal As Integer) As OleDbDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::OleDb::OleDbDataReader ^ GetData(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetData : int -&gt; System.Data.OleDb.OleDbDataReader" Usage="oleDbDataReader.GetData ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>返回请求的列序号的 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</summary>
        <returns><see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>将调用<xref:System.Data.OleDb.OleDbDataReader.GetData%2A>如果访问接口将返回<xref:System.Data.IDataReader>具有支持的列<xref:System.Data.IDataReader>。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetDataTypeName">
      <MemberSignature Language="C#" Value="public override string GetDataTypeName (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetDataTypeName(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetDataTypeName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDataTypeName (index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetDataTypeName(int index);" />
      <MemberSignature Language="F#" Value="override this.GetDataTypeName : int -&gt; string" Usage="oleDbDataReader.GetDataTypeName index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">从零开始的列序号。</param>
        <summary>获取源数据类型的名称。</summary>
        <returns>后端数据类型的名称。 有关详细信息，请参阅 <see href="https://docs.microsoft.com/sql/t-sql/data-types/data-types-transact-sql">SQL Server 数据类型</see>或<see href="https://docs.microsoft.com/sql/odbc/microsoft/microsoft-access-data-types">访问数据类型</see>。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTime">
      <MemberSignature Language="C#" Value="public override DateTime GetDateTime (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime GetDateTime(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetDateTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDateTime (ordinal As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTime GetDateTime(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetDateTime : int -&gt; DateTime" Usage="oleDbDataReader.GetDateTime ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。</summary>
        <returns>指定列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换;因此，检索到的数据必须已经是<xref:System.DateTime>对象。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetDbDataReader">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbDataReader GetDbDataReader (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbDataReader GetDbDataReader(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetDbDataReader(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetDbDataReader (ordinal As Integer) As DbDataReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbDataReader ^ GetDbDataReader(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetDbDataReader : int -&gt; System.Data.Common.DbDataReader" Usage="oleDbDataReader.GetDbDataReader ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ordinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public override decimal GetDecimal (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Decimal GetDecimal(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetDecimal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecimal (ordinal As Integer) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Decimal GetDecimal(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetDecimal : int -&gt; decimal" Usage="oleDbDataReader.GetDecimal ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>以 <see cref="T:System.Decimal" /> 对象的形式获取指定列的值。</summary>
        <returns>指定列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换;因此，检索到的数据必须已经是<xref:System.Decimal>对象。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public override double GetDouble (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance float64 GetDouble(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetDouble(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDouble (ordinal As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override double GetDouble(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetDouble : int -&gt; double" Usage="oleDbDataReader.GetDouble ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>获取指定列的双精度浮点数形式的值。</summary>
        <returns>指定列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换;因此，检索到的数据必须已经是双精度浮点数。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public override System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="oleDbDataReader.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />。</summary>
        <returns>一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管此方法可用于检索显式枚举器，但在语言的支持`foreach`构造，它是直接以循环访问数据读取器中的行中使用循环构造简单得多。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetFieldType">
      <MemberSignature Language="C#" Value="public override Type GetFieldType (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetFieldType(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetFieldType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFieldType (index As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetFieldType(int index);" />
      <MemberSignature Language="F#" Value="override this.GetFieldType : int -&gt; Type" Usage="oleDbDataReader.GetFieldType index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">从零开始的列序号。</param>
        <summary>获取作为对象的数据类型的 <see cref="T:System.Type" />。</summary>
        <returns>作为对象的数据类型的 <see cref="T:System.Type" />。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetFloat">
      <MemberSignature Language="C#" Value="public override float GetFloat (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance float32 GetFloat(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetFloat(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFloat (ordinal As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override float GetFloat(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetFloat : int -&gt; single" Usage="oleDbDataReader.GetFloat ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>获取指定列的单精度浮点数形式的值。</summary>
        <returns>指定列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换。 因此，检索到的数据必须已经是一个单精度浮点数。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetGuid">
      <MemberSignature Language="C#" Value="public override Guid GetGuid (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Guid GetGuid(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetGuid(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGuid (ordinal As Integer) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Guid GetGuid(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetGuid : int -&gt; Guid" Usage="oleDbDataReader.GetGuid ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>获取指定列的值作为全局唯一标识符 (GUID)。</summary>
        <returns>指定列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换;因此检索到的数据必须已经是全局唯一标识符。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetInt16">
      <MemberSignature Language="C#" Value="public override short GetInt16 (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int16 GetInt16(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetInt16(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInt16 (ordinal As Integer) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override short GetInt16(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetInt16 : int -&gt; int16" Usage="oleDbDataReader.GetInt16 ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>获取指定列的 16 位有符号整数形式的值。</summary>
        <returns>指定列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换;因此，检索到的数据必须已经是 16 位有符号的整数。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public override int GetInt32 (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetInt32(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetInt32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInt32 (ordinal As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetInt32(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetInt32 : int -&gt; int" Usage="oleDbDataReader.GetInt32 ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>获取指定列的 32 位带符号整数形式的值。</summary>
        <returns>指定列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换;因此，检索到的数据必须已经是 32 位有符号的整数。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public override long GetInt64 (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 GetInt64(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetInt64(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInt64 (ordinal As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long GetInt64(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetInt64 : int -&gt; int64" Usage="oleDbDataReader.GetInt64 ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>以 64 位有符号整数的形式获取指定列的值。</summary>
        <returns>指定列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换;因此，检索到的数据必须已经是 64 位有符号的整数。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public override string GetName (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetName(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetName (index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetName(int index);" />
      <MemberSignature Language="F#" Value="override this.GetName : int -&gt; string" Usage="oleDbDataReader.GetName index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">从零开始的列序号。</param>
        <summary>获取指定列的名称。</summary>
        <returns>指定列的名称。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetOrdinal">
      <MemberSignature Language="C#" Value="public override int GetOrdinal (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetOrdinal(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetOrdinal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetOrdinal (name As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetOrdinal(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetOrdinal : string -&gt; int" Usage="oleDbDataReader.GetOrdinal name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">列的名称。</param>
        <summary>在给定列名时获取相应的列序号。</summary>
        <returns>从零开始的列序号。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbDataReader.GetOrdinal%2A> 第一次执行区分大小写查找。 如果失败，进行第二个的不区分大小写搜索。 该方法将引发`IndexOutOfRange`异常，如果找不到从零开始的列序号。  
  
 <xref:System.Data.OleDb.OleDbDataReader.GetOrdinal%2A> 不区分假名宽度。  
  
 因为基于序号的查找比命名查找更有效，它是效率低下调用<xref:System.Data.OleDb.OleDbDataReader.GetOrdinal%2A>在循环内。 节省时间，可以调用<xref:System.Data.OleDb.OleDbDataReader.GetOrdinal%2A>一次并将结果分配给整数变量在循环内使用。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Data.OleDb.OleDbDataReader.GetOrdinal%2A> 方法。  
  
 [!code-csharp[Classic WebData OleDbDataReader.GetOrdinal#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataReader.GetOrdinal/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataReader.GetOrdinal#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataReader.GetOrdinal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaTable">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchemaTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchemaTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetSchemaTable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchemaTable () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchemaTable();" />
      <MemberSignature Language="F#" Value="override this.GetSchemaTable : unit -&gt; System.Data.DataTable" Usage="oleDbDataReader.GetSchemaTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个 <see cref="T:System.Data.DataTable" />，它描述 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 的列元数据。</summary>
        <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbDataReader.GetSchemaTable%2A>方法将映射到 OLE DB **icolumnsrowset:: Getcolumnsrowset**方法，并返回有关按以下顺序的每个列的元数据：  
  
|DataReader 列|OLE DB 列 ID|描述|  
|-----------------------|----------------------|-----------------|  
|列名|DBCOLUMN_NAME|列; 的名称这可能不是唯一的。 如果这不能确定，则返回 null 值。 此名称始终反映当前视图或命令文本中的列的最新重命名。|  
|ColumnOrdinal|DBCOLUMN_NUMBER|从零开始的列序号。 此列不能包含 null 值。|  
|ColumnSize|DBCOLUMN_COLUMNSIZE|列中值的最大可取长度。 对于使用固定长度的数据类型的列，这是数据类型的大小。|  
|NumericPrecision|DBCOLUMN_PRECISION|如果 DbType 是数值数据类型，这是列的最大精度。 列的数据类型为 DBTYPE_DECIMAL 或 DBTYPE_NUMERIC 精度取决于列的定义。 如果 DbType 不是数值数据类型，则为 null 值。|  
|NumericScale|DBCOLUMN_SCALE|如果 DbType DBTYPE_DECIMAL 或 DBTYPE_NUMERIC，这是小数点右侧的位数。 否则，这是一个 null 值。|  
|数据类型|None|映射到.NET Framework 类型的列。|  
|ProviderType|DBCOLUMN_TYPE|列的数据类型的指示符。 如果列的数据类型而异行，这必须是 DBTYPE_VARIANT。 此列不能包含 null 值。|  
|IsLong|DBCOLUMNFLAGS_ISLONG|如果列包含二进制长对象 (BLOB)，其中包含非常长的数据，提供程序设置 DBCOLUMNFLAGS_ISLONG。 很长数据的定义是特定于提供程序。 此标志的设置对应于数据类型的 PROVIDER_TYPES 行集中 IS_LONG 列的值。|  
|AllowDBNull|DBCOLUMNFLAGS_ISNULLABLE|提供程序设置 DBCOLUMNFLAGS_ISNULLABLE，如果使用者可以将列设置为 null 值，或提供程序无法确定使用者是否可以将列设置为 null 值。 列可能包含 null 值，即使它不能设置为 null 值。|  
|为只读|DBCOLUMNFLAGS_WRITE|`true` 如果不能修改的列;否则为`false`。 列被假定为可写，如果提供程序已设置了 DBCOLUMNFLAGS_WRITE 或 DBCOLUMNFLAGS_WRITEUNKNOWN 标志。|  
|IsRowVersion|DBCOLUMNFLAGS_ISROWID|提供程序设置 DBCOLUMNFLAGS_ISROWID，如果列包含无法写入到的永久行标识符，除了标识行没有有意义的价值。|  
|IsUnique|DBCOLUMN_ISUNIQUE|VARIANT_TRUE:在本专栏中，BaseTableName 可以返回表的基表中的任何两个行不具有相同的值。 保证是唯一的本身或是否仅适用于此列的 UNIQUE 类型的约束是 VARIANT_TRUE 如果列表示一个键。<br /><br /> VARIANT_FALSE:列可以包含基础表中的重复值。 此列的默认值为 VARIANT_FALSE。|  
|IsKey|DBCOLUMN_KEYCOLUMN|VARIANT_TRUE:列是一组的行集中的列，合起来看，唯一标识行。 IsKey 设置为 variant_true，则使用列集必须唯一地标识行集中的行。 没有任何要求这组列是列的最小集。 这组列可能会生成从基表主键、 唯一约束或唯一索引。<br /><br /> VARIANT_FALSE:列不需要唯一标识行。|  
|IsAutoIncrement|DBCOLUMN_ISAUTOINCREMENT|VARIANT_TRUE:列将值分配给新行以固定的增量。<br /><br /> VARIANT_FALSE:列不会分配到新行以固定的增量值。 此列的默认值为 VARIANT_FALSE。|  
|BaseSchemaName|DBCOLUMN_BASESCHEMANAME|包含的列的数据存储区中的架构的名称。 如果无法确定基本架构名称，null 值。 此列的默认值为 null 值。|  
|BaseCatalogName|DBCOLUMN_BASECATALOGNAME|包含的列的数据存储区中的目录的名称。 如果无法确定基本目录名称，null 值。 此列的默认值为 null 值。|  
|BaseTableName|DBCOLUMN_BASETABLENAME|表或视图中包含的列的数据存储区的名称。 如果无法确定基表名称，null 值。 此列的默认值为 null 值。|  
|BaseColumnName|DBCOLUMN_BASECOLUMNNAME|数据存储区中列的名称。 这可能是不同的列名称列中返回，如果使用别名的列名称。 如果无法确定基本列名或列数据中的行集列是派生的但并不完全相同，如果存储一个 null 值。 此列的默认值为 null 值。|  
  
> [!NOTE]
>  若要确保元数据列返回正确的信息，必须调用<xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A>与`behavior`参数设置为`KeyInfo`。 否则，一些架构表中的列可能返回默认情况下，为 null，或不正确数据。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.OleDb.OleDbDataReader" /> 是关闭的。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (ordinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetString : int -&gt; string" Usage="oleDbDataReader.GetString ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>获取指定列的字符串形式的值。</summary>
        <returns>指定列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换;因此检索到的数据必须已经是一个字符串。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetTimeSpan">
      <MemberSignature Language="C#" Value="public TimeSpan GetTimeSpan (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetTimeSpan(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetTimeSpan(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTimeSpan (ordinal As Integer) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetTimeSpan(int ordinal);" />
      <MemberSignature Language="F#" Value="member this.GetTimeSpan : int -&gt; TimeSpan" Usage="oleDbDataReader.GetTimeSpan ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>以 <see cref="T:System.TimeSpan" /> 对象的形式获取指定列的值。</summary>
        <returns>指定列的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不执行任何转换;因此，检索到的数据必须已经是<xref:System.TimeSpan>对象。  
  
 调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要查找的 null 值调用此方法之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public override object GetValue (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetValue(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetValue (ordinal As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetValue(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.GetValue : int -&gt; obj" Usage="oleDbDataReader.GetValue ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>获取以本机格式表示的指定序号处的列的值。</summary>
        <returns>要返回的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于 null 数据库列，此方法返回 <xref:System.DBNull>。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public override int GetValues (object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetValues(object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.GetValues(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetValues (values As Object()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetValues(cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="override this.GetValues : obj[] -&gt; int" Usage="oleDbDataReader.GetValues values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="values">要将属性列复制到的 <see cref="T:System.Object" /> 数组。</param>
        <summary>使用当前行的列值来填充对象数组。</summary>
        <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于大多数应用程序，<xref:System.Data.OleDb.OleDbDataReader.GetValues%2A>方法提供了一种有效方式检索所有列，而不是逐个都检索每个列。  
  
 可以将传递<xref:System.Object>数组，其中包含的结果行中包含的列数少于。 数据量<xref:System.Object>数组保存复制到数组。 你还可以传递<xref:System.Object>其长度是多个结果行中包含的列数的数组。  
  
 对于 null 数据库列，此方法返回 <xref:System.DBNull>。  
  
   
  
## Examples  
 [!code-csharp[OleDbDataReader_GetValues#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/oledbdatareader_getvalues/cs/source.cs#1)]
 [!code-vb[OleDbDataReader_GetValues#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/oledbdatareader_getvalues/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="HasRows">
      <MemberSignature Language="C#" Value="public override bool HasRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasRows" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataReader.HasRows" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasRows As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasRows { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasRows : bool" Usage="System.Data.OleDb.OleDbDataReader.HasRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 是否包含一行还是多行。</summary>
        <value>如果 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 包含一行或多行，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public override bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataReader.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Data.OleDb.OleDbDataReader.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示是否可关闭数据读取器。</summary>
        <value>如果 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 已关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbDataReader.IsClosed%2A> 并<xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>是后可以调用的唯一属性<xref:System.Data.OleDb.OleDbDataReader>已关闭。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public override bool IsDBNull (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDBNull(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.IsDBNull(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDBNull (ordinal As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDBNull(int ordinal);" />
      <MemberSignature Language="F#" Value="override this.IsDBNull : int -&gt; bool" Usage="oleDbDataReader.IsDBNull ordinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">从零开始的列序号。</param>
        <summary>获取一个值，该值指示列中是否包含不存在或丢失的值。</summary>
        <returns>如果指定的列值与 <see cref="T:System.DBNull" /> 等效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法来查找前调用的类型化的 null 列值 get 方法 (例如， <xref:System.Data.OleDb.OleDbDataReader.GetByte%2A>， <xref:System.Data.OleDb.OleDbDataReader.GetChar%2A>，依次类推) 以避免引发错误。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取以本机格式表示的列的值。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override object this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataReader.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj" Usage="System.Data.OleDb.OleDbDataReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">列序号。</param>
        <summary>在给定列序号的情况下，获取指定列的以本机格式表示的值。</summary>
        <value>指定列的以本机格式表示的值。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override object this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataReader.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ name); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj" Usage="System.Data.OleDb.OleDbDataReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">列名称。</param>
        <summary>在给定列名称的情况下，获取指定列的以本机格式表示的值。</summary>
        <value>指定列的以本机格式表示的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 第一次执行区分大小写的查找。 如果失败，进行第二个的不区分大小写搜索。  
  
 此方法是不区分假名宽度。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">未找到具有指定名称的列。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="NextResult">
      <MemberSignature Language="C#" Value="public override bool NextResult ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool NextResult() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.NextResult" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function NextResult () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool NextResult();" />
      <MemberSignature Language="F#" Value="override this.NextResult : unit -&gt; bool" Usage="oleDbDataReader.NextResult " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在读取一批 SQL 语句的结果时，使数据读取器前进到下一个结果。</summary>
        <returns>如果存在多个结果集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用于处理多个可以通过执行批处理 SQL 语句生成的结果。  
  
 默认情况下，数据读取器定位在第一个结果。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="oleDbDataReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>让 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 前进到下一条记录。</summary>
        <returns>如果存在更多行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认位置的<xref:System.Data.OleDb.OleDbDataReader>之前第一条记录。 因此，您必须调用<xref:System.Data.OleDb.OleDbDataReader.Read%2A>，开始访问任何数据。  
  
 虽然<xref:System.Data.OleDb.OleDbDataReader>正在使用中，关联<xref:System.Data.OleDb.OleDbConnection>正忙于为服务它直到您调用<xref:System.Data.OleDb.OleDbDataReader.Close%2A>。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OleDb.OleDbConnection>、 一个<xref:System.Data.OleDb.OleDbCommand>，和一个<xref:System.Data.OleDb.OleDbDataReader>。 该示例读取数据，将其写到控制台。 最后，该示例关闭<xref:System.Data.OleDb.OleDbDataReader>，然后<xref:System.Data.OleDb.OleDbConnection>。  
  
 [!code-csharp[Classic WebData IDataReader.Read Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDataReader.Read Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDataReader.Read Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDataReader.Read Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="RecordsAffected">
      <MemberSignature Language="C#" Value="public override int RecordsAffected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecordsAffected" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataReader.RecordsAffected" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property RecordsAffected As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int RecordsAffected { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecordsAffected : int" Usage="System.Data.OleDb.OleDbDataReader.RecordsAffected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通过执行 SQL 语句获取更改、插入或删除的行数。</summary>
        <value>已更改、插入或删除的行数；如果没有受影响的行或语句失败，则为 0；对于 SELECT 语句为 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>读取所有行并在关闭之前未设置属性<xref:System.Data.OleDb.OleDbDataReader>。  
  
 此属性的值是累积的。 例如，如果在批处理模式下的值插入两个记录<xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>为两个。  
  
 <xref:System.Data.OleDb.OleDbDataReader.IsClosed%2A> 并<xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>是后可以调用的唯一属性<xref:System.Data.OleDb.OleDbDataReader>已关闭。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回循环访问集合的枚举数。</summary>
        <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDataRecord.GetData">
      <MemberSignature Language="C#" Value="System.Data.IDataReader IDataRecord.GetData (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.IDataReader System.Data.IDataRecord.GetData(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.System#Data#IDataRecord#GetData(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function GetData (ordinal As Integer) As IDataReader Implements IDataRecord.GetData" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Data::IDataReader ^ System.Data.IDataRecord.GetData(int ordinal) = System::Data::IDataRecord::GetData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataRecord.GetData(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="ordinal">要查找的字段的索引。</param>
        <summary>返回指定列序号的 <see cref="T:System.Data.IDataReader" />。</summary>
        <returns>指定列序号的 <see cref="T:System.Data.IDataReader" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 类的当前实例使用的资源。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="VisibleFieldCount">
      <MemberSignature Language="C#" Value="public override int VisibleFieldCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisibleFieldCount" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataReader.VisibleFieldCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property VisibleFieldCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int VisibleFieldCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VisibleFieldCount : int" Usage="System.Data.OleDb.OleDbDataReader.VisibleFieldCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.OleDb</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 中未隐藏的字段的数目。</summary>
        <value>未隐藏的字段的数目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此值用于确定 <xref:System.Data.OleDb.OleDbDataReader> 中的可见字段的数目。 例如，对分部主键执行 SELECT 将以隐藏字段的形式返回该键的其余部分。 隐藏的字段始终追加在可见字段之后。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataadapters-and-datareaders.md">DataAdapter 和 DataReader</related>
      </Docs>
    </Member>
  </Members>
</Type>
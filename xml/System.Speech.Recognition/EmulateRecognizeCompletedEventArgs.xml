<Type Name="EmulateRecognizeCompletedEventArgs" FullName="System.Speech.Recognition.EmulateRecognizeCompletedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7158c0d232c950bb40741c28fe1845808de7a970" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64096104" /></Metadata><TypeSignature Language="C#" Value="public class EmulateRecognizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EmulateRecognizeCompletedEventArgs extends System.ComponentModel.AsyncCompletedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class EmulateRecognizeCompletedEventArgs&#xA;Inherits AsyncCompletedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class EmulateRecognizeCompletedEventArgs : System::ComponentModel::AsyncCompletedEventArgs" />
  <TypeSignature Language="F#" Value="type EmulateRecognizeCompletedEventArgs = class&#xA;    inherit AsyncCompletedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.AsyncCompletedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> 和 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 类的 <see langword="EmulateRecognizeCompleted" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实例<xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs>时，将创建<xref:System.Speech.Recognition.SpeechRecognitionEngine>对象会引发<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件。 若要获取有关识别结果的信息，请访问<xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A>事件处理程序中的属性。  
  
 模拟是文本，而不是音频，依据是语音识别引擎的输入的过程。 若要绕过的音频输入<xref:System.Speech.Recognition.SpeechRecognitionEngine>仿真，使用过程的对象<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>方法。  
  
 如果语音识别引擎遇到识别操作期间的异常<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>属性设置为异常并<xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A>属性设置为`null`。  
  
 <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> 派生自 <xref:System.ComponentModel.AsyncCompletedEventArgs>。  
  
   
  
## Examples  
 下面的示例添加的事件处理程序<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件<xref:System.Speech.Recognition.SpeechRecognitionEngine>。 处理程序会获取已识别的文本从<xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A>属性。  
  
```csharp  
  
private SpeechRecognitionEngine sre;  
  
// Initialize the speech recognition engine.   
private void Initialize()  
{  
  sre = new SpeechRecognitionEngine();  
  
  // Add a handler for the EmulateRecognizeCompleted event.  
  sre.EmulateRecognizeCompleted += new EventHandler<EmulateRecognizeCompletedEventArgs>(sre_EmulateRecognizeCompleted);  
  
  // Add other initialization code here.  
}  
  
// Handle the EmulateRecognizeCompleted event.   
void sre_EmulateRecognizeCompleted(object sender, EmulateRecognizeCompletedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  string phrase = e.Result.Text;  
  
  // Add event handler code here.  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
  </Docs>
  <Members>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognitionResult Result" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognitionResult ^ Result { System::Speech::Recognition::RecognitionResult ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : System.Speech.Recognition.RecognitionResult" Usage="System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取所模拟识别的结果。</summary>
        <value>有关识别结果的详细信息，如果发生错误，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.RecognitionResult>对象派生<xref:System.Speech.Recognition.RecognizedPhrase>和包含短语识别操作返回有关的完整信息。 可以获取来自所有识别候选项关闭列表<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>属性。  
  
 如果识别器遇到识别操作期间的异常<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>属性设置为异常并<xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A>属性设置为`null`。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
  </Members>
</Type>
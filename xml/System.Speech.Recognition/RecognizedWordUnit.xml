<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f6e60e03331e99f03ff1e904e2a5581cf4a04c53" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69101026" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供可识别的语音的原子单元。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 识别引擎返回的所有结果都是对象的<xref:System.Speech.Recognition.RecognizedWordUnit>构造。  
  
 通过<xref:System.Speech.Recognition.RecognizedWordUnit> 对象<xref:System.Speech.Recognition.RecognizedPhrase>上的<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性进行的任何识别操作都可以访问对象的数组。  
  
 除了提供一个<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> <xref:System.Speech.Recognition.RecognizedWordUnit>实例提供的识别确定性 ():  
  
-   已识别的单词的规范化和准确 (或词法) 文本表示形式。 有关详细信息，请参阅<xref:System.Speech.Recognition.ReplacementText>、<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>。  
  
-   使用受支持的拼音字母表中的字符的发音信息, 例如国际注音字母表 (IPA) 或通用电话集 (UPS)。 有关详细信息，请参阅 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>。  
  
-   打印格式设置。 有关详细信息, 请<xref:System.Speech.Recognition.DisplayAttributes>参阅类<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>及其属性。  
  
   
  
## Examples  
 下面的示例演示了一个生成字符串`stringFromWordArray`的实用工具例程 ()。 字符串包含词汇输出 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、规范化文本 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) 或国际注音字母表中的拼音字符 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 使用<xref:System.Speech.Recognition.DisplayAttributes> 从对象<xref:System.Speech.Recognition.RecognizedWordUnit>的<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>属性获取的对象设置字符串的格式。 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 对象是从<xref:System.Speech.Recognition.RecognizedPhrase>对象上的<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性获取的。 <xref:System.Speech.Recognition.RecognizedWordUnit>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">一个无法识别的字符串的正常化的文本。  
  
该值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</param>
        <param name="confidence">0.0 到 1.0 中指示单词标识的确定性的 <see langword="float" /> 值。</param>
        <param name="pronunciation">一个无法识别的单词的语音拼写。  
  
该值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</param>
        <param name="lexicalForm">一个识别字的非正常化文本。  
  
需要使用此参数可能不是 <see langword="null" />， " "或 <see cref="F:System.String.Empty" />。</param>
        <param name="displayAttributes">定义使用空白显示识别的词。</param>
        <param name="audioPosition">音频输入流的已识别的单词的位置。  
  
此值可为 <see cref="F:System.TimeSpan.Zero" />。</param>
        <param name="audioDuration">音频输入的长度对应已识别的单词。  
  
此值可为 <see cref="F:System.TimeSpan.Zero" />。</param>
        <summary>初始化 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`text`或<xref:System.String.Empty> <xref:System.Speech.Recognition.RecognizedWordUnit>为、"" 或在识别操作中使用, 则识别引擎将在任何输出<xref:System.Speech.Recognition.RecognizedWordUnit>实例中生成相应的值。 `null` `pronunciation`  
  
 直接构造<xref:System.Speech.Recognition.RecognizedWordUnit>实例通常仅在<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>使用<xref:System.Speech.Recognition.SpeechRecognitionEngine>类的或<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法和<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>或<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>方法的或方法模拟识别操作时使用<xref:System.Speech.Recognition.SpeechRecognizer>类。  
  
 对于实际应用程序, 不要直接构造<xref:System.Speech.Recognition.RecognizedWordUnit>, 而是通过<xref:System.Speech.Recognition.RecognizedPhrase>对象的<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性获取它。  
  
   
  
## Examples  
 下面的示例是一个精心设计的模拟测试, 其中, 从输入生成新的词, 然后将其传递给模拟器, 然后进行验证。  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363">国际注音字母</related>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取识别器分配的值，此值表示已识别的单词与给定输入匹配的可能性。</summary>
        <value>对正确识别单词的确定性的相对度量。 该值分别为从 0.0 到 1.0，从低到高置信。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 置信度分数并不表示正确识别单词的绝对可能性。 相反, 置信度分数提供一种机制, 用于比较给定输入的多个识别替代项的相对准确性。 这有助于返回最准确的识别结果。 例如, 如果已识别的单词的置信度为 0.8, 这并不意味着该单词有 80% 的可能性是输入的正确匹配项。  这意味着, 该单词更可能是输入的正确匹配项, 而不是置信度分数小于0.8 的其他结果。  
  
 除非您对相同的识别操作或来自同一输入的以前识别进行比较, 否则对其自身的置信度分数并无意义。  
  
 返回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>是相对的, 每个识别引擎都是唯一的。 <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>在两个不同的识别引擎之间, 不提供置信度值的定义, 以及各个<xref:System.Speech.Recognition.RecognizedWordUnit> <xref:System.Speech.Recognition.RecognizedPhrase>对象如何定义<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>的。  
  
 语音识别引擎可能会出于各种原因 (包括背景干扰、inarticulate 语音或意外的单词或单词序列), 将置信度评分分配给播讲输入。 如果你的应用程序使用<xref:System.Speech.Recognition.SpeechRecognitionEngine>的是实例, 则可以修改使用其中一种<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法接受或拒绝语音输入的置信度级别。 由管理<xref:System.Speech.Recognition.SpeechRecognizer>的共享识别器的置信度阈值与用户配置文件相关联, 并存储在 Windows 注册表中。 对于共享识别器的属性, 应用程序不应将更改写入注册表。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于通过当前 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 实例创建文本输出的格式化信息。</summary>
        <value>指定<see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 显示对象的内容的空白使用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性返回<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>的对象指定要用于给定单词的前导空格和尾随空格<xref:System.Speech.Recognition.DisplayAttributes> (如果有)。  
  
 有关如何使用此格式设置信息的详细信息, 请参阅<xref:System.Speech.Recognition.DisplayAttributes>枚举。  
  
   
  
## Examples  
 下面的示例演示一个实用工具例程 (`stringFromWordArray`), 它生成一个字符串, 该字符串通过以下三种方式之一进行格式<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>设置: 词法 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)、规范化 (使用) <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>或按发音 (使用)。 文本<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>输出从对象<xref:System.Speech.Recognition.RecognizedWordUnit> <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>上的属性获取, <xref:System.Speech.Recognition.RecognizedPhrase>这些对象是从对象上的<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性获取的。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已识别的字符串的非正常化的文本。</summary>
        <value>返回没有任何正常化的无法识别的单词的文本的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大多数情况下<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> , 和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>返回的值都是相同的。 不过, 识别引擎可以使用语音规范化来返回更多用户友好的音频输入或 colloquial 的文本表示形式。  
  
 语音规范化是在编写时使用特殊的构造或符号来表达语音。 例如, 规范化可以在输出文本中将单词 "a 美元和十六美分" 替换为 "$1.16"。  
  
   
  
## Examples  
 下面的示例演示了一个实用工具例程, 该例程使用以下三种格式之一生成文本<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>: 词法 (使用) <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>、规范化 (使用) 和<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>拼音 (使用)。 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>文本输出是从<xref:System.Speech.Recognition.RecognizedWordUnit>对象的对象获取的, 该对象是<xref:System.Speech.Recognition.RecognizedPhrase>从对象<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>上的属性获取的。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已识别单词的注音拼写。</summary>
        <value>支持的语音字母表中的字符组成的字符串，如国际音标 (IPA) 或通用电话集 (UPS)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 的内容<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>指示语音识别引擎用来将语音输入与其中一个已加载<xref:System.Speech.Recognition.Grammar>的对象相匹配的发音。 可以在语音识别引擎的内部词典中、从加载<xref:System.Speech.Recognition.Grammar>的对象中的识别语法链接的或内联在加载<xref:System.Speech.Recognition.Grammar>的对象中的识别语法中定义发音。 语音识别引擎还可能会为不常见的单词创建发音, 语音识别引擎当前有权访问的词典或语法中未定义发音。  
  
 许多基于 Windows 的 Unicode 字体 (如宋体) 都支持显示 IPA 字符串。 有关详细信息, 请参阅[国际注音字母表](https://go.microsoft.com/fwlink/?LinkId=58363)。  
  
   
  
## Examples  
 下面的示例演示一个实用工具例程, 该例程生成具有以下三种可能格式之一的字符串: <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>词法 (使用)、 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>规范化 (使用) 和拼音<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>(使用)。 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>文本输出是从<xref:System.Speech.Recognition.RecognizedWordUnit>对象的对象获取的, 该对象是<xref:System.Speech.Recognition.RecognizedPhrase>从对象<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>上的属性获取的。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363">国际注音字母</related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已识别单词的规划化文本。</summary>
        <value>包含给定输入单词的规范化文本输出的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大多数情况下, 由<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>返回的值都是相同的。 不过, 识别引擎可以使用语音规范化来返回更多用户友好的音频输入或 colloquial 的文本表示形式。  
  
 语音规范化是在编写时使用特殊的构造或符号来表达语音。 例如, 规范化可以在输出文本中将单词 "a 美元和十六美分" 替换为 "$1.16"。  
  
   
  
## Examples  
 下面的示例演示一个实用工具例程, 该例程使用以下三种格式之一生成字符串: 词法<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>(使用)、规范化<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>(使用) 和拼音 ( <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>使用)。 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>文本输出是从<xref:System.Speech.Recognition.RecognizedWordUnit>对象的对象获取的, 该对象是<xref:System.Speech.Recognition.RecognizedPhrase>从对象<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>上的属性获取的。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="KeyPressEventArgs" FullName="System.Windows.Forms.KeyPressEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0d10a4471126dc53d8875c7de85512b9f2d3acca" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69186430" /></Metadata><TypeSignature Language="C#" Value="public class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyPressEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyPressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyPressEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyPressEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为 <see cref="E:System.Windows.Forms.Control.KeyPress" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.KeyPressEventArgs>指定当用户按下某个键时构成的字符。 例如, 当用户按下 SHIFT + K 时, 属性<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>将返回一个大写的 K。  
  
 当<xref:System.Windows.Forms.Control.KeyPress>用户按下某个键时, 将发生事件。 与<xref:System.Windows.Forms.Control.KeyPress>事件密切相关的两个事件为<xref:System.Windows.Forms.Control.KeyUp>和<xref:System.Windows.Forms.Control.KeyDown>。 当<xref:System.Windows.Forms.Control.KeyDown>用户按下某个键时,<xref:System.Windows.Forms.Control.KeyPress>事件位于每个事件的前面, 当用户释放某个键时, 将发生事件。<xref:System.Windows.Forms.Control.KeyUp> 当用户按下某个键时, 重复<xref:System.Windows.Forms.Control.KeyDown> <xref:System.Windows.Forms.Control.KeyPress> , 每次重复该字符时, 都会发生事件。 发布<xref:System.Windows.Forms.Control.KeyUp>时, 将生成一个事件。  
  
 对于每<xref:System.Windows.Forms.Control.KeyPress>个事件<xref:System.Windows.Forms.KeyPressEventArgs> , 都传递。 通过每个<xref:System.Windows.Forms.Control.KeyDown> 和<xref:System.Windows.Forms.Control.KeyUp>事件传递。 <xref:System.Windows.Forms.KeyEventArgs> 指定<xref:System.Windows.Forms.KeyEventArgs>是否将任何修改键 (CTRL、SHIFT 或 ALT) 与另一个键一起使用。 (也可以通过<xref:System.Windows.Forms.Control.ModifierKeys%2A> <xref:System.Windows.Forms.Control>类的属性获取此修饰符信息。)  
  
 设置<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A>为`true`可取消`KeyPress`事件。 这会使控件不会按下键进行处理。  
  
> [!NOTE]
>  某些控件将在上<xref:System.Windows.Forms.Control.KeyDown>处理某些关键笔画。 例如, <xref:System.Windows.Forms.RichTextBox>在调用之前<xref:System.Windows.Forms.Control.KeyPress>处理 Enter 键。 在这种情况下, 不能<xref:System.Windows.Forms.Control.KeyPress>取消事件, 而必须取消中<xref:System.Windows.Forms.Control.KeyDown>的键笔划。  
  
 有关事件模型的信息, 请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Forms.KeyPressEventArgs>在按下键时对键进行计数, 并在每次按键后显示结果。 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A>然后, 将设置为 true, 以防止操作系统进一步处理该键。 该示例假设有一个<xref:System.Windows.Forms.TextBox>放置在该窗体上的窗体。  
  
 [!code-cpp[Classic KeyPressEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic KeyPressEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic KeyPressEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source.vb#1)]  
  
 必须创建此类的新实例。 还必须设置事件处理程序。 可以在类的构造函数中执行此操作。  
  
 [!code-cpp[Classic KeyPressEventArgs Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic KeyPressEventArgs Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source2.cs#2)]
 [!code-vb[Classic KeyPressEventArgs Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source2.vb#2)]  
  
 当在控件中引发指定的事件时, 将调用附加的方法, 并且应用程序可以执行代码以响应事件。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
    <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyPressEventArgs (char keyChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char keyChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyPressEventArgs(char keyChar);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyPressEventArgs : char -&gt; System.Windows.Forms.KeyPressEventArgs" Usage="new System.Windows.Forms.KeyPressEventArgs keyChar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="keyChar">与用户按下的键相对应的 ASCII 字符。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=nameWithType>使用属性可获取修改键的当前状态。  
  
   
  
## Examples  
 下面的示例显示了一个消息框, 其中显示了 SHIFT 键的当前状态。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否处理过 <see cref="E:System.Windows.Forms.Control.KeyPress" /> 事件。</summary>
        <value>如果处理过事件，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未处理该事件, 则会将其发送到操作系统进行默认处理。 设置<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A>为`true`可取消`KeyPress`事件。  
  
   
  
## Examples  
 下面的示例创建一个<xref:System.Windows.Forms.TextBox>控件。 `keypressed` 方法<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>使用属性来检查是否按下了 ENTER 键。 如果按 ENTER 键, <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A>则将属性设置为`true`, 这表示处理事件。  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyChar">
      <MemberSignature Language="C#" Value="public char KeyChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char KeyChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char KeyChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.KeyChar : char with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与按下的键对应的字符。</summary>
        <value>撰写的 ASCII 字符。 例如，如果用户按下 Shift + K，则该属性返回一个大写的 K。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>使用属性在运行时采样击键, 并在特殊运行时条件下修改击键。 例如, 你可以使用<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>在用户输入邮政编码时禁用非数值 keypresses, 将数据输入字段中的所有字母都更改为大写, 或监视键盘或其他密钥输入设备的特定组合键。  
  
 可以获取或设置以下项:  
  
-   a-z、a-z。  
  
-   CTRL.  
  
-   标点符号。  
  
-   数字键, 都在键盘顶部和数字键盘上。  
  
-   回车.  
  
 无法获取或设置以下项:  
  
-   TAB 键。  
  
-   插入和删除。  
  
-   回家.  
  
-   端面.  
  
-   PAGE UP 和 PAGE DOWN。  
  
-   F1-F2。  
  
-   替代.  
  
-   箭头键。  
  
> [!NOTE]
>  有关如何检测以上提到的任何非字符密钥的信息, 请参阅<xref:System.Windows.Forms.KeyEventArgs>类。  
  
## Examples  
 下面的示例创建一个<xref:System.Windows.Forms.TextBox>控件。 `keypressed` 方法<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>使用属性来检查是否按下了 ENTER 键。 如果按 ENTER 键, <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A>则将属性设置为`true`, 这表示处理事件。  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>

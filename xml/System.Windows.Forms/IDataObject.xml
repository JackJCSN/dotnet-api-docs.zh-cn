<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5abc2b039389d79c9a7337771dae53202d6337a9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69187746" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为传送数据提供与格式无关的机制。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 接口由<xref:System.Windows.Forms.Clipboard>类和拖放操作使用。 `IDataObject`  
  
 在类中实现时, <xref:System.Windows.Forms.IDataObject>方法允许用户在类的实例中以多种格式存储数据。 以多种格式存储数据会增加目标应用程序 (其格式要求您可能不知道) 可以检索存储的数据的可能性。 若要在实例<xref:System.Windows.Forms.IDataObject>中存储数据, 请<xref:System.Windows.Forms.IDataObject.SetData%2A>调用方法, 并在`format`参数中指定数据格式。 如果您不希望`false`将存储的数据转换为另一种格式, 请将参数设置为。`autoConvert` 在<xref:System.Windows.Forms.IDataObject.SetData%2A> 一个<xref:System.Windows.Forms.IDataObject>实例上调用多次以以多种格式存储数据。  
  
 通过调用方法并在`format`参数中指定数据格式, 可以从中检索存储的数据。 <xref:System.Windows.Forms.IDataObject.GetData%2A> <xref:System.Windows.Forms.IDataObject> 将参数设置为`false` , 以仅检索以指定格式存储的数据。 `autoConvert` 若要将存储的数据转换为指定的格式`autoConvert` , `true`请将设置为, `autoConvert`否则不使用。  
  
 若要确定存储在中<xref:System.Windows.Forms.IDataObject>的数据的格式, 请使用以下<xref:System.Windows.Forms.IDataObject>方法。  
  
-   <xref:System.Windows.Forms.IDataObject.GetFormats%2A>调用方法以检索数据可用的所有格式的数组。 将参数设置为`false` , 以仅获取存储数据的格式。 `autoConvert` 若要获取数据可用的所有格式, 请将设置`autoConvert`为`true`, 或者不要使用此参数。  
  
-   <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>调用方法以确定存储的数据是否以特定格式提供。 如果你不希望将存储的数据转换为指定的格式, 请将`autoConvert`参数设置为。 `false`  
  
 有关此接口的实现, 请参见类。<xref:System.Windows.Forms.DataObject> 请参阅用于预定义<xref:System.Windows.Forms.Clipboard>数据格式的类。<xref:System.Windows.Forms.DataFormats>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>检索与指定的数据格式关联的数据。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">要检索的数据的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <summary>检索与指定的数据格式关联的数据。</summary>
        <returns>与指定格式关联的数据，或为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此方法无法找到具有指定格式的数据, 则会尝试将数据转换为格式。 如果数据无法转换为指定的格式, 则此方法返回`null`。  
  
 若要确定数据是与格式关联还是可转换为格式, 请在调用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> <xref:System.Windows.Forms.IDataObject.GetData%2A>前调用。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>以获取此实例中存储的数据的有效格式列表。  
  
> [!NOTE]
>  如果数据已存储, 则可以将其转换为另一种格式, 这种格式指定允许该转换, 并且请求的格式与存储格式兼容。 例如, 以 Unicode 形式存储的数据可以转换为文本。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类, 该类实现`IDataObject,`以`GetData`演示方法的用法。 方法用于检索存储在中`myDataObject`的数据, 该数据`Text`与格式相关联。 该示例假设已创建<xref:System.Windows.Forms.Form>一个名`Form1`为的和一个<xref:System.Windows.Forms.TextBox> `textBox1`名为的。  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format"><see cref="T:System.Type" /> 表示要检索的数据的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <summary>检索与指定的类类型格式关联的数据。</summary>
        <returns>与指定格式关联的数据，或为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此方法无法找到具有指定格式的数据, 则会尝试将数据转换为格式。 如果数据无法转换为指定的格式, 则此方法返回`null`。  
  
 若要确定数据是与格式关联还是可转换为格式, 请在调用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> <xref:System.Windows.Forms.IDataObject.GetData%2A>前调用。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>以获取此实例中存储的数据的有效格式列表。  
  
> [!NOTE]
>  如果数据已存储, 则可以将其转换为另一种格式, 这种格式指定允许该转换, 并且请求的格式与存储格式兼容。 例如, 以 Unicode 形式存储的数据可以转换为文本。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>实现`IDataObject`的类来`GetData`演示方法的用法。 方法用于检索存储在中`myObject`的数据, 该数据与特定`myType`类型相关联。 检索到的数据的类型会显示在消息框中。 该示例假设您已创建了一个<xref:System.Windows.Forms.Form>名为`Form1`的。  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">要检索的数据的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <param name="autoConvert">将数据转换成指定格式，值为 <see langword="true" />；反之，值为 <see langword="false" />。</param>
        <summary>检索与指定数据格式相关联的数据，并使用一个布尔值确定是否将数据转换成该格式。</summary>
        <returns>与指定格式关联的数据，或为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果参数为`true` , 并且此方法无法找到具有指定格式的数据, 则它会尝试将数据转换为格式。 `autoConvert` 如果数据无法转换为指定的格式, 或者如果数据是在`autoConvert`参数设置为`false`的情况下存储的, 则此方法`null`返回。  
  
 如果参数为`false`, 则此方法返回指定格式`null`的数据; 如果找不到此格式的数据, 则为。 `autoConvert`  
  
 若要确定数据是与格式关联还是可转换为格式, 请在调用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> <xref:System.Windows.Forms.IDataObject.GetData%2A>前调用。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>以获取此实例中存储的数据的有效格式列表。  
  
> [!NOTE]
>  如果数据已存储, 则可以将其转换为另一种格式, 这种格式指定允许该转换, 并且请求的格式与存储格式兼容。 例如, 以 Unicode 形式存储的数据可以转换为文本。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>实现`IDataObject`的类来`GetData`演示方法的用法。 该示例`DataObject` `autoConvert`使用参数来指定是否转换数据格式, 从而检索存储在中的数据。 首先, `myDataObject`用文本数据创建。 然后, 该示例尝试两次以检索数据。 在第一次试验中, 它将其格式指定为字符串, `autoConvert`并将`false`参数设置为。 此试用版失败, 结果显示在标有 "Message #1" 的消息框中。 在第二次试验中, 该示例将检索`autoConvert`参数设置为`true`的相同数据。 此试用版成功, 结果显示在标有 "Message #2" 的消息框中。 该示例假设您已创建了一个<xref:System.Windows.Forms.Form>名`Form1`为的。  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定此实例中存储的数据是否与指定的格式关联。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">要检查的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <summary>确定此实例中存储的数据是否与指定的格式关联，或是否可以转换成指定的格式。</summary>
        <returns>如果此实例中存储的数据与指定的格式关联，或者可以转换成指定的格式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法可在调用<xref:System.Windows.Forms.DataObject> <xref:System.Windows.Forms.IDataObject.GetData%2A>之前确定中是否存在格式。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>此实例中可用的格式。  
  
> [!NOTE]
>  如果数据已存储, 则可以将其转换为另一种格式, 这种格式指定允许该转换, 并且请求的格式与存储格式兼容。 例如, 以 Unicode 形式存储的数据可以转换为文本。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>实现`IDataObject`的类来`GetDataPresent`演示方法的用法。 首先, 它使用字符串和`Text`格式创建数据对象。 然后, 它将验证数据是否以`Text`格式显示, 并将结果显示在一个消息框中。 该示例假设您已创建了一个<xref:System.Windows.Forms.Form>名`Form1`为的。  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format"><see cref="T:System.Type" /> 表示要检查的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <summary>确定此实例中存储的数据是否与指定的格式关联，或是否可以转换成指定的格式。</summary>
        <returns>如果此实例中存储的数据与指定的格式关联，或者可以转换成指定的格式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法可在调用<xref:System.Windows.Forms.DataObject> <xref:System.Windows.Forms.IDataObject.GetData%2A>之前确定中是否存在格式。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>此实例中可用的格式。  
  
> [!NOTE]
>  如果数据已存储, 则可以将其转换为另一种格式, 这种格式指定允许该转换, 并且请求的格式与存储格式兼容。 例如, 以 Unicode 形式存储的数据可以转换为文本。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>实现`IDataObject`的类来`GetDataPresent`演示方法的用法。 首先, 它创建一个组件 (`myComponent`), 并将其存储在数据对象`myDataObject`() 中。 然后, 它会检查指定的数据是否存储`myDataObject`在中。 如果测试计算`true`, 它将在一个消息框中显示结果, 并在文本框中显示数据类型。 此示例假设您已创建<xref:System.Windows.Forms.Form>了名`Form1`为的和<xref:System.Windows.Forms.TextBox>名`textBox1`为的。  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">要检查的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <param name="autoConvert">值为 <see langword="true" /> 时，确定此实例中存储的数据是否可以转换成指定的格式；值为 <see langword="false" /> 时，检查数据的格式是否为指定的格式。</param>
        <summary>确定该实例中存储的数据是否与指定格式关联，同时使用一个布尔值确定是否将数据转换成此格式。</summary>
        <returns>如果数据采用指定的格式，或者可以转换成指定的格式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法可在调用<xref:System.Windows.Forms.DataObject> <xref:System.Windows.Forms.IDataObject.GetData%2A>之前确定中是否存在格式。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>此实例中可用的格式。  
  
 此方法在`true`以下情况下返回:  
  
-   `autoConvert`参数为`true` , 数据的格式可以转换为适当的格式。  
  
-   `autoConvert`参数为`false` , 数据采用适当的格式。  
  
 此方法在`false`以下情况下返回:  
  
-   参数为`true` , 并且此方法无法找到具有`autoConvert` `false`指定格式的数据, 并且它不能将数据转换为指定格式, 也不能将数据转换为指定的格式。 `autoConvert`  
  
-   参数为, `false`并且此实例中不存在具有指定格式的数据。 `autoConvert`  
  
> [!NOTE]
>  如果数据已存储, 则可以将其转换为另一种格式, 这种格式指定允许该转换, 并且请求的格式与存储格式兼容。 例如, 以 Unicode 形式存储的数据可以转换为文本。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>实现`IDataObject`的类来`GetDataPresent`演示方法的用法。 首先, 它使用字符串`myDataObject` `Text`和格式创建数据对象 ()。 然后, 它将在对象中查询与`Text`格式关联的数据, `autoConvert`并将参数设置为。 `false` 此试用版失败, 结果显示在标有 "Message #1" 的消息框中。 在第二次试验中, 它`autoConvert`将参数`true`设置为。 此试用版成功, 结果显示在标有 "Message #2" 的消息框中。 该示例假设您已创建了一个<xref:System.Windows.Forms.Form>名`Form1`为的。  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回存储在此实例中的数据所关联的或可以转换为的所有格式的列表。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回存储在此实例中的数据所关联的或可以转换为的所有格式的列表。</summary>
        <returns>一组名称，表示此对象中存储的数据所支持的所有格式列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在调用<xref:System.Windows.Forms.IDataObject.GetData%2A>方法之前调用此方法以获取支持的数据格式。 有关预定义格式, 请参阅类。<xref:System.Windows.Forms.DataFormats>  
  
> [!NOTE]
>  如果数据已存储, 则可以将其转换为另一种格式, 这种格式指定允许该转换, 并且请求的格式与存储格式兼容。 例如, 以 Unicode 形式存储的数据可以转换为文本。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>实现`IDataObject`的类来`GetFormats`演示方法的用法。 首先, 它使用字符串`myDataObject` `Text`和格式创建数据对象 ()。 然后, 它检索数据对象中的所有数据格式和数据转换格式, 并在消息框中显示结果列表。 此示例假设您已创建了一个<xref:System.Windows.Forms.Form>名`Form1`为的。  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert">值为 <see langword="true" /> 时，检索存储在此实例中的数据所关联的或可以转换成的所有格式；值为 <see langword="false" /> 时，仅检索本机数据格式。</param>
        <summary>获取该实例中存储的数据所关联或可转换到的所有格式的列表，同时使用一个布尔值确定是检索数据可转换到的所有格式，还是只检索本机数据格式。</summary>
        <returns>一组名称，表示此对象中存储的数据所支持的所有格式列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在调用<xref:System.Windows.Forms.IDataObject.GetData%2A>方法之前调用此方法以获取支持的数据格式。 有关预定义格式, 请参阅类。<xref:System.Windows.Forms.DataFormats>  
  
> [!NOTE]
>  如果数据已存储, 则可以将其转换为另一种格式, 这种格式指定允许该转换, 并且请求的格式与存储格式兼容。 例如, 以 Unicode 形式存储的数据可以转换为文本。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>实现`IDataObject`的类来`GetFormats`演示方法的用法。 首先, 它使用字符串`myDataObject` `UnicodeText`和格式创建数据对象 ()。 然后, 它将执行两个查询以获取与数据关联的格式。 在第一个查询中, 它将`autoConvert`参数设置`false`为: 在这种情况下, 只返回数据的本机格式。 在第二个查询中, 它`autoConvert`将参数`true`设置为, 以便它获取格式列表, 其中包括数据可以转换为的格式。 在每种情况下, 生成的列表显示在一个消息框中。 此示例假设您已创建了一个<xref:System.Windows.Forms.Form>名`Form1`为的。  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>存储此实例中的指定数据及其关联格式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">要存储的数据。</param>
        <summary>使用此格式的数据类存储此实例中的指定数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 格式是从数据类派生的。  
  
 在检索使用此方法存储的数据时, 可以将其转换为兼容的格式。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>实现`IDataObject`的类来`SetData`演示方法的用法。 首先, 它创建一个组件 (`myComponent`), 并将其存储在数据对象`myDataObject`() 中。 然后, 它会检查指定的数据是否存储在数据对象中, 并将结果显示在一个消息框中。 该示例假设您已创建了一个<xref:System.Windows.Forms.Form>名`Form1`为的。  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">与数据关联的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <param name="data">要存储的数据。</param>
        <summary>存储此实例中的指定数据及其关联格式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您不知道目标应用程序的格式, 则可以使用此方法以多种格式存储数据。  
  
 在检索使用此方法存储的数据时, 可以将其转换为兼容的格式。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>实现`IDataObject`的类来`SetData`演示方法的用法。 首先, 它创建一个数据对象 (`myDataObject`), 并在指定该`UnicodeText`格式的对象中存储一个字符串。 然后, 它检索存储在对象中的数据以`Text`指定格式, 以便将数据转换`Text`为格式。 结果显示在一个消息框中。 此示例假设您已创建了一个<xref:System.Windows.Forms.Form>名`Form1`为的。  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">表示与数据关联的格式的 <see cref="T:System.Type" />。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <param name="data">要存储的数据。</param>
        <summary>存储此实例中的指定数据及其关联类类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您不知道目标应用程序的格式, 则可以使用此方法以多种格式存储数据。  
  
 在检索使用此方法存储的数据时, 可以将其转换为兼容的格式。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>实现`IDataObject`的类来`SetData`演示方法的用法。 首先, 它创建一个组件 (`myComponent`), 并将其存储在数据对象`myDataObject`() 中`myType` , 并使用来指定数据格式。 然后, 它会检查指定类型的数据是否存储在对象中, 并将结果显示在一个消息框中。 该示例假设您已创建了一个<xref:System.Windows.Forms.Form>名`Form1`为的。  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">与数据关联的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <param name="autoConvert">如果允许将数据转换成另一格式，值为 <see langword="true" />；否则，值为 <see langword="false" />。</param>
        <param name="data">要存储的数据。</param>
        <summary>在该实例中存储指定的数据及其关联格式，同时使用一个布尔值指定数据能否转换成另一格式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您不知道目标应用程序的格式, 则可以使用此方法以多种格式存储数据。  
  
 有关此方法的实现, 请参见<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>实现`IDataObject`的类来`SetData`演示方法的用法。 首先, 它创建一个数据对象 (`myDataObject`), 并在`UnicodeText`其中存储一个字符串, 并`autoConvert`将参数设置`false`为。 然后, 它检索与存储在对象中的数据相关联的格式, 并将结果显示在一个消息框中。 与数据关联的唯一格式是`UnicodeText`格式。 此示例假设您已创建了一个<xref:System.Windows.Forms.Form>名`Form1`为的。  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>

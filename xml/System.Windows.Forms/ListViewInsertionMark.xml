<Type Name="ListViewInsertionMark" FullName="System.Windows.Forms.ListViewInsertionMark">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fdaceaed20c153203cea1972e67e3d42a14a77ab" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64270729" /></Metadata><TypeSignature Language="C#" Value="public sealed class ListViewInsertionMark" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ListViewInsertionMark extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListViewInsertionMark" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ListViewInsertionMark" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListViewInsertionMark sealed" />
  <TypeSignature Language="F#" Value="type ListViewInsertionMark = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>在 <see cref="T:System.Windows.Forms.ListView" /> 控件中将某项拖动到新位置时，用于指示期望的拖放位置。 此功能仅适用于 Windows XP 和更高版本。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以检索<xref:System.Windows.Forms.ListViewInsertionMark>从<xref:System.Windows.Forms.ListView.InsertionMark%2A>属性的<xref:System.Windows.Forms.ListView>控件，并使用它以视觉方式指示在拖放操作中的预期的放置位置时某一项拖动到新位置。  
  
 此功能时才起作用<xref:System.Windows.Forms.ListView.AutoArrange%2A?displayProperty=nameWithType>属性设置为`true`以及何时<xref:System.Windows.Forms.ListView>控件不会自动排序项。 若要防止自动排序<xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType>属性必须设置为<xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType>并<xref:System.Windows.Forms.ListView.View%2A?displayProperty=nameWithType>属性必须设置为<xref:System.Windows.Forms.View.LargeIcon?displayProperty=nameWithType>， <xref:System.Windows.Forms.View.SmallIcon?displayProperty=nameWithType>，或<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>。 此外，不能用于插入标记功能<xref:System.Windows.Forms.ListView>由于分组功能进行排序的组成员身份的项分组功能。  
  
 <xref:System.Windows.Forms.ListViewInsertionMark>的处理程序中通常使用类<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>或<xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType>事件来更新插入标记的位置，如拖动项。 中的处理程序也使用<xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType>或<xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType>事件以便在正确的位置将拖动的项。  
  
 若要更新的位置插入标记，请按照下列步骤：  
  
1.  中的处理程序<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>或<xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType>事件，使用<xref:System.Windows.Forms.ListView.InsertionMark%2A?displayProperty=nameWithType>属性来访问<xref:System.Windows.Forms.ListViewInsertionMark>对象与关联<xref:System.Windows.Forms.ListView>控件。  
  
2.  使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法来检索与鼠标指针最接近的项的索引。  
  
3.  传递到的索引值<xref:System.Windows.Forms.ListView.GetItemRect%2A?displayProperty=nameWithType>方法来检索项的边框。  
  
4.  如果鼠标指针位于左侧的中点的边框，设置<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>属性设置为`false`; 否则为将其设置为`true`。  
  
5.  设置<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>属性检索到的索引值从<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法。 具有指定索引到左侧或右侧，具体取决于项旁边显示插入标记<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>属性值。 如果某项拖动到其本身，则索引为-1，隐藏插入标记。  
  
 若要在正确的位置插入所拖动的项，请按照下列步骤：  
  
1.  中的处理程序<xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType>或<xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType>事件，使用<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>属性来确定当前插入标记的位置。 将此值，供以后作为插入索引的存储。  
  
2.  如果<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>属性设置为`true`，递增存储的插入索引值。  
  
3.  使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.Insert%2A?displayProperty=nameWithType>方法插入到所拖动的项的克隆<xref:System.Windows.Forms.ListView.Items%2A?displayProperty=nameWithType>集合中存储的插入索引处。  
  
4.  使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.Remove%2A?displayProperty=nameWithType>方法所拖动的项的原始副本中删除。  
  
 中的索引值以便删除原始副本之前，必须插入所拖动的项的克隆<xref:System.Windows.Forms.ListView.Items%2A?displayProperty=nameWithType>集合，不会更改之前插入。  
  
 若要确保这些项显示在其索引值的顺序相同，必须设置<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A?displayProperty=nameWithType>属性的实现<xref:System.Collections.IComparer>项进行排序的索引值的接口。 有关详细信息，请参阅示例部分。  
  
 可以使用修改的插入标记的颜色<xref:System.Windows.Forms.ListViewInsertionMark.Color%2A>属性。 如果您需要的大小或位置的插入标记，可以通过获取其边框<xref:System.Windows.Forms.ListViewInsertionMark.Bounds%2A>属性。  
  
> [!NOTE]
>  当你的应用程序调用时，插入标记功能是仅适用于 Windows XP 和 Windows Server 2003 系列<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 在早期操作系统上将忽略与插入标记相关的任何代码，并且插入标记将不会出现。 因此，插入标记功能所依赖的任何代码可能无法正常工作。 可能想要包括的测试，确定，插入标记功能是否可用，并且不可用时提供备用的功能。 例如，你可能想要绕过实现拖放项重新定位时不支持插入标记的操作系统上运行的所有代码。  
>   
>  插入标记功能提供的同一个库提供操作系统主题功能。 若要检查此库的可用性，请调用<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>方法重载，并传入<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView>插入标记功能和实现拖放项重新排序使用的是标准拖动事件。 插入标记的位置更新处理程序中<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在此处理程序中，鼠标指针的位置进行比较的中点的最近的项，并使用结果以确定左侧或右侧的项是否显示插入标记。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListView" />
  </Docs>
  <Members>
    <Member MemberName="AppearsAfterItem">
      <MemberSignature Language="C#" Value="public bool AppearsAfterItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AppearsAfterItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem" />
      <MemberSignature Language="VB.NET" Value="Public Property AppearsAfterItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AppearsAfterItem { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AppearsAfterItem : bool with get, set" Usage="System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在项的右侧显示插入标记，该项带有 <see cref="P:System.Windows.Forms.ListViewInsertionMark.Index" /> 属性指定的索引。</summary>
        <value>如果在带有索引（由 <see cref="P:System.Windows.Forms.ListViewInsertionMark.Index" /> 属性指定）的项的右侧显示插入标记，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法可让你找到项最接近的鼠标指针，但必须执行自己的计算来确定此选项之前或之后是否应显示插入标记。  
  
 若要计算所需的值<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>属性，请执行以下步骤：  
  
1.  使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法来检索与鼠标指针最接近的项的索引。  
  
2.  传递到的索引值<xref:System.Windows.Forms.ListView.GetItemRect%2A?displayProperty=nameWithType>方法来检索项的边框。  
  
3.  如果鼠标指针位于左侧的中点的边框，设置<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>属性设置为`false`; 否则为将其设置为`true`。  
  
 有关详细信息，请参阅<xref:System.Windows.Forms.ListViewInsertionMark>概述参考主题。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView>插入标记功能和实现拖放项重新排序使用的是标准拖动事件。 插入标记的位置更新处理程序中<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在此处理程序中，鼠标指针的位置进行比较的中点的最近的项，并使用结果以确定左侧或右侧的项是否显示插入标记。  
  
 有关完整示例，请参阅<xref:System.Windows.Forms.ListViewInsertionMark>概述参考主题。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#3)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle" Usage="System.Windows.Forms.ListViewInsertionMark.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取插入标记的边框。</summary>
        <value><see cref="T:System.Drawing.Rectangle" /> 用于表示插入标记的位置和大小。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中插入标记边框的坐标是相对于左上角的<xref:System.Windows.Forms.ListView>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Drawing.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color Color { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.Color : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListViewInsertionMark.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此插入标记的颜色。</summary>
        <value>一个 <see cref="T:System.Drawing.Color" /> 值，表示插入标记的颜色。 默认值为 <see cref="P:System.Windows.Forms.ListView.ForeColor" /> 属性的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性设置为以外的前景色的值插入标记颜色<xref:System.Windows.Forms.ListView>控件。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView>插入标记功能和实现拖放项重新排序使用的是标准拖动事件。 插入标记的位置更新处理程序中<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在此处理程序中，鼠标指针的位置进行比较的中点的最近的项，并使用结果以确定左侧或右侧的项是否显示插入标记。  
  
 有关完整示例，请参阅<xref:System.Windows.Forms.ListViewInsertionMark>概述参考主题。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#2)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.Index" />
      <MemberSignature Language="VB.NET" Value="Public Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Index : int with get, set" Usage="System.Windows.Forms.ListViewInsertionMark.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与插入标记旁边的项的索引。</summary>
        <value>插入标记旁边的项的索引；如果隐藏插入标记，则为 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果具有指定索引的项的左侧显示插入标记<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>属性设置为`false`; 否则为它将出现的项的右侧。 插入标记将自动消失时拖动的项插入到<xref:System.Windows.Forms.ListView.Items%2A?displayProperty=nameWithType>集合。 若要插入标记手动删除，例如，拖放到本身或拖出控件项时，将设置<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>值为-1。  
  
 使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法来检索与指定的位置，例如鼠标指针定位在拖放操作中的某个项时的位置最接近的项的索引。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView>插入标记功能和实现拖放项重新排序使用的是标准拖动事件。 插入标记的位置更新处理程序中<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在此处理程序中，鼠标指针的位置进行比较的中点的最近的项，并使用结果以确定左侧或右侧的项是否显示插入标记。  
  
 有关完整示例，请参阅<xref:System.Windows.Forms.ListViewInsertionMark>概述参考主题。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#3)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="NearestIndex">
      <MemberSignature Language="C#" Value="public int NearestIndex (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NearestIndex(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListViewInsertionMark.NearestIndex(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function NearestIndex (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NearestIndex(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="member this.NearestIndex : System.Drawing.Point -&gt; int" Usage="listViewInsertionMark.NearestIndex pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">从 <see cref="T:System.Drawing.Point" /> 表示的位置找到最近的项。</param>
        <summary>检索距离指定点最近的项的索引。</summary>
        <returns>距离指定点最近的项的索引；如果最近的项就是当前被拖动的项，则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使您可以查找与鼠标指针最近的项目时进行拖放操作。 使用索引值返回设置<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>属性。 当鼠标指针与最近的项目是正被拖动的项时，则此方法的返回值为-1。 在这种情况下，设置<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>属性为此值将会隐藏插入标记。  
  
 此方法将查找最近的项而不考虑在鼠标指针的位置，同时<xref:System.Windows.Forms.ListView.GetItemAt%2A?displayProperty=nameWithType>方法将返回位于指定位置，项或`null`如果在该位置没有项。 <xref:System.Windows.Forms.ListView.GetItemAt%2A?displayProperty=nameWithType>方法将返回`null`，例如，当鼠标指针位于两个项之间。 出于此原因，您应始终使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法时使用拖放操作来定位项。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListView>插入标记功能和实现拖放项重新排序使用的是标准拖动事件。 插入标记的位置更新处理程序中<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在此处理程序中，鼠标指针的位置进行比较的中点的最近的项，并使用结果以确定左侧或右侧的项是否显示插入标记。  
  
 有关完整示例，请参阅<xref:System.Windows.Forms.ListViewInsertionMark>概述参考主题。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#3)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
  </Members>
</Type>
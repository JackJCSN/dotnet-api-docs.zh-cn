<Type Name="ApplicationActivator" FullName="System.Runtime.Hosting.ApplicationActivator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="195ffd711b22fe15ac6d0cfd77749a1abaf8092a" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64161413" /></Metadata><TypeSignature Language="C#" Value="public class ApplicationActivator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ApplicationActivator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Hosting.ApplicationActivator" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationActivator" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationActivator" />
  <TypeSignature Language="F#" Value="type ApplicationActivator = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供用于激活基于清单的程序集的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 没有指定的单一实例<xref:System.Runtime.Hosting.ApplicationActivator>中每个类<xref:System.AppDomain>调用路由到的所有激活。 <xref:System.AppDomainManager>为当前<xref:System.AppDomain>可以提供其自己的自定义<xref:System.Runtime.Hosting.ApplicationActivator>实现此目的。 如果自定义<xref:System.Runtime.Hosting.ApplicationActivator>未提供，默认值的实例<xref:System.Runtime.Hosting.ApplicationActivator>创建。  
  
 以下步骤介绍了默认的行为<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>方法实现：  
  
1.  检查是否<xref:System.ActivationContext>的外接程序是已激活的匹配项<xref:System.ActivationContext>的当前应用程序域。 如果不是，继续到步骤 2。 否则为执行的程序集，并返回结果包装在对象句柄。  
  
2.  在新外接程序激活<xref:System.AppDomain>。 执行以下步骤来初始化新<xref:System.AppDomain>使用<xref:System.Runtime.Hosting.ActivationArguments>外接程序。  
  
    1.  创建一个新<xref:System.AppDomainSetup>对象使用<xref:System.Runtime.Hosting.ActivationArguments>对象，其中包含外接程序的激活上下文。  
  
    2.  调用<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>方法来创建新的域使用<xref:System.AppDomainSetup>对象。  
  
    3.  <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>方法调用<xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType>方法获取<xref:System.Security.Policy.ApplicationTrust>外接程序的对象。 如果<xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A>属性返回`true`外, 接程序执行。 如果不是，<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>引发<xref:System.Security.Policy.PolicyException>，该值指示无法获取执行权限。  
  
    4.  如果外接程序可为运行，则新信任<xref:System.AppDomain>创建并配置为<xref:System.ActivationContext>的外接程序和外接程序加载并执行。  
  
    5.  返回的结果的外接程序激活，包装在对象句柄。  
  
 自定义激活器可以定制外接程序为一组特定的情况下的激活。 例如，自定义激活器无法找到现有<xref:System.AppDomain>激活该外接程序而不是每次创建新的域。  
  
 以下步骤介绍了自定义的行为<xref:System.Runtime.Hosting.ApplicationActivator>外接程序中的现有激活<xref:System.AppDomain>:  
  
1.  自定义激活器找到的域具有相同<xref:System.ActivationContext>作为正在激活的外接程序。  
  
2.  如果<xref:System.ActivationContext>永远不会出现之前在过程中，自定义激活器创建一个新<xref:System.AppDomain>此<xref:System.ActivationContext>通过调用<xref:System.AppDomain.CreateDomain%2A>直接方法或委托此活动<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>基类中。  
  
3.  如果没有现有的域具有相同<xref:System.ActivationContext>，然后激活器可以委派<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>方法调用<xref:System.Runtime.Hosting.ApplicationActivator>目标域中。 请注意，这将是跨域调用<xref:System.Runtime.Hosting.ApplicationActivator>驻留在目标中<xref:System.AppDomain>。  
  
   
  
## Examples  
 下面的代码示例演示如何获取<xref:System.Runtime.Hosting.ApplicationActivator>从当前对象<xref:System.AppDomain.DomainManager%2A>基于清单的应用程序。  
  
 [!code-csharp[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/cs/program.cs#1)]
 [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationActivator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationActivator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Hosting.ApplicationActivator" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用标识应用程序的激活上下文创建要激活的应用程序的实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : ActivationContext -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : ActivationContext -&gt; System.Runtime.Remoting.ObjectHandle" Usage="applicationActivator.CreateInstance activationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
      </Parameters>
      <Docs>
        <param name="activationContext">标识要激活的应用程序的 <see cref="T:System.ActivationContext" />。</param>
        <summary>使用指定的激活上下文创建要激活的应用程序的实例。</summary>
        <returns>一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。 返回值需要打开包装才能访问真实对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法适用于应用程序的基于清单的激活。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="activationContext" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext, string[] activationCustomData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext, cli::array &lt;System::String ^&gt; ^ activationCustomData);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : ActivationContext * string[] -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : ActivationContext * string[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="applicationActivator.CreateInstance (activationContext, activationCustomData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
        <Parameter Name="activationCustomData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="activationContext">标识要激活的应用程序的 <see cref="T:System.ActivationContext" />。</param>
        <param name="activationCustomData">自定义激活数据。</param>
        <summary>使用指定的激活上下文和自定义激活数据创建要激活的应用程序的实例。</summary>
        <returns>一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。 返回值需要打开包装才能访问真实对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法适用于应用程序的基于清单的激活。 激活数据包含的信息，例如 URL 的查询字符串部分。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="activationContext" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHelper">
      <MemberSignature Language="C#" Value="protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceHelper(class System.AppDomainSetup adSetup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateInstanceHelper (adSetup As AppDomainSetup) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceHelper(AppDomainSetup ^ adSetup);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceHelper : AppDomainSetup -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper adSetup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adSetup" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="adSetup">一个 <see cref="T:System.AppDomainSetup" /> 对象，它的 <see cref="P:System.AppDomainSetup.ActivationArguments" /> 属性标识要激活的应用程序。</param>
        <summary>使用指定的 <see cref="T:System.AppDomainSetup" /> 对象创建应用程序的实例。</summary>
        <returns>一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。 返回值需要打开包装才能访问真实对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法适用于应用程序的基于清单的激活。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="adSetup" /> 的 <see cref="P:System.AppDomainSetup.ActivationArguments" /> 属性为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Policy.PolicyException">未能执行应用程序实例，因为当前应用程序域上的策略设置没有提供运行该应用程序的权限。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
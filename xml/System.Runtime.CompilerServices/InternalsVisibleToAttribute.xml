<Type Name="InternalsVisibleToAttribute" FullName="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="657e65a2c4f745a71b7324c59207c72d70b93f6d" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70678089" /></Metadata><TypeSignature Language="C#" Value="public sealed class InternalsVisibleToAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InternalsVisibleToAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InternalsVisibleToAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InternalsVisibleToAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type InternalsVisibleToAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定通常仅在当前程序集中可见的类型对指定程序集可见。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常， `internal`具有或`private protected`范围的类型和成员（ C#在中`Friend` ） `Private Protected`和作用域（在 Visual Basic 中）只在定义它们的程序集中可见。 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性使它们也对指定程序集中的类型可见，这称为友元程序集。 这仅适用于`internal` （`Friend`在 vb 中） `private protected`或`Private Protected` （在 vb 中）方法，但`private`不适用于其中的一个。
  
 在程序集级别应用特性。 这意味着它可以包括在源代码文件的开头，也可以包含在 Visual Studio 项目的 AssemblyInfo 文件中。 您可以使用特性来指定可访问当前程序集的内部类型和成员的单个友元程序集。 可以通过两种方式来定义多个友元程序集。 它们可以显示为单独的程序集级别特性，如下面的示例所示。  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  
  
 它们还可以用单独<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>的标记显示，但使用单个`assembly`关键字，如下面的示例所示。  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  
  
 友元程序集由<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A>构造函数标识。 当前程序集和友元程序集都必须是无符号的，或者这两个程序集都必须使用强名称进行签名。  
  
 如果这两个程序集都`assemblyName`无符号，则参数由指定的友元程序集的名称组成，无需使用目录路径或文件扩展名。  
  
 如果这两个程序集都使用强名称进行签名，则<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A>构造函数的参数必须包含程序集的名称，而不包含其目录路径或文件扩展名，以及完整的公钥（而不是其公钥标记）。 若要获取强名称程序集的完整公钥，请参阅本文后面的[获取完整公钥](#Key)部分。 有关使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>具有强名称的程序集的详细信息， <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A>请参阅构造函数。  
  
 不要在参数中包含、 <xref:System.Reflection.AssemblyName.CultureInfo%2A> <xref:System.Reflection.AssemblyName.Version%2A>或<xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A>字段的值，Visual Basic、 C#和C++编译器会将其视为编译器错误。 如果你使用的编译器不将其视为错误（如[IL 汇编程序（ILAsm）](~/docs/framework/tools/ilasm-exe-il-assembler.md)）并且程序集具有强名称， <xref:System.MethodAccessException>则在指定的友元程序第一次访问包含<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性。  
  
 有关如何使用此属性的详细信息，请参阅以下主题：  
  
-   [友元程序集 (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [友元程序集](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
<a name="Key"></a>   
## <a name="getting-the-full-public-key"></a>获取完整公钥  
 您可以使用[强名称工具（sn.exe）](~/docs/framework/tools/sn-exe-strong-name-tool.md)从强名称密钥（.snk）文件中检索完整公钥。 为此，请执行以下步骤：  
  
1.  将公钥从强名称密钥文件提取到单独的文件中：  
  
     **Sn-p***snk_file**outfile*  
  
2.  向控制台显示完整公钥：  
  
     **Sn-tp**  *outfile*  
  
3.  将完整的公钥值复制并粘贴到源代码中。  
  
## <a name="compiling-the-friend-assembly-with-c"></a>用编译友元程序集C#  
 如果使用C#编译器编译友元程序集，则必须使用 **/out**编译器选项显式指定输出文件的名称（.exe 或 .dll）。 这是必需的，因为编译器尚未为它在绑定到外部引用时而正在构建的程序集生成名称。 **/Out**编译器选项对于 Visual Basic 编译器是可选的，并且不应在使用F#编译器编译友元程序集时使用相应的**输出**或 **-o**编译器选项。  
  
## <a name="compiling-the-friend-assembly-with-c"></a>用编译友元程序集C++  
 在C++中，为了使友元程序集可访问该<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性启用的内部成员，必须在C++指令中使用`as_friend`特性。 有关详细信息，请参阅[友元C++程序集（）](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)。  
  
   
  
## Examples  
 **签名的程序集**  
  
 下面的示例使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>属性， `internal`使签名程序集中名`AppendDirectorySeparator`为的方法对其他已签名程序集可见。 它定义了`FileUtilities`一个包含内部`AppendDirectorySeparator`方法的类。 特性应用于`FileUtilities`包含类的程序集。 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性允许名`Friend1`为的程序集访问此内部成员。  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 如果下面的示例编译为名`Friend1`为的强名称程序集，则`Example.Main` `FileUtilities.AppendDirectorySeparator`中`Friend1`的方法可以成功调用方法，尽管该方法是`Assembly1`程序集的内部方法。 请注意，如果C#从命令行进行编译，则必须使用 **/out**编译器开关，以确保当编译器绑定到外部引用时，友元程序集的名称可用。  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 **未签名的程序集**  
  
 下面的示例使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性`internal`使无符号程序集的成员对其他未签名的程序集可见。 特性`internal`可确保`StringLib.IsFirstLetterUpperCase`名`UtilityLib`为的程序集中的代码对名为的程序集中的方法`Friend2`可见。  下面是 UtilityLib 的源代码：  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 下面的示例提供`Friend2`程序集的源代码。 请注意，如果C#从命令行进行编译，则必须使用 **/out**编译器开关，以确保当编译器绑定到外部引用时，友元程序集的名称可用。  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalsVisibleToAttribute (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InternalsVisibleToAttribute(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.CompilerServices.InternalsVisibleToAttribute : string -&gt; System.Runtime.CompilerServices.InternalsVisibleToAttribute" Usage="new System.Runtime.CompilerServices.InternalsVisibleToAttribute assemblyName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">友元程序集的名称。</param>
        <summary>用指定的友元程序集的名称初始化 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A>构造函数定义友元程序集，该程序集是有权访问当前程序集的内部和私有受保护类型和成员的程序集。  
  
 当前程序集和友元程序集都必须是无符号的，或者两者都必须使用强名称进行签名。 （有关强名称程序集的详细信息，请参阅[创建和使用具有强名称的程序集](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)。）如果两者都无符号， `assemblyName`则参数由指定的友元程序集的名称组成，无需目录路径或文件扩展名。 如果两者都有签名`assemblyName` ，则包含友元程序集的名称，而不包含其目录路径或文件扩展名，以及其完整公钥（但不包含公钥标记）。 不能在`assemblyName`参数中指定强名称的其他组件，如提供区域性、版本或处理器体系结构信息的组件。  
  
> [!IMPORTANT]
>  如果使用C#编译器编译友元程序集，则必须使用 **/out**编译器选项显式指定输出文件的名称（.exe 或 .dll）。 这是必需的，因为编译器尚未为它在绑定到外部引用时而正在构建的程序集生成名称。 **/Out**编译器选项对于 Visual Basic 编译器是可选的，并且不应在使用F#编译器编译友元程序集时使用相应的**输出**或 **-o**编译器选项。  
  
 可以使用[sn.exe （强名称工具）](~/docs/framework/tools/sn-exe-strong-name-tool.md)从强名称密钥（.snk）文件中检索完整公钥。 为此，请执行以下步骤：  
  
1.  将公钥从强名称密钥文件提取到单独的文件中：  
  
     **Sn-p***snk_file**outfile*  
  
2.  向控制台显示完整公钥：  
  
     **Sn-tp**  *outfile*  
  
3.  将完整的公钥值复制并粘贴到源代码中。  
  
 有关如何使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>属性的详细信息，请参阅以下主题：  
  
-   [友元程序集 (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [友元程序集](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
   
  
## Examples  
 **签名的程序集**  
  
 下面的示例使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>属性， `internal`使签名程序集中名`AppendDirectorySeparator`为的方法对其他已签名程序集可见。 它定义了`FileUtilities`一个包含内部`AppendDirectorySeparator`方法的类。 特性应用于`FileUtilities`包含类的程序集。 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性允许名`Friend1`为的程序集访问此内部成员。  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 如果下面的示例编译为名为`Friend1`的强名称程序集，则它可以成功`FileUtilities.AppendDirectorySeparator`调用方法，即使该`Assembly1`方法是程序集的内部方法。 请注意，如果C#从命令行进行编译，则必须使用 **/out**编译器开关，以确保当编译器绑定到外部引用时，友元程序集的名称可用。  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 下面的示例使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性`internal`使无符号程序集的成员对其他未签名的程序集可见。 特性`internal`可确保`StringLib.IsFirstLetterUpperCase`名`UtilityLib`为的程序集中的代码对名为的程序集中的方法`Friend2`可见。  下面是 UtilityLib 的源代码：  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 **未签名的程序集**  
  
 下面的示例提供`Friend2`程序集的源代码。 请注意，如果C#从命令行进行编译，则必须使用 **/out**编译器开关，以确保当编译器绑定到外部引用时，友元程序集的名称可用。  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllInternalsVisible">
      <MemberSignature Language="C#" Value="public bool AllInternalsVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllInternalsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property AllInternalsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllInternalsVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllInternalsVisible : bool with get, set" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>不实现此属性。</summary>
        <value>此属性不返回值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : string" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取友元程序集的名称，采用 <see langword="internal" /> 关键字标记的所有类型和类型成员对该程序集均为可见。</summary>
        <value>一个表示友元程序集名称的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>属性的详细信息，请参阅以下主题：  
  
-   [友元程序集 (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [友元程序集](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback" FullName="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="134801fc6fef443d3c5299eacf2142e1f51b1ec4" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70593008" /></Metadata><TypeSignature Language="C#" Value="public delegate TValue ConditionalWeakTable&lt;TKey,TValue&gt;.CreateValueCallback(TKey key) where TKey : class where TValue : class;" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed ConditionalWeakTable`2/CreateValueCallback&lt;class TKey, class TValue&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function ConditionalWeakTable(Of TKey, TValue).CreateValueCallback(key As TKey) As TValue " />
  <TypeSignature Language="C++ CLI" Value="public:  where TKey : class where TValue : classdelegate TValue ConditionalWeakTable&lt;TKey, TValue&gt;::CreateValueCallback(TKey key);" />
  <TypeSignature Language="F#" Value="type ConditionalWeakTable&lt;'Key, 'Value (requires 'Key : null and 'Value : null)&gt;.CreateValueCallback = delegate of 'Key -&gt; 'Value" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TValue">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="key" Type="TKey" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TValue</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="key">属于要创建的值的键。</param>
    <summary>表示一种方法，用于创建作为键/值对的一部分添加到 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 对象的非默认值。</summary>
    <returns>一个引用类型的实例，该类型表示要附加到指定键的值。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 委托封装一个回调方法，当在<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>对象中找<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A?displayProperty=nameWithType>不到传递给方法的键时，该方法将调用此方法。 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback> <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>方法传递回调方法密钥，该密钥表示要向其动态附加属性值的托管对象。 方法负责将属性值返回到其调用方，进而将键/值对添加到表中。  
  
 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback>方法用于返回可附加到指定键的引用类型的实例。 它允许使用非默认值初始化该实例。 如果在表中找不到该键，则<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A?displayProperty=nameWithType>方法添加一个键/值对，其中使用默认值初始化值。  
  
   
  
## Examples  
 下面的示例定义了`MainClass`一个类和`MainInfo`一个类。 `MainInfo`提供有关实例的`MainClass`信息。 它还定义了一个静态`Shared` （在 Visual Basic `CreateAttachedValue` ）方法，该方法<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback>可分配给委托并传递<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>给方法。 该示例调用<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>方法， `MainClass`将对象及其相应`MainInfo`的对象添加到<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>表中。 该示例还演示了对和<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>方法的调用，以便向表中添加键/值对， <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A>并对方法的调用以检索属于现有键的值。  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)" />
  </Docs>
</Type>

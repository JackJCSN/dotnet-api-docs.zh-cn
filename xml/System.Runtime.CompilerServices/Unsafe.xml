<Type Name="Unsafe" FullName="System.Runtime.CompilerServices.Unsafe">
  <Metadata><Meta Name="ms.openlocfilehash" Value="04efa90d33a237bd7b2834705199dfb8674ec41e" /><Meta Name="ms.sourcegitcommit" Value="d273738f2e9a7125fddf20a2da56406d86290ce9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/10/2019" /><Meta Name="ms.locfileid" Value="67725149" /></Metadata><TypeSignature Language="C#" Value="public static class Unsafe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Unsafe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.Unsafe" />
  <TypeSignature Language="VB.NET" Value="Public Class Unsafe" />
  <TypeSignature Language="C++ CLI" Value="public ref class Unsafe abstract sealed" />
  <TypeSignature Language="F#" Value="type Unsafe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.1</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="bebbb-101">Contains generic, low-level functionality for manipulating pointers.</span><span class="sxs-lookup"><span data-stu-id="bebbb-101">Contains generic, low-level functionality for manipulating pointers.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* Add&lt;T&gt; (void* source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* Add&lt;T&gt;(void* source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* Add(void* source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add : nativeptr&lt;unit&gt; * int -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="elementOffset" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="elementOffset">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add :  * int -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-102">引用的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-102">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-103">The reference to add the offset to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-103">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="bebbb-104">The offset to add.</span><span class="sxs-lookup"><span data-stu-id="bebbb-104">The offset to add.</span></span></param>
        <summary><span data-ttu-id="bebbb-105">Adds an element offset to the given reference.</span><span class="sxs-lookup"><span data-stu-id="bebbb-105">Adds an element offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="bebbb-106">A new reference that reflects the addition of offset to pointer.</span><span class="sxs-lookup"><span data-stu-id="bebbb-106">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, IntPtr elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-107">引用的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-107">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-108">The reference to add the offset to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-108">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="bebbb-109">The offset to add.</span><span class="sxs-lookup"><span data-stu-id="bebbb-109">The offset to add.</span></span></param>
        <summary><span data-ttu-id="bebbb-110">Adds an element offset to the given reference.</span><span class="sxs-lookup"><span data-stu-id="bebbb-110">Adds an element offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="bebbb-111">A new reference that reflects the addition of offset to pointer.</span><span class="sxs-lookup"><span data-stu-id="bebbb-111">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AddByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AddByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AddByteOffset(T % source, IntPtr byteOffset);" />
      <MemberSignature Language="F#" Value="static member AddByteOffset :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AddByteOffset (source, byteOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-112">引用的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-112">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-113">The reference to add the offset to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-113">The reference to add the offset to.</span></span></param>
        <param name="byteOffset"><span data-ttu-id="bebbb-114">The offset to add.</span><span class="sxs-lookup"><span data-stu-id="bebbb-114">The offset to add.</span></span></param>
        <summary><span data-ttu-id="bebbb-115">Adds a byte offset to the given reference.</span><span class="sxs-lookup"><span data-stu-id="bebbb-115">Adds a byte offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="bebbb-116">A new reference that reflects the addition of byte offset to pointer.</span><span class="sxs-lookup"><span data-stu-id="bebbb-116">A new reference that reflects the addition of byte offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool AreSame&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreSame&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreSame(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool AreSame(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member AreSame :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.AreSame (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-1.1;netcore-3.0" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-1.1;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-117">引用的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-117">The type of reference.</span></span></typeparam>
        <param name="left"><span data-ttu-id="bebbb-118">The first reference to compare.</span><span class="sxs-lookup"><span data-stu-id="bebbb-118">The first reference to compare.</span></span></param>
        <param name="right"><span data-ttu-id="bebbb-119">The second reference to compare.</span><span class="sxs-lookup"><span data-stu-id="bebbb-119">The second reference to compare.</span></span></param>
        <summary><span data-ttu-id="bebbb-120">Determines whether the specified references point to the same location.</span><span class="sxs-lookup"><span data-stu-id="bebbb-120">Determines whether the specified references point to the same location.</span></span></summary>
        <returns><span data-ttu-id="bebbb-121"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> point to the same location; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bebbb-121"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> point to the same location; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T As&lt;T&gt; (object o) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T As&lt;class T&gt;(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of T As Class) (o As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T As(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member As : obj -&gt; 'T (requires 'T : null)" Usage="System.Runtime.CompilerServices.Unsafe.As o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-122">该对象将被转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-122">The type which the object will be cast to.</span></span></typeparam>
        <param name="o"><span data-ttu-id="bebbb-123">The object to cast.</span><span class="sxs-lookup"><span data-stu-id="bebbb-123">The object to cast.</span></span></param>
        <summary><span data-ttu-id="bebbb-124">Casts the given object to the specified type.</span><span class="sxs-lookup"><span data-stu-id="bebbb-124">Casts the given object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="bebbb-125">The original object, casted to the given type.</span><span class="sxs-lookup"><span data-stu-id="bebbb-125">The original object, casted to the given type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static TTo As&lt;TFrom,TTo&gt; (ref TFrom source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TTo As&lt;TFrom, TTo&gt;(!!TFrom&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of TFrom, TTo) (ByRef source As TFrom) As TTo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; static TTo % As(TFrom % source);" />
      <MemberSignature Language="F#" Value="static member As :  -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.As source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TTo@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom" />
        <TypeParameter Name="TTo" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="TFrom&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="bebbb-126">要重新解释的引用的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-126">The type of reference to reinterpret.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="bebbb-127">引用所需的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-127">The desired type of the reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-128">The reference to reinterpret.</span><span class="sxs-lookup"><span data-stu-id="bebbb-128">The reference to reinterpret.</span></span></param>
        <summary><span data-ttu-id="bebbb-129">Reinterprets the given reference as a reference to a value of type <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="bebbb-129">Reinterprets the given reference as a reference to a value of type <typeparamref name="TTo" />.</span></span></summary>
        <returns><span data-ttu-id="bebbb-130">A reference to a value of type <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="bebbb-130">A reference to a value of type <typeparamref name="TTo" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPointer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* AsPointer&lt;T&gt; (ref T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* AsPointer&lt;T&gt;(!!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* AsPointer(T % value);" />
      <MemberSignature Language="F#" Value="static member AsPointer :  -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.AsPointer value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-131">对象的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-131">The type of object.</span></span></typeparam>
        <param name="value"><span data-ttu-id="bebbb-132">The object whose pointer is obtained.</span><span class="sxs-lookup"><span data-stu-id="bebbb-132">The object whose pointer is obtained.</span></span></param>
        <summary><span data-ttu-id="bebbb-133">Returns a pointer to the given by-ref parameter.</span><span class="sxs-lookup"><span data-stu-id="bebbb-133">Returns a pointer to the given by-ref parameter.</span></span></summary>
        <returns><span data-ttu-id="bebbb-134">A pointer to the given value.</span><span class="sxs-lookup"><span data-stu-id="bebbb-134">A pointer to the given value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AsRef&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(void* source);" />
      <MemberSignature Language="F#" Value="static member AsRef : nativeptr&lt;unit&gt; -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AsRef source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-135">已解释的位置的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-135">The type of the interpreted location.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-136">The location of the value to reference.</span><span class="sxs-lookup"><span data-stu-id="bebbb-136">The location of the value to reference.</span></span></param>
        <summary><span data-ttu-id="bebbb-137">Reinterprets the given location as a reference to a value of type <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="bebbb-137">Reinterprets the given location as a reference to a value of type <typeparamref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="bebbb-138">A reference to a value of type <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="bebbb-138">A reference to a value of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T AsRef&lt;T&gt; (ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;([in]!!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T) (ByRef source As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(T % source);" />
      <MemberSignature Language="F#" Value="static member AsRef :  -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AsRef source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-139">引用的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-139">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-140">The read-only reference to reinterpret.</span><span class="sxs-lookup"><span data-stu-id="bebbb-140">The read-only reference to reinterpret.</span></span></param>
        <summary><span data-ttu-id="bebbb-141">Reinterprets the given read-only reference as a reference.</span><span class="sxs-lookup"><span data-stu-id="bebbb-141">Reinterprets the given read-only reference as a reference.</span></span></summary>
        <returns><span data-ttu-id="bebbb-142">A reference to a value of type <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="bebbb-142">A reference to a value of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr ByteOffset&lt;T&gt; (ref T origin, ref T target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ByteOffset&lt;T&gt;(!!T&amp; origin, !!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ByteOffset(Of T) (ByRef origin As T, ByRef target As T) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static IntPtr ByteOffset(T % origin, T % target);" />
      <MemberSignature Language="F#" Value="static member ByteOffset :  *  -&gt; nativeint" Usage="System.Runtime.CompilerServices.Unsafe.ByteOffset (origin, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="origin" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="target" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-143">引用的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-143">The type of reference.</span></span></typeparam>
        <param name="origin"><span data-ttu-id="bebbb-144">The reference to origin.</span><span class="sxs-lookup"><span data-stu-id="bebbb-144">The reference to origin.</span></span></param>
        <param name="target"><span data-ttu-id="bebbb-145">The reference to target.</span><span class="sxs-lookup"><span data-stu-id="bebbb-145">The reference to target.</span></span></param>
        <summary><span data-ttu-id="bebbb-146">Determines the byte offset from origin to target from the given references.</span><span class="sxs-lookup"><span data-stu-id="bebbb-146">Determines the byte offset from origin to target from the given references.</span></span></summary>
        <returns><span data-ttu-id="bebbb-147">Byte offset from origin to target i.e. <paramref name="target" /> - <paramref name="origin" />.</span><span class="sxs-lookup"><span data-stu-id="bebbb-147">Byte offset from origin to target i.e. <paramref name="target" /> - <paramref name="origin" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (void* destination, ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(void* destination, !!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(void* destination, T % source);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeptr&lt;unit&gt; *  -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Copy (destination, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-148">若要复制的值的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-148">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="bebbb-149">The location to copy to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-149">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="bebbb-150">A reference to the value to copy.</span><span class="sxs-lookup"><span data-stu-id="bebbb-150">A reference to the value to copy.</span></span></param>
        <summary><span data-ttu-id="bebbb-151">Copies a value of type <typeparamref name="T" /> to the given location.</span><span class="sxs-lookup"><span data-stu-id="bebbb-151">Copies a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (ref T destination, void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(!!T&amp; destination, void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(T % destination, void* source);" />
      <MemberSignature Language="F#" Value="static member Copy :  * nativeptr&lt;unit&gt; -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Copy (destination, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="T" RefType="ref" />
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-152">若要复制的值的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-152">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="bebbb-153">The location to copy to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-153">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="bebbb-154">A pointer to the value to copy.</span><span class="sxs-lookup"><span data-stu-id="bebbb-154">A pointer to the value to copy.</span></span></param>
        <summary><span data-ttu-id="bebbb-155">Copies a value of type <typeparamref name="T" /> to the given location.</span><span class="sxs-lookup"><span data-stu-id="bebbb-155">Copies a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlock (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlock :  *  * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlock (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="bebbb-156">The destination address to copy to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-156">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="bebbb-157">The source address to copy from.</span><span class="sxs-lookup"><span data-stu-id="bebbb-157">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="bebbb-158">The number of bytes to copy.</span><span class="sxs-lookup"><span data-stu-id="bebbb-158">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="bebbb-159">Copies bytes from the source address to the destination address.</span><span class="sxs-lookup"><span data-stu-id="bebbb-159">Copies bytes from the source address to the destination address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlock : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlock (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="bebbb-160">The destination address to copy to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-160">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="bebbb-161">The source address to copy from.</span><span class="sxs-lookup"><span data-stu-id="bebbb-161">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="bebbb-162">The number of bytes to copy.</span><span class="sxs-lookup"><span data-stu-id="bebbb-162">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="bebbb-163">Copies bytes from the source address to the destination address.</span><span class="sxs-lookup"><span data-stu-id="bebbb-163">Copies bytes from the source address to the destination address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlockUnaligned (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlockUnaligned :  *  * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="bebbb-164">The destination address to copy to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-164">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="bebbb-165">The source address to copy from.</span><span class="sxs-lookup"><span data-stu-id="bebbb-165">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="bebbb-166">The number of bytes to copy.</span><span class="sxs-lookup"><span data-stu-id="bebbb-166">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="bebbb-167">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span><span class="sxs-lookup"><span data-stu-id="bebbb-167">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlockUnaligned : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="source" Type="System.Void*" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="bebbb-168">The destination address to copy to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-168">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="bebbb-169">The source address to copy from.</span><span class="sxs-lookup"><span data-stu-id="bebbb-169">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="bebbb-170">The number of bytes to copy.</span><span class="sxs-lookup"><span data-stu-id="bebbb-170">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="bebbb-171">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span><span class="sxs-lookup"><span data-stu-id="bebbb-171">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlock (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlock :  * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlock (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="bebbb-172">The address of the start of the memory block to initialize.</span><span class="sxs-lookup"><span data-stu-id="bebbb-172">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="bebbb-173">The value to initialize the block to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-173">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="bebbb-174">The number of bytes to initialize.</span><span class="sxs-lookup"><span data-stu-id="bebbb-174">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="bebbb-175">Initializes a block of memory at the given location with a given initial value.</span><span class="sxs-lookup"><span data-stu-id="bebbb-175">Initializes a block of memory at the given location with a given initial value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlock : nativeptr&lt;unit&gt; * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlock (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="bebbb-176">The address of the start of the memory block to initialize.</span><span class="sxs-lookup"><span data-stu-id="bebbb-176">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="bebbb-177">The value to initialize the block to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-177">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="bebbb-178">The number of bytes to initialize.</span><span class="sxs-lookup"><span data-stu-id="bebbb-178">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="bebbb-179">Initializes a block of memory at the given location with a given initial value.</span><span class="sxs-lookup"><span data-stu-id="bebbb-179">Initializes a block of memory at the given location with a given initial value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlockUnaligned (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlockUnaligned :  * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="bebbb-180">The address of the start of the memory block to initialize.</span><span class="sxs-lookup"><span data-stu-id="bebbb-180">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="bebbb-181">The value to initialize the block to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-181">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="bebbb-182">The number of bytes to initialize.</span><span class="sxs-lookup"><span data-stu-id="bebbb-182">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="bebbb-183">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span><span class="sxs-lookup"><span data-stu-id="bebbb-183">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlockUnaligned : nativeptr&lt;unit&gt; * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="bebbb-184">The address of the start of the memory block to initialize.</span><span class="sxs-lookup"><span data-stu-id="bebbb-184">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="bebbb-185">The value to initialize the block to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-185">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="bebbb-186">The number of bytes to initialize.</span><span class="sxs-lookup"><span data-stu-id="bebbb-186">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="bebbb-187">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span><span class="sxs-lookup"><span data-stu-id="bebbb-187">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddressGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool IsAddressGreaterThan&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAddressGreaterThan&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAddressGreaterThan(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool IsAddressGreaterThan(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member IsAddressGreaterThan :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddressLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool IsAddressLessThan&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAddressLessThan&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAddressLessThan(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool IsAddressLessThan(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member IsAddressLessThan :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.IsAddressLessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T Read(void* source);" />
      <MemberSignature Language="F#" Value="static member Read : nativeptr&lt;unit&gt; -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-188">要读取的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-188">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-189">The location to read from.</span><span class="sxs-lookup"><span data-stu-id="bebbb-189">The location to read from.</span></span></param>
        <summary><span data-ttu-id="bebbb-190">Reads a value of type <typeparamref name="T" /> from the given location.</span><span class="sxs-lookup"><span data-stu-id="bebbb-190">Reads a value of type <typeparamref name="T" /> from the given location.</span></span></summary>
        <returns><span data-ttu-id="bebbb-191">An object of type <typeparamref name="T" /> read from the given location.</span><span class="sxs-lookup"><span data-stu-id="bebbb-191">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (ref byte source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(unsigned int8&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUnaligned(Of T) (ByRef source As Byte) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(System::Byte % source);" />
      <MemberSignature Language="F#" Value="static member ReadUnaligned :  -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.ReadUnaligned source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-192">要读取的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-192">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-193">The location to read from.</span><span class="sxs-lookup"><span data-stu-id="bebbb-193">The location to read from.</span></span></param>
        <summary><span data-ttu-id="bebbb-194">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span><span class="sxs-lookup"><span data-stu-id="bebbb-194">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <returns><span data-ttu-id="bebbb-195">An object of type <typeparamref name="T" /> read from the given location.</span><span class="sxs-lookup"><span data-stu-id="bebbb-195">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(void* source);" />
      <MemberSignature Language="F#" Value="static member ReadUnaligned : nativeptr&lt;unit&gt; -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.ReadUnaligned source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-196">要读取的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-196">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-197">The location to read from.</span><span class="sxs-lookup"><span data-stu-id="bebbb-197">The location to read from.</span></span></param>
        <summary><span data-ttu-id="bebbb-198">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span><span class="sxs-lookup"><span data-stu-id="bebbb-198">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <returns><span data-ttu-id="bebbb-199">An object of type <typeparamref name="T" /> read from the given location.</span><span class="sxs-lookup"><span data-stu-id="bebbb-199">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf(Of T) () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int SizeOf();" />
      <MemberSignature Language="F#" Value="static member SizeOf : unit -&gt; int" Usage="System.Runtime.CompilerServices.Unsafe.SizeOf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-200">要检索其大小对象的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-200">The type of object whose size is retrieved.</span></span></typeparam>
        <summary><span data-ttu-id="bebbb-201">Returns the size of an object of the given type parameter.</span><span class="sxs-lookup"><span data-stu-id="bebbb-201">Returns the size of an object of the given type parameter.</span></span></summary>
        <returns><span data-ttu-id="bebbb-202">The size of an object of type <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="bebbb-202">The size of an object of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* Subtract&lt;T&gt; (void* source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* Subtract&lt;T&gt;(void* source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* Subtract(void* source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract : nativeptr&lt;unit&gt; * int -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="elementOffset" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="elementOffset">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract :  * int -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-203">引用的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-203">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-204">The reference to subtract the offset from.</span><span class="sxs-lookup"><span data-stu-id="bebbb-204">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="bebbb-205">The offset to subtract.</span><span class="sxs-lookup"><span data-stu-id="bebbb-205">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="bebbb-206">Subtracts an element offset from the given reference.</span><span class="sxs-lookup"><span data-stu-id="bebbb-206">Subtracts an element offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="bebbb-207">A new reference that reflects the subtraction of offset from pointer.</span><span class="sxs-lookup"><span data-stu-id="bebbb-207">A new reference that reflects the subtraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, IntPtr elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-208">引用的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-208">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-209">The reference to subtract the offset from.</span><span class="sxs-lookup"><span data-stu-id="bebbb-209">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="bebbb-210">The offset to subtract.</span><span class="sxs-lookup"><span data-stu-id="bebbb-210">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="bebbb-211">Subtracts an element offset from the given reference.</span><span class="sxs-lookup"><span data-stu-id="bebbb-211">Subtracts an element offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="bebbb-212">A new reference that reflects the subtraction of offset from pointer.</span><span class="sxs-lookup"><span data-stu-id="bebbb-212">A new reference that reflects the subtraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SubtractByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T SubtractByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % SubtractByteOffset(T % source, IntPtr byteOffset);" />
      <MemberSignature Language="F#" Value="static member SubtractByteOffset :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.SubtractByteOffset (source, byteOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-213">引用的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-213">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="bebbb-214">The reference to subtract the offset from.</span><span class="sxs-lookup"><span data-stu-id="bebbb-214">The reference to subtract the offset from.</span></span></param>
        <param name="bytesOffset"><span data-ttu-id="bebbb-215">The offset to subtract.</span><span class="sxs-lookup"><span data-stu-id="bebbb-215">The offset to subtract.</span></span></param>
        <param name="byteOffset">To be added.</param>
        <summary><span data-ttu-id="bebbb-216">Subtracts a byte offset from the given reference.</span><span class="sxs-lookup"><span data-stu-id="bebbb-216">Subtracts a byte offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="bebbb-217">A new reference that reflects the subtraction of byte offset from pointer.</span><span class="sxs-lookup"><span data-stu-id="bebbb-217">A new reference that reflects the subtraction of byte offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T Unbox&lt;T&gt; (object box) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Unbox&lt;struct .ctor (class System.ValueType) T&gt;(object box) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Unbox(Of T As Structure) (box As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T % Unbox(System::Object ^ box);" />
      <MemberSignature Language="F#" Value="static member Unbox : obj -&gt;  (requires 'T : struct)" Usage="System.Runtime.CompilerServices.Unsafe.Unbox box" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="box" Type="System.Object" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-218">要将其取消装箱的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-218">The type to be unboxed.</span></span></typeparam>
        <param name="box"><span data-ttu-id="bebbb-219">The value to unbox.</span><span class="sxs-lookup"><span data-stu-id="bebbb-219">The value to unbox.</span></span></param>
        <summary><span data-ttu-id="bebbb-220">Returns a <see langword="mutable ref" /> to a boxed value.</span><span class="sxs-lookup"><span data-stu-id="bebbb-220">Returns a <see langword="mutable ref" /> to a boxed value.</span></span></summary>
        <returns><span data-ttu-id="bebbb-221">A <see langword="mutable ref" /> to the boxed value <paramref name="box" />.</span><span class="sxs-lookup"><span data-stu-id="bebbb-221">A <see langword="mutable ref" /> to the boxed value <paramref name="box" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="bebbb-222">`Unbox<T>`方法是只需将 IL 的包装[取消装箱](xref:System.Reflection.Emit.OpCodes.Unbox)指令。</span><span class="sxs-lookup"><span data-stu-id="bebbb-222">The `Unbox<T>` method is simply a wrapper for the IL [unbox](xref:System.Reflection.Emit.OpCodes.Unbox) instruction.</span></span> <span data-ttu-id="bebbb-223">它可以作为一种性能优化。</span><span class="sxs-lookup"><span data-stu-id="bebbb-223">It is useful as a performance optimization.</span></span> <span data-ttu-id="bebbb-224">只要一个 API，采用<xref:System.Object>需要使用不同的值类型，相同的值被反复调用框对象可以重复使用而不是一个新的每次创建一个。</span><span class="sxs-lookup"><span data-stu-id="bebbb-224">Whenever an API that takes an <xref:System.Object> needs to be called repeatedly with different values of a value type, the same box object can be reused rather than a new one created each time.</span></span>

<span data-ttu-id="bebbb-225">`Unbox<T>`方法具有重要的使用情况约束不由语言编译器强制执行，并且调用方的责任。</span><span class="sxs-lookup"><span data-stu-id="bebbb-225">The `Unbox<T>` method has an important usage constraint that is not enforced by language compilers and that is the responsibility of the caller.</span></span> <span data-ttu-id="bebbb-226">IL`unbox`指令返回控制可变性托管的指针。</span><span class="sxs-lookup"><span data-stu-id="bebbb-226">The IL `unbox` instruction returns a controlled-mutability managed pointer.</span></span> <span data-ttu-id="bebbb-227">因为.NET 和.NET 语言编译器不能表示此约束`Unbox<T>`方法返回一个常规可变`ref T`。</span><span class="sxs-lookup"><span data-stu-id="bebbb-227">Because .NET and .NET language compilers cannot represent this constraint, the `Unbox<T>` method returns a normal mutable `ref T`.</span></span> <span data-ttu-id="bebbb-228">但是开发人员**不得**改变返回的引用，除非它们是特定的`T`是可变的结构类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-228">However developers **must not** mutate the returned reference unless they are certain that `T` is a mutable struct type.</span></span> <span data-ttu-id="bebbb-229">例如，因为如的数值基元<xref:System.Int32>不是可变的结构类型，不支持使用以下代码：</span><span class="sxs-lookup"><span data-stu-id="bebbb-229">For example, because the numeric primitives such as <xref:System.Int32> are not mutable struct types, the following code is not suppported:</span></span>

```csharp
Unsafe.Unbox<int>(obj) = 30;
```

<span data-ttu-id="bebbb-230">与之相反，等类型用作<xref:System.Drawing.Point?<displayProperty=nameWithType>是可变结构，它有公共属性 setter，因此支持以下代码：</span><span class="sxs-lookup"><span data-stu-id="bebbb-230">In contrast, a type such as <xref:System.Drawing.Point?<displayProperty=nameWithType> is a mutable struct with public property setters, so the following code is supported:</span></span>

```csharp
Unsafe.Unbox<System.Drawing.Point>(obj).X = 50;
```

<span data-ttu-id="bebbb-231">有关详细信息，请参阅部分 III.1.8.1.2.2 （"受控 muttability 托管指针"） 和 III.4.32 （"取消装箱--将装箱的值类型转换为其原始格式"） 中[ECMA-335:公共语言基础结构 (CLI) 的分区我 VI](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf)。</span><span class="sxs-lookup"><span data-stu-id="bebbb-231">For more information, see sections III.1.8.1.2.2 ("Controlled-muttability managed pointers") and III.4.32 ("unbox -- convert boxed value type to its raw form") in [ECMA-335: Common Language Infrastructure (CLI) Partitions I to VI](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf).</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="bebbb-232"><paramref name="box" /> is <see langword="null" />, and <typeparamref name="T" /> is a non-nullable value type.</span><span class="sxs-lookup"><span data-stu-id="bebbb-232"><paramref name="box" /> is <see langword="null" />, and <typeparamref name="T" /> is a non-nullable value type.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="bebbb-233"><paramref name="box" /> is not a boxed value type.</span><span class="sxs-lookup"><span data-stu-id="bebbb-233"><paramref name="box" /> is not a boxed value type.</span></span>
         
<span data-ttu-id="bebbb-234">-or-</span><span class="sxs-lookup"><span data-stu-id="bebbb-234">-or-</span></span>

<span data-ttu-id="bebbb-235"><paramref name="box" /> is not a boxed <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="bebbb-235"><paramref name="box" /> is not a boxed <typeparamref name="T" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="bebbb-236"><typeparamref name="T" /> cannot be found.</span><span class="sxs-lookup"><span data-stu-id="bebbb-236"><typeparamref name="T" /> cannot be found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Write(void* destination, T value);" />
      <MemberSignature Language="F#" Value="static member Write : nativeptr&lt;unit&gt; * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-237">要写入值的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-237">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="bebbb-238">The location to write to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-238">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="bebbb-239">The value to write.</span><span class="sxs-lookup"><span data-stu-id="bebbb-239">The value to write.</span></span></param>
        <summary><span data-ttu-id="bebbb-240">Writes a value of type <typeparamref name="T" /> to the given location.</span><span class="sxs-lookup"><span data-stu-id="bebbb-240">Writes a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (ref byte destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(unsigned int8&amp; destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUnaligned(Of T) (ByRef destination As Byte, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(System::Byte % destination, T value);" />
      <MemberSignature Language="F#" Value="static member WriteUnaligned :  * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.WriteUnaligned (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-241">要写入值的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-241">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="bebbb-242">The location to write to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-242">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="bebbb-243">The value to write.</span><span class="sxs-lookup"><span data-stu-id="bebbb-243">The value to write.</span></span></param>
        <summary><span data-ttu-id="bebbb-244">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span><span class="sxs-lookup"><span data-stu-id="bebbb-244">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(void* destination, T value);" />
      <MemberSignature Language="F#" Value="static member WriteUnaligned : nativeptr&lt;unit&gt; * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.WriteUnaligned (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="bebbb-245">要写入值的类型。</span><span class="sxs-lookup"><span data-stu-id="bebbb-245">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="bebbb-246">The location to write to.</span><span class="sxs-lookup"><span data-stu-id="bebbb-246">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="bebbb-247">The value to write.</span><span class="sxs-lookup"><span data-stu-id="bebbb-247">The value to write.</span></span></param>
        <summary><span data-ttu-id="bebbb-248">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span><span class="sxs-lookup"><span data-stu-id="bebbb-248">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

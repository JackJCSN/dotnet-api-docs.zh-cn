<Type Name="HostingEnvironment" FullName="System.Web.Hosting.HostingEnvironment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5ef1ced12be4d4f89ed92e67ff1c80f8a9a1b9bf" /><Meta Name="ms.sourcegitcommit" Value="ddce15914650a504a7399d539ac1f7cfed3c2caa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/07/2019" /><Meta Name="ms.locfileid" Value="66759347" /></Metadata><TypeSignature Language="C#" Value="public sealed class HostingEnvironment : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HostingEnvironment extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.HostingEnvironment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HostingEnvironment&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class HostingEnvironment sealed : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type HostingEnvironment = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>在托管应用程序的应用程序域内向托管应用程序提供应用程序管理功能和应用程序服务。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个托管应用程序域包含的静态实例<xref:System.Web.Hosting.HostingEnvironment>类，该类提供对应用程序管理功能和应用程序服务的访问。  
  
   
  
## Examples  
 下面的代码示例是一个网页，显示可从应用程序信息<xref:System.Web.Hosting.HostingEnvironment>对象。  
  
 [!code-aspx-csharp[System.Web.Hosting.HostingEnvironment#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.HostingEnvironment/CS/hostingEnvironmentcs.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.HostingEnvironment#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.HostingEnvironment/VB/hostingEnvironmentvb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostingEnvironment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostingEnvironment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Hosting.HostingEnvironment" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.HostingEnvironment.%23ctor%2A>构造函数初始化<xref:System.Web.Hosting.HostingEnvironment>对象。 <xref:System.Web.Hosting.HostingEnvironment.%23ctor%2A>构造函数只调用一次由应用程序的<xref:System.Web.Hosting.ApplicationManager>对象。 调用<xref:System.Web.Hosting.HostingEnvironment.%23ctor%2A>构造函数不是一次将导致更多<xref:System.InvalidOperationException>引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.Hosting.HostingEnvironment.#ctor" /> 构造函数被调用多次。</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationHost">
      <MemberSignature Language="C#" Value="public static System.Web.Hosting.IApplicationHost ApplicationHost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Hosting.IApplicationHost ApplicationHost" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.ApplicationHost" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ApplicationHost As IApplicationHost" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Hosting::IApplicationHost ^ ApplicationHost { System::Web::Hosting::IApplicationHost ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationHost : System.Web.Hosting.IApplicationHost" Usage="System.Web.Hosting.HostingEnvironment.ApplicationHost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IApplicationHost</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此属性支持 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 基础结构，不能在代码中直接使用。</summary>
        <value>包含有关应用程序宿主的信息的对象。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f75a72de-e2f2-4a7a-9574-3f278684ea90">.NET Framework 3.5 体系结构</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationID">
      <MemberSignature Language="C#" Value="public static string ApplicationID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationID" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.ApplicationID" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ApplicationID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationID : string" Usage="System.Web.Hosting.HostingEnvironment.ApplicationID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应用程序的唯一标识符。</summary>
        <value>应用程序的唯一标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序必须运行包含<xref:System.Web.AspNetHostingPermissionLevel>设置为高信任以访问<xref:System.Web.Hosting.HostingEnvironment.ApplicationID%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationMonitors">
      <MemberSignature Language="C#" Value="public static System.Web.Hosting.ApplicationMonitors ApplicationMonitors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Hosting.ApplicationMonitors ApplicationMonitors" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.ApplicationMonitors" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ApplicationMonitors As ApplicationMonitors" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Hosting::ApplicationMonitors ^ ApplicationMonitors { System::Web::Hosting::ApplicationMonitors ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationMonitors : System.Web.Hosting.ApplicationMonitors" Usage="System.Web.Hosting.HostingEnvironment.ApplicationMonitors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.ApplicationMonitors</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 ASP.NET 子系统用于维护应用程序运行状况的一组可替换监视器对象。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationPhysicalPath">
      <MemberSignature Language="C#" Value="public static string ApplicationPhysicalPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationPhysicalPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ApplicationPhysicalPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationPhysicalPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationPhysicalPath : string" Usage="System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取磁盘上指向应用程序目录的物理路径。</summary>
        <value>磁盘上指向应用程序目录的物理路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath%2A>属性来构造应用程序的 App_Data 目录中的数据文件的路径。 运行该示例所需的完整代码，请参阅示例部分<xref:System.Web.Hosting.VirtualPathProvider>类概述主题。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#27](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#27)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#27](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationVirtualPath">
      <MemberSignature Language="C#" Value="public static string ApplicationVirtualPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationVirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ApplicationVirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationVirtualPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationVirtualPath : string" Usage="System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应用程序的根虚拟路径。</summary>
        <value>应用程序的不带尾部反斜杠 (/) 的根虚拟路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath%2A>属性始终返回"`/"`作为返回值的第一个字符。 如果应用程序位于网站的根目录中，只是返回值"`/"`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cache">
      <MemberSignature Language="C#" Value="public static System.Web.Caching.Cache Cache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Caching.Cache Cache" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.Cache" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Cache As Cache" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Caching::Cache ^ Cache { System::Web::Caching::Cache ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Cache : System.Web.Caching.Cache" Usage="System.Web.Hosting.HostingEnvironment.Cache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Caching.Cache</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前应用程序的 <see cref="T:System.Web.Caching.Cache" /> 实例。</summary>
        <value>当前的 <see cref="T:System.Web.Caching.Cache" /> 实例。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecrementBusyCount">
      <MemberSignature Language="C#" Value="public static void DecrementBusyCount ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DecrementBusyCount() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.DecrementBusyCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DecrementBusyCount ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DecrementBusyCount();" />
      <MemberSignature Language="F#" Value="static member DecrementBusyCount : unit -&gt; unit" Usage="System.Web.Hosting.HostingEnvironment.DecrementBusyCount " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将宿主环境中繁忙对象的计数减一。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当一个繁忙的已注册的对象完成其工作后时，它将调用<xref:System.Web.Hosting.HostingEnvironment.DecrementBusyCount%2A>方法用信号通知<xref:System.Web.Hosting.HostingEnvironment>对象完成处理并减少一个繁忙对象的计数。  
  
 忙碌计数大于零，如果宿主应用程序将不会超时，即使没有任何挂起的请求。  
  
 必须调用<xref:System.Web.Hosting.HostingEnvironment.DecrementBusyCount%2A>每次调用的方法<xref:System.Web.Hosting.HostingEnvironment.IncrementBusyCount%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Impersonate">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>允许代码模拟不同的用户。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Impersonate">
      <MemberSignature Language="C#" Value="public static IDisposable Impersonate ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable Impersonate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.Impersonate" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Impersonate () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IDisposable ^ Impersonate();" />
      <MemberSignature Language="F#" Value="static member Impersonate : unit -&gt; IDisposable" Usage="System.Web.Hosting.HostingEnvironment.Impersonate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>模拟应用程序标识所表示的用户。</summary>
        <returns>表示模拟之前的 Windows 用户的 <see cref="T:System.IDisposable" /> 对象，该对象可以用于恢复为原始用户的上下文。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">该进程无法模拟。</exception>
      </Docs>
    </Member>
    <Member MemberName="Impersonate">
      <MemberSignature Language="C#" Value="public static IDisposable Impersonate (IntPtr token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable Impersonate(native int token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Impersonate (token As IntPtr) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IDisposable ^ Impersonate(IntPtr token);" />
      <MemberSignature Language="F#" Value="static member Impersonate : nativeint -&gt; IDisposable" Usage="System.Web.Hosting.HostingEnvironment.Impersonate token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="token">Windows 帐户标记的句柄。</param>
        <summary>模拟指定用户标记表示的用户。</summary>
        <returns>表示模拟之前的 Windows 用户的 <see cref="T:System.IDisposable" /> 对象，该对象可以用于恢复为原始用户的上下文。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">该进程无法模拟。</exception>
      </Docs>
    </Member>
    <Member MemberName="Impersonate">
      <MemberSignature Language="C#" Value="public static IDisposable Impersonate (IntPtr userToken, string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable Impersonate(native int userToken, string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Impersonate (userToken As IntPtr, virtualPath As String) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IDisposable ^ Impersonate(IntPtr userToken, System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="static member Impersonate : nativeint * string -&gt; IDisposable" Usage="System.Web.Hosting.HostingEnvironment.Impersonate (userToken, virtualPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.IntPtr" />
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userToken">Windows 帐户标记的句柄。</param>
        <param name="virtualPath">所请求资源的路径。</param>
        <summary>模拟由指定虚拟路径的配置设置或由指定用户标记所指定的用户。</summary>
        <returns>表示模拟之前的 Windows 用户的 <see cref="T:System.IDisposable" /> 对象，该对象可以用于恢复为原始用户的上下文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.HostingEnvironment.Impersonate%2A>方法模拟结果应用会影响指定的虚拟路径的配置设置中的所有元素后的用户。 如果`identity`元素未指定虚拟路径<xref:System.Web.Hosting.HostingEnvironment.Impersonate%2A>方法模拟指定的 Windows 帐户。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">该进程无法模拟。</exception>
      </Docs>
    </Member>
    <Member MemberName="InClientBuildManager">
      <MemberSignature Language="C#" Value="public static bool InClientBuildManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool InClientBuildManager" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.InClientBuildManager" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InClientBuildManager As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool InClientBuildManager { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InClientBuildManager : bool" Usage="System.Web.Hosting.HostingEnvironment.InClientBuildManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示宿主环境是否具有对 ASP.NET 生成系统的访问权。</summary>
        <value>如果应用程序域为 <see langword="true" /> 方案中使用的 ASP.NET 借宿应用程序域，则为 <see langword="ClientBuildManager" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementBusyCount">
      <MemberSignature Language="C#" Value="public static void IncrementBusyCount ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IncrementBusyCount() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.IncrementBusyCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IncrementBusyCount ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void IncrementBusyCount();" />
      <MemberSignature Language="F#" Value="static member IncrementBusyCount : unit -&gt; unit" Usage="System.Web.Hosting.HostingEnvironment.IncrementBusyCount " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将宿主环境中繁忙对象的计数加一。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已注册的对象信号<xref:System.Web.Hosting.HostingEnvironment>正在运行的对象，并由一个增加繁忙对象的计数。  
  
 忙碌计数大于零，如果宿主应用程序将不会超时，即使没有任何挂起的请求。  
  
 必须调用<xref:System.Web.Hosting.HostingEnvironment.DecrementBusyCount%2A>每次调用的方法<xref:System.Web.Hosting.HostingEnvironment.IncrementBusyCount%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializationException">
      <MemberSignature Language="C#" Value="public static Exception InitializationException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Exception InitializationException" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.InitializationException" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InitializationException As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Exception ^ InitializationException { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InitializationException : Exception" Usage="System.Web.Hosting.HostingEnvironment.InitializationException" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在 <see cref="T:System.Web.Hosting.HostingEnvironment" /> 对象初始化期间引发的任何异常。</summary>
        <value>初始化 <see cref="T:System.Web.Hosting.HostingEnvironment" /> 对象期间引发的异常。 如果未引发任何异常，则返回 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="hostingEnvironment.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过阻止创建租约给予 <see cref="T:System.Web.Hosting.HostingEnvironment" /> 对象无限的生存期。</summary>
        <returns>总是为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法重写<xref:System.MarshalByRefObject.InitializeLifetimeService%2A>中其基本类的方法。 它始终返回`null`，防止创建租约，可能会限制<xref:System.Web.Hosting.HostingEnvironment>对象的生存期。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitiateShutdown">
      <MemberSignature Language="C#" Value="public static void InitiateShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitiateShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.InitiateShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitiateShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitiateShutdown();" />
      <MemberSignature Language="F#" Value="static member InitiateShutdown : unit -&gt; unit" Usage="System.Web.Hosting.HostingEnvironment.InitiateShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>开始关闭与此宿主关联的 Web 应用程序，并从系统中移除注册对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A>方法来停止 web 应用程序域并删除任何对象注册<xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A>方法。 完成关闭之前，此方法将立即返回。  
  
 <xref:System.Web.Hosting.IRegisteredObject.Stop%2A>传递的参数设置为在每个已注册的对象上调用方法`false`以允许每个已注册的对象以异步方式关闭。 在指定时间的等待之后`shutdownTimeout`的属性`<hostingEnvironment>`配置元素<xref:System.Web.Hosting.IRegisteredObject.Stop%2A>方法再次调用传递的参数设置为`true`为剩余的每个已注册对象。  
  
 所有已注册的对象完成后关闭，<xref:System.Web.Hosting.HostingEnvironment>对象关闭应用程序域。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDevelopmentEnvironment">
      <MemberSignature Language="C#" Value="public static bool IsDevelopmentEnvironment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsDevelopmentEnvironment" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsDevelopmentEnvironment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsDevelopmentEnvironment { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDevelopmentEnvironment : bool" Usage="System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前应用程序是否处于开发环境。</summary>
        <value>如果应用程序在开发环境中，则为，<see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHosted">
      <MemberSignature Language="C#" Value="public static bool IsHosted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsHosted" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.IsHosted" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsHosted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsHosted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHosted : bool" Usage="System.Web.Hosting.HostingEnvironment.IsHosted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前应用程序域是否在由 <see cref="T:System.Web.Hosting.ApplicationManager" /> 对象承载。</summary>
        <value>如果该应用程序域在由 <see cref="T:System.Web.Hosting.ApplicationManager" /> 对象承载，则为 <see langword="true" />，否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public static string MapPath (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string MapPath(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.MapPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MapPath (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ MapPath(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="static member MapPath : string -&gt; string" Usage="System.Web.Hosting.HostingEnvironment.MapPath virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">虚拟路径（绝对路径或相对路径）。</param>
        <summary>将虚拟路径映射到服务器上的物理路径。</summary>
        <returns>由 <paramref name="virtualPath" /> 指定的服务器物理路径。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.HttpServerUtility.MapPath(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentRequestsPerCPU">
      <MemberSignature Language="C#" Value="public static int MaxConcurrentRequestsPerCPU { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxConcurrentRequestsPerCPU" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property MaxConcurrentRequestsPerCPU As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxConcurrentRequestsPerCPU { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxConcurrentRequestsPerCPU : int with get, set" Usage="System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置每 CPU 的最大并发请求数。</summary>
        <value>每 CPU 的最大并发请求数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentThreadsPerCPU">
      <MemberSignature Language="C#" Value="public static int MaxConcurrentThreadsPerCPU { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxConcurrentThreadsPerCPU" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property MaxConcurrentThreadsPerCPU As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxConcurrentThreadsPerCPU { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxConcurrentThreadsPerCPU : int with get, set" Usage="System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置每 CPU 的最大并发线程数。</summary>
        <value>每 CPU 的最大并发线程数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MessageReceived">
      <MemberSignature Language="C#" Value="public static void MessageReceived ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MessageReceived() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.MessageReceived" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MessageReceived ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MessageReceived();" />
      <MemberSignature Language="F#" Value="static member MessageReceived : unit -&gt; unit" Usage="System.Web.Hosting.HostingEnvironment.MessageReceived " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此方法支持 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 基础结构，不能在代码中直接使用。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f75a72de-e2f2-4a7a-9574-3f278684ea90">.NET Framework 3.5 体系结构</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="QueueBackgroundWorkItem">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>计划可以在后台运行（与任何请求无关）的任务。  
  
重载方法不会将 <see cref="T:System.Threading.ExecutionContext" /> 或 <see cref="T:System.Security.SecurityContext" /> 从调用方流入被调用方。 因此，这些对象的成员（例如 <see cref="P:System.Threading.Thread.CurrentPrincipal" /> 属性）将不会从调用方流入被调用方。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="QueueBackgroundWorkItem">
      <MemberSignature Language="C#" Value="public static void QueueBackgroundWorkItem (Action&lt;System.Threading.CancellationToken&gt; workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void QueueBackgroundWorkItem(class System.Action`1&lt;valuetype System.Threading.CancellationToken&gt; workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Action{System.Threading.CancellationToken})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub QueueBackgroundWorkItem (workItem As Action(Of CancellationToken))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void QueueBackgroundWorkItem(Action&lt;System::Threading::CancellationToken&gt; ^ workItem);" />
      <MemberSignature Language="F#" Value="static member QueueBackgroundWorkItem : Action&lt;System.Threading.CancellationToken&gt; -&gt; unit" Usage="System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem workItem" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workItem" Type="System.Action&lt;System.Threading.CancellationToken&gt;" Index="0" FrameworkAlternate="netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="workItem">执行方式。</param>
        <summary>计划可以在后台运行（与任何请求无关）的任务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不同于普通的线程池工作项，ASP.NET 可以跟踪的多少工作项通过此 API 注册当前正在运行，并且 ASP.NET 运行时将尝试对延迟关闭这些工作项，直到执行完的 AppDomain。 ASP.NET 托管应用程序域之外，不能调用此 API。 当应用程序关闭时，将终止提供的 CancellationToken。  
  
 <xref:System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem%2A> 采用返回任务的回调;工作项将被视为完成回调返回时。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueBackgroundWorkItem">
      <MemberSignature Language="C#" Value="public static void QueueBackgroundWorkItem (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void QueueBackgroundWorkItem(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub QueueBackgroundWorkItem (workItem As Func(Of CancellationToken, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void QueueBackgroundWorkItem(Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ workItem);" />
      <MemberSignature Language="F#" Value="static member QueueBackgroundWorkItem : Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; unit" Usage="System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem workItem" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workItem" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="workItem">执行方式。</param>
        <summary>计划可以在后台运行（与任何请求无关）的任务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不同于普通的线程池工作项，ASP.NET 可以跟踪的多少工作项通过此 API 注册当前正在运行，并且 ASP.NET 运行时将尝试对延迟关闭这些工作项，直到执行完的 AppDomain。 ASP.NET 托管应用程序域之外，不能调用此 API。 当应用程序关闭时，将终止提供的 CancellationToken。  
  
 <xref:System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem%2A> 采用返回任务的回调;工作项将被视为已完成时返回的任务转换为终止状态。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterObject">
      <MemberSignature Language="C#" Value="public static void RegisterObject (System.Web.Hosting.IRegisteredObject obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterObject(class System.Web.Hosting.IRegisteredObject obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.RegisterObject(System.Web.Hosting.IRegisteredObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterObject (obj As IRegisteredObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterObject(System::Web::Hosting::IRegisteredObject ^ obj);" />
      <MemberSignature Language="F#" Value="static member RegisterObject : System.Web.Hosting.IRegisteredObject -&gt; unit" Usage="System.Web.Hosting.HostingEnvironment.RegisterObject obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Web.Hosting.IRegisteredObject" />
      </Parameters>
      <Docs>
        <param name="obj">要注册的对象。</param>
        <summary>将一个对象放在应用程序的已注册对象列表中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager>类使当前的应用程序域，以创建、 管理和销毁对象在当前应用程序域之外的方法。 <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A>方法用于向宿主环境注册前面创建的对象。 对象注册<xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A>方法必须实现<xref:System.Web.Hosting.IRegisteredObject>接口。  
  
 若要使用已注册的对象，请执行以下步骤：  
  
1.  通过调用创建已注册对象的新实例<xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=nameWithType>方法。  
  
2.  调用特定于类型的方法来初始化新对象。 在初始化方法中，调用<xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A>方法将对象添加到已注册的对象的列表。  
  
3.  调用<xref:System.Web.Hosting.ApplicationManager.GetObject%2A?displayProperty=nameWithType>方法返回时所需的已注册的对象。  
  
4.  当你想要停止您的对象时，调用<xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=nameWithType>方法。 <xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=nameWithType>方法又调用<xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=nameWithType>方法。  
  
5.  在中<xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=nameWithType>方法，让对象调用<xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A>方法。  
  
   
  
## Examples  
 下面的代码示例是的实现`Start`已注册对象的方法。 运行该示例所需的完整代码，请参阅示例部分<xref:System.Web.Hosting.IRegisteredObject>接口概述主题。  
  
 [!code-csharp[System.Web.Hosting.ApplicationManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/CS/appManagercs.aspx.cs#2)]
 [!code-vb[System.Web.Hosting.ApplicationManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/VB/appManagervb.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Hosting.HostingEnvironment.UnregisterObject(System.Web.Hosting.IRegisteredObject)" />
        <altmember cref="T:System.Web.Hosting.IRegisteredObject" />
        <altmember cref="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterVirtualPathProvider">
      <MemberSignature Language="C#" Value="public static void RegisterVirtualPathProvider (System.Web.Hosting.VirtualPathProvider virtualPathProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterVirtualPathProvider(class System.Web.Hosting.VirtualPathProvider virtualPathProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider(System.Web.Hosting.VirtualPathProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterVirtualPathProvider(System::Web::Hosting::VirtualPathProvider ^ virtualPathProvider);" />
      <MemberSignature Language="F#" Value="static member RegisterVirtualPathProvider : System.Web.Hosting.VirtualPathProvider -&gt; unit" Usage="System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider virtualPathProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPathProvider" Type="System.Web.Hosting.VirtualPathProvider" />
      </Parameters>
      <Docs>
        <param name="virtualPathProvider">要添加到编译系统中的新的 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> 实例。</param>
        <summary>在 ASP.NET 编译系统中注册新的 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> 实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A>方法将添加指定<xref:System.Web.Hosting.VirtualPathProvider>的虚拟路径提供程序实例与应用程序的列表。  
  
 有关详细信息，请参阅<xref:System.Web.Hosting.VirtualPathProvider>类概述。  
  
   
  
## Examples  
 下面的代码示例是注册一个自定义应用程序启动方法的一部分<xref:System.Web.Hosting.VirtualPathProvider>编译系统使用的实例。 运行该示例所需的完整代码，请参阅示例部分<xref:System.Web.Hosting.VirtualPathProvider>类概述主题。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#11](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/AppStart.cs#11)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/AppStart.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCultures">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>设置当前线程的区域性信息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCultures">
      <MemberSignature Language="C#" Value="public static IDisposable SetCultures ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable SetCultures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.SetCultures" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetCultures () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IDisposable ^ SetCultures();" />
      <MemberSignature Language="F#" Value="static member SetCultures : unit -&gt; IDisposable" Usage="System.Web.Hosting.HostingEnvironment.SetCultures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前线程的区域性设置为应用程序配置文件中指定的区域性。</summary>
        <returns>一个表示更改前的区域性的 <see cref="T:System.IDisposable" /> 对象；可使用此对象恢复到先前的区域性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.HostingEnvironment.SetCultures%2A>方法将当前线程设置为在指定的区域性[全球化元素 （ASP.NET 设置架构）](https://msdn.microsoft.com/library/e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7)应用程序的配置文件中的元素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCultures">
      <MemberSignature Language="C#" Value="public static IDisposable SetCultures (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable SetCultures(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.SetCultures(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetCultures (virtualPath As String) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IDisposable ^ SetCultures(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="static member SetCultures : string -&gt; IDisposable" Usage="System.Web.Hosting.HostingEnvironment.SetCultures virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">包含区域性信息的路径。</param>
        <summary>将当前线程的区域性设置为指定虚拟路径的区域性。</summary>
        <returns>一个表示更改前的区域性的 <see cref="T:System.IDisposable" /> 对象；可使用此对象恢复到先前的区域性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.HostingEnvironment.SetCultures%2A>方法将当前线程设置为结果应用会影响指定的虚拟路径的配置文件中的所有元素后的区域性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownReason">
      <MemberSignature Language="C#" Value="public static System.Web.ApplicationShutdownReason ShutdownReason { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.ApplicationShutdownReason ShutdownReason" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.ShutdownReason" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ShutdownReason As ApplicationShutdownReason" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::ApplicationShutdownReason ShutdownReason { System::Web::ApplicationShutdownReason get(); };" />
      <MemberSignature Language="F#" Value="member this.ShutdownReason : System.Web.ApplicationShutdownReason" Usage="System.Web.Hosting.HostingEnvironment.ShutdownReason" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.ApplicationShutdownReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回指示应用程序终止原因的枚举值。</summary>
        <value><see cref="T:System.Web.ApplicationShutdownReason" /> 值之一。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SiteName">
      <MemberSignature Language="C#" Value="public static string SiteName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string SiteName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.SiteName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SiteName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ SiteName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SiteName : string" Usage="System.Web.Hosting.HostingEnvironment.SiteName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取站点的名称。</summary>
        <value>站点的名称。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="public static event EventHandler StopListening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StopListening" />
      <MemberSignature Language="DocId" Value="E:System.Web.Hosting.HostingEnvironment.StopListening" />
      <MemberSignature Language="VB.NET" Value="Public Shared Event StopListening As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ StopListening;" />
      <MemberSignature Language="F#" Value="member this.StopListening : EventHandler " Usage="member this.StopListening : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[仅在 .NET Framework 4.5.1 中受支持]  
  
 当辅助进程或与该主机相关联的应用程序池已停止侦听新的请求，并将最终关闭时才发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序池和其关联的工作进程正在关闭时由 IIS，例如当应用程序池已达到计划的更新间隔，IIS 通知应用程序关闭 ASP.NET 运行时并的工作进程应用程序池停止侦听新的请求。 应用程序使用长时间运行的请求，例如[SignalR](https://go.microsoft.com/fwlink/?LinkID=285432)应用程序，可以侦听<xref:System.Web.Hosting.HostingEnvironment.StopListening>事件和 IIS 已启动的应用程序关闭时正常关闭其长时间运行的操作池和其关联的工作进程。  
  
> [!WARNING]
>  有几个在实现时，开发人员必须考虑的设计注意事项<xref:System.Web.Hosting.HostingEnvironment.StopListening>事件：  
>   
> 1. <xref:System.Web.Hosting.HostingEnvironment.StopListening>事件功能仅适用于配置为使用 IIS 集成的管道的应用程序。  
> 2. 开发人员不会引发错误从其<xref:System.Web.Hosting.HostingEnvironment.StopListening>实现; 引发错误将产生不可预知的结果。  
> 3. ASP.NET 中的操作的并发特性，则无法保证，ASP.NET 将会调用<xref:System.Web.Hosting.HostingEnvironment.StopListening>事件后已实现由开发人员。  
> 4. <xref:System.Web.Hosting.HostingEnvironment.StopListening>事件可以与其他同时执行<xref:System.Web.Hosting.IRegisteredObject>通知。  
> 5. 开发人员需要了解 ASP.NET 可能关闭应用程序域时其<xref:System.Web.Hosting.HostingEnvironment.StopListening>事件执行和设计其实现来处理这种可能性。  
> 6. <xref:System.Web.Hosting.HostingEnvironment.StopListening> 不能阻止事件处理程序;阻止实现会导致死锁，并且达到快速失败保护时间间隔后，IIS 将终止工作进程。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterObject">
      <MemberSignature Language="C#" Value="public static void UnregisterObject (System.Web.Hosting.IRegisteredObject obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterObject(class System.Web.Hosting.IRegisteredObject obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.HostingEnvironment.UnregisterObject(System.Web.Hosting.IRegisteredObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterObject (obj As IRegisteredObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterObject(System::Web::Hosting::IRegisteredObject ^ obj);" />
      <MemberSignature Language="F#" Value="static member UnregisterObject : System.Web.Hosting.IRegisteredObject -&gt; unit" Usage="System.Web.Hosting.HostingEnvironment.UnregisterObject obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Web.Hosting.IRegisteredObject" />
      </Parameters>
      <Docs>
        <param name="obj">要移除的对象。</param>
        <summary>从应用程序的已注册对象列表中移除一个对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager>类使当前的应用程序域，以创建、 管理和销毁对象在当前应用程序域之外的方法。 <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A>方法用于从宿主环境中删除以前已注册的对象。  
  
   
  
## Examples  
 下面的代码示例是<xref:System.Web.Hosting.IRegisteredObject.Stop%2A>已注册对象的方法。 运行该示例所需的完整代码，请参阅示例部分<xref:System.Web.Hosting.IRegisteredObject>接口概述主题。  
  
 [!code-csharp[System.Web.Hosting.ApplicationManager#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/CS/appManagercs.aspx.cs#3)]
 [!code-vb[System.Web.Hosting.ApplicationManager#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/VB/appManagervb.aspx.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Hosting.HostingEnvironment.RegisterObject(System.Web.Hosting.IRegisteredObject)" />
        <altmember cref="T:System.Web.Hosting.IRegisteredObject" />
        <altmember cref="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="VirtualPathProvider">
      <MemberSignature Language="C#" Value="public static System.Web.Hosting.VirtualPathProvider VirtualPathProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Hosting.VirtualPathProvider VirtualPathProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.HostingEnvironment.VirtualPathProvider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property VirtualPathProvider As VirtualPathProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Hosting::VirtualPathProvider ^ VirtualPathProvider { System::Web::Hosting::VirtualPathProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualPathProvider : System.Web.Hosting.VirtualPathProvider" Usage="System.Web.Hosting.HostingEnvironment.VirtualPathProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualPathProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此应用程序的虚拟路径提供程序。</summary>
        <value>此应用程序的 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> 实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当多个<xref:System.Web.Hosting.VirtualPathProvider>已注册实例，<xref:System.Web.Hosting.HostingEnvironment>对象管理的调用链。 你无法控制虚拟路径提供程序的调用的顺序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
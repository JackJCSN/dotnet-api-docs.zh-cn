<Type Name="VirtualFile" FullName="System.Web.Hosting.VirtualFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="519605e982c3b7b0b9e07f2d38ec74f36e32602f" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64146644" /></Metadata><TypeSignature Language="C#" Value="public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualFile extends System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualFile" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualFile&#xA;Inherits VirtualFileBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualFile abstract : System::Web::Hosting::VirtualFileBase" />
  <TypeSignature Language="F#" Value="type VirtualFile = class&#xA;    inherit VirtualFileBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Hosting.VirtualFileBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示虚拟文件或资源空间中的一个文件对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualFile>类是表示虚拟文件系统中的文件的对象的基类。 通常情况下，你会实施的后代<xref:System.Web.Hosting.VirtualFile>为每个类<xref:System.Web.Hosting.VirtualPathProvider>后代在 Web 应用程序中的对象。  
  
   
  
## Examples  
 下面的代码示例是<xref:System.Web.Hosting.VirtualFile>类实现，它会将信息存储在<xref:System.Data.DataSet>具有模板文件，以返回 HTML 数据对象。 此代码示例适用于的代码示例<xref:System.Web.Hosting.VirtualPathProvider>并<xref:System.Web.Hosting.VirtualDirectory>类来提供虚拟资源从数据存储区加载到<xref:System.Data.DataSet>对象。 有关完整的编译和运行示例，说明，请参阅示例部分<xref:System.Web.Hosting.VirtualPathProvider>类概述。  
  
 此示例包含三个部分：<xref:System.Web.Hosting.VirtualFile>类的实现，用于填充 XML 数据文件<xref:System.Data.DataSet>对象和页面模板文件。  
  
 第一个代码示例是实现<xref:System.Web.Hosting.VirtualFile>类。 其构造函数使用一种方法的自定义<xref:System.Web.Hosting.VirtualPathProvider>对象返回<xref:System.Data.DataSet>对象。 然后搜索<xref:System.Data.DataSet>对象来检索与提供的虚拟文件路径关联的信息。 在<xref:System.Web.Hosting.VirtualFile.Open%2A>方法，它会将信息从<xref:System.Data.DataSet>对象的模板文件，并返回组合作为<xref:System.IO.Stream>对象。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#40)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#40)]  
  
 第二个示例是用来填充 XML 数据文件<xref:System.Data.DataSet>返回由自定义对象<xref:System.Web.Hosting.VirtualPathProvider>对象。 此 XML 数据用于演示如何使用<xref:System.Web.Hosting.VirtualPathProvider>， <xref:System.Web.Hosting.VirtualFile>，和<xref:System.Web.Hosting.VirtualDirectory>类从外部数据，检索数据并不是为代表生产质量的数据存储区。  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<resource type="dir"   
          path="/vrDir"   
          parentPath=""   
          content="">  
  <resource type="file"   
            path="/vrDir/Level1FileA.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileA.">  
  </resource>  
  <resource type="file"   
            path="/vrDir/Level1FileB.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileB.">  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirA"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirB"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 第三个示例是用作虚拟文件的模板的文本文件。 由百分号 （%） 之间的文本表示文件中的占位符标记，如`%file%`和`%content%`。 时间戳用于监视缓存的虚拟文件数据的更改。  
  
```  
<html>  
  <head>  
    <title>File name: %file%</title>  
  </head>  
  
  <body>  
    <h1>%file%</h1>  
    <p>%content%</p>  
    <p>Page timestamp: %pageTimestamp%<br>  
       Data timestamp: %dataTimestamp%<br>  
       Template timestamp: %templateTimestamp%</p>  
  </body>  
</html>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.Hosting.VirtualFile" />类，必须重写<see cref="M:System.Web.Hosting.VirtualFile.Open" />方法以返回到虚拟资源的内容的只读流。</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="new System.Web.Hosting.VirtualFile : string -&gt; System.Web.Hosting.VirtualFile" Usage="new System.Web.Hosting.VirtualFile virtualPath" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">此实例所表示资源的虚拟路径。</param>
        <summary>初始化 <see cref="T:System.Web.Hosting.VirtualFile" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例是实现<xref:System.Web.Hosting.VirtualFile.%23ctor%2A>检索从虚拟文件信息的构造函数<xref:System.Data.DataSet>提供的自定义对象<xref:System.Web.Hosting.VirtualPathProvider>对象。 运行该示例所需的完整代码，请参阅示例部分<xref:System.Web.Hosting.VirtualFile>类概述。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#41)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public override bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDirectory { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirectory : bool" Usage="System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示该资源是应作为文件处理的虚拟资源。</summary>
        <value>总是为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.Open" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Open () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ Open();" />
      <MemberSignature Language="F#" Value="abstract member Open : unit -&gt; System.IO.Stream" Usage="virtualFile.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，返回到虚拟资源的只读流。</summary>
        <returns>到虚拟文件的只读流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualFile.Open%2A>方法返回包含数据视为由文件的流<xref:System.Web.Hosting.VirtualPathProvider>类。 流是只读的可查找 (<xref:System.IO.Stream.CanSeek%2A>属性为 true)。  
  
   
  
## Examples  
 下面的代码示例是的实现<xref:System.Web.Hosting.VirtualFile.Open%2A>组合虚拟文件特定的信息和模板文件，然后返回组合的方法。 模板文件缓存可减少多次读取的文件系统检索模板文件的开销。 运行该示例所需的完整代码，请参阅示例部分<xref:System.Web.Hosting.VirtualFile>类概述。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#42)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#42)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中<see cref="M:System.Web.Hosting.VirtualFile.Open" />方法必须返回一个找到的流。 如果该方法返回的流中不支持查找，如此<see cref="T:System.NotSupportedException" />流传递到时引发<see cref="T:System.Web.HttpResponse" />对象写出数据。 发生异常的原因响应尝试读取<see cref="P:System.IO.Stream.Length" />属性，对不可查找的流，尝试访问的属性引发异常。 有关更多信息，请参见 <see cref="P:System.IO.Stream.CanSeek" /> 属性。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
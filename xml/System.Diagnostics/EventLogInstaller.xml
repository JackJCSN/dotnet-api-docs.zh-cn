<Type Name="EventLogInstaller" FullName="System.Diagnostics.EventLogInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88596074c0bd24dd3f2dd67de13860ad50ec959d" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63887906" /></Metadata><TypeSignature Language="C#" Value="public class EventLogInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type EventLogInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>使您能够安装和配置应用程序在运行时所读取或写入的事件日志。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLogInstaller>由[Installutil.exe （安装程序工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)时安装事件日志。 <xref:System.Diagnostics.EventLogInstaller>类可以仅在本地计算机上安装事件日志。  
  
 使用<xref:System.Diagnostics.EventLogInstaller>类当你的应用程序将事件日志写入; 不需要使用你的应用程序的事件日志安装程序从事件日志中读取。 应用程序和服务应写入应用程序日志或自定义日志。 设备驱动程序应该写入系统日志。  
  
> [!NOTE]
>  安全日志是只读的。  
  
 安装程序创建的事件源中指定的<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性，它为事件日志中指定的寄存器<xref:System.Diagnostics.EventLogInstaller.Log%2A>属性。 此行为是类似于调用<xref:System.Diagnostics.EventLog.CreateEventSource%2A>上<xref:System.Diagnostics.EventLog>组件。  
  
 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>和<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法将事件写入到事件日志。 必须指定事件源写入事件;必须创建并写入与源的第一项之前配置的事件源。  
  
 在应用程序的安装过程中创建新的事件源。 这允许操作系统以刷新其注册的事件源的列表和它们的配置的时间。 如果操作系统没有刷新其事件源的列表，并且尝试写入新的源的事件写入操作将失败。 可以配置新的源使用<xref:System.Diagnostics.EventLogInstaller>，或使用<xref:System.Diagnostics.EventLog.CreateEventSource%2A>方法。 若要创建新的事件源的计算机上，必须具有管理权限。  
  
 可以创建现有事件日志或新的事件日志的事件源。 创建新的源为新的事件日志时，系统注册该日志的源，但直到第一个条目写入不创建该日志。  
  
 若要安装事件日志，请创建继承的项目安装程序类<xref:System.Configuration.Install.Installer>，并设置<xref:System.ComponentModel.RunInstallerAttribute>到类`true`。 您的项目内创建<xref:System.Diagnostics.EventLogInstaller>为每个事件日志将写入到应用程序，并且将实例添加到你的项目安装程序类。  
  
 当[Installutil.exe （安装程序工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)是调用，它会查看<xref:System.ComponentModel.RunInstallerAttribute>。 如果它是`true`，该工具会安装中的所有项<xref:System.Configuration.Install.Installer.Installers%2A>项目安装程序与关联的集合。 如果<xref:System.ComponentModel.RunInstallerAttribute>是`false`，此工具将忽略项目安装程序。  
  
 修改的其他属性<xref:System.Diagnostics.EventLogInstaller>之前或之后添加到实例<xref:System.Configuration.Install.Installer.Installers%2A>项目安装程序，但在之前运行该安装程序工具的集合。 必须设置<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性，如果你的应用程序将写入事件日志。  
  
 使用<xref:System.Diagnostics.EventLogInstaller>注册一个新的或现有的事件日志; 新的源不使用<xref:System.Diagnostics.EventLogInstaller>若要更改现有的源。 <xref:System.Diagnostics.EventLogInstaller>类不会修改现有源以匹配指定的安装属性的配置属性。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法将引发异常，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性与为另一个事件日志的计算机上注册的源名称相匹配。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法不会注册源，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性与已注册相同的事件日志中指定的源名称相匹配<xref:System.Diagnostics.EventLogInstaller.Log%2A>属性。  
  
 您可以注册事件源的本地化的资源文件为事件类别和消息字符串。 你的应用程序可以写入事件日志项使用资源标识符，而不指定实际的字符串。 事件查看器使用的资源标识符来查找并显示基于当前语言设置的本地化的资源文件中的相应字符串。 可以注册一个单独的文件的事件类别、 消息和参数插入字符串，也可以注册相同的资源文件，所有三种类型的字符串。 使用<xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>， <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>， <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>，和<xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A>属性来配置要本地化的项写入事件日志的源。 如果你的应用程序直接将字符串值写入事件日志，您不需要设置这些属性。  
  
 要写入本地化的项还是要直接写入字符串，必须配置源。 如果你的应用程序将使用资源标识符和字符串值的条目写入，则必须注册两个单独的源。 例如，配置一个源的资源文件，以及如何将该源中的<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法来编写使用资源标识符添加到事件日志条目。 创建不同的源，而无需资源文件，然后使用在该源<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法将字符串直接写入事件日志使用的源。  
  
 通常情况下，不调用的方法<xref:System.Diagnostics.EventLogInstaller>类在代码中; 它们通常被称为只能由 Installutil.exe。 该工具会自动调用<xref:System.Diagnostics.EventLogInstaller.Install%2A>在安装过程中的方法。 如有必要，它退出故障，通过调用<xref:System.Diagnostics.EventLogInstaller.Rollback%2A>生成了异常的对象的方法。  
  
   
  
## Examples  
 下面的代码示例设置新的事件源的安装属性。 代码示例设置的源名称和事件日志名称，并添加<xref:System.Diagnostics.EventLogInstaller>到<xref:System.Configuration.Install.Installer.Installers%2A>集合。  
  
 [!code-cpp[EventLogInstaller#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogInstaller/CPP/eventloginstaller.cpp#1)]
 [!code-csharp[EventLogInstaller#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogInstaller/CS/eventloginstaller.cs#1)]
 [!code-vb[EventLogInstaller#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogInstaller/VB/eventloginstaller.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
    <related type="Article" href="~/docs/framework/tools/installutil-exe-installer-tool.md">Installutil.exe（安装程序工具）</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.EventLogInstaller" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置类别资源文件中类别的数目。</summary>
        <value>类别资源文件中的类别的数目。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>和<xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>属性在写入事件时已本地化的类别字符串。 如果在写入事件时提供一个类别，事件查看器显示事件条目的类别。 事件日志类别是应用程序定义的字符串，用于帮助筛选事件，或提供有关事件的信息。 例如，你的应用程序可以定义分隔不同类别的不同组件或不同的操作。  
  
 事件类别是可选的;如果你的应用程序不使用类别，则不要设置<xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>和<xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>属性。  
  
 有关如何定义事件消息和生成事件资源文件的详细信息，请参阅平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下面的代码示例设置新的事件源的安装属性。 代码示例设置事件源名称、 事件日志名称和本地化的事件文本的资源文件。  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 代码示例使用下面的消息文本文件，内置的资源库 EventLogMsgs.dll。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含源的类别字符串的资源文件的路径。</summary>
        <value>类别资源文件的路径。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>和<xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>属性在写入事件时已本地化的类别字符串。 如果在写入事件时提供一个类别，事件查看器显示事件项的类别。 事件日志类别是应用程序定义的字符串，用于帮助筛选事件，或提供有关事件的信息。 例如，应用程序可能具有不同的组件或不同的操作的单独类别。  
  
 事件类别是可选的;如果你的应用程序不使用类别，则不要设置<xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>和<xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>属性。  
  
 有关如何定义事件消息和生成事件资源文件的详细信息，请参阅平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下面的代码示例设置新的事件源的安装属性。 代码示例设置事件源名称、 事件日志名称和本地化的事件文本的资源文件。  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 代码示例使用下面的消息文本文件，内置的资源库 EventLogMsgs.dll。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="eventLogInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">用作 <see cref="T:System.ComponentModel.IComponent" /> 的模板的 <see cref="T:System.Diagnostics.EventLogInstaller" />。</param>
        <summary>复制安装时所需要的 <see cref="T:System.Diagnostics.EventLog" /> 组件（与事件日志对应）的属性值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过指定的组件`component`参数必须是<xref:System.Diagnostics.EventLog>; 否则为将引发异常。  
  
 通常情况下，不调用的方法<xref:System.Diagnostics.EventLogInstaller>从在代码中; 它们通常称为仅可由[Installutil.exe （安装程序工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)。 <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> Installutil.exe 使用它来设置的属性值<xref:System.Diagnostics.EventLogInstaller>对的值的现有<xref:System.Diagnostics.EventLog>。  
  
 如果<xref:System.Diagnostics.EventLog.Log%2A>的<xref:System.Diagnostics.EventLog>，它是传递中为空字符串 ("")，必须设置<xref:System.Diagnostics.EventLog.Log%2A>为安装程序在执行之前有效的值的属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定的组件不是 <see cref="T:System.Diagnostics.EventLog" />。  
  
或 
指定组件的 <see cref="P:System.Diagnostics.EventLog.Log" /> 或 <see cref="P:System.Diagnostics.EventLog.Source" /> 属性为 <see langword="null" /> 或空。</exception>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" />，用于保存执行回滚或卸载操作所需的信息。</param>
        <summary>执行安装并将事件日志信息写入注册表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法将事件日志信息写入到注册表中，并将事件日志关联与由指定的日志<xref:System.Diagnostics.EventLogInstaller.Log%2A>属性。 如果尚不存在日志 （和指定源），<xref:System.Diagnostics.EventLogInstaller.Install%2A>创建的日志，并将新的源与之相关联。  
  
 通常情况下，不调用的方法<xref:System.Diagnostics.EventLogInstaller>从在代码中; 它们通常称为仅可由[Installutil.exe （安装程序工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)。 该工具会自动调用<xref:System.Diagnostics.EventLogInstaller.Install%2A>方法在安装过程中写入事件日志正在安装的注册表信息。 安装是事务性的因此如果在安装期间安装项目的任何组件的故障，则所有以前安装的组件将回滚到安装前的状态。 这通过调用每个组件实现<xref:System.Diagnostics.EventLogInstaller.Rollback%2A>方法。  
  
 使用<xref:System.Diagnostics.EventLogInstaller>注册一个新的或现有的事件日志; 新的源不使用<xref:System.Diagnostics.EventLogInstaller>若要更改现有的源。 <xref:System.Diagnostics.EventLogInstaller>类不会修改现有源以匹配指定的安装属性的配置属性。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法将引发异常，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性与为另一个事件日志的计算机上注册的源名称相匹配。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法将跳过注册源，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性与已注册相同的事件日志中指定的源名称相匹配<xref:System.Diagnostics.EventLogInstaller.Log%2A>属性。  
  
 应用程序的安装例程使用的项目安装程序<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>属性来自动维护有关已安装的组件的信息。 此状态信息，传递给<xref:System.Diagnostics.EventLogInstaller.Install%2A>作为`stateSaver`工具安装每个参数，将持续更新<xref:System.Diagnostics.EventLogInstaller>。 通常情况下，不需要为你的代码可以显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">安装程序尝试使用的平台不是 Windows NT 4.0 或更新版本。</exception>
        <exception cref="T:System.ArgumentException">已经为另一个事件日志注册了 <see cref="P:System.Diagnostics.EventLogInstaller.Source" /> 属性中指定的名称。</exception>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="eventLogInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">要比较的安装程序。</param>
        <summary>确定安装程序和指定的另一个安装程序是否引用同一个源。</summary>
        <returns>如果当前安装程序和由 <paramref name="otherInstaller" /> 参数指定的安装程序安装或卸载相同的源，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，不调用的方法<xref:System.Diagnostics.EventLogInstaller>从在代码中; 它们通常仅由调用安装程序工具 (Installutil.exe)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public string Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Log" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Log { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Log : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要向其设置源的日志的名称。</summary>
        <value>日志的名称。 这可以是 Application、System 或一个自定义的日志名称。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用<xref:System.Diagnostics.EventLogInstaller.Log%2A>要关联中指定的源属性<xref:System.Diagnostics.EventLogInstaller.Source%2A>与现有的日志或本地计算机上的新日志的属性。 [Installutil.exe （安装程序工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)使用此信息来将源映射到计算机的注册表中的日志。 应用程序和服务应写入应用程序日志或自定义日志。 设备驱动程序应该写入系统日志。  
  
 若要向事件日志写入条目，必须创建源，并将其注册到事件日志。 事件源一次只能写入到一个日志。 安装程序使用的值<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性可作为有效项源的事件日志中注册你的应用程序。 如果不指定安装程序运行之前的日志名称，安装程序将注册到应用程序日志源。 如果指定新的源和现有的日志时，安装程序创建新的事件源，并将其与您指定的日志关联。 如果指定新的源和新的日志，安装程序将在注册表中，新的日志与相关联的新的源，但直到第一个条目写入不创建该日志。  
  
 操作系统将事件日志存储为文件。 当你使用<xref:System.Diagnostics.EventLogInstaller>或<xref:System.Diagnostics.EventLog.CreateEventSource%2A>方法来创建新的事件日志关联的文件存储在指定计算机上的 %SystemRoot%\System32\Config 目录中。 通过追加的前 8 个字符设置的文件名称<xref:System.Diagnostics.EventLogInstaller.Log%2A>".evt"文件扩展名的属性。  
  
 使用<xref:System.Diagnostics.EventLogInstaller>注册一个新的或现有的事件日志; 新的源不使用<xref:System.Diagnostics.EventLogInstaller>若要更改现有的源。 <xref:System.Diagnostics.EventLogInstaller>类不会修改现有源以匹配指定的安装属性的配置属性。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法将引发异常，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性与为另一个事件日志的计算机上注册的源名称相匹配。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法不会注册源，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性与已注册相同的事件日志中指定的源名称相匹配<xref:System.Diagnostics.EventLogInstaller.Log%2A>属性。  
  
 有关详细信息的事件日志和源的行为，请参阅<xref:System.Diagnostics.EventLog>类的文档<xref:System.Diagnostics.EventLog.Log%2A>和<xref:System.Diagnostics.EventLog.Source%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置资源文件的路径，该文件包含源的消息格式字符串。</summary>
        <value>消息资源文件的路径。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>属性可配置事件日志源写入本地化的事件消息。 事件消息是应用程序定义的字符串，描述向用户事件。  
  
 你的应用程序可以编写使用资源标识符的事件日志条目。 资源标识符的消息中编制索引<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>。 事件查看器使用的资源标识符来查找并显示基于当前语言设置的本地化的资源文件中的相应字符串。  
  
 要写入本地化的项还是要直接写入字符串，必须配置的事件源。 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法写入本地化的项配置与消息资源文件的源。  
  
 如果你的应用程序写入事件消息字符串直接，而不是在已本地化的资源文件中，使用资源标识符未设置<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>属性。  
  
 如果<xref:System.Diagnostics.EventLog.MachineName%2A>属性不是本地计算机标识符 ("。")，.NET Framework 假定的资源文件在远程计算机上。 如果<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>属性值包含驱动器号、 资源文件被假定为上\\ \\< machinename\>\\< 驱动器\>$ 共享 (例如， \\\server\c$)。 如果值包含字符串 %systemroot%，假定的资源文件位于\\ \\< machinename\>\admin$ 共享 (例如， \\\server\admin$)。  
  
 有关如何定义事件消息和生成事件资源文件的详细信息，请参阅平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下面的代码示例设置新的事件源的安装属性。 代码示例设置事件源名称、 事件日志名称和本地化的事件文本的资源文件。  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 代码示例使用下面的消息文本文件，内置的资源库 EventLogMsgs.dll。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置资源文件的路径，该文件包含源的消息参数字符串。</summary>
        <value>消息参数资源文件的路径。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A>属性可配置事件日志源写入本地化的事件消息与插入参数字符串。 每个本地化的事件消息中指定<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>属性可以包含插入字符串的占位符。 这些占位符用于指定的位置和资源标识符内的事件消息的独立于语言的字符串。 事件查看器替换中对应的字符串的占位符<xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A>和格式化本地化的事件项的事件日志消息。  
  
 例如，消息文本文件中的以下部分定义的参数占位符的字符串：  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 在参数资源文件中，插入字符串必须使用定义的资源标识符对应于该占位符，如下所示：  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 要写入本地化的项还是要直接写入字符串，必须配置的事件源。 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法写入本地化的项配置与消息资源文件的源。  
  
 如果你的应用程序事件消息字符串将直接写入到事件日志，或者如果你<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>不包含消息未设置带有参数插入占位符<xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A>属性。  
  
 有关如何定义事件消息和生成事件资源文件的详细信息，请参阅平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下面的代码示例设置新的事件源的安装属性。 代码示例设置事件源名称、 事件日志名称和本地化的事件文本的资源文件。  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 代码示例使用下面的消息文本文件，内置的资源库 EventLogMsgs.dll。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。 具体而言，定义为资源标识符 1004年的消息使用的资源标识符 5002 定义的参数字符串占位符。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" />，它包含计算机的安装前状态。</param>
        <summary>通过回滚安装过程写入注册表的事件日志信息，将计算机还原为安装前的状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLogInstaller.Rollback%2A>方法撤消的影响<xref:System.Diagnostics.EventLogInstaller.Install%2A>方法。 <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> 安装项目中的任何组件的安装失败时调用。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法创建，或设置事件日志和事件源的属性。 <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> 删除事件日志和源，或者将预先存在的源的属性重置为其安装前的值。  
  
 通常情况下，不调用的方法<xref:System.Diagnostics.EventLogInstaller>从在代码中; 它们通常称为仅可由[Installutil.exe （安装程序工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)。 该工具将调用<xref:System.Diagnostics.EventLogInstaller.Rollback%2A>方法，当这个或另一个组件未安装，以撤消安装过程中所做的任何更改时。  
  
 应用程序的安装例程使用的项目安装程序<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>属性来自动维护有关已安装的组件的信息。 此状态信息，传递给<xref:System.Diagnostics.EventLogInstaller.Rollback%2A>作为`savedState`参数，将持续更新，因为该工具将返回每个<xref:System.Diagnostics.EventLogInstaller>。 通常情况下，不需要为你的代码可以显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在日志中注册的源名称。</summary>
        <value>要在事件日志中注册为项源的名称。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件源指示什么来记录事件。 它通常是应用程序的名称或大型应用程序内的一个组件的名称。  
  
 安装程序使用的值<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性可作为有效项源的事件日志中注册你的应用程序。 新的源名称不能与现有的源名称或现有的事件日志名称匹配。 每个源只能写入到一个事件日志一次;但是，你的应用程序可以使用多个源写入多个事件日志。 例如，你的应用程序可能需要多个源配置为使用不同的事件日志或不同的资源文件。  
  
 应用程序和服务应写入应用程序日志或自定义日志。 设备驱动程序应该写入系统日志。 如果不指定安装程序运行之前的日志名称，安装程序将注册到应用程序日志源。 如果指定不存在日志的名称，请将系统注册<xref:System.Diagnostics.EventLogInstaller.Source%2A>到该日志，但直到第一个条目写入不创建该日志。  
  
 使用<xref:System.Diagnostics.EventLogInstaller>注册一个新的或现有的事件日志; 新的源不使用<xref:System.Diagnostics.EventLogInstaller>若要更改现有的源。 <xref:System.Diagnostics.EventLogInstaller>类不会修改现有源以匹配指定的安装属性的配置属性。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法将引发异常，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性与为另一个事件日志的计算机上注册的源名称相匹配。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>方法不会注册源，如果<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性与已注册相同的事件日志中指定的源名称相匹配<xref:System.Diagnostics.EventLogInstaller.Log%2A>属性。  
  
 有关详细信息的事件日志和源的行为，请参阅<xref:System.Diagnostics.EventLog>类的文档<xref:System.Diagnostics.EventLog.Log%2A>和<xref:System.Diagnostics.EventLog.Source%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" />，它包含计算机的安装前状态。</param>
        <summary>通过从注册表中移除事件日志信息来移除安装。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A>属性值是`Remove`，则<xref:System.Diagnostics.EventLogInstaller.Uninstall%2A>方法删除源和关联的日志安装程序创建如果<xref:System.Diagnostics.EventLogInstaller.Log%2A>和<xref:System.Diagnostics.EventLogInstaller.Source%2A>属性指定创建新的事件日志和源。  
  
 通常情况下，不调用的方法<xref:System.Diagnostics.EventLogInstaller>从在代码中; 它们通常称为仅可由[Installutil.exe （安装程序工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)在卸载模式。 该工具会自动调用<xref:System.Diagnostics.EventLogInstaller.Uninstall%2A>方法还原受影响的在安装程序安装前的状态系统的部分。 这包括删除与正在卸载的事件日志关联的注册表信息。  
  
 应用程序的项目安装程序卸载例程使用<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>属性来自动维护有关已卸载的组件的信息。 此状态信息，传递给<xref:System.Diagnostics.EventLogInstaller.Uninstall%2A>作为`savedState`工具卸载每个参数，将持续更新<xref:System.Diagnostics.EventLogInstaller>。 通常情况下，不需要为你的代码可以显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberSignature Language="F#" Value="member this.UninstallAction : System.Configuration.Install.UninstallAction with get, set" Usage="System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，以指示 <see href="https://docs.microsoft.com/dotnet/framework/tools/installutil-exe-installer-tool">Installutil.exe（安装程序工具）</see>在卸载时应删除事件日志还是保留其安装状态。</summary>
        <value><see cref="T:System.Configuration.Install.UninstallAction" /> 值之一，它指示在卸载 <see cref="T:System.Diagnostics.EventLog" /> 时将事件日志保留在何种状态。 默认值为 <see langword="Remove" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安装事件日志，可以根据需要连接到现有的日志。 如果这样做，您必须决定是否在日志应返回到安装前的状态，还是应保持在其当前的安装后状态。 如果你选择事件日志返回到安装前的状态，则不会还原到在安装时的事件日志条目的更改。 可以重置与关联的事件日志属性<xref:System.Diagnostics.EventLogInstaller>到安装前的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:System.Diagnostics.EventLogInstaller.UninstallAction" /> 包含无效值。 只有 <see langword="Remove" /> 和 <see langword="NoAction" /> 才是此属性的有效值。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ProcessThread" FullName="System.Diagnostics.ProcessThread">
  <Metadata><Meta Name="ms.openlocfilehash" Value="035bb483e7f4700eea14b2b39e00ff7f6172ea58" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58691856" /></Metadata><TypeSignature Language="C#" Value="public class ProcessThread : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProcessThread extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ProcessThread" />
  <TypeSignature Language="VB.NET" Value="Public Class ProcessThread&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProcessThread : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type ProcessThread = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="013f0-101">表示操作系统进程线程。</span><span class="sxs-lookup"><span data-stu-id="013f0-101">Represents an operating system process thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-102">使用<xref:System.Diagnostics.ProcessThread>以获取有关当前在系统运行的线程的信息。</span><span class="sxs-lookup"><span data-stu-id="013f0-102">Use <xref:System.Diagnostics.ProcessThread> to obtain information about a thread that is currently running on the system.</span></span> <span data-ttu-id="013f0-103">这样做使您，例如，若要监视线程的性能特征。</span><span class="sxs-lookup"><span data-stu-id="013f0-103">Doing so allows you, for example, to monitor the thread's performance characteristics.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="013f0-104">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="013f0-104">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="013f0-105">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="013f0-105">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="013f0-106">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="013f0-106">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="013f0-107">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="013f0-107">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="013f0-108">有关详细信息，请参阅中的"使用对象实现 IDisposable"一节<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="013f0-108">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="013f0-109">线程是执行通过计划的路径。</span><span class="sxs-lookup"><span data-stu-id="013f0-109">A thread is a path of execution through a program.</span></span> <span data-ttu-id="013f0-110">它是 Win32 安排执行的最小单位。</span><span class="sxs-lookup"><span data-stu-id="013f0-110">It is the smallest unit of execution that Win32 schedules.</span></span> <span data-ttu-id="013f0-111">它包含的堆栈，CPU 寄存器和系统计划程序的执行列表中条目的状态。</span><span class="sxs-lookup"><span data-stu-id="013f0-111">It consists of a stack, the state of the CPU registers, and an entry in the execution list of the system scheduler.</span></span>  
  
 <span data-ttu-id="013f0-112">过程包括一个或多个线程和代码、 数据和在内存中程序的其他资源。</span><span class="sxs-lookup"><span data-stu-id="013f0-112">A process consists of one or more threads and the code, data, and other resources of a program in memory.</span></span> <span data-ttu-id="013f0-113">典型的程序资源是打开的文件、 semaphore 以及动态分配的内存。</span><span class="sxs-lookup"><span data-stu-id="013f0-113">Typical program resources are open files, semaphores, and dynamically allocated memory.</span></span> <span data-ttu-id="013f0-114">所有这些进程的线程共享进程的每个资源。</span><span class="sxs-lookup"><span data-stu-id="013f0-114">Each resource of a process is shared by all that process's threads.</span></span>  
  
 <span data-ttu-id="013f0-115">当系统调度器将执行控制权交给程序的线程之一时，程序执行。</span><span class="sxs-lookup"><span data-stu-id="013f0-115">A program executes when the system scheduler gives execution control to one of the program's threads.</span></span> <span data-ttu-id="013f0-116">计划程序确定应运行哪些线程和时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-116">The scheduler determines which threads should run and when.</span></span> <span data-ttu-id="013f0-117">低优先级的线程可能不得不等到优先级较高的线程完成其任务。</span><span class="sxs-lookup"><span data-stu-id="013f0-117">A lower-priority thread might be forced to wait while higher-priority threads complete their tasks.</span></span> <span data-ttu-id="013f0-118">多处理器计算机上计划程序可以将单个线程移到不同的处理器，从而均衡的 CPU 负载。</span><span class="sxs-lookup"><span data-stu-id="013f0-118">On multiprocessor computers, the scheduler can move individual threads to different processors, thus balancing the CPU load.</span></span>  
  
 <span data-ttu-id="013f0-119">每个进程启动与单个线程，这被称为主线程。</span><span class="sxs-lookup"><span data-stu-id="013f0-119">Each process starts with a single thread, which is known as the primary thread.</span></span> <span data-ttu-id="013f0-120">任何线程都可以创建其他线程。</span><span class="sxs-lookup"><span data-stu-id="013f0-120">Any thread can create additional threads.</span></span> <span data-ttu-id="013f0-121">进程内的所有线程都共享该进程的地址空间。</span><span class="sxs-lookup"><span data-stu-id="013f0-121">All the threads within a process share the address space of that process.</span></span>  
  
 <span data-ttu-id="013f0-122">主线程不一定位于集合中的第一个索引。</span><span class="sxs-lookup"><span data-stu-id="013f0-122">The primary thread is not necessarily located at the first index in the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="013f0-123">从.NET Framework 2.0 版开始，到其他计算机上的引用性能计数器数据的功能已消除的多种.NET Framework 方法和属性。</span><span class="sxs-lookup"><span data-stu-id="013f0-123">Starting with the .NET Framework version 2.0, the ability to reference performance counter data on other computers has been eliminated for many of the .NET Framework methods and properties.</span></span> <span data-ttu-id="013f0-124">此更改为了以提高性能，以及若要启用非管理员使用<xref:System.Diagnostics.ProcessThread>类。</span><span class="sxs-lookup"><span data-stu-id="013f0-124">This change was made to improve performance and to enable non-administrators to use the <xref:System.Diagnostics.ProcessThread> class.</span></span> <span data-ttu-id="013f0-125">因此，某些应用程序未在早期版本的.NET Framework 获得异常现在可能会收到<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="013f0-125">As a result, some applications that did not get exceptions in earlier versions of the .NET Framework may now get a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="013f0-126">方法和受影响的属性数量过多，不胜枚举，但异常信息已添加到受影响的成员主题。</span><span class="sxs-lookup"><span data-stu-id="013f0-126">The methods and properties affected are too numerous to list here, but the exception information has been added to the affected member topics.</span></span>  
  
 <span data-ttu-id="013f0-127">进程的线程分别执行并不了解彼此的除非使其可见。</span><span class="sxs-lookup"><span data-stu-id="013f0-127">The threads of a process execute individually and are unaware of each other unless you make them visible to each other.</span></span> <span data-ttu-id="013f0-128">但是，，共享公共资源的线程必须通过使用信号量或进程间通信的另一种方法协调其工作。</span><span class="sxs-lookup"><span data-stu-id="013f0-128">Threads that share common resources, however, must coordinate their work by using semaphores or another method of interprocess communication.</span></span>  
  
 <span data-ttu-id="013f0-129">若要获取所有的集合<xref:System.Diagnostics.ProcessThread>与当前进程关联的对象获取<xref:System.Diagnostics.Process.Threads%2A>属性的<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="013f0-129">To get a collection of all the <xref:System.Diagnostics.ProcessThread> objects associated with the current process, get the <xref:System.Diagnostics.Process.Threads%2A> property of the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.Process" />
    <altmember cref="P:System.Diagnostics.Process.Threads" />
  </Docs>
  <Members>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public int BasePriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BasePriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BasePriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BasePriority : int" Usage="System.Diagnostics.ProcessThread.BasePriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The base priority of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadBasePriority")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-130">获取线程的基本优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-130">Gets the base priority of the thread.</span></span></summary>
        <value><span data-ttu-id="013f0-131">线程的基本优先级，它由操作系统通过将进程优先级类与关联线程的优先级别相结合进行计算。</span><span class="sxs-lookup"><span data-stu-id="013f0-131">The base priority of the thread, which the operating system computes by combining the process priority class with the priority level of the associated thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-132"><xref:System.Diagnostics.ProcessThread.BasePriority%2A>是进程线程的起始优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-132">The <xref:System.Diagnostics.ProcessThread.BasePriority%2A> is the starting priority for the process thread.</span></span> <span data-ttu-id="013f0-133">可以查看有关通过系统监视器的基本优先级计数器的基本优先级的信息。</span><span class="sxs-lookup"><span data-stu-id="013f0-133">You can view information about the base priority through the System Monitor's Priority Base counter.</span></span>  
  
 <span data-ttu-id="013f0-134">操作系统通过将与该进程的优先级类结合使用线程的优先级级别范围来计算线程的基本优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-134">The operating system computes a thread's base priority by combining the thread's priority level range with the process's priority class.</span></span> <span data-ttu-id="013f0-135">可以设置的过程<xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=nameWithType>属性中的值之一<xref:System.Diagnostics.ProcessPriorityClass>枚举，即<xref:System.Diagnostics.ProcessPriorityClass.Idle>， <xref:System.Diagnostics.ProcessPriorityClass.Normal>， <xref:System.Diagnostics.ProcessPriorityClass.High>， <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>， <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>，或<xref:System.Diagnostics.ProcessPriorityClass.RealTime>。</span><span class="sxs-lookup"><span data-stu-id="013f0-135">You can set the process's <xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=nameWithType> property to one of the values in the <xref:System.Diagnostics.ProcessPriorityClass> enumeration, which are <xref:System.Diagnostics.ProcessPriorityClass.Idle>, <xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>, <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>.</span></span> <span data-ttu-id="013f0-136">您可以设置线程的<xref:System.Diagnostics.ProcessThread.PriorityLevel%2A>属性设置为一系列值限制线程的基本优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-136">You can set the thread's <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> property to a range of values that bounds the thread's base priority.</span></span> <span data-ttu-id="013f0-137">Win32 了七个基本优先级级别，每个类使用四个优先级类。</span><span class="sxs-lookup"><span data-stu-id="013f0-137">Win32 uses four priority classes with seven base priority levels per class.</span></span>  
  
 <span data-ttu-id="013f0-138">线程的当前优先级可能会偏离基本优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-138">The thread's current priority might deviate from the base priority.</span></span> <span data-ttu-id="013f0-139">例如，可以更改操作系统<xref:System.Diagnostics.ProcessThread.CurrentPriority%2A>基于时间的属性已用或者其他提升时进程必须放领先于其他人访问对处理器。</span><span class="sxs-lookup"><span data-stu-id="013f0-139">For example, the operating system can change the <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> property based on the time elapsed or other boosts when a process must be put ahead of others for access to the processor.</span></span> <span data-ttu-id="013f0-140">此外，可以设置<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>属性以使系统暂时提升线程的优先级，只要该过程会从等待状态。</span><span class="sxs-lookup"><span data-stu-id="013f0-140">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to cause the system to temporarily boost the priority of a thread whenever the process is taken out of the wait state.</span></span> <span data-ttu-id="013f0-141">该过程返回到等待状态时，会重置优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-141">The priority is reset when the process returns to the wait state.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      </Docs>
    </Member>
    <Member MemberName="CurrentPriority">
      <MemberSignature Language="C#" Value="public int CurrentPriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentPriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentPriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPriority : int" Usage="System.Diagnostics.ProcessThread.CurrentPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The current priority of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadCurrentPriority")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-142">获取线程的当前优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-142">Gets the current priority of the thread.</span></span></summary>
        <value><span data-ttu-id="013f0-143">线程的当前优先级，可根据操作系统如何安排该线程而偏离基本优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-143">The current priority of the thread, which may deviate from the base priority based on how the operating system is scheduling the thread.</span></span> <span data-ttu-id="013f0-144">可为活动线程暂时提升优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-144">The priority may be temporarily boosted for an active thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-145">线程的当前优先级可能会偏离基本优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-145">The thread's current priority might deviate from the base priority.</span></span> <span data-ttu-id="013f0-146">例如，可以更改操作系统<xref:System.Diagnostics.ProcessThread.CurrentPriority%2A>基于时间的属性已用，或者其他提升，当一个过程时必须放领先于其他人访问对处理器。</span><span class="sxs-lookup"><span data-stu-id="013f0-146">For example, the operating system can change the <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> property based on the time elapsed, or other boosts, when a process must be put ahead of others for access to the processor.</span></span> <span data-ttu-id="013f0-147">此外，可以设置<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>属性以使系统暂时提升线程的优先级，只要该过程会从等待状态。</span><span class="sxs-lookup"><span data-stu-id="013f0-147">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to cause the system to temporarily boost the priority of a thread whenever the process is taken out of the wait state.</span></span> <span data-ttu-id="013f0-148">该过程返回到等待状态时，会重置优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-148">The priority is reset when the process returns to the wait state.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.ProcessThread.BasePriority" />
        <altmember cref="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.Diagnostics.ProcessThread.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The ID of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-149">获取线程的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="013f0-149">Gets the unique identifier of the thread.</span></span></summary>
        <value><span data-ttu-id="013f0-150">与指定线程关联的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="013f0-150">The unique identifier associated with a specific thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-151">操作系统将仅在其生存期期间识别线程的线程身份证号重新使用。</span><span class="sxs-lookup"><span data-stu-id="013f0-151">The operating system reuses thread identification numbers, which identify threads only during their lifetimes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IdealProcessor">
      <MemberSignature Language="C#" Value="public int IdealProcessor { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IdealProcessor" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Property IdealProcessor As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IdealProcessor {  void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IdealProcessor : int" Usage="System.Diagnostics.ProcessThread.IdealProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-152">设置让此线程在其上运行的首选处理器。</span><span class="sxs-lookup"><span data-stu-id="013f0-152">Sets the preferred processor for this thread to run on.</span></span></summary>
        <value><span data-ttu-id="013f0-153">线程的首选处理器，用来在系统安排线程时确定在哪个处理器上运行线程。</span><span class="sxs-lookup"><span data-stu-id="013f0-153">The preferred processor for the thread, used when the system schedules threads, to determine which processor to run the thread on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-154"><xref:System.Diagnostics.ProcessThread.IdealProcessor%2A>值是从零开始。</span><span class="sxs-lookup"><span data-stu-id="013f0-154">The <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> value is zero-based.</span></span>  <span data-ttu-id="013f0-155">换而言之，若要设置第一个处理器的线程关联，将属性设置为零。</span><span class="sxs-lookup"><span data-stu-id="013f0-155">In other words, to set the thread affinity for the first processor, set the property to zero.</span></span>  
  
 <span data-ttu-id="013f0-156">在系统安排线程在其首选处理器尽可能上。</span><span class="sxs-lookup"><span data-stu-id="013f0-156">The system schedules threads on their preferred processors whenever possible.</span></span>  
  
 <span data-ttu-id="013f0-157">进程线程可以迁移处理器间重新加载处理器缓存每个迁移。</span><span class="sxs-lookup"><span data-stu-id="013f0-157">A process thread can migrate from processor to processor, with each migration reloading the processor cache.</span></span> <span data-ttu-id="013f0-158">指定线程的处理器可以提高在高系统负荷下的性能降低的重新加载处理器缓存的次数。</span><span class="sxs-lookup"><span data-stu-id="013f0-158">Specifying a processor for a thread can improve performance under heavy system loads by reducing the number of times the processor cache is reloaded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="013f0-159">下面的示例演示如何设置<xref:System.Diagnostics.ProcessThread.IdealProcessor%2A>到第一个处理器的记事本实例属性。</span><span class="sxs-lookup"><span data-stu-id="013f0-159">The following example demonstrates how to set the <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> property for an instance of Notepad to the first processor.</span></span>  
  
 [!code-csharp[ProcessThreadIdealProcessor#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessThreadIdealProcessor/CS/program.cs#1)]
 [!code-vb[ProcessThreadIdealProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessThreadIdealProcessor/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="013f0-160">系统未能设置线程在指定的处理器上启动。</span><span class="sxs-lookup"><span data-stu-id="013f0-160">The system could not set the thread to start on the specified processor.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-161">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-161">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-162">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-162">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PriorityBoostEnabled">
      <MemberSignature Language="C#" Value="public bool PriorityBoostEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PriorityBoostEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityBoostEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PriorityBoostEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityBoostEnabled : bool with get, set" Usage="System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Thread gets a priority boot when interactively used by a user.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadPriorityBoostEnabled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-163">获取或设置一个值，该值指示每当关联线程的进程主窗口接收焦点时，操作系统是否暂时提升该线程的优先级。</span><span class="sxs-lookup"><span data-stu-id="013f0-163">Gets or sets a value indicating whether the operating system should temporarily boost the priority of the associated thread whenever the main window of the thread's process receives the focus.</span></span></summary>
        <value><span data-ttu-id="013f0-164">若要在用户与进程的界面交互时提升线程的优先级，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="013f0-164"><see langword="true" /> to boost the thread's priority when the user interacts with the process's interface; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="013f0-165">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="013f0-165">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-166">当<xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A>是`true`，系统暂时提升线程的优先级，只要其关联的进程会从等待状态。</span><span class="sxs-lookup"><span data-stu-id="013f0-166">When <xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> is `true`, the system temporarily boosts the thread's priority whenever its associated process is taken out of the wait state.</span></span> <span data-ttu-id="013f0-167">此操作可防止其他进程中断当前线程的处理。</span><span class="sxs-lookup"><span data-stu-id="013f0-167">This action prevents other processes from interrupting the processing of the current thread.</span></span> <span data-ttu-id="013f0-168"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A>设置会影响所有的现有线程以及进程随后创建的任何线程。</span><span class="sxs-lookup"><span data-stu-id="013f0-168">The <xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> setting affects all existing threads as well as any threads subsequently created by the process.</span></span> <span data-ttu-id="013f0-169">若要还原正常行为，请设置<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>属性设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="013f0-169">To restore normal behavior, set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to `false`.</span></span>  
  
 <span data-ttu-id="013f0-170"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> 仅有的进程中运行该线程时，才有效<xref:System.Diagnostics.Process.PriorityClass%2A>设置为动态优先级枚举值之一 (<xref:System.Diagnostics.ProcessPriorityClass.Normal>， <xref:System.Diagnostics.ProcessPriorityClass.High>，或<xref:System.Diagnostics.ProcessPriorityClass.RealTime>)。</span><span class="sxs-lookup"><span data-stu-id="013f0-170"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> has an effect only when the thread is running in a process that has a <xref:System.Diagnostics.Process.PriorityClass%2A> set to one of the dynamic priority enumeration values (<xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="013f0-171">将优先级提升过高会耗尽基本操作系统和网络功能的资源。</span><span class="sxs-lookup"><span data-stu-id="013f0-171">Boosting the priority too high can drain resources from essential operating system and network functions.</span></span> <span data-ttu-id="013f0-172">这可能导致问题的其他操作系统任务。</span><span class="sxs-lookup"><span data-stu-id="013f0-172">This could cause problems with other operating system tasks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="013f0-173">未能检索到优先级提升信息。</span><span class="sxs-lookup"><span data-stu-id="013f0-173">The priority boost information could not be retrieved.</span></span>  
  
 <span data-ttu-id="013f0-174">- 或 -</span><span class="sxs-lookup"><span data-stu-id="013f0-174">-or-</span></span>  
  
 <span data-ttu-id="013f0-175">未能设置优先级提升信息。</span><span class="sxs-lookup"><span data-stu-id="013f0-175">The priority boost information could not be set.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-176">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-176">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-177">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-177">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
      </Docs>
    </Member>
    <Member MemberName="PriorityLevel">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadPriorityLevel PriorityLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadPriorityLevel PriorityLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PriorityLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityLevel As ThreadPriorityLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadPriorityLevel PriorityLevel { System::Diagnostics::ThreadPriorityLevel get(); void set(System::Diagnostics::ThreadPriorityLevel value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityLevel : System.Diagnostics.ThreadPriorityLevel with get, set" Usage="System.Diagnostics.ProcessThread.PriorityLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The priority level of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadPriorityLevel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadPriorityLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-178">获取或设置线程的优先级别。</span><span class="sxs-lookup"><span data-stu-id="013f0-178">Gets or sets the priority level of the thread.</span></span></summary>
        <value><span data-ttu-id="013f0-179"><see cref="T:System.Diagnostics.ThreadPriorityLevel" /> 值之一，它指定限制线程优先级的范围。</span><span class="sxs-lookup"><span data-stu-id="013f0-179">One of the <see cref="T:System.Diagnostics.ThreadPriorityLevel" /> values, specifying a range that bounds the thread's priority.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-180">优先级别不是单个值，而不是一系列值。</span><span class="sxs-lookup"><span data-stu-id="013f0-180">The priority level is not a single value, but rather a range of values.</span></span> <span data-ttu-id="013f0-181">操作系统使用进程的计算线程的基本优先级<xref:System.Diagnostics.Process.PriorityClass%2A>选择一个值中指定的范围从<xref:System.Diagnostics.ProcessThread.PriorityLevel%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="013f0-181">The operating system computes the thread's base priority by using the process's <xref:System.Diagnostics.Process.PriorityClass%2A> to choose a value from the range specified in the <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="013f0-182">未能检索到线程优先级别信息。</span><span class="sxs-lookup"><span data-stu-id="013f0-182">The thread priority level information could not be retrieved.</span></span>  
  
 <span data-ttu-id="013f0-183">- 或 -</span><span class="sxs-lookup"><span data-stu-id="013f0-183">-or-</span></span>  
  
 <span data-ttu-id="013f0-184">未能设置线程优先级别。</span><span class="sxs-lookup"><span data-stu-id="013f0-184">The thread priority level could not be set.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-185">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-185">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-186">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-186">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ThreadPriorityLevel" />
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.ProcessThread.BasePriority" />
        <altmember cref="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      </Docs>
    </Member>
    <Member MemberName="PrivilegedProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan PrivilegedProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PrivilegedProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivilegedProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PrivilegedProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivilegedProcessorTime : TimeSpan" Usage="System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time used in privileged mode.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadPrivilegedProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-187">获取线程在操作系统内核中运行代码所用的时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-187">Gets the amount of time that the thread has spent running code inside the operating system core.</span></span></summary>
        <value><span data-ttu-id="013f0-188"><see cref="T:System.TimeSpan" />，它指示线程在操作系统内核中运行代码所用的时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-188">A <see cref="T:System.TimeSpan" /> indicating the amount of time that the thread has spent running code inside the operating system core.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-189">Windows 使用几种不同的保护机制，并在所有这些根是用户模式和特权模式下的区别。</span><span class="sxs-lookup"><span data-stu-id="013f0-189">Windows uses several different protection mechanisms, and at the root of them all is the distinction between user mode and privileged mode.</span></span> <span data-ttu-id="013f0-190"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> 对应于在特权模式下，在操作系统内核中运行应用程序所用的时间量。</span><span class="sxs-lookup"><span data-stu-id="013f0-190"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> corresponds to the amount of time that the application has spent running in privileged mode, inside the operating system core.</span></span> <span data-ttu-id="013f0-191"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>属性指示应用程序在用户模式下，系统内核外的运行代码所用的时间量。</span><span class="sxs-lookup"><span data-stu-id="013f0-191">The <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> property indicates the amount of time that the application has spent running code in user mode, outside the system core.</span></span>  
  
 <span data-ttu-id="013f0-192">用户模式下将应用程序限制在两个重要方面。</span><span class="sxs-lookup"><span data-stu-id="013f0-192">User mode restricts the application in two important ways.</span></span> <span data-ttu-id="013f0-193">首先，应用程序不能直接访问外围设备，而是必须调用来获取或设置外围数据在操作系统内核。</span><span class="sxs-lookup"><span data-stu-id="013f0-193">First, the application cannot directly access the peripherals, but instead must call the operating system core to get or set peripheral data.</span></span> <span data-ttu-id="013f0-194">因此，操作系统可以确保一个应用程序不会销毁外围设备由另一个所需的数据。</span><span class="sxs-lookup"><span data-stu-id="013f0-194">The operating system can thus ensure that one application does not destroy peripheral data that is needed by another.</span></span> <span data-ttu-id="013f0-195">其次，应用程序无法读取或更改操作系统自身维护的数据。</span><span class="sxs-lookup"><span data-stu-id="013f0-195">Second, the application cannot read or change data that the operating system itself maintains.</span></span> <span data-ttu-id="013f0-196">此限制可防止无意或有意地损坏核心应用程序。</span><span class="sxs-lookup"><span data-stu-id="013f0-196">This restriction prevents applications from either inadvertently or intentionally corrupting the core.</span></span> <span data-ttu-id="013f0-197">如果在应用程序需要操作系统执行的操作，则会调用一个系统的例程。</span><span class="sxs-lookup"><span data-stu-id="013f0-197">If the application needs the operating system to perform an operation, it calls one of the system's routines.</span></span> <span data-ttu-id="013f0-198">许多这些转换到特权模式下，执行此操作，并平稳地返回到用户模式。</span><span class="sxs-lookup"><span data-stu-id="013f0-198">Many of these transition into privileged mode, perform the operation, and smoothly return to user mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="013f0-199">未能检索到线程时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-199">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-200">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-200">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-201">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-201">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="ProcessorAffinity">
      <MemberSignature Language="C#" Value="public IntPtr ProcessorAffinity { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ProcessorAffinity" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.ProcessorAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Property ProcessorAffinity As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ProcessorAffinity {  void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.ProcessorAffinity : nativeint" Usage="System.Diagnostics.ProcessThread.ProcessorAffinity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-202">设置关联线程可以在其上运行的处理器。</span><span class="sxs-lookup"><span data-stu-id="013f0-202">Sets the processors on which the associated thread can run.</span></span></summary>
        <value><span data-ttu-id="013f0-203">指向一组位的 <see cref="T:System.IntPtr" />，每个位表示该线程可在其上运行的一个处理器。</span><span class="sxs-lookup"><span data-stu-id="013f0-203">An <see cref="T:System.IntPtr" /> that points to a set of bits, each of which represents a processor that the thread can run on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-204">线程的处理器关联是它有一个到关系的处理器组。</span><span class="sxs-lookup"><span data-stu-id="013f0-204">The processor affinity of a thread is the set of processors it has a relationship to.</span></span> <span data-ttu-id="013f0-205">换而言之，这些就是可安排上运行。</span><span class="sxs-lookup"><span data-stu-id="013f0-205">In other words, those it can be scheduled to run on.</span></span>  
  
 <span data-ttu-id="013f0-206"><xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> 为一位表示每个处理器。</span><span class="sxs-lookup"><span data-stu-id="013f0-206"><xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> represents each processor as a bit.</span></span> <span data-ttu-id="013f0-207">位 0 代表一个处理器，位 1 表示处理器二，依此类推。</span><span class="sxs-lookup"><span data-stu-id="013f0-207">Bit 0 represents processor one, bit 1 represents processor two, and so on.</span></span> <span data-ttu-id="013f0-208">下表显示了可能的一个子集<xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A>四个处理器系统。</span><span class="sxs-lookup"><span data-stu-id="013f0-208">The following table shows a subset of the possible <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> for a four-processor system.</span></span>  
  
|<span data-ttu-id="013f0-209">属性值 （以十六进制格式）</span><span class="sxs-lookup"><span data-stu-id="013f0-209">Property value (in hexadecimal)</span></span>|<span data-ttu-id="013f0-210">有效处理器</span><span class="sxs-lookup"><span data-stu-id="013f0-210">Valid processors</span></span>|  
|---------------------------------------|----------------------|  
|<span data-ttu-id="013f0-211">0x0001</span><span class="sxs-lookup"><span data-stu-id="013f0-211">0x0001</span></span>|<span data-ttu-id="013f0-212">1</span><span class="sxs-lookup"><span data-stu-id="013f0-212">1</span></span>|  
|<span data-ttu-id="013f0-213">0x0002</span><span class="sxs-lookup"><span data-stu-id="013f0-213">0x0002</span></span>|<span data-ttu-id="013f0-214">2</span><span class="sxs-lookup"><span data-stu-id="013f0-214">2</span></span>|  
|<span data-ttu-id="013f0-215">0x0003</span><span class="sxs-lookup"><span data-stu-id="013f0-215">0x0003</span></span>|<span data-ttu-id="013f0-216">1 或 2</span><span class="sxs-lookup"><span data-stu-id="013f0-216">1 or 2</span></span>|  
|<span data-ttu-id="013f0-217">0x0004</span><span class="sxs-lookup"><span data-stu-id="013f0-217">0x0004</span></span>|<span data-ttu-id="013f0-218">3</span><span class="sxs-lookup"><span data-stu-id="013f0-218">3</span></span>|  
|<span data-ttu-id="013f0-219">0x0005</span><span class="sxs-lookup"><span data-stu-id="013f0-219">0x0005</span></span>|<span data-ttu-id="013f0-220">1 或 3</span><span class="sxs-lookup"><span data-stu-id="013f0-220">1 or 3</span></span>|  
|<span data-ttu-id="013f0-221">0x0007</span><span class="sxs-lookup"><span data-stu-id="013f0-221">0x0007</span></span>|<span data-ttu-id="013f0-222">1、 2 或 3</span><span class="sxs-lookup"><span data-stu-id="013f0-222">1, 2, or 3</span></span>|  
|<span data-ttu-id="013f0-223">0x000F</span><span class="sxs-lookup"><span data-stu-id="013f0-223">0x000F</span></span>|<span data-ttu-id="013f0-224">1、 2、 3 或 4</span><span class="sxs-lookup"><span data-stu-id="013f0-224">1, 2, 3, or 4</span></span>|  
  
 <span data-ttu-id="013f0-225">此外可以通过设置指定单个线程的首选处理器<xref:System.Diagnostics.ProcessThread.IdealProcessor%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="013f0-225">You can also specify the single, preferred processor for a thread by setting the <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> property.</span></span> <span data-ttu-id="013f0-226">进程线程可以迁移处理器间重新加载处理器缓存每个迁移。</span><span class="sxs-lookup"><span data-stu-id="013f0-226">A process thread can migrate from processor to processor, with each migration reloading the processor cache.</span></span> <span data-ttu-id="013f0-227">指定线程的处理器可以提高在高系统负荷下的性能降低的重新加载处理器缓存的次数。</span><span class="sxs-lookup"><span data-stu-id="013f0-227">Specifying a processor for a thread can improve performance under heavy system loads by reducing the number of times the processor cache is reloaded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="013f0-228">下面的示例演示如何设置<xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A>到第一个处理器的记事本实例属性。</span><span class="sxs-lookup"><span data-stu-id="013f0-228">The following example shows how to set the <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> property for an instance of Notepad to the first processor.</span></span>  
  
 [!code-csharp[ProcessThreadIdealProcessor#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessThreadIdealProcessor/CS/program.cs#1)]
 [!code-vb[ProcessThreadIdealProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessThreadIdealProcessor/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="013f0-229">未能设置处理器关联。</span><span class="sxs-lookup"><span data-stu-id="013f0-229">The processor affinity could not be set.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-230">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-230">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-231">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-231">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      </Docs>
    </Member>
    <Member MemberName="ResetIdealProcessor">
      <MemberSignature Language="C#" Value="public void ResetIdealProcessor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetIdealProcessor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ProcessThread.ResetIdealProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetIdealProcessor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetIdealProcessor();" />
      <MemberSignature Language="F#" Value="member this.ResetIdealProcessor : unit -&gt; unit" Usage="processThread.ResetIdealProcessor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="013f0-232">重置此线程的理想处理器，以指示没有单个的理想处理器。</span><span class="sxs-lookup"><span data-stu-id="013f0-232">Resets the ideal processor for this thread to indicate that there is no single ideal processor.</span></span> <span data-ttu-id="013f0-233">换言之，任何处理器都是理想处理器。</span><span class="sxs-lookup"><span data-stu-id="013f0-233">In other words, so that any processor is ideal.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="013f0-234">未能重置理想处理器。</span><span class="sxs-lookup"><span data-stu-id="013f0-234">The ideal processor could not be reset.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-235">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-235">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-236">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-236">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      </Docs>
    </Member>
    <Member MemberName="StartAddress">
      <MemberSignature Language="C#" Value="public IntPtr StartAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int StartAddress" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.StartAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartAddress As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr StartAddress { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.StartAddress : nativeint" Usage="System.Diagnostics.ProcessThread.StartAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The start address in memory of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadStartAddress")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-237">获取操作系统调用的、启动此线程的函数的内存地址。</span><span class="sxs-lookup"><span data-stu-id="013f0-237">Gets the memory address of the function that the operating system called that started this thread.</span></span></summary>
        <value><span data-ttu-id="013f0-238">线程的起始地址，它指向线程执行的应用程序定义的函数。</span><span class="sxs-lookup"><span data-stu-id="013f0-238">The thread's starting address, which points to the application-defined function that the thread executes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-239">每个进程启动与单个线程，这被称为主线程。</span><span class="sxs-lookup"><span data-stu-id="013f0-239">Each process starts with a single thread, which is known as the primary thread.</span></span> <span data-ttu-id="013f0-240">任何线程都可以创建其他线程。</span><span class="sxs-lookup"><span data-stu-id="013f0-240">Any thread can create additional threads.</span></span>  
  
 <span data-ttu-id="013f0-241">某个进程拥有虚拟地址空间、 可执行代码、 数据、 对象句柄、 环境变量、 基本优先级，并最小值和最大工作集大小。</span><span class="sxs-lookup"><span data-stu-id="013f0-241">A process has a virtual address space, executable code, data, object handles, environment variables, a base priority, and minimum and maximum working set sizes.</span></span> <span data-ttu-id="013f0-242">进程的所有线程都共享其虚拟地址空间和系统资源。</span><span class="sxs-lookup"><span data-stu-id="013f0-242">All the threads of a process share its virtual address space and system resources.</span></span> <span data-ttu-id="013f0-243">此外，每个线程维护异常处理程序、 计划优先级和一组结构时线程正在等待计划系统保存线程上下文。</span><span class="sxs-lookup"><span data-stu-id="013f0-243">In addition, each thread maintains exception handlers, a scheduling priority, and a set of structures in which the system saves the thread context while the thread is waiting to be scheduled.</span></span> <span data-ttu-id="013f0-244">线程上下文包含线程的进程的地址空间中的线程的一组计算机寄存器、 内核堆栈、 线程环境块和一个用户堆栈。</span><span class="sxs-lookup"><span data-stu-id="013f0-244">The thread context includes the thread's set of machine registers, the kernel stack, a thread environment block, and a user stack in the address space of the thread's process.</span></span>  
  
 <span data-ttu-id="013f0-245">每个 Windows 线程才真正开始执行的系统提供的函数，不应用程序提供的函数中。</span><span class="sxs-lookup"><span data-stu-id="013f0-245">Every Windows thread actually begins execution in a system-supplied function, not the application-supplied function.</span></span> <span data-ttu-id="013f0-246">主线程的起始地址，因此，是函数的相同的 （因为它表示系统提供的地址） 的系统中的每个 Windows 进程。</span><span class="sxs-lookup"><span data-stu-id="013f0-246">The starting address for the primary thread is, therefore, the same (as it represents the address of the system-supplied function) for every Windows process in the system.</span></span> <span data-ttu-id="013f0-247">但是，<xref:System.Diagnostics.ProcessThread.StartAddress%2A>属性可获取特定于你的应用程序的启动函数地址。</span><span class="sxs-lookup"><span data-stu-id="013f0-247">However, the <xref:System.Diagnostics.ProcessThread.StartAddress%2A> property allows you to get the starting function address that is specific to your application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-248">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-248">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-249">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-249">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="public DateTime StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.StartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.StartTime : DateTime" Usage="System.Diagnostics.ProcessThread.StartTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The time this thread was started.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadStartTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-250">获取操作系统启动该线程的时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-250">Gets the time that the operating system started the thread.</span></span></summary>
        <value><span data-ttu-id="013f0-251"><see cref="T:System.DateTime" />，它表示操作系统启动该线程时系统上的时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-251">A <see cref="T:System.DateTime" /> representing the time that was on the system when the operating system started the thread.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="013f0-252">未能检索到线程时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-252">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-253">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-253">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-254">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-254">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ThreadState">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadState ThreadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadState ThreadState" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.ThreadState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadState As ThreadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadState ThreadState { System::Diagnostics::ThreadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreadState : System.Diagnostics.ThreadState" Usage="System.Diagnostics.ProcessThread.ThreadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The current state of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadThreadState")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-255">获取此线程的当前状态。</span><span class="sxs-lookup"><span data-stu-id="013f0-255">Gets the current state of this thread.</span></span></summary>
        <value><span data-ttu-id="013f0-256">指示线程执行情况的 <see cref="T:System.Diagnostics.ThreadState" />（例如运行、等待或终止）。</span><span class="sxs-lookup"><span data-stu-id="013f0-256">A <see cref="T:System.Diagnostics.ThreadState" /> that indicates the thread's execution, for example, running, waiting, or terminated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-257"><xref:System.Diagnostics.ProcessThread.WaitReason%2A>属性值，仅当<xref:System.Diagnostics.ProcessThread.ThreadState%2A>值是<xref:System.Diagnostics.ThreadState.Wait>。</span><span class="sxs-lookup"><span data-stu-id="013f0-257">The <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property value is valid only when the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value is <xref:System.Diagnostics.ThreadState.Wait>.</span></span> <span data-ttu-id="013f0-258">因此，检查<xref:System.Diagnostics.ProcessThread.ThreadState%2A>值在到达之前<xref:System.Diagnostics.ProcessThread.WaitReason%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="013f0-258">Therefore, check the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value before you get the <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-259">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-259">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-260">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-260">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TotalProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan TotalProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TotalProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TotalProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalProcessorTime : TimeSpan" Usage="System.Diagnostics.ProcessThread.TotalProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The total amount of CPU time used.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadTotalProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-261">获取此线程使用处理器的时间总量。</span><span class="sxs-lookup"><span data-stu-id="013f0-261">Gets the total amount of time that this thread has spent using the processor.</span></span></summary>
        <value><span data-ttu-id="013f0-262"><see cref="T:System.TimeSpan" />，它指示线程控制处理器的时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-262">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the thread has had control of the processor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-263"><xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A>属性指示系统已脱离等待状态的线程和任何处理器上分配它的优先级的时间总量。</span><span class="sxs-lookup"><span data-stu-id="013f0-263">The <xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> property indicates the total amount of time that the system has taken the thread out of the wait state and given it priority on any processor.</span></span> <span data-ttu-id="013f0-264">在多处理器系统上，此值将包括所用的每个处理器时间，如果使用多个处理器的线程。</span><span class="sxs-lookup"><span data-stu-id="013f0-264">On a multiple processor system, this value would include time spent on each processor, if the thread used more than one processor.</span></span>  
  
 <span data-ttu-id="013f0-265"><xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A>属性是总和<xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>和<xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="013f0-265">The <xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> property is the sum of the <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> and <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="013f0-266">未能检索到线程时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-266">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-267">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-267">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-268">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-268">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="UserProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan UserProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan UserProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan UserProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.UserProcessorTime : TimeSpan" Usage="System.Diagnostics.ProcessThread.UserProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time used in user mode.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadUserProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-269">获取关联的线程在应用程序内运行代码所用的时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-269">Gets the amount of time that the associated thread has spent running code inside the application.</span></span></summary>
        <value><span data-ttu-id="013f0-270"><see cref="T:System.TimeSpan" />，它指示线程在应用程序内（相对于在操作系统内核中）运行代码所用的时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-270">A <see cref="T:System.TimeSpan" /> indicating the amount of time that the thread has spent running code inside the application, as opposed to inside the operating system core.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-271">Windows NT 使用几种不同的保护机制，并在所有这些根是用户模式和特权模式下的区别。</span><span class="sxs-lookup"><span data-stu-id="013f0-271">Windows NT uses several different protection mechanisms, and at the root of them all is the distinction between user mode and privileged mode.</span></span> <span data-ttu-id="013f0-272"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> 对应于应用程序已在用户模式下，外部操作系统内核中运行所用的时间量。</span><span class="sxs-lookup"><span data-stu-id="013f0-272"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> corresponds to the amount of time that the application has spent running in user mode, outside the operating system core.</span></span> <span data-ttu-id="013f0-273"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>对应于应用程序在特权模式下，在系统内核中的运行代码所用的时间量。</span><span class="sxs-lookup"><span data-stu-id="013f0-273">The <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> corresponds to the amount of time that the application has spent running code in privileged mode, inside the system core.</span></span>  
  
 <span data-ttu-id="013f0-274">用户模式下将应用程序限制在两个重要方面。</span><span class="sxs-lookup"><span data-stu-id="013f0-274">User mode restricts the application in two important ways.</span></span> <span data-ttu-id="013f0-275">首先，应用程序不能直接访问外围设备，而是必须调用来获取或设置外围数据在操作系统内核。</span><span class="sxs-lookup"><span data-stu-id="013f0-275">First, the application cannot directly access the peripherals, but instead must call the operating system core to get or set peripheral data.</span></span> <span data-ttu-id="013f0-276">因此，操作系统可以确保一个应用程序不会销毁外围设备由另一个所需的数据。</span><span class="sxs-lookup"><span data-stu-id="013f0-276">The operating system can thus ensure that one application does not destroy peripheral data that is needed by another.</span></span> <span data-ttu-id="013f0-277">其次，应用程序无法读取或更改操作系统自身维护的数据。</span><span class="sxs-lookup"><span data-stu-id="013f0-277">Second, the application cannot read or change data that the operating system itself maintains.</span></span> <span data-ttu-id="013f0-278">此限制可防止无意或有意地损坏核心应用程序。</span><span class="sxs-lookup"><span data-stu-id="013f0-278">This restriction prevents applications from either inadvertently or intentionally corrupting the core.</span></span> <span data-ttu-id="013f0-279">如果在应用程序需要操作系统执行的操作，则会调用一个系统的例程。</span><span class="sxs-lookup"><span data-stu-id="013f0-279">If the application needs the operating system to perform an operation, it calls one of the system's routines.</span></span> <span data-ttu-id="013f0-280">许多这些转换到特权模式下，执行此操作，并平稳地返回到用户模式。</span><span class="sxs-lookup"><span data-stu-id="013f0-280">Many of these transition into privileged mode, perform the operation, and smoothly return to user mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="013f0-281">未能检索到线程时间。</span><span class="sxs-lookup"><span data-stu-id="013f0-281">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-282">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-282">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-283">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-283">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="WaitReason">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadWaitReason WaitReason { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadWaitReason WaitReason" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.WaitReason" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitReason As ThreadWaitReason" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadWaitReason WaitReason { System::Diagnostics::ThreadWaitReason get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitReason : System.Diagnostics.ThreadWaitReason" Usage="System.Diagnostics.ProcessThread.WaitReason" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The reason why this thread is waiting.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadWaitReason")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadWaitReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013f0-284">获取线程等待的原因。</span><span class="sxs-lookup"><span data-stu-id="013f0-284">Gets the reason that the thread is waiting.</span></span></summary>
        <value><span data-ttu-id="013f0-285">一个 <see cref="T:System.Diagnostics.ThreadWaitReason" />，表示线程处于等待状态的原因。</span><span class="sxs-lookup"><span data-stu-id="013f0-285">A <see cref="T:System.Diagnostics.ThreadWaitReason" /> representing the reason that the thread is in the wait state.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013f0-286"><xref:System.Diagnostics.ProcessThread.WaitReason%2A>属性是仅当<xref:System.Diagnostics.ProcessThread.ThreadState%2A>是<xref:System.Diagnostics.ThreadState.Wait>。</span><span class="sxs-lookup"><span data-stu-id="013f0-286">The <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property is valid only when the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> is <xref:System.Diagnostics.ThreadState.Wait>.</span></span> <span data-ttu-id="013f0-287">因此，检查<xref:System.Diagnostics.ProcessThread.ThreadState%2A>值在到达之前<xref:System.Diagnostics.ProcessThread.WaitReason%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="013f0-287">Therefore, check the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value before you get the <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="013f0-288">线程不在等待状态。</span><span class="sxs-lookup"><span data-stu-id="013f0-288">The thread is not in the wait state.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="013f0-289">平台为 Windows 98 或 Windows Millennium Edition。</span><span class="sxs-lookup"><span data-stu-id="013f0-289">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="013f0-290">进程在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="013f0-290">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ThreadWaitReason" />
        <altmember cref="P:System.Diagnostics.ProcessThread.ThreadState" />
      </Docs>
    </Member>
  </Members>
</Type>
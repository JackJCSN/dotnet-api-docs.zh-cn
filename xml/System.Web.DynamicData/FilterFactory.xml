<Type Name="FilterFactory" FullName="System.Web.DynamicData.FilterFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a2d2cd33934d3af0bc1dc07da8bf04e6e63c9a53" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64147117" /></Metadata><TypeSignature Language="C#" Value="public class FilterFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FilterFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.FilterFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class FilterFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class FilterFactory" />
  <TypeSignature Language="F#" Value="type FilterFactory = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>创建筛选器模板。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.FilterFactory>类在运行时动态数据使用若要获取特定的列类型筛选器模板的实例。  
  
 您可以重写此类自定义如何加载筛选器模板中定义的方法。 例如，自定义实现可以从不同于默认 ~/DynamicData/Filters 文件夹的位置加载筛选器模板。  
  
 动态数据提供了筛选器模板外, 键、 布尔值，并枚举列类型，并显示在它们使用<xref:System.Web.UI.WebControls.DropDownList>控件。 此外可以创建自定义筛选器模板。  
  
   
  
## Examples  
 表行筛选的示例使用默认筛选器模板，请参阅<xref:System.Web.DynamicData.QueryableFilterRepeater>类。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.DynamicFilter" />
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
    <altmember cref="T:System.Web.DynamicData.FieldTemplateFactory" />
    <altmember cref="T:System.Web.DynamicData.EntityTemplateFactory" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilterFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FilterFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.DynamicData.FilterFactory" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterControl">
      <MemberSignature Language="C#" Value="public virtual System.Web.DynamicData.QueryableFilterUserControl CreateFilterControl (System.Web.DynamicData.MetaColumn column, string filterUIHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.DynamicData.QueryableFilterUserControl CreateFilterControl(class System.Web.DynamicData.MetaColumn column, string filterUIHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.CreateFilterControl(System.Web.DynamicData.MetaColumn,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFilterControl (column As MetaColumn, filterUIHint As String) As QueryableFilterUserControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::DynamicData::QueryableFilterUserControl ^ CreateFilterControl(System::Web::DynamicData::MetaColumn ^ column, System::String ^ filterUIHint);" />
      <MemberSignature Language="F#" Value="abstract member CreateFilterControl : System.Web.DynamicData.MetaColumn * string -&gt; System.Web.DynamicData.QueryableFilterUserControl&#xA;override this.CreateFilterControl : System.Web.DynamicData.MetaColumn * string -&gt; System.Web.DynamicData.QueryableFilterUserControl" Usage="filterFactory.CreateFilterControl (column, filterUIHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.QueryableFilterUserControl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Web.DynamicData.MetaColumn" />
        <Parameter Name="filterUIHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="column">筛选器模板应用于的数据列。</param>
        <param name="filterUIHint">要使用的筛选器模板的名称。</param>
        <summary>创建筛选器模板的一个实例。</summary>
        <returns><see cref="T:System.Web.DynamicData.QueryableFilterUserControl" /> 类的实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 动态数据来获取筛选器模板的实例调用此方法。 派生的类可以重写此方法以自定义如何创建筛选器模板的实例。 例如，自定义实现可以从编译的程序集而不是从默认 ~/DynamicData/Filters 文件夹加载模板。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="column" /> 为 null。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFilterVirtualPath">
      <MemberSignature Language="C#" Value="public virtual string GetFilterVirtualPath (System.Web.DynamicData.MetaColumn column, string filterUIHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFilterVirtualPath(class System.Web.DynamicData.MetaColumn column, string filterUIHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.GetFilterVirtualPath(System.Web.DynamicData.MetaColumn,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFilterVirtualPath (column As MetaColumn, filterUIHint As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFilterVirtualPath(System::Web::DynamicData::MetaColumn ^ column, System::String ^ filterUIHint);" />
      <MemberSignature Language="F#" Value="abstract member GetFilterVirtualPath : System.Web.DynamicData.MetaColumn * string -&gt; string&#xA;override this.GetFilterVirtualPath : System.Web.DynamicData.MetaColumn * string -&gt; string" Usage="filterFactory.GetFilterVirtualPath (column, filterUIHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Web.DynamicData.MetaColumn" />
        <Parameter Name="filterUIHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="column">筛选器模板应用于的数据列。</param>
        <param name="filterUIHint">要使用的筛选器模板。</param>
        <summary>获取筛选器模板的虚拟路径。</summary>
        <returns>筛选器模板的虚拟路径。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，筛选器模板位于 ~/DynamicData/Filers 文件夹中。  
  
 此方法确定包含字段模板的文件夹的虚拟路径。 派生的类可以重写此方法以提供从不同的虚拟路径的筛选器模板。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="column" /> 为 null。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IStructuralEquatable" FullName="System.Collections.IStructuralEquatable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="46e9881e5a687f951730fba30e320133ed7f95be" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70476473" /></Metadata><TypeSignature Language="C#" Value="public interface IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralEquatable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralEquatable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type IStructuralEquatable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义方法以支持对象的结构相等性比较。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 结构相等性意味着两个对象相等，因为它们的值相等。 它不同于引用相等性，这意味着两个对象引用相等，因为它们引用相同的物理对象。 <xref:System.Collections.IStructuralEquatable>接口允许您实现自定义的比较，以检查集合对象的结构是否相等。 也就是说，你可以创建自己的结构相等性定义，并指定此定义与接受<xref:System.Collections.IStructuralEquatable>接口的集合类型一起使用。 接口有两个成员： <xref:System.Collections.IStructuralEquatable.Equals%2A>，它们通过使用指定<xref:System.Collections.IEqualityComparer>的实现来测试相等性， <xref:System.Collections.IStructuralEquatable.GetHashCode%2A>并为相等的对象返回相同的哈希代码。  
  
> [!NOTE]
>  <xref:System.Collections.IStructuralEquatable>接口仅支持结构相等性的自定义比较。 <xref:System.Collections.IStructuralComparable>接口支持用于排序和排序的自定义结构比较。  
  
 .NET Framework 还提供了默认的相等比较器，由<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>和<xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=nameWithType>属性返回。 有关详细信息，请参阅示例。  
  
 泛型元组类（<xref:System.Tuple%601>、 <xref:System.Tuple%602>、 <xref:System.Tuple%603>等） <xref:System.Collections.IStructuralEquatable>和<xref:System.Array>类提供接口的显式实现。 通过强制转换（ C#在中）或将数组或元组的当前实例 Visual Basic 转换为<xref:System.Collections.IStructuralEquatable>接口<xref:System.Collections.IEqualityComparer>值，并将实现作为参数提供给<xref:System.Collections.IStructuralEquatable.Equals%2A>方法，可以定义自定义等效性数组或集合的比较。  
  
   
  
## Examples  
 默认的相等比较器`EqualityComparer<Object>.Default.Equals`将两个`NaN`值视为相等。 但是，在某些情况下，你可能希望比较`NaN`相等性的值以返回`false`，这表示不能比较这些值。 下面的示例定义一个实现 `NanComparer` 接口的 <xref:System.Collections.IStructuralEquatable> 类。 它使用相等<xref:System.Double>运算符比较<xref:System.Single>两个或两个值。 它将任何其他类型的值传递到默认的相等比较器。  
  
 [!code-csharp[System.Collections.IStructuralEquatable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#1)]
 [!code-vb[System.Collections.IStructuralEquatable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#1)]  
  
 下面的示例创建两个完全相同的3元组对象，其<xref:System.Double>组件由三个值组成。 第二个组件的值为<xref:System.Double.NaN?displayProperty=nameWithType>。 然后，该示例调用<xref:System.Tuple%603.Equals%2A?displayProperty=nameWithType>方法，并<xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType>调用方法三次。 第一次，它传递<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>属性返回的默认相等比较器。 第二次，它传递<xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=nameWithType>属性返回的默认相等比较器。 第三次传递自定义`NanComparer`对象。 如示例的输出所示，第三个方法调用返回`true`，而第四个调用返回。 `false`  
  
 [!code-csharp[System.Collections.IStructuralEquatable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#2)]
 [!code-vb[System.Collections.IStructuralEquatable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.IEqualityComparer" />
    <altmember cref="T:System.Collections.IStructuralComparable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralEqualityComparer" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Object, comparer As IEqualityComparer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj * System.Collections.IEqualityComparer -&gt; bool" Usage="iStructuralEquatable.Equals (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">要与当前实例进行比较的对象。</param>
        <param name="comparer">一个可确定当前实例与 <paramref name="other" /> 是否相等的对象。</param>
        <summary>确定某个对象与当前实例在结构上是否相等。</summary>
        <returns>如果两个对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IStructuralEquatable.Equals%2A>方法支持数组和元组对象的自定义结构比较。 此方法反过来调用`comparer`对象的<xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType>方法来比较单个数组元素或元组组件（从第一个元素或组件开始）。 当方法调用返回<xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> `false`时，或<xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType>在所有数组元素或元组组件经过比较之后，单独调用 end 和方法将返回一个值。  
  
   
  
## Examples  
 默认的相等比较器`EqualityComparer<Object>.Default.Equals`将两个`NaN`值视为相等。 但是，在某些情况下，你可能希望比较`NaN`相等性的值以返回`false`，这表示不能比较这些值。 下面的示例定义一个实现 `NanComparer` 接口的 <xref:System.Collections.IStructuralEquatable> 类。 它使用相等<xref:System.Double>运算符比较<xref:System.Single>两个或两个值。 它将任何其他类型的值传递到默认的相等比较器。  
  
 [!code-csharp[System.Collections.IStructuralEquatable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#1)]
 [!code-vb[System.Collections.IStructuralEquatable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#1)]  
  
 下面的示例创建两个完全相同的3元组对象，其<xref:System.Double>组件由三个值组成。 第二个组件的值为<xref:System.Double.NaN?displayProperty=nameWithType>。 然后，该示例调用<xref:System.Tuple%603.Equals%2A?displayProperty=nameWithType>方法，并<xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType>调用方法三次。 第一次，它传递<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>属性返回的默认相等比较器。 第二次，它传递<xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=nameWithType>属性返回的默认相等比较器。 第三次传递自定义`NanComparer`对象。 如示例的输出所示，第三个方法调用返回`true`，而第四个调用返回。 `false`  
  
 [!code-csharp[System.Collections.IStructuralEquatable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#2)]
 [!code-vb[System.Collections.IStructuralEquatable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.StructuralComparisons.StructuralEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (comparer As IEqualityComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(System::Collections::IEqualityComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : System.Collections.IEqualityComparer -&gt; int" Usage="iStructuralEquatable.GetHashCode comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">一个计算当前对象的哈希代码的对象。</param>
        <summary>返回当前实例的哈希代码。</summary>
        <returns>当前实例的哈希代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现此方法可为集合对象返回自定义的哈希代码，这些对象对应于<xref:System.Collections.IStructuralEquatable.Equals%2A>方法提供的结构相等性的自定义比较。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>如果这<see cref="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)" />两个<see langword="true" />对象的方法返回，则两个对象<see cref="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)" />的方法返回的值也必须相等。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>

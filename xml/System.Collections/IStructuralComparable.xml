<Type Name="IStructuralComparable" FullName="System.Collections.IStructuralComparable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9453bb03072dbb0e96a839cb23cd4e2a2b274978" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70593238" /></Metadata><TypeSignature Language="C#" Value="public interface IStructuralComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralComparable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralComparable" />
  <TypeSignature Language="F#" Value="type IStructuralComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>支持集合对象的结构比较。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IStructuralComparable>接口使您能够实现集合成员的自定义比较。 也就是说，您可以准确定义一个集合对象在排序顺序中位于同一位置之前、之后或发生的含义，作为第二个集合对象。 然后，你可以指定将此定义用于接受<xref:System.Collections.IStructuralComparable>接口的集合类型。  
  
 此接口具有一个成员， <xref:System.Collections.IStructuralComparable.CompareTo%2A>该成员确定当前集合对象在排序顺序中是小于、等于还是大于第二个对象。 当前实例中的成员或元素与第二个对象中的成员或元素的实际比较是通过<xref:System.Collections.IComparer>接口实现执行的，后者包含自定义比较的定义。  
  
> [!NOTE]
>  <xref:System.Collections.IStructuralComparable>接口仅支持用于排序或排序的结构比较。 <xref:System.Collections.IStructuralEquatable>接口支持结构相等性的自定义比较。  
  
 .NET Framework 提供了两个默认比较器。 一个由<xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=nameWithType>属性返回，另一个由<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>属性返回。  
  
 泛型元组类（<xref:System.Tuple%601>、 <xref:System.Tuple%602>、 <xref:System.Tuple%603>等） <xref:System.Collections.IStructuralComparable>和<xref:System.Array>类提供接口的显式实现。 通过强制转换（ C#在中）或将数组或元组的当前实例 Visual Basic 转换为<xref:System.Collections.IStructuralComparable>接口<xref:System.Collections.IComparer>值，并将实现作为参数提供给<xref:System.Collections.IStructuralComparable.CompareTo%2A>方法，可以定义自定义排序顺序数组或集合。 不过，在大多数情况下不<xref:System.Collections.IStructuralComparable.CompareTo%2A>会直接调用方法。 相反， <xref:System.Collections.IStructuralComparable.CompareTo%2A>方法通过对<xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>等方法进行调用。 在这种情况下，需要<xref:System.Collections.IComparer>定义实现，并将其作为参数传递给排序方法或集合对象的类构造函数。 然后<xref:System.Collections.IStructuralComparable.CompareTo%2A> ，在对集合进行排序时，将自动调用具有自定义比较器的方法。  
  
   
  
## Examples  
 下面的示例创建一个<xref:System.Tuple%606>对象数组，其中包含三个美国城市的人口数据（从1960到2000）。 六元组的第一个组件是城市名称。 剩余的五个组件表示从1960到2000的10年间隔的人口。  
  
 类提供一个<xref:System.Collections.IComparer>实现，该实现允许 sextuples 的数组按其任何一个组件进行排序。 `PopulationComparer` 向类中的`PopulationComparer`构造函数提供了两个值：定义排序顺序的组件的位置，以及一个指示是否应按升序或降序对元组对象进行排序的布尔值。  
  
 然后，该示例以未排序的顺序显示数组中的元素，按第三个组件（1970中的人口）对它们进行排序并显示它们，然后将它们按第六个组件（由2000填充）进行排序并显示它们。 请注意，该示例不会直接调用<xref:System.Collections.IStructuralComparable.CompareTo%2A>方法。 此方法由<xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>数组中每个元组对象的方法隐式调用。  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IStructuralEquatable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralComparer" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Object, comparer As IComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj * System.Collections.IComparer -&gt; int" Usage="iStructuralComparable.CompareTo (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">要与当前实例进行比较的对象。</param>
        <param name="comparer">一个将当前集合对象的成员与 <paramref name="other" /> 的对应成员进行比较的对象。</param>
        <summary>确定当前集合对象在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
        <returns>指明当前集合对象与 <paramref name="other" /> 的排序顺序关系的带符号整数：<br /> - 如果小于 0，表明当前实例先于 <paramref name="other" />。<br /> - 如果等于 0，表明当前实例和 <paramref name="other" /> 的顺序相同。<br /> - 如果大于 0，表明当前实例后于 <paramref name="other" />。  
  
 <list type="table"><listheader><term> 返回值 
 </term><description> 说明 
 </description></listheader><item><term> -1 
 </term><description> 当前实例位于 <paramref name="other" /> 之前。  
  
 </description></item><item><term> 0 
 </term><description> 当前实例与 <paramref name="other" /> 位于同一位置。  
  
 </description></item><item><term> 1 
 </term><description> 当前实例位于 <paramref name="other" /> 之后。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IStructuralComparable.CompareTo%2A>方法支持数组和元组对象的自定义结构比较和排序。 方法调用对象的 <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> 方法来比较单个数组元素或元组组件，从第一个元素或组件开始。 `comparer` <xref:System.Collections.IStructuralComparable.CompareTo%2A> 当下列条件之一<xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType>成立时， <xref:System.Collections.IStructuralComparable.CompareTo%2A>单独调用 end 和方法将返回一个值：  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType>方法返回-1。  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType>方法返回1。  
  
-   为集合对象中的最后一个元素或组件调用方法。 <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 下面的示例创建一个<xref:System.Tuple%606>对象数组，其中包含三个美国城市的人口数据（从1960到2000）。 六元组的第一个组件是城市名称。 剩余的五个组件表示从1960到2000的10年间隔的人口。  
  
 类提供一个<xref:System.Collections.IComparer>实现，该实现允许 sextuples 的数组按其任何一个组件进行排序。 `PopulationComparer` 向类中的`PopulationComparer`构造函数提供了两个值：定义排序顺序的组件的位置，以及一个<xref:System.Boolean>指示是否应按升序或降序对元组对象进行排序的值。  
  
 然后，该示例以未排序的顺序显示数组中的元素，按第三个组件（1970中的人口）对它们进行排序并显示它们，然后将它们按第六个组件（由2000填充）进行排序并显示它们。 请注意，该示例不会直接调用<xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=nameWithType>实现。 此方法由<xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>数组中每个元组对象的方法隐式调用。  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">此实例与 <paramref name="other" /> 不是同一类型。</exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
  </Members>
</Type>

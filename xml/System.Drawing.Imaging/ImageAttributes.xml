<Type Name="ImageAttributes" FullName="System.Drawing.Imaging.ImageAttributes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6cae4b75f1fb82a2df917bd1765a32cfac0e874b" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63869068" /></Metadata><TypeSignature Language="C#" Value="public sealed class ImageAttributes : ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ImageAttributes extends System.Object implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Imaging.ImageAttributes" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImageAttributes&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImageAttributes sealed : ICloneable, IDisposable" />
  <TypeSignature Language="F#" Value="type ImageAttributes = class&#xA;    interface ICloneable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>包含有关在呈现时如何操作位图和图元文件颜色的信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护多个颜色调整设置，包括颜色调整矩阵、 灰度调整矩阵、 灰度校正值、 颜色映射表和颜色阈值的值。 在呈现期间，颜色可以更正、 变暗、 变亮，并且删除。 若要应用这些操作，初始化<xref:System.Drawing.Imaging.ImageAttributes>对象，并将该路径传递<xref:System.Drawing.Imaging.ImageAttributes>对象 (以及的路径<xref:System.Drawing.Image>) 到<xref:System.Drawing.Graphics.DrawImage%2A>方法。  
  
   
  
## Examples  
 下面的示例将是一种颜色 （0.2，0.0，0.4，1.0） 的映像和双精度型值的红色组件将 0.2 添加到红色、 绿色和蓝色组件  
  
 下图显示在右侧左侧上的原始映像和转换后的图像。  
  
 ![颜色](~/add/media/colortrans1.png "颜色")  
  
 在下面的示例代码使用以下步骤进行重新着色：  
  
1.  初始化<xref:System.Drawing.Imaging.ColorMatrix>对象。  
  
2.  创建<xref:System.Drawing.Imaging.ImageAttributes>对象并将传递<xref:System.Drawing.Imaging.ColorMatrix>对象传递给<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法的<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
3.  传递<xref:System.Drawing.Imaging.ImageAttributes>对象传递给<xref:System.Drawing.Graphics.DrawImage%2A>方法的<xref:System.Drawing.Graphics>对象。  
  
 [!code-csharp[System.Drawing.RecoloringImages#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.RecoloringImages/CS/Class1.cs#21)]
 [!code-vb[System.Drawing.RecoloringImages#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.RecoloringImages/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/44df4556-a433-49c0-ac0f-9a12063a5860">如何：使用颜色矩阵对单色进行转换</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f28c54fd-9c80-4f6f-b242-55f7ffcda84b">对图像重新着色</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImageAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ImageAttributes();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearBrushRemapTable">
      <MemberSignature Language="C#" Value="public void ClearBrushRemapTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearBrushRemapTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearBrushRemapTable ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearBrushRemapTable();" />
      <MemberSignature Language="F#" Value="member this.ClearBrushRemapTable : unit -&gt; unit" Usage="imageAttributes.ClearBrushRemapTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除该 <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 对象的画笔颜色重新映射表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的一个颜色重新映射表、 位图类别中，不同的颜色重新映射表和仍为画笔类别的不同的颜色重新映射表。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为画笔类别的任何调整设置，默认设置应用到画笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设指定默认的重新映射表，可将红色转换为绿色，并指定默认伽玛值为 1.8。 如果调用<xref:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable%2A>方法，默认值重新映射表 （红色到绿色） 和默认伽玛值 (1.8) 将不会应用于画笔。 如果更高版本调用<xref:System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable%2A>方法中，画笔类别不会还原为默认值重新映射表; 而是画笔类别就可以不重新映射表。 同样，画笔类别将恢复为默认值的 gamma 值;而是画笔类别会将任何伽玛值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearColorKey">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除颜色键（透明范围）。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearColorKey">
      <MemberSignature Language="C#" Value="public void ClearColorKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorKey" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearColorKey ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearColorKey();" />
      <MemberSignature Language="F#" Value="member this.ClearColorKey : unit -&gt; unit" Usage="imageAttributes.ClearColorKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为默认类别清除颜色键（透明范围）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定一个为默认类别的颜色键、 位图类别的不同的颜色键和仍为钢笔类别的不同的颜色键。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearColorKey">
      <MemberSignature Language="C#" Value="public void ClearColorKey (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorKey(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorKey(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearColorKey (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearColorKey(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearColorKey : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearColorKey type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将清除颜色键的类别。</param>
        <summary>为指定类别清除颜色键（透明范围）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定一个为默认类别的颜色键、 位图类别的不同的颜色键和仍为钢笔类别的不同的颜色键。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设您指定的默认颜色密钥，使任何颜色与从 200 到 255 之间的红色组件透明的并指定默认伽玛值为 1.8。 如果您通过调用设置笔类别的颜色键<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A>方法、 默认颜色键和默认伽玛值将不会应用于钢笔。 如果稍后通过调用清除笔颜色键<xref:System.Drawing.Imaging.ImageAttributes.ClearColorKey%2A>方法中，笔类别不会还原为默认颜色键; 相反，笔类别将有没有颜色键。 同样，笔类别将恢复为默认值的 gamma 值;相反，笔类别会将任何伽玛值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearColorMatrix">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除颜色调整矩阵。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearColorMatrix">
      <MemberSignature Language="C#" Value="public void ClearColorMatrix ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorMatrix() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearColorMatrix ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearColorMatrix();" />
      <MemberSignature Language="F#" Value="member this.ClearColorMatrix : unit -&gt; unit" Usage="imageAttributes.ClearColorMatrix " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为默认类别清除颜色调整矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的颜色调整矩阵、 位图类别中，不同的颜色调整矩阵和仍为钢笔类别不同的颜色调整矩阵。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，然后默认设置适用于笔类别。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearColorMatrix">
      <MemberSignature Language="C#" Value="public void ClearColorMatrix (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorMatrix(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearColorMatrix (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearColorMatrix(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearColorMatrix : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearColorMatrix type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将清除颜色调整矩阵的类别。</param>
        <summary>清除指定类别的颜色调整矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的颜色调整矩阵、 位图类别中，不同的颜色调整矩阵和仍为钢笔类别不同的颜色调整矩阵。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，然后默认设置适用于笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设您指定的颜色调整矩阵和伽玛值为默认类别。 如果您通过调用设置笔类别的颜色调整矩阵<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法中，默认颜色调整矩阵将不应用于钢笔。 如果您更高版本调用来清除笔颜色调整矩阵<xref:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix%2A>方法，笔类别不会还原到默认调整矩阵; 相反，笔类别将有没有调整矩阵。 同样，笔类别将恢复为默认值的 gamma 值;相反，笔类别会将任何伽玛值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearGamma">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>禁用灰度校正。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearGamma">
      <MemberSignature Language="C#" Value="public void ClearGamma ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearGamma() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearGamma" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearGamma ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearGamma();" />
      <MemberSignature Language="F#" Value="member this.ClearGamma : unit -&gt; unit" Usage="imageAttributes.ClearGamma " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为默认类别禁用灰度校正。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定伽玛值为默认类别、 不同的伽玛值为位图类别和仍为钢笔类别不同伽玛值。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearGamma">
      <MemberSignature Language="C#" Value="public void ClearGamma (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearGamma(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearGamma(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearGamma (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearGamma(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearGamma : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearGamma type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将禁用灰度校正的类别。</param>
        <summary>为指定类别禁用灰度校正。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定伽玛值为默认类别、 不同的伽玛值为位图类别和仍为钢笔类别不同伽玛值。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，然后默认设置适用于笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设指定伽玛值和默认类别的颜色调整矩阵。 如果设置为钢笔类别的伽玛值通过调用<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A>方法中，默认伽玛值将不应用于钢笔。 如果稍后通过调用清除笔伽玛值<xref:System.Drawing.Imaging.ImageAttributes.ClearGamma%2A>方法中，笔类别不会还原为默认伽玛值; 相反，笔类别将有没有伽玛值。 同样，笔类别不会还原到默认颜色调整矩阵;相反，笔类别将有没有颜色调整矩阵。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearNoOp">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除 <see langword="NoOp" /> 设置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearNoOp">
      <MemberSignature Language="C#" Value="public void ClearNoOp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearNoOp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearNoOp" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearNoOp ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearNoOp();" />
      <MemberSignature Language="F#" Value="member this.ClearNoOp : unit -&gt; unit" Usage="imageAttributes.ClearNoOp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除默认类别的 <see langword="NoOp" /> 设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定伽玛值为默认类别、 不同的伽玛值为位图类别和仍为钢笔类别不同伽玛值。  
  
 可以通过调用禁用默认类别的颜色调整<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>方法。 更高版本，您可以通过调用来恢复为默认类别的颜色调整<xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A>方法。 颜色调整然后返回到已存在的调用之前设置<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearNoOp">
      <MemberSignature Language="C#" Value="public void ClearNoOp (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearNoOp(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearNoOp(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearNoOp (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearNoOp(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearNoOp : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearNoOp type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将清除 <see langword="NoOp" /> 设置的类别。</param>
        <summary>清除指定类别的 <see langword="NoOp" /> 设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定伽玛值为默认类别、 不同的伽玛值为位图类别和仍为钢笔类别不同伽玛值。  
  
 您可以通过调用来禁用某一特定类别的颜色调整<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>方法。 更高版本，您可以通过调用来恢复该类别的颜色调整<xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A>方法。 颜色调整然后返回到已存在的调用之前设置<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearOutputChannel">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除 CMYK（青色-洋红色-黄色-黑色）输出通道设置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearOutputChannel">
      <MemberSignature Language="C#" Value="public void ClearOutputChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearOutputChannel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearOutputChannel();" />
      <MemberSignature Language="F#" Value="member this.ClearOutputChannel : unit -&gt; unit" Usage="imageAttributes.ClearOutputChannel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为默认类别清除 CMYK（青色-洋红色-黄色-黑色）输出通道设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定输出通道为默认类别和位图类别的不同的输出通道。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定位图类别任何调整设置，默认设置应用于位图类别。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutputChannel">
      <MemberSignature Language="C#" Value="public void ClearOutputChannel (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannel(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearOutputChannel (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearOutputChannel(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearOutputChannel : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearOutputChannel type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将清除输出通道设置的类别。</param>
        <summary>为指定类别清除（青色-洋红色-黄色-黑色）输出通道设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定输出通道为默认类别和位图类别的不同的输出通道。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定位图类别任何调整设置，默认设置应用于位图类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设指定输出通道和默认类别调整矩阵。 如果您通过调用设置输出通道的位图类别<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法，则默认的输出通道不会应用于位图。 如果以后清除位图通过调用的输出通道<xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel%2A>方法中，位图类别不会还原为默认输出通道; 相反，位图类别就可以没有输出通道设置。 同样，位图类别不会还原到默认颜色调整矩阵;相反，位图类别都包含没有颜色调整矩阵。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearOutputChannelColorProfile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除输出通道颜色配置文件设置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void ClearOutputChannelColorProfile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannelColorProfile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearOutputChannelColorProfile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearOutputChannelColorProfile();" />
      <MemberSignature Language="F#" Value="member this.ClearOutputChannelColorProfile : unit -&gt; unit" Usage="imageAttributes.ClearOutputChannelColorProfile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为默认类别清除输出通道颜色配置文件设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的输出通道配置文件和位图类别的不同的输出通道配置文件。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定位图类别任何调整设置，默认设置应用于位图类别。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void ClearOutputChannelColorProfile (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannelColorProfile(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearOutputChannelColorProfile (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearOutputChannelColorProfile(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearOutputChannelColorProfile : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearOutputChannelColorProfile type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将清除输出通道配置文件设置的类别。</param>
        <summary>为指定类别清除输出通道颜色配置文件设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的输出通道配置文件和位图类别的不同的输出通道配置文件。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定位图类别任何调整设置，默认设置应用于位图类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设您指定的输出通道配置文件和默认类别调整矩阵。 如果设置为位图类别的输出通道配置文件通过调用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法，则默认的输出通道配置文件将不应用于位图。 如果以后清除位图输出通道配置文件，通过调用<xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile%2A>方法中，位图类别不会还原为默认输出通道配置文件; 相反，位图类别就可以没有输出通道配置文件设置。 同样，位图类别不会还原到默认颜色调整矩阵;相反，位图类别都包含没有颜色调整矩阵。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearRemapTable">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除颜色重新映射表。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearRemapTable">
      <MemberSignature Language="C#" Value="public void ClearRemapTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearRemapTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearRemapTable" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearRemapTable ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearRemapTable();" />
      <MemberSignature Language="F#" Value="member this.ClearRemapTable : unit -&gt; unit" Usage="imageAttributes.ClearRemapTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为默认类别清除颜色重新映射表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别重新映射表、 位图类别的不同重新映射表和仍为钢笔类别不同重新映射表。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearRemapTable">
      <MemberSignature Language="C#" Value="public void ClearRemapTable (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearRemapTable(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearRemapTable (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearRemapTable(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearRemapTable : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearRemapTable type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将清除重新映射表的类别。</param>
        <summary>为指定类别清除颜色重新映射表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别重新映射表、 位图类别的不同重新映射表和仍为钢笔类别不同重新映射表。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，然后默认设置适用于笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设您指定重新映射表和伽玛值为默认类别。 如果您通过调用设置笔类别重新映射表<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A>方法中，默认值重新映射表将不应用于钢笔。 如果稍后通过调用清除笔重新映射表<xref:System.Drawing.Imaging.ImageAttributes.ClearRemapTable%2A>方法中，笔类别不会还原为默认值重新映射表; 相反，笔类别将有没有重新映射表。 同样，笔类别将恢复为默认值的 gamma 值;相反，笔类别会将任何伽玛值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearThreshold">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除阈值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearThreshold">
      <MemberSignature Language="C#" Value="public void ClearThreshold ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearThreshold() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearThreshold" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearThreshold ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearThreshold();" />
      <MemberSignature Language="F#" Value="member this.ClearThreshold : unit -&gt; unit" Usage="imageAttributes.ClearThreshold " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为默认类别清除阈值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 阈值是一个介于 0 或 1，用于指定每个颜色组件的截止点。 例如，假设的阈值设置为 0.7，并且您正在呈现一种颜色的红色、 绿色和蓝色分量 230、 50 和 220，分别为。 红色组件 (230) 大于 0.7 x 255, 因此红色分量将更改为 255 （最大亮度）。 绿色组件 (50) 小于 0.7 x 255,，因此绿色组件将更改为 0。 蓝色组件 (220) 大于 0.7 x 255, 因此蓝色组件将更改为 255。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的阈值、 一个不同的阈值为位图类别和仍为钢笔类别一个不同的阈值。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearThreshold">
      <MemberSignature Language="C#" Value="public void ClearThreshold (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearThreshold(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearThreshold(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearThreshold (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearThreshold(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.ClearThreshold : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.ClearThreshold type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将清除阈值的类别。</param>
        <summary>为指定类别清除阈值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 阈值是一个介于 0 或 1，用于指定每个颜色组件的截止点。 例如，假设的阈值设置为 0.7，并且您正在呈现一种颜色的红色、 绿色和蓝色分量 230、 50 和 220，分别为。 红色组件 (230) 大于 0.7x55，因此红色分量将更改为 255 （最大亮度）。 绿色组件 (50) 小于 0.7 x 255,，因此绿色组件将更改为 0。 蓝色组件 (220) 大于 0.7 x 255, 因此蓝色组件将更改为 255。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的阈值、 一个不同的阈值为位图类别和仍为钢笔类别一个不同的阈值。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设您指定的阈值和伽玛值为默认类别。 如果您通过调用设置笔类别阈值<xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A>方法中，默认阈值将不应用于钢笔。 如果稍后通过调用清除笔阈值<xref:System.Drawing.Imaging.ImageAttributes.ClearThreshold%2A>方法中，笔类别不会还原为默认阈值; 相反，笔类别将有无阈值。 同样，笔类别将恢复为默认值的 gamma 值;相反，笔类别会将任何伽玛值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="imageAttributes.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 对象的一个精确副本。</summary>
        <returns>此类创建的 <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 对象，作为一个对象来转换。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="imageAttributes.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由此 <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 对象使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 <xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A> 后，应调用 <xref:System.Drawing.Imaging.ImageAttributes>。 <xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A> 方法使 <xref:System.Drawing.Imaging.ImageAttributes> 处于不可用状态。 在调用<xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A>，必须释放对所有引用<xref:System.Drawing.Imaging.ImageAttributes>这样垃圾回收器才能收回内存的<xref:System.Drawing.Imaging.ImageAttributes>占用。 有关详细信息，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  每次释放对 <xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Drawing.Imaging.ImageAttributes>。 否则，在垃圾回收器调用 <xref:System.Drawing.Imaging.ImageAttributes> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ImageAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ImageAttributes ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="imageAttributes.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustedPalette">
      <MemberSignature Language="C#" Value="public void GetAdjustedPalette (System.Drawing.Imaging.ColorPalette palette, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetAdjustedPalette(class System.Drawing.Imaging.ColorPalette palette, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetAdjustedPalette (palette As ColorPalette, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetAdjustedPalette(System::Drawing::Imaging::ColorPalette ^ palette, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.GetAdjustedPalette : System.Drawing.Imaging.ColorPalette * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.GetAdjustedPalette (palette, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="palette" Type="System.Drawing.Imaging.ColorPalette" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="palette"><see cref="T:System.Drawing.Imaging.ColorPalette" />，在输入时包含要调整的调色板，在输出时包含已调整的调色板。</param>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定其调整设置将应用于调色板的类别。</param>
        <summary>根据指定类别的调整设置，调整调色板中的颜色。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的颜色重新映射表、 位图类别中，不同的颜色重新映射表和仍为钢笔类别的不同的颜色重新映射表。  
  
 当您调用<xref:System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette%2A>方法，可以指定用于调整的调色板颜色调整类别。 例如，如果您传递<xref:System.Drawing.Imaging.ColorAdjustType.Bitmap>到<xref:System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette%2A>方法中，使用位图类别的设置来调整的调色板颜色调整。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBrushRemapTable">
      <MemberSignature Language="C#" Value="public void SetBrushRemapTable (System.Drawing.Imaging.ColorMap[] map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBrushRemapTable(class System.Drawing.Imaging.ColorMap[] map) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBrushRemapTable (map As ColorMap())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBrushRemapTable(cli::array &lt;System::Drawing::Imaging::ColorMap ^&gt; ^ map);" />
      <MemberSignature Language="F#" Value="member this.SetBrushRemapTable : System.Drawing.Imaging.ColorMap[] -&gt; unit" Usage="imageAttributes.SetBrushRemapTable map" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="map" Type="System.Drawing.Imaging.ColorMap[]" />
      </Parameters>
      <Docs>
        <param name="map">一个 <see cref="T:System.Drawing.Imaging.ColorMap" /> 对象数组。</param>
        <summary>为画笔类别设置颜色重新映射表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 颜色重新映射表是一个数组<xref:System.Drawing.Imaging.ColorMap>结构。 每个<xref:System.Drawing.Imaging.ColorMap>结构具有两个<xref:System.Drawing.Color>对象： 一个指定旧颜色，另一个指定相应的新颜色。 在呈现期间，重新映射表中的旧颜色之一匹配的任何颜色更改为相应的新颜色。  
  
 调用<xref:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable%2A>方法具有相同的效果与传入<xref:System.Drawing.Imaging.ColorAdjustType.Brush>到<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A>方法。 指定重新映射表适用于使用画笔填充的图元文件中的项。  
  
 此方法旨在仅用于图元文件。  
  
   
  
## Examples  
 下面的代码示例设计为使用 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
1.  创建单个元素<xref:System.Drawing.Imaging.ColorMap>保存为旧的颜色的红色和绿色作为新颜色的数组。  
  
2.  将此数组传递给新创建<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetColorKey">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>设置颜色键（透明范围）。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetColorKey">
      <MemberSignature Language="C#" Value="public void SetColorKey (System.Drawing.Color colorLow, System.Drawing.Color colorHigh);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorKey(valuetype System.Drawing.Color colorLow, valuetype System.Drawing.Color colorHigh) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorKey (colorLow As Color, colorHigh As Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorKey(System::Drawing::Color colorLow, System::Drawing::Color colorHigh);" />
      <MemberSignature Language="F#" Value="member this.SetColorKey : System.Drawing.Color * System.Drawing.Color -&gt; unit" Usage="imageAttributes.SetColorKey (colorLow, colorHigh)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorLow" Type="System.Drawing.Color" />
        <Parameter Name="colorHigh" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="colorLow">低颜色键值。</param>
        <param name="colorHigh">高颜色键值。</param>
        <summary>为默认类别设置颜色键。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法设置的上限和下限的颜色键的值，以便可以进行多种颜色透明。 任何其三个组件 （红色、 绿色、 蓝色） 之间的最高价和最颜色键的对应分量的颜色由透明。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的颜色键、 位图类别的不同的颜色键和仍为钢笔类别的不同的颜色键。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
   
  
## Examples  
 有关代码示例，请参阅<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%28System.Drawing.Color%2CSystem.Drawing.Color%2CSystem.Drawing.Imaging.ColorAdjustType%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorKey">
      <MemberSignature Language="C#" Value="public void SetColorKey (System.Drawing.Color colorLow, System.Drawing.Color colorHigh, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorKey(valuetype System.Drawing.Color colorLow, valuetype System.Drawing.Color colorHigh, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorKey (colorLow As Color, colorHigh As Color, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorKey(System::Drawing::Color colorLow, System::Drawing::Color colorHigh, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetColorKey : System.Drawing.Color * System.Drawing.Color * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetColorKey (colorLow, colorHigh, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorLow" Type="System.Drawing.Color" />
        <Parameter Name="colorHigh" Type="System.Drawing.Color" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="colorLow">低颜色键值。</param>
        <param name="colorHigh">高颜色键值。</param>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将设置颜色键的类别。</param>
        <summary>为指定类别设置颜色键（透明范围）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法设置的上限和下限的颜色键的值，以便可以进行多种颜色透明。 任何其三个组件 （红色、 绿色、 蓝色） 之间的最高价和最颜色键的对应分量的颜色由透明。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的颜色键、 位图类别的不同的颜色键和仍为钢笔类别的不同的颜色键。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设指定为默认类别的调整设置的集合。 如果您通过将传递设置笔类别的颜色键<xref:System.Drawing.Imaging.ColorAdjustType.Pen>到<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A>方法，无默认值调整设置将应用于钢笔。  
  
   
  
## Examples  
 下面的代码示例设计为使用 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
1.  此时将打开<xref:System.Drawing.Image>，它使用 Circle.bmp 的文件并将其绘制到屏幕。  
  
2.  创建<xref:System.Drawing.Imaging.ImageAttributes>对象，并通过调用来设置其颜色键<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A>方法。  
  
3.  将图像绘制到屏幕上使用的颜色键<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetColorMatrices">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>设置颜色调整矩阵和灰度调整矩阵。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetColorMatrices">
      <MemberSignature Language="C#" Value="public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrices(class System.Drawing.Imaging.ColorMatrix newColorMatrix, class System.Drawing.Imaging.ColorMatrix grayMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrices (newColorMatrix As ColorMatrix, grayMatrix As ColorMatrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrices(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix, System::Drawing::Imaging::ColorMatrix ^ grayMatrix);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrices : System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrix -&gt; unit" Usage="imageAttributes.SetColorMatrices (newColorMatrix, grayMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="grayMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">颜色调整矩阵。</param>
        <param name="grayMatrix">灰度调整矩阵。</param>
        <summary>为默认类别设置颜色调整矩阵和灰度调整矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的调整矩阵、 对于位图的类别，另一个调整矩阵和笔类别的另一个调整矩阵。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 调用<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrix%29?displayProperty=nameWithType>方法等效于调用<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=nameWithType>方法并传入<xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=nameWithType>为`flags`参数。 <xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=nameWithType> 指定的所有颜色 （包括灰色） 都调整颜色调整矩阵，不灰度调整矩阵。 因此，传递给此方法的灰度调整矩阵没有任何影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrices">
      <MemberSignature Language="C#" Value="public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrices(class System.Drawing.Imaging.ColorMatrix newColorMatrix, class System.Drawing.Imaging.ColorMatrix grayMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrices (newColorMatrix As ColorMatrix, grayMatrix As ColorMatrix, flags As ColorMatrixFlag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrices(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix, System::Drawing::Imaging::ColorMatrix ^ grayMatrix, System::Drawing::Imaging::ColorMatrixFlag flags);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrices : System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrixFlag -&gt; unit" Usage="imageAttributes.SetColorMatrices (newColorMatrix, grayMatrix, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="grayMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorMatrixFlag" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">颜色调整矩阵。</param>
        <param name="grayMatrix">灰度调整矩阵。</param>
        <param name="flags"><see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> 的元素，它指定将受颜色调整矩阵和灰度调整矩阵影响的图像和颜色的类型。</param>
        <summary>为默认类别设置颜色调整矩阵和灰度调整矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的调整矩阵、 对于位图的类别，另一个调整矩阵和笔类别的另一个调整矩阵。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrices">
      <MemberSignature Language="C#" Value="public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag mode, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrices(class System.Drawing.Imaging.ColorMatrix newColorMatrix, class System.Drawing.Imaging.ColorMatrix grayMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag mode, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrices (newColorMatrix As ColorMatrix, grayMatrix As ColorMatrix, mode As ColorMatrixFlag, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrices(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix, System::Drawing::Imaging::ColorMatrix ^ grayMatrix, System::Drawing::Imaging::ColorMatrixFlag mode, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrices : System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrixFlag * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetColorMatrices (newColorMatrix, grayMatrix, mode, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="grayMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="mode" Type="System.Drawing.Imaging.ColorMatrixFlag" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">颜色调整矩阵。</param>
        <param name="grayMatrix">灰度调整矩阵。</param>
        <param name="mode"><see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> 的元素，它指定将受颜色调整矩阵和灰度调整矩阵影响的图像和颜色的类型。</param>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将设置颜色调整矩阵和灰度调整矩阵的类别。</param>
        <summary>为指定类别设置颜色调整矩阵和灰度调整矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的调整矩阵、 对于位图的类别，另一个调整矩阵和笔类别的另一个调整矩阵。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设指定为默认类别的调整设置的集合。 如果通过将传递设置颜色调整和灰度调整矩阵的笔类别<xref:System.Drawing.Imaging.ColorAdjustType.Pen>到<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%2A>方法，无默认值调整设置将应用于钢笔。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetColorMatrix">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>设置颜色调整矩阵。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetColorMatrix">
      <MemberSignature Language="C#" Value="public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrix(class System.Drawing.Imaging.ColorMatrix newColorMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrix (newColorMatrix As ColorMatrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrix(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrix : System.Drawing.Imaging.ColorMatrix -&gt; unit" Usage="imageAttributes.SetColorMatrix newColorMatrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">颜色调整矩阵。</param>
        <summary>为默认类别设置颜色调整矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的颜色调整矩阵、 位图类别中，不同的颜色调整矩阵和仍为钢笔类别不同的颜色调整矩阵。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 调用<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%29?displayProperty=nameWithType>方法等效于调用<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=nameWithType>方法并传入<xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=nameWithType>为`flags`参数。 <xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=nameWithType> 指定的颜色调整矩阵调整所有颜色 （包括灰色）  
  
   
  
## Examples  
 下面的代码示例设计为使用 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
1.  创建具有所有值将设置为 128，生成使用中等灰色纯色填充的矩形的颜色的矩形图像。 然后，代码会将此矩形图像绘制到屏幕。  
  
2.  创建<xref:System.Drawing.Imaging.ColorMatrix>，并设置其<xref:System.Drawing.Drawing2D.Matrix>为 1.75，强调的图像的红色组件的位置。  
  
3.  创建<xref:System.Drawing.Imaging.ImageAttributes>对象并调用<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法。  
  
4.  将图像 （第二个矩形） 绘制到屏幕使用<xref:System.Drawing.Imaging.ColorMatrix>中只需设置<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
 请注意，第二个矩形的颜色为红色突出显示。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f28c54fd-9c80-4f6f-b242-55f7ffcda84b">对图像重新着色</related>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrix">
      <MemberSignature Language="C#" Value="public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrixFlag flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrix(class System.Drawing.Imaging.ColorMatrix newColorMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrix (newColorMatrix As ColorMatrix, flags As ColorMatrixFlag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrix(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix, System::Drawing::Imaging::ColorMatrixFlag flags);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrix : System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrixFlag -&gt; unit" Usage="imageAttributes.SetColorMatrix (newColorMatrix, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorMatrixFlag" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">颜色调整矩阵。</param>
        <param name="flags"><see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> 的元素，它指定将受颜色调整矩阵影响的图像和颜色的类型。</param>
        <summary>为默认类别设置颜色调整矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的颜色调整矩阵、 位图类别中，不同的颜色调整矩阵和仍为钢笔类别不同的颜色调整矩阵。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
   
  
## Examples  
 有关代码示例，请参阅<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%29>方法。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f28c54fd-9c80-4f6f-b242-55f7ffcda84b">对图像重新着色</related>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrix">
      <MemberSignature Language="C#" Value="public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrixFlag mode, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrix(class System.Drawing.Imaging.ColorMatrix newColorMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag mode, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetColorMatrix (newColorMatrix As ColorMatrix, mode As ColorMatrixFlag, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetColorMatrix(System::Drawing::Imaging::ColorMatrix ^ newColorMatrix, System::Drawing::Imaging::ColorMatrixFlag mode, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetColorMatrix : System.Drawing.Imaging.ColorMatrix * System.Drawing.Imaging.ColorMatrixFlag * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetColorMatrix (newColorMatrix, mode, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="mode" Type="System.Drawing.Imaging.ColorMatrixFlag" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">颜色调整矩阵。</param>
        <param name="mode"><see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> 的元素，它指定将受颜色调整矩阵影响的图像和颜色的类型。</param>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将设置颜色调整矩阵的类别。</param>
        <summary>为指定类别设置颜色调整矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别的颜色调整矩阵、 位图类别中，不同的颜色调整矩阵和仍为钢笔类别不同的颜色调整矩阵。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设指定为默认类别的调整设置的集合。 如果您通过将传递设置笔类别的颜色调整矩阵<xref:System.Drawing.Imaging.ColorAdjustType.Pen>到<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法，无默认值调整设置将应用于钢笔。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> 方法。 若要运行此示例，请将代码粘贴到 Windows 窗体并调用`RotateColors`从窗体的<xref:System.Windows.Forms.Control.Paint>事件处理方法，传递`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-csharp[System.Drawing.RotateColors#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.RotateColors/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.RotateColors#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.RotateColors/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetGamma">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>设置伽玛值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetGamma">
      <MemberSignature Language="C#" Value="public void SetGamma (float gamma);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetGamma(float32 gamma) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetGamma (gamma As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetGamma(float gamma);" />
      <MemberSignature Language="F#" Value="member this.SetGamma : single -&gt; unit" Usage="imageAttributes.SetGamma gamma" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gamma" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="gamma">灰度校正值。</param>
        <summary>为默认类别设置伽玛值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 典型值为`gamma`参数都是从 1.0 到 2.2; 但是，5.0 到 0.1 之间的值无法证明在某些情况下非常有用。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定伽玛值为默认类别、 不同的伽玛值为位图类别和仍为钢笔类别不同伽玛值。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 常用的范围之外的伽玛值可能很有用的旧 CRT 监视器或处于不正常的光照条件，如工业环境或窗口中显示的监视器。  
  
   
  
## Examples  
 下面的代码示例设计为使用 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 此外，您需要将图像文件路径更改为你的系统上有效的路径和图像名称。 该代码执行下列操作：  
  
1.  此时将打开<xref:System.Drawing.Image>，它使用 Camera.jpg 的文件并将其绘制到屏幕上使用的默认值的 gamma。  
  
2.  创建<xref:System.Drawing.Imaging.ImageAttributes>对象并设置其伽玛值为 2.2 通过调用<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A>方法。  
  
3.  使用在中设置伽玛值在屏幕上绘制的图像 （第二种照相机）<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetGamma">
      <MemberSignature Language="C#" Value="public void SetGamma (float gamma, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetGamma(float32 gamma, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetGamma (gamma As Single, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetGamma(float gamma, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetGamma : single * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetGamma (gamma, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gamma" Type="System.Single" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="gamma">灰度校正值。</param>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 枚举的一个元素，指定将设置伽玛值的类别。</param>
        <summary>为指定类别设置伽玛值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 典型值为`gamma`参数都是从 1.0 到 2.2; 但是，5.0 到 0.1 之间的值无法证明在某些情况下非常有用。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定伽玛值为默认类别、 不同的伽玛值为位图类别和仍为钢笔类别不同伽玛值。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设指定为默认类别的调整设置的集合。 如果设置为钢笔类别的伽玛值通过传递<xref:System.Drawing.Imaging.ColorAdjustType.Pen>到<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A>方法，无默认值调整设置将应用于钢笔。  
  
 常用的范围之外的伽玛值可能很有用的旧 CRT 监视器或处于不正常的光照条件，如工业环境或窗口中显示的监视器。  
  
   
  
## Examples  
 有关代码示例，请参阅<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%28System.Single%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetNoOp">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>关闭颜色调整。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetNoOp">
      <MemberSignature Language="C#" Value="public void SetNoOp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNoOp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetNoOp" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetNoOp ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetNoOp();" />
      <MemberSignature Language="F#" Value="member this.SetNoOp : unit -&gt; unit" Usage="imageAttributes.SetNoOp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为默认类别关闭颜色调整。 可以调用 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.ClearNoOp" /> 方法恢复在调用 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetNoOp" /> 方法前已存在的颜色调整设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定伽玛值为默认类别、 不同的伽玛值为位图类别和仍为钢笔类别不同伽玛值。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
   
  
## Examples  
 下面的代码示例设计为使用 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
1.  此时将打开<xref:System.Drawing.Image>使用 Camera.jpg 的文件。  
  
2.  设置伽玛值的<xref:System.Drawing.Imaging.ImageAttributes>为 0.25 的对象。  
  
3.  将图像绘制到屏幕。  
  
4.  调用 <xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A> 方法。  
  
5.  将图像 （第二种照相机） 绘制到屏幕上。但是，因为<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>调用了方法、 设置默认值为 1.0 和图像的值的 gamma 绘制到屏幕，其中默认 gamma 设置。  
  
 请注意，在左侧图像是很平淡 （伽玛值为 0.25） 右侧图像具有更高对比度 （gamma 值为 1.0）。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNoOp">
      <MemberSignature Language="C#" Value="public void SetNoOp (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNoOp(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetNoOp(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetNoOp (type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetNoOp(System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetNoOp : System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetNoOp type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将关闭颜色校正的类别。</param>
        <summary>为指定类别关闭颜色调整。 可以调用 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.ClearNoOp" /> 方法恢复在调用 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetNoOp" /> 方法前已存在的颜色调整设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定伽玛值为默认类别、 不同的伽玛值为位图类别和仍为钢笔类别不同伽玛值。  
  
   
  
## Examples  
 有关代码示例，请参阅<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputChannel">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>设置 CMYK（青色-洋红色-黄色-黑色）输出通道。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputChannel">
      <MemberSignature Language="C#" Value="public void SetOutputChannel (System.Drawing.Imaging.ColorChannelFlag flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannel(valuetype System.Drawing.Imaging.ColorChannelFlag flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputChannel (flags As ColorChannelFlag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputChannel(System::Drawing::Imaging::ColorChannelFlag flags);" />
      <MemberSignature Language="F#" Value="member this.SetOutputChannel : System.Drawing.Imaging.ColorChannelFlag -&gt; unit" Usage="imageAttributes.SetOutputChannel flags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorChannelFlag" />
      </Parameters>
      <Docs>
        <param name="flags"><see cref="T:System.Drawing.Imaging.ColorChannelFlag" /> 的一个元素，指定输出通道。</param>
        <summary>为默认类别设置 CMYK（青色-洋红色-黄色-黑色）输出通道。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法以将图像转换为 CMYK 颜色空间并检查某个 CMYK 颜色通道的强度。 例如，假设您创建<xref:System.Drawing.Imaging.ImageAttributes>对象，并将其位图输出通道设置为<xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC>。 如果传递的路径的<xref:System.Drawing.Imaging.ImageAttributes>对象传递给<xref:System.Drawing.Graphics.DrawImage%2A>方法中，计算每个像素的蓝绿色部分，并呈现的图像中的每个像素的灰色，指示其青色通道的强度的阴影是。 同样，您可以呈现图像指示洋红色、 黄色和黑色通道的浓度。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定输出通道为默认类别和位图类别的不同的输出通道。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定位图类别任何调整设置，默认设置应用于位图类别。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 方法。 若要运行此示例中，请将以下代码粘贴到 Windows 窗体中。 处理该窗体<xref:System.Windows.Forms.Control.Paint>事件，并调用`ShowOutputChannels`，并传入`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-csharp[System.Drawing.Misc3#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.Misc3#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputChannel">
      <MemberSignature Language="C#" Value="public void SetOutputChannel (System.Drawing.Imaging.ColorChannelFlag flags, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannel(valuetype System.Drawing.Imaging.ColorChannelFlag flags, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputChannel (flags As ColorChannelFlag, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputChannel(System::Drawing::Imaging::ColorChannelFlag flags, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetOutputChannel : System.Drawing.Imaging.ColorChannelFlag * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetOutputChannel (flags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorChannelFlag" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="flags"><see cref="T:System.Drawing.Imaging.ColorChannelFlag" /> 的一个元素，指定输出通道。</param>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将设置输出通道的类别。</param>
        <summary>为指定的类别设置 CMYK（青色-洋红色-黄色-黑色）输出通道。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法以将图像转换为 CMYK 颜色空间并检查某个 CMYK 颜色通道的强度。 例如，假设您创建<xref:System.Drawing.Imaging.ImageAttributes>对象，并将其位图输出通道设置为<xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC>。 如果传递的路径的<xref:System.Drawing.Imaging.ImageAttributes>对象传递给<xref:System.Drawing.Graphics.DrawImage%2A>方法中，计算每个像素的蓝绿色部分，并呈现的图像中的每个像素的灰色，指示其青色通道的强度的阴影是。 同样，您可以呈现图像指示洋红色、 黄色和黑色通道的浓度。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定输出通道为默认类别和位图类别的不同的输出通道。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定位图类别任何调整设置，默认设置应用于位图类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设指定为默认类别的调整设置的集合。 如果设置为位图类别输出通道通过传递<xref:System.Drawing.Imaging.ColorAdjustType.Bitmap>到<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法，无默认值调整设置将应用于位图。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 方法。 若要运行此示例中，请将以下代码粘贴到 Windows 窗体中。 处理该窗体<xref:System.Windows.Forms.Control.Paint>事件，并调用`ShowOutputChannels`，并传入`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-csharp[System.Drawing.Misc3#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.Misc3#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputChannelColorProfile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>设置输出通道颜色配置文件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void SetOutputChannelColorProfile (string colorProfileFilename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannelColorProfile(string colorProfileFilename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputChannelColorProfile (colorProfileFilename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputChannelColorProfile(System::String ^ colorProfileFilename);" />
      <MemberSignature Language="F#" Value="member this.SetOutputChannelColorProfile : string -&gt; unit" Usage="imageAttributes.SetOutputChannelColorProfile colorProfileFilename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorProfileFilename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="colorProfileFilename">颜色配置文件的路径名。 如果颜色配置文件位于 %SystemRoot%\System32\Spool\Drivers\Color 目录中，则该参数可以是该文件的文件名。 否则，该参数必须是完全限定的路径名。</param>
        <summary>为默认类别设置输出通道颜色配置文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>和<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法以将图像转换为 CMYK （青色-洋红色-黄色-黑色） 颜色空间并检查亮度的其中一个 CMYK 颜色通道。 例如，假设您编写代码来执行以下步骤：  
  
1.  创建<xref:System.Drawing.Image>。  
  
2.  创建<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
3.  传递<xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC>到<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法的<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
4.  传递到颜色配置文件的路径名<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法的<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
5.  传递的路径<xref:System.Drawing.Image>并<xref:System.Drawing.Imaging.ImageAttributes>对象添加到<xref:System.Drawing.Graphics.DrawImage%2A>方法。  
  
 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 将使用颜色配置文件来计算在图中，每个像素的蓝绿色部分，每个像素中呈现的图像将呈现的灰色，指示其青色通道的强度。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别输出通道颜色配置文件和位图类别不同的输出通道颜色配置文件。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定位图类别任何调整设置，默认设置应用于位图类别。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void SetOutputChannelColorProfile (string colorProfileFilename, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannelColorProfile(string colorProfileFilename, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputChannelColorProfile (colorProfileFilename As String, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputChannelColorProfile(System::String ^ colorProfileFilename, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetOutputChannelColorProfile : string * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetOutputChannelColorProfile (colorProfileFilename, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorProfileFilename" Type="System.String" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="colorProfileFilename">颜色配置文件的路径名。 如果颜色配置文件位于 %SystemRoot%\System32\Spool\Drivers\Color 目录中，则该参数可以是该文件的文件名。 否则，该参数必须是完全限定的路径名。</param>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将设置输出通道颜色配置文件的类别。</param>
        <summary>为指定类别设置输出通道颜色配置文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>和<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法以将图像转换为 CMYK （青色-洋红色-黄色-黑色） 颜色空间并检查亮度的其中一个 CMYK 颜色通道。 例如，假设您编写代码来执行以下步骤：  
  
1.  创建<xref:System.Drawing.Image>。  
  
2.  创建<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
3.  传递<xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC>到<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法的<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
4.  传递到颜色配置文件的路径名<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法的<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
5.  传递的路径<xref:System.Drawing.Image>并<xref:System.Drawing.Imaging.ImageAttributes>对象添加到<xref:System.Drawing.Graphics.DrawImage%2A>方法。  
  
 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 将使用颜色配置文件来计算在图中，每个像素的蓝绿色部分，每个像素中呈现的图像将呈现的灰色，指示其青色通道的强度。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别输出通道颜色配置文件和位图类别不同的输出通道颜色配置文件。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定位图类别任何调整设置，默认设置应用于位图类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设指定为默认类别的调整设置的集合。 如果通过将传递设置输出通道颜色配置文件为位图类别<xref:System.Drawing.Imaging.ColorAdjustType.Bitmap>到<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法，无默认值调整设置将应用于位图。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetRemapTable">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>设置颜色重新映射表。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetRemapTable">
      <MemberSignature Language="C#" Value="public void SetRemapTable (System.Drawing.Imaging.ColorMap[] map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetRemapTable(class System.Drawing.Imaging.ColorMap[] map) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetRemapTable (map As ColorMap())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetRemapTable(cli::array &lt;System::Drawing::Imaging::ColorMap ^&gt; ^ map);" />
      <MemberSignature Language="F#" Value="member this.SetRemapTable : System.Drawing.Imaging.ColorMap[] -&gt; unit" Usage="imageAttributes.SetRemapTable map" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="map" Type="System.Drawing.Imaging.ColorMap[]" />
      </Parameters>
      <Docs>
        <param name="map"><see cref="T:System.Drawing.Imaging.ColorMap" /> 类型的颜色对数组。 每个颜色对包含现有的颜色（第一个值）和它将映射到的颜色（第二个值）。</param>
        <summary>为默认类别设置颜色重新映射表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 颜色重新映射表是一个数组<xref:System.Drawing.Imaging.ColorMap>结构。 每个<xref:System.Drawing.Imaging.ColorMap>结构具有两个<xref:System.Drawing.Color>对象： 一个指定旧颜色，另一个指定相应的新颜色。 在呈现期间，重新映射表中的旧颜色之一匹配的任何颜色更改为相应的新颜色。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定默认类别、 位图类别的颜色重新映射表和仍为钢笔类别的不同的颜色重新映射表颜色重新映射。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
   
  
## Examples  
 下面的代码示例设计为使用 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
1.  创建图像 （红色圆圈）、 将其保存为 Circle2.jpg、 打开该映像，并将其绘制到屏幕。  
  
2.  创建映射的颜色为红色到绿色的颜色映射。  
  
3.  绘制早先创建的图像在屏幕上，但这次使用的颜色映射。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRemapTable">
      <MemberSignature Language="C#" Value="public void SetRemapTable (System.Drawing.Imaging.ColorMap[] map, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetRemapTable(class System.Drawing.Imaging.ColorMap[] map, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetRemapTable (map As ColorMap(), type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetRemapTable(cli::array &lt;System::Drawing::Imaging::ColorMap ^&gt; ^ map, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetRemapTable : System.Drawing.Imaging.ColorMap[] * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetRemapTable (map, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="map" Type="System.Drawing.Imaging.ColorMap[]" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="map"><see cref="T:System.Drawing.Imaging.ColorMap" /> 类型的颜色对数组。 每个颜色对包含现有的颜色（第一个值）和它将映射到的颜色（第二个值）。</param>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将设置颜色重新映射表的类别。</param>
        <summary>为指定类别设置颜色重新映射表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 颜色重新映射表是一个数组<xref:System.Drawing.Imaging.ColorMap>结构。 每个<xref:System.Drawing.Imaging.ColorMap>结构具有两个<xref:System.Drawing.Color>对象： 一个指定旧颜色，另一个指定相应的新颜色。 在呈现期间，重新映射表中的旧颜色之一匹配的任何颜色更改为相应的新颜色。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定默认类别、 位图类别的颜色重新映射表和仍为钢笔类别的不同的颜色重新映射表颜色重新映射。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设指定为默认类别的调整设置的集合。 如果您通过将传递设置笔类别的颜色重新映射表<xref:System.Drawing.Imaging.ColorAdjustType.Pen>到<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A>方法，无默认值调整设置将应用于钢笔。  
  
   
  
## Examples  
 有关代码示例，请参阅<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%28System.Drawing.Imaging.ColorMap%5B%5D%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetThreshold">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>设置阈值（透明范围）。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetThreshold">
      <MemberSignature Language="C#" Value="public void SetThreshold (float threshold);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetThreshold(float32 threshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetThreshold (threshold As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetThreshold(float threshold);" />
      <MemberSignature Language="F#" Value="member this.SetThreshold : single -&gt; unit" Usage="imageAttributes.SetThreshold threshold" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threshold" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="threshold">指定阈值的实数。</param>
        <summary>为默认类别设置阈值（透明范围）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 阈值是一个介于 0 或 1，用于指定每个颜色组件的截止点。 例如，假设的阈值设置为 0.7，并且您正在呈现一种颜色的红色、 绿色和蓝色分量 230、 50 和 220，分别为。 红色组件 (230) 大于 0.7 x 255, 因此红色分量将更改为 255 （最大亮度）。 绿色组件 (50) 小于 0.7 x 255,，因此绿色组件将更改为 0。 蓝色组件 (220) 大于 0.7 x 255, 因此蓝色组件将更改为 255。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别阈值、 位图类别中，阈值和仍为钢笔类别一个不同的阈值。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
   
  
## Examples  
 下面的代码示例设计为使用 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
1.  此时将打开<xref:System.Drawing.Image>并将其绘制到屏幕。  
  
2.  创建<xref:System.Drawing.Imaging.ImageAttributes>对象并通过设置其阈值<xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A>方法。  
  
3.  将图像绘制到屏幕，使用的阈值<xref:System.Drawing.Imaging.ImageAttributes>对象。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetThreshold">
      <MemberSignature Language="C#" Value="public void SetThreshold (float threshold, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetThreshold(float32 threshold, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetThreshold (threshold As Single, type As ColorAdjustType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetThreshold(float threshold, System::Drawing::Imaging::ColorAdjustType type);" />
      <MemberSignature Language="F#" Value="member this.SetThreshold : single * System.Drawing.Imaging.ColorAdjustType -&gt; unit" Usage="imageAttributes.SetThreshold (threshold, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threshold" Type="System.Single" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="threshold">0.0 到 1.0 之间的阈值，用作一个断点，以便对将映射为最大值或最小值的颜色进行排序。</param>
        <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 的一个元素，指定将设置颜色阈值的类别。</param>
        <summary>为指定类别设置阈值（透明范围）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 阈值是一个介于 0 或 1，用于指定每个颜色组件的截止点。 例如，假设的阈值设置为 0.7，并且您正在呈现一种颜色的红色、 绿色和蓝色分量 230、 50 和 220，分别为。 红色组件 (230) 大于 0.7 x 255, 因此红色分量将更改为 255 （最大亮度）。 绿色组件 (50) 小于 0.7 x 255,，因此绿色组件将更改为 0。 蓝色组件 (220) 大于 0.7 x 255, 因此蓝色组件将更改为 255。  
  
 <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置： 默认、 位图、 画笔、 笔和文本。 例如，可以指定为默认类别阈值、 位图类别中，阈值和仍为钢笔类别一个不同的阈值。  
  
 默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定为钢笔类别的任何调整设置，默认设置适用于笔类别。  
  
 只要指定的颜色调整或某一特定类别的灰度调整设置，默认调整设置将不再应用于该类。 例如，假设指定为默认类别的调整设置的集合。 如果您通过将传递设置笔类别的阈值<xref:System.Drawing.Imaging.ColorAdjustType.Pen>到<xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A>方法，无默认值调整设置将应用于钢笔。  
  
   
  
## Examples  
 有关代码示例，请参阅<xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%28System.Single%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetWrapMode">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>设置环绕模式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetWrapMode">
      <MemberSignature Language="C#" Value="public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetWrapMode(valuetype System.Drawing.Drawing2D.WrapMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetWrapMode (mode As WrapMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetWrapMode(System::Drawing::Drawing2D::WrapMode mode);" />
      <MemberSignature Language="F#" Value="member this.SetWrapMode : System.Drawing.Drawing2D.WrapMode -&gt; unit" Usage="imageAttributes.SetWrapMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Drawing.Drawing2D.WrapMode" />
      </Parameters>
      <Docs>
        <param name="mode"><see cref="T:System.Drawing.Drawing2D.WrapMode" /> 的一个元素，它指定使用重复的图像副本平铺区域的方式。</param>
        <summary>设置环绕模式，该模式用于决定如何将纹理平铺到一个形状上或平铺到形状的边界上。 当纹理小于它所填充的形状时，纹理在该形状上平铺以填满该形状。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29>方法等效于调用<xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%2CSystem.Drawing.Color%29>并传递<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>为`color`参数。 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 指定的呈现图像外部的像素的颜色。 此颜色是如果模式参数设置为可见<xref:System.Drawing.Drawing2D.WrapMode.Clamp>，并传递给源矩形<xref:System.Drawing.Graphics.DrawImage%2A>方法大于图像本身。  
  
   
  
## Examples  
 下面的代码示例设计为使用 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
1.  此时将打开<xref:System.Drawing.Image>从 Circle3.jpg 文件 （小、 填充红色的圆圈） 并将其绘制到屏幕。  
  
2.  创建<xref:System.Drawing.Imaging.ImageAttributes>对象并设置<xref:System.Drawing.Drawing2D.WrapMode>枚举<xref:System.Drawing.Drawing2D.WrapMode.Tile>。  
  
3.  创建<xref:System.Drawing.TextureBrush>Circle3.jpg 文件中使用的映像。  
  
4.  使用红色填充小圆圈填充在屏幕上绘制一个矩形。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWrapMode">
      <MemberSignature Language="C#" Value="public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetWrapMode(valuetype System.Drawing.Drawing2D.WrapMode mode, valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetWrapMode(System::Drawing::Drawing2D::WrapMode mode, System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.SetWrapMode : System.Drawing.Drawing2D.WrapMode * System.Drawing.Color -&gt; unit" Usage="imageAttributes.SetWrapMode (mode, color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Drawing.Drawing2D.WrapMode" />
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="mode"><see cref="T:System.Drawing.Drawing2D.WrapMode" /> 的一个元素，它指定使用重复的图像副本平铺区域的方式。</param>
        <param name="color">一个 <see cref="T:System.Drawing.Imaging.ImageAttributes" /> 对象，指定所呈现图像外部的像素的颜色。 如果模式参数设置为 <see cref="F:System.Drawing.Drawing2D.WrapMode.Clamp" /> 并且传递给 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 的源矩形大于图像本身，则该颜色可见。</param>
        <summary>设置环绕模式和颜色，用于决定如何将纹理平铺到一个形状上，或平铺到形状的边界上。 当纹理小于它所填充的形状时，纹理在该形状上平铺以填满该形状。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 有关代码示例，请参阅<xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWrapMode">
      <MemberSignature Language="C#" Value="public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color, bool clamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetWrapMode(valuetype System.Drawing.Drawing2D.WrapMode mode, valuetype System.Drawing.Color color, bool clamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetWrapMode(System::Drawing::Drawing2D::WrapMode mode, System::Drawing::Color color, bool clamp);" />
      <MemberSignature Language="F#" Value="member this.SetWrapMode : System.Drawing.Drawing2D.WrapMode * System.Drawing.Color * bool -&gt; unit" Usage="imageAttributes.SetWrapMode (mode, color, clamp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Drawing.Drawing2D.WrapMode" />
        <Parameter Name="color" Type="System.Drawing.Color" />
        <Parameter Name="clamp" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mode"><see cref="T:System.Drawing.Drawing2D.WrapMode" /> 的一个元素，它指定使用重复的图像副本平铺区域的方式。</param>
        <param name="color">一个 Color 对象，指定所呈现图像外部的像素的颜色。 如果模式参数设置为 <see cref="F:System.Drawing.Drawing2D.WrapMode.Clamp" /> 并且传递给 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 的源矩形大于图像本身，则该颜色可见。</param>
        <param name="clamp">此参数不起作用。 将其设置为 <see langword="false" />。</param>
        <summary>设置环绕模式和颜色，用于决定如何将纹理平铺到一个形状上，或平铺到形状的边界上。 当纹理小于它所填充的形状时，纹理在该形状上平铺以填满该形状。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 有关代码示例，请参阅<xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
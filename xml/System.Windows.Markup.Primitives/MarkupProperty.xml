<Type Name="MarkupProperty" FullName="System.Windows.Markup.Primitives.MarkupProperty">
  <Metadata><Meta Name="ms.openlocfilehash" Value="371e7d2f838f74664ba49aaedcc9ba453b36c4d1" /><Meta Name="ms.sourcegitcommit" Value="c573d537afba2d4c1463538f1095f2f155025464" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/16/2019" /><Meta Name="ms.locfileid" Value="72408580" /></Metadata><TypeSignature Language="C#" Value="public abstract class MarkupProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.Primitives.MarkupProperty" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupProperty abstract" />
  <TypeSignature Language="F#" Value="type MarkupProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a9956-101">一个提供属性说明的抽象类，这些属性说明要在写入标记（该标记封装对属性及其值的访问）时使用。</span><span class="sxs-lookup"><span data-stu-id="a9956-101">Abstract class that provides a property description to be used while writing to markup which encapsulates access to properties and their values.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-102">属性可表示为字符串或项列表。</span><span class="sxs-lookup"><span data-stu-id="a9956-102">A property is either represented as a string or a list of items.</span></span>  
  
 <span data-ttu-id="a9956-103">如果该属性可以表示为字符串，则 <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> @no__t 为-1。</span><span class="sxs-lookup"><span data-stu-id="a9956-103">If the property can be represented as a string, <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `false`.</span></span>  
  
 <span data-ttu-id="a9956-104">如果 <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> @no__t 为-1，则该属性为项列表。</span><span class="sxs-lookup"><span data-stu-id="a9956-104">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `true`, the property is a list of items.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.ComponentModel.AttributeCollection Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.AttributeCollection Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As AttributeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::ComponentModel::AttributeCollection ^ Attributes { System::ComponentModel::AttributeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.ComponentModel.AttributeCollection" Usage="System.Windows.Markup.Primitives.MarkupProperty.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AttributeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-105">当在派生类中重写时，可获取与此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 关联的特性。</span><span class="sxs-lookup"><span data-stu-id="a9956-105">When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="a9956-106">特性的集合。</span><span class="sxs-lookup"><span data-stu-id="a9956-106">The collection of attributes.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-107">在派生类中重写时，如果以依赖属性的形式实现标记属性，则获取该属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</span><span class="sxs-lookup"><span data-stu-id="a9956-107">When overridden in a derived class, gets the <see cref="T:System.Windows.DependencyProperty" /> identifier for the markup property if the property is implemented as a dependency property.</span></span></summary>
        <value><span data-ttu-id="a9956-108">依赖属性标识符。</span><span class="sxs-lookup"><span data-stu-id="a9956-108">The dependency property identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-109">默认行为返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="a9956-109">The default behavior returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAttached">
      <MemberSignature Language="C#" Value="public virtual bool IsAttached { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAttached" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsAttached As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAttached { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAttached : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsAttached" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-110">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否为附加 <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="a9956-110">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is an attached <see cref="T:System.Windows.DependencyProperty" />.</span></span></summary>
        <value><span data-ttu-id="a9956-111">如果此属性为附加 <see cref="T:System.Windows.DependencyProperty" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a9956-111"><see langword="true" /> if the property is an attached <see cref="T:System.Windows.DependencyProperty" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-112">默认行为是返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="a9956-112">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="a9956-113">当 <xref:System.Windows.Markup.Primitives.MarkupProperty.IsAttached%2A> @no__t 为-1 时，<xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> 不 `null`，@no__t 可以 `null`，但这不是必需的。</span><span class="sxs-lookup"><span data-stu-id="a9956-113">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsAttached%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> is not `null` and <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> can be `null`, but is not required to be.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsComposite">
      <MemberSignature Language="C#" Value="public virtual bool IsComposite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsComposite" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsComposite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsComposite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsComposite : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsComposite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-114">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否为复合属性。</span><span class="sxs-lookup"><span data-stu-id="a9956-114">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is a composite property.</span></span></summary>
        <value><span data-ttu-id="a9956-115">如果此属性为复合属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a9956-115"><see langword="true" /> is this property is a composite property; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-116">默认行为是返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="a9956-116">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="a9956-117">如果 <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> @no__t 为-1，则该属性可以表示为字符串，@no__t 为-2，<xref:System.Windows.Markup.Primitives.MarkupProperty.StringValue%2A> 将使用。</span><span class="sxs-lookup"><span data-stu-id="a9956-117">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `false`, the property can be represented as a string and <xref:System.Windows.Markup.Primitives.MarkupProperty.Value%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.StringValue%2A> are valid to use.</span></span>  
  
 <span data-ttu-id="a9956-118">如果 <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> @no__t 为-1，则属性为一个或多个项，<xref:System.Windows.Markup.Primitives.MarkupProperty.Items%2A> 则有效。</span><span class="sxs-lookup"><span data-stu-id="a9956-118">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `true`, the property is one or more items and <xref:System.Windows.Markup.Primitives.MarkupProperty.Items%2A> is valid to use.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructorArgument">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructorArgument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructorArgument" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructorArgument As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructorArgument { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructorArgument : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-119">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示构造函数参数。</span><span class="sxs-lookup"><span data-stu-id="a9956-119">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a constructor argument.</span></span></summary>
        <value><span data-ttu-id="a9956-120">如果此属性表示构造函数参数，则为 <see langword="true" />；否该 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a9956-120"><see langword="true" /> if this property represents a constructor argument; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-121">默认行为返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="a9956-121">The default behavior is return `false`.</span></span>  
  
 <span data-ttu-id="a9956-122">当 <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> @no__t 为-1 时，<xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A>，@no__t 3 均为 @no__t。</span><span class="sxs-lookup"><span data-stu-id="a9956-122">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="a9956-123">XAML 仅使用 <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> 来表示 @no__t 的实例的构造函数参数。</span><span class="sxs-lookup"><span data-stu-id="a9956-123">XAML only uses <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> for representing the constructor arguments of instances of <xref:System.Windows.Markup.MarkupExtension>.</span></span> <span data-ttu-id="a9956-124">请参阅[标记扩展和 WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="a9956-124">See [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContent">
      <MemberSignature Language="C#" Value="public virtual bool IsContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContent : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-125">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示集合的直接内容。</span><span class="sxs-lookup"><span data-stu-id="a9956-125">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents direct content of a collection.</span></span></summary>
        <value><span data-ttu-id="a9956-126">如果此属性表示直接内容，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a9956-126"><see langword="true" /> if the property represents direct content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-127">默认行为是返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="a9956-127">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="a9956-128">当 <xref:System.Windows.Markup.Primitives.MarkupProperty.IsContent%2A> @no__t 为-1 时，<xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A>，@no__t 3 均为 @no__t。</span><span class="sxs-lookup"><span data-stu-id="a9956-128">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsContent%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="a9956-129">在确定此 <xref:System.Windows.Markup.Primitives.MarkupProperty> 是否表示直接内容时，将包括字典。</span><span class="sxs-lookup"><span data-stu-id="a9956-129">Dictionaries are included when determining whether this <xref:System.Windows.Markup.Primitives.MarkupProperty> represents direct content.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKey">
      <MemberSignature Language="C#" Value="public virtual bool IsKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsKey { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKey : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-130">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 将项存储在字典中时使用的键。</span><span class="sxs-lookup"><span data-stu-id="a9956-130">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents the key used by the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> to store the item in a dictionary.</span></span></summary>
        <value><span data-ttu-id="a9956-131">如果此属性表示键，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a9956-131"><see langword="true" /> if this property represents a key; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-132">默认行为是返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="a9956-132">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="a9956-133">当 <xref:System.Windows.Markup.Primitives.MarkupProperty.IsKey%2A> @no__t 为-1 时，@no__t 为-2，@no__t @no__t 为3。</span><span class="sxs-lookup"><span data-stu-id="a9956-133">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsKey%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are `null`.</span></span>  
  
 <span data-ttu-id="a9956-134">XAML 将使用标识的属性作为 `x:Key` 属性。</span><span class="sxs-lookup"><span data-stu-id="a9956-134">XAML will use the identified property as an `x:Key` attribute.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueAsString">
      <MemberSignature Language="C#" Value="public virtual bool IsValueAsString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueAsString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValueAsString As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValueAsString { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueAsString : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-135">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示为创建属性实例而传递给类型转换器的文本，或者确定是否应使用构造函数。</span><span class="sxs-lookup"><span data-stu-id="a9956-135">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents text which is passed to a type converter to create an instance of the property or if a constructor should be used.</span></span></summary>
        <value><span data-ttu-id="a9956-136">如果此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 表示字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a9956-136"><see langword="true" />, if this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a string; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-137">默认行为是返回 @no__t</span><span class="sxs-lookup"><span data-stu-id="a9956-137">The default behavior is to return `false.`</span></span>  
  
 <span data-ttu-id="a9956-138">当 <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> @no__t 为-1 时，<xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A>，@no__t 3 均为 @no__t。</span><span class="sxs-lookup"><span data-stu-id="a9956-138">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="a9956-139">如果通过 <xref:System.Windows.Markup.Primitives.MarkupObject.Properties%2A> 提供属性，<xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> @no__t 为-2，则它将是该类型将提供的唯一属性。</span><span class="sxs-lookup"><span data-stu-id="a9956-139">If the property is provided through <xref:System.Windows.Markup.Primitives.MarkupObject.Properties%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> is `true`, it will be the only property the type will provide.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.Windows.Markup.Primitives.MarkupObject&gt; Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Markup.Primitives.MarkupObject&gt; Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Items" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Items As IEnumerable(Of MarkupObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;System::Windows::Markup::Primitives::MarkupObject ^&gt; ^ Items { System::Collections::Generic::IEnumerable&lt;System::Windows::Markup::Primitives::MarkupObject ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : seq&lt;System.Windows.Markup.Primitives.MarkupObject&gt;" Usage="System.Windows.Markup.Primitives.MarkupProperty.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Markup.Primitives.MarkupObject&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-140">当在派生类中重写时，可获取组成此属性的值的多个项。</span><span class="sxs-lookup"><span data-stu-id="a9956-140">When overridden in a derived class, gets the items that make up the value of this property.</span></span></summary>
        <value><span data-ttu-id="a9956-141">组成此属性的值的多个项。</span><span class="sxs-lookup"><span data-stu-id="a9956-141">The items that make up the value of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-142">如果该属性不是枚举，则仅返回一项。</span><span class="sxs-lookup"><span data-stu-id="a9956-142">If the property is not an enumeration, only one item will be returned.</span></span>  
  
 <span data-ttu-id="a9956-143">如果该属性是枚举，则返回所有项。</span><span class="sxs-lookup"><span data-stu-id="a9956-143">If the property is an enumeration, or enumerable, all the items will be returned.</span></span>  
  
 <span data-ttu-id="a9956-144">至少始终返回一项，因为 <xref:System.Windows.Markup.Primitives.MarkupObject> 不会为没有项的属性创建 <xref:System.Windows.Markup.Primitives.MarkupProperty>。</span><span class="sxs-lookup"><span data-stu-id="a9956-144">At least one item is always returned, because <xref:System.Windows.Markup.Primitives.MarkupObject> will not create a <xref:System.Windows.Markup.Primitives.MarkupProperty> for properties with no items.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Markup.Primitives.MarkupProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-145">当在派生类中重写时，可获取用于诊断和错误报告的名称。</span><span class="sxs-lookup"><span data-stu-id="a9956-145">When overridden in a derived class, gets a name that is used for diagnostics and error reporting.</span></span></summary>
        <value><span data-ttu-id="a9956-146">标识符属性名称。</span><span class="sxs-lookup"><span data-stu-id="a9956-146">The identifier property name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-147">序列化程序不应使用此值。</span><span class="sxs-lookup"><span data-stu-id="a9956-147">A serializer should not use this value.</span></span> <span data-ttu-id="a9956-148">它应该改用 <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> 和/或 <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="a9956-148">It should use the <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and/or <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.PropertyDescriptor PropertyDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptor PropertyDescriptor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PropertyDescriptor As PropertyDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::PropertyDescriptor ^ PropertyDescriptor { System::ComponentModel::PropertyDescriptor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyDescriptor : System.ComponentModel.PropertyDescriptor" Usage="System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-149">当在派生类中重写时，可获取标记属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="a9956-149">When overridden in a derived class, gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> for the markup property.</span></span></summary>
        <value><span data-ttu-id="a9956-150">属性描述符。</span><span class="sxs-lookup"><span data-stu-id="a9956-150">The property descriptor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-151">默认行为返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="a9956-151">The default behavior returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.Markup.Primitives.MarkupProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-152">在派生类中重写时，获取属性的 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="a9956-152">When overridden in a derived class, gets the CLR type of the property.</span></span></summary>
        <value><span data-ttu-id="a9956-153">CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="a9956-153">The CLR type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringValue">
      <MemberSignature Language="C#" Value="public abstract string StringValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StringValue As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StringValue { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StringValue : string" Usage="System.Windows.Markup.Primitives.MarkupProperty.StringValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-154">当在派生类中重写时，可获取此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 的字符串值。</span><span class="sxs-lookup"><span data-stu-id="a9956-154">When overridden in a derived class, gets the string value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="a9956-155">字符串值。</span><span class="sxs-lookup"><span data-stu-id="a9956-155">The string value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TypeReferences As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeReferences : seq&lt;Type&gt;" Usage="System.Windows.Markup.Primitives.MarkupProperty.TypeReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-156">在派生类重写时，获取此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 在将其值序列化为字符串时将引用的一组类型。</span><span class="sxs-lookup"><span data-stu-id="a9956-156">When overridden in a derived class, gets the set of types that this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> will reference when it serializes its value as a string.</span></span></summary>
        <value><span data-ttu-id="a9956-157">这组类型。</span><span class="sxs-lookup"><span data-stu-id="a9956-157">The set of types.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9956-158"><xref:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences%2A> 使序列化程序可以确保反序列化程序具有足够的信息，以便将对这些类型的引用转换为字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="a9956-158"><xref:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences%2A> enables a serializer to ensure that the de-serializer has enough information to convert references to these type from the string representations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Windows.Markup.Primitives.MarkupProperty.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9956-159">当在派生类中重写时，获取此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 的当前值。</span><span class="sxs-lookup"><span data-stu-id="a9956-159">When overridden in a derived class, gets the current value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="a9956-160">当前值。</span><span class="sxs-lookup"><span data-stu-id="a9956-160">The current value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="PeekCompletedEventArgs" FullName="System.Messaging.PeekCompletedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="850bb74fe481eac085623381b26a4de9ad4698d8" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="63992794" /></Metadata><TypeSignature Language="C#" Value="public class PeekCompletedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PeekCompletedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.PeekCompletedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class PeekCompletedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class PeekCompletedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type PeekCompletedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> 事件提供数据。 当异步查看操作调用事件处理程序时，此类的一个实例将被传递给该处理程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用事件通知时 （而不删除读取） 查看消息以异步方式从队列，必须创建对消息处理的方法。 你的代码必须调用<xref:System.Messaging.MessageQueue.BeginPeek%2A>以开始异步处理。 当查看消息时，通知应用程序通过<xref:System.Messaging.MessageQueue.PeekCompleted>事件。 实例<xref:System.Messaging.PeekCompletedEventArgs>传递到调用事件处理程序的事件委托。 与关联的数据<xref:System.Messaging.MessageQueue.PeekCompleted>事件包含在委托的<xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A>参数。  
  
 有两种方法来提供事件完成的通知： 事件通知和回调。 <xref:System.Messaging.PeekCompletedEventArgs> 仅用于事件通知。 比较回调和事件通知的信息，请参阅"事件 vs。回调"MSDN 上。  
  
 <xref:System.Messaging.PeekCompletedEventArgs> 提供的消息，通过启动异步查看操作的最终访问<xref:System.Messaging.PeekCompletedEventArgs.Message%2A>成员。 这是另一种访问消息，则和行为类似于调用<xref:System.Messaging.MessageQueue.EndPeek%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的代码示例创建的事件处理程序<xref:System.Messaging.MessageQueue.PeekCompleted>事件并将其与事件使用委托的关联<xref:System.Messaging.PeekCompletedEventHandler>。 事件处理程序， `MyPeekCompleted`、 查看消息和标签写到屏幕。  
  
 [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CPP/mqbeginpeek_noparms.cpp#1)]
 [!code-csharp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CS/mqbeginpeek_noparms.cs#1)]
 [!code-vb[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/VB/mqbeginpeek_noparms.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.PeekCompletedEventHandler" />
    <altmember cref="E:System.Messaging.MessageQueue.PeekCompleted" />
    <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
    <altmember cref="M:System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)" />
    <altmember cref="T:System.Messaging.Message" />
  </Docs>
  <Members>
    <Member MemberName="AsyncResult">
      <MemberSignature Language="C#" Value="public IAsyncResult AsyncResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IAsyncResult AsyncResult" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.PeekCompletedEventArgs.AsyncResult" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncResult As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IAsyncResult ^ AsyncResult { IAsyncResult ^ get(); void set(IAsyncResult ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncResult : IAsyncResult with get, set" Usage="System.Messaging.PeekCompletedEventArgs.AsyncResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置请求的异步操作结果。</summary>
        <value>包含与查看操作关联的数据的 <see cref="T:System.IAsyncResult" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.PeekCompletedEventArgs.AsyncResult%2A> 标识正在进行或已完成的异步操作。 属性包含数据，从而帮助确定的多个潜在的异步操作完成，并传递给事件处理程序，使<xref:System.Messaging.MessageQueue.EndPeek%2A>访问与已完成的操作关联的消息。  
  
 当您调用<xref:System.Messaging.MessageQueue.BeginPeek%2A>、<xref:System.IAsyncResult>即使一条消息，如果存在，具有尚未检索因为不完成该操作立即返回。 <xref:System.Messaging.PeekCompletedEventArgs.AsyncResult%2A>指示异步操作的状态。 <xref:System.Messaging.MessageQueue.BeginPeek%2A> 创建对象，对象在操作中，直到修改<xref:System.Messaging.MessageQueue.EndPeek%2A>完成后，它。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)" />
        <altmember cref="T:System.IAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Message" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.PeekCompletedEventArgs.Message" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Message As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Message { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : System.Messaging.Message" Usage="System.Messaging.PeekCompletedEventArgs.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取同异步查看操作关联的消息。</summary>
        <value>表示异步查看操作最终结果的 <see cref="T:System.Messaging.Message" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.PeekCompletedEventArgs.Message%2A>属性提供了一种检索启动异步查看操作结束的消息。  
  
 <xref:System.Messaging.MessageQueue.EndPeek%2A?displayProperty=nameWithType> 在首次调用<xref:System.Messaging.PeekCompletedEventArgs.Message%2A>属性为只读，因此不需要调用<xref:System.Messaging.MessageQueue.EndPeek%2A>之前获取此属性的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">未能检索到 <see cref="P:System.Messaging.PeekCompletedEventArgs.Message" />。 异步操作的超时可能已过期。</exception>
        <altmember cref="T:System.Messaging.PeekCompletedEventHandler" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
  </Members>
</Type>
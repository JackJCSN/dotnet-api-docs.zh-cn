<Type Name="ActiveXMessageFormatter" FullName="System.Messaging.ActiveXMessageFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="728278d4003b29b63c3bf1a601347657ad8adec0" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64012735" /></Metadata><TypeSignature Language="C#" Value="public class ActiveXMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ActiveXMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.ActiveXMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class ActiveXMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ActiveXMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type ActiveXMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="2e8f4-101">使用与 MSMQ ActiveX 组件兼容的格式，将基元数据类型和其他对象序列化成“消息队列”消息体或从“消息队列”消息体反序列化基元数据类型和其他对象。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-101">Serializes or deserializes primitive data types and other objects to or from the body of a Message Queuing message, using a format that is compatible with the MSMQ ActiveX Component.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e8f4-102"><xref:System.Messaging.ActiveXMessageFormatter>适用于使用消息队列的 COM 组件，允许互操作性与使用 MSMQ COM 控件的应用程序发送消息。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-102">The <xref:System.Messaging.ActiveXMessageFormatter> is compatible with messages sent using Message Queuing COM components, allowing interoperability with applications that use the MSMQ COM control.</span></span>  
  
 <span data-ttu-id="2e8f4-103"><xref:System.Messaging.ActiveXMessageFormatter>大多数基元，以及实现的对象可以序列化`IPersistStream`OLE 接口。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-103">The <xref:System.Messaging.ActiveXMessageFormatter> can serialize most primitives, as well as objects that implement the `IPersistStream` OLE interface.</span></span> <span data-ttu-id="2e8f4-104">它可以反序列化一组相同的基元，但需要更多工作，反序列化实现的 COM 对象 （例如，使用 Visual Basic 6.0 创建的对象） 时`IPersistStream`。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-104">It can deserialize the same set of primitives, but requires further effort when deserializing a COM object (for example, an object created using Visual Basic 6.0) that implements `IPersistStream`.</span></span> <span data-ttu-id="2e8f4-105">要反序列化的对象必须是在内存中的第一个将对象导入.NET Framework 应用程序。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-105">The object to deserialize must be in memory by first importing the object into a .NET Framework application.</span></span>  
  
 <span data-ttu-id="2e8f4-106">当应用程序发送一条消息到队列中的一个实例<xref:System.Messaging.MessageQueue>类中，格式化程序对象序列化为流，并将其插入到消息正文。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-106">When an application sends a message to the queue using an instance of the <xref:System.Messaging.MessageQueue> class, the formatter serializes the object into a stream and inserts it into the message body.</span></span> <span data-ttu-id="2e8f4-107">从队列使用读取时<xref:System.Messaging.MessageQueue>，格式化程序反序列化到消息数据<xref:System.Messaging.Message.Body%2A>属性的<xref:System.Messaging.Message>。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-107">When reading from a queue using a <xref:System.Messaging.MessageQueue>, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.</span></span>  
  
 <span data-ttu-id="2e8f4-108">ActiveX 序列化是非常简洁，从而使用<xref:System.Messaging.ActiveXMessageFormatter>和 MSMQ COM 控制序列化的非常快方法。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-108">ActiveX serialization is very compact, which makes using the <xref:System.Messaging.ActiveXMessageFormatter> and MSMQ COM control a very fast method of serialization.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActiveXMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActiveXMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e8f4-109">初始化 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-109">Initializes a new instance of the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="activeXMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="2e8f4-110">要检查的 <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-110">The <see cref="T:System.Messaging.Message" /> to inspect.</span></span></param>
        <summary><span data-ttu-id="2e8f4-111">确定格式化程序是否可以反序列化消息的内容。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-111">Determines whether the formatter can deserialize the contents of the message.</span></span></summary>
        <returns><span data-ttu-id="2e8f4-112">如果 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 可以反序列化消息，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-112"><see langword="true" /> if the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> can deserialize the message; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e8f4-113"><xref:System.Messaging.ActiveXMessageFormatter.CanRead%2A> 返回`false`如果消息正文不是消息队列 ActiveX 控件可以反序列化的基元，或如果它未实现`IPersistStream`接口。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-113"><xref:System.Messaging.ActiveXMessageFormatter.CanRead%2A> returns `false` if the message body is not a primitive that the Message Queuing ActiveX control can deserialize or if it does not implement the `IPersistStream` interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e8f4-114"><paramref name="message" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-114">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="activeXMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e8f4-115">创建与当前 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 相同的 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-115">Creates an instance of the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> class that is identical to the current <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</span></span></summary>
        <returns><span data-ttu-id="2e8f4-116">一个对象，其属性与此 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 的那些属性相同。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-116">An object whose properties are identical to those of this <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e8f4-117">此方法由<xref:System.Messaging.MessageQueue>类使用，以便在同一时间接收多个消息 （例如，如果应用程序以异步方式接收）。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-117">This method is used by the <xref:System.Messaging.MessageQueue> class in order to receive multiple messages at the same time (for example, if the application is receiving asynchronously).</span></span> <span data-ttu-id="2e8f4-118">通常不需要在应用程序代码中调用此方法。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-118">You typically do not need to call this method in your application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="InitStreamedObject">
      <MemberSignature Language="C#" Value="public static void InitStreamedObject (object streamedObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitStreamedObject(object streamedObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitStreamedObject (streamedObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitStreamedObject(System::Object ^ streamedObject);" />
      <MemberSignature Language="F#" Value="static member InitStreamedObject : obj -&gt; unit" Usage="System.Messaging.ActiveXMessageFormatter.InitStreamedObject streamedObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamedObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="streamedObject"><span data-ttu-id="2e8f4-119">实现 <see langword="IPersistStreamInit" /> 的 OLE 对象。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-119">An OLE object that implements <see langword="IPersistStreamInit" />.</span></span></param>
        <summary><span data-ttu-id="2e8f4-120">提供帮助序列化 COM 对象的实用工具，这些对象实现 <see langword="IPersistStream" /> 并要求调用 <see langword="IPersistStreamInit" />。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-120">Provides a utility to help serialize COM objects that implement <see langword="IPersistStream" /> and require <see langword="IPersistStreamInit" /> to be called.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="activeXMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="2e8f4-121">要反序列化的 <see cref="T:System.Messaging.Message" />（采用 MSMQ ActiveX 控件格式）。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-121">The <see cref="T:System.Messaging.Message" />, in MSMQ ActiveX control format, to deserialize.</span></span></param>
        <summary><span data-ttu-id="2e8f4-122">从给定的消息中读取内容，并创建包含反序列化消息的对象。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-122">Reads the contents from the given message and creates an object that contains the deserialized message.</span></span></summary>
        <returns><span data-ttu-id="2e8f4-123">反序列化的消息。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-123">The deserialized message.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e8f4-124">如果消息的正文表示基元类型，该消息的<xref:System.Messaging.Message.BodyType%2A>属性必须是下表中的托管类型之一。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-124">If the body of the message represents a primitive type, the message's <xref:System.Messaging.Message.BodyType%2A> property must be one of the managed types in the following table.</span></span>  
  
|<span data-ttu-id="2e8f4-125">BodyType 值</span><span class="sxs-lookup"><span data-stu-id="2e8f4-125">BodyType value</span></span>|<span data-ttu-id="2e8f4-126">托管类型</span><span class="sxs-lookup"><span data-stu-id="2e8f4-126">Managed type</span></span>|  
|--------------------|------------------|  
|<span data-ttu-id="2e8f4-127">VT_LPSTR</span><span class="sxs-lookup"><span data-stu-id="2e8f4-127">VT_LPSTR</span></span>|<span data-ttu-id="2e8f4-128"><xref:System.Char> 数组 （反序列化使用 ASCII 编码）</span><span class="sxs-lookup"><span data-stu-id="2e8f4-128"><xref:System.Char> array (deserialized using ASCII encoding)</span></span>|  
|<span data-ttu-id="2e8f4-129">VT_BSTR, VT_LPWSTR</span><span class="sxs-lookup"><span data-stu-id="2e8f4-129">VT_BSTR, VT_LPWSTR</span></span>|<span data-ttu-id="2e8f4-130"><xref:System.String> （反序列化使用 Unicode 编码）</span><span class="sxs-lookup"><span data-stu-id="2e8f4-130"><xref:System.String> (deserialized using Unicode encoding)</span></span>|  
|<span data-ttu-id="2e8f4-131">VT_VECTOR &#124; VT_UI1</span><span class="sxs-lookup"><span data-stu-id="2e8f4-131">VT_VECTOR &#124; VT_UI1</span></span>|<span data-ttu-id="2e8f4-132"><xref:System.Byte> 数组</span><span class="sxs-lookup"><span data-stu-id="2e8f4-132"><xref:System.Byte> array</span></span>|  
|<span data-ttu-id="2e8f4-133">VT_BOOL</span><span class="sxs-lookup"><span data-stu-id="2e8f4-133">VT_BOOL</span></span>|<xref:System.Boolean>|  
|<span data-ttu-id="2e8f4-134">VT_CLSID</span><span class="sxs-lookup"><span data-stu-id="2e8f4-134">VT_CLSID</span></span>|<xref:System.Guid>|  
|<span data-ttu-id="2e8f4-135">VT_CY</span><span class="sxs-lookup"><span data-stu-id="2e8f4-135">VT_CY</span></span>|<xref:System.Decimal>|  
|<span data-ttu-id="2e8f4-136">VT_DATE</span><span class="sxs-lookup"><span data-stu-id="2e8f4-136">VT_DATE</span></span>|<xref:System.DateTime>|  
|<span data-ttu-id="2e8f4-137">VT_I1, VT_UI1</span><span class="sxs-lookup"><span data-stu-id="2e8f4-137">VT_I1, VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="2e8f4-138">VT_I2</span><span class="sxs-lookup"><span data-stu-id="2e8f4-138">VT_I2</span></span>|<xref:System.Int16>|  
|<span data-ttu-id="2e8f4-139">VT_UI2</span><span class="sxs-lookup"><span data-stu-id="2e8f4-139">VT_UI2</span></span>|<xref:System.UInt16>|  
|<span data-ttu-id="2e8f4-140">VT_I4</span><span class="sxs-lookup"><span data-stu-id="2e8f4-140">VT_I4</span></span>|<xref:System.Int32>|  
|<span data-ttu-id="2e8f4-141">VT_UI4</span><span class="sxs-lookup"><span data-stu-id="2e8f4-141">VT_UI4</span></span>|<xref:System.UInt32>|  
|<span data-ttu-id="2e8f4-142">VT_I8</span><span class="sxs-lookup"><span data-stu-id="2e8f4-142">VT_I8</span></span>|<xref:System.Int64>|  
|<span data-ttu-id="2e8f4-143">VT_UI8</span><span class="sxs-lookup"><span data-stu-id="2e8f4-143">VT_UI8</span></span>|<xref:System.UInt64>|  
|<span data-ttu-id="2e8f4-144">VT_R4</span><span class="sxs-lookup"><span data-stu-id="2e8f4-144">VT_R4</span></span>|<xref:System.Single>|  
|<span data-ttu-id="2e8f4-145">VT_R8</span><span class="sxs-lookup"><span data-stu-id="2e8f4-145">VT_R8</span></span>|<xref:System.Double>|  
|<span data-ttu-id="2e8f4-146">VT_NULL</span><span class="sxs-lookup"><span data-stu-id="2e8f4-146">VT_NULL</span></span>|`null`|  
|<span data-ttu-id="2e8f4-147">VT_STREAMED_OBJECT</span><span class="sxs-lookup"><span data-stu-id="2e8f4-147">VT_STREAMED_OBJECT</span></span>|<xref:System.Object>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e8f4-148">作为参数传递的 <paramref name="message" /> 的 <see cref="P:System.Messaging.Message.BodyType" /> 属性既不能被映射到基元类型，也不表示流对象。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-148">The <see cref="P:System.Messaging.Message.BodyType" /> property of the <paramref name="message" /> passed as a parameter cannot be mapped to a primitive type, nor does it represent a streamed object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2e8f4-149">消息体表示存储对象。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-149">The body represents a stored object.</span></span> <span data-ttu-id="2e8f4-150"><see cref="T:System.Messaging.ActiveXMessageFormatter" /> 不支持存储对象的反序列化。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-150">The <see cref="T:System.Messaging.ActiveXMessageFormatter" /> does not support deserialization of stored objects.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e8f4-151"><paramref name="message" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-151">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="activeXMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="2e8f4-152"><see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Body" /> 属性将包含序列化的对象。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-152">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Body" /> property will contain the serialized object.</span></span></param>
        <param name="obj"><span data-ttu-id="2e8f4-153">要序列化到消息体中的对象。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-153">The object to be serialized into the message body.</span></span></param>
        <summary><span data-ttu-id="2e8f4-154">将对象序列化为消息体。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-154">Serializes an object into the body of the message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e8f4-155">下表显示了托管类型之间的关系和<xref:System.Messaging.Message.BodyType%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-155">The following table shows the relationship between managed types and the <xref:System.Messaging.Message.BodyType%2A> property.</span></span> <span data-ttu-id="2e8f4-156">序列化的对象必须是其中一种托管类型或必须实现 OLE`IPersistStream`接口。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-156">The object that you serialize must be one of these managed types or must implement the OLE `IPersistStream` interface.</span></span>  
  
|<span data-ttu-id="2e8f4-157">BodyType 值</span><span class="sxs-lookup"><span data-stu-id="2e8f4-157">BodyType value</span></span>|<span data-ttu-id="2e8f4-158">托管类型</span><span class="sxs-lookup"><span data-stu-id="2e8f4-158">Managed type</span></span>|  
|--------------------|------------------|  
|<span data-ttu-id="2e8f4-159">VT_LPSTR</span><span class="sxs-lookup"><span data-stu-id="2e8f4-159">VT_LPSTR</span></span>|<xref:System.Char>|  
|<span data-ttu-id="2e8f4-160">VT_BSTR, VT_LPWSTR</span><span class="sxs-lookup"><span data-stu-id="2e8f4-160">VT_BSTR, VT_LPWSTR</span></span>|<xref:System.String>|  
|<span data-ttu-id="2e8f4-161">VT_VECTOR &#124; VT_UI1</span><span class="sxs-lookup"><span data-stu-id="2e8f4-161">VT_VECTOR &#124; VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="2e8f4-162">VT_BOOL</span><span class="sxs-lookup"><span data-stu-id="2e8f4-162">VT_BOOL</span></span>|<xref:System.Boolean>|  
|<span data-ttu-id="2e8f4-163">VT_CLSID</span><span class="sxs-lookup"><span data-stu-id="2e8f4-163">VT_CLSID</span></span>|<xref:System.Guid>|  
|<span data-ttu-id="2e8f4-164">VT_CY</span><span class="sxs-lookup"><span data-stu-id="2e8f4-164">VT_CY</span></span>|<xref:System.Decimal>|  
|<span data-ttu-id="2e8f4-165">VT_DATE</span><span class="sxs-lookup"><span data-stu-id="2e8f4-165">VT_DATE</span></span>|<xref:System.DateTime>|  
|<span data-ttu-id="2e8f4-166">VT_I1, VT_UI1</span><span class="sxs-lookup"><span data-stu-id="2e8f4-166">VT_I1, VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="2e8f4-167">VT_I2</span><span class="sxs-lookup"><span data-stu-id="2e8f4-167">VT_I2</span></span>|<xref:System.Int16>|  
|<span data-ttu-id="2e8f4-168">VT_UI2</span><span class="sxs-lookup"><span data-stu-id="2e8f4-168">VT_UI2</span></span>|<xref:System.UInt16>|  
|<span data-ttu-id="2e8f4-169">VT_I4</span><span class="sxs-lookup"><span data-stu-id="2e8f4-169">VT_I4</span></span>|<xref:System.Int32>|  
|<span data-ttu-id="2e8f4-170">VT_UI4</span><span class="sxs-lookup"><span data-stu-id="2e8f4-170">VT_UI4</span></span>|<xref:System.UInt32>|  
|<span data-ttu-id="2e8f4-171">VT_I8</span><span class="sxs-lookup"><span data-stu-id="2e8f4-171">VT_I8</span></span>|<xref:System.Int64>|  
|<span data-ttu-id="2e8f4-172">VT_UI8</span><span class="sxs-lookup"><span data-stu-id="2e8f4-172">VT_UI8</span></span>|<xref:System.UInt64>|  
|<span data-ttu-id="2e8f4-173">VT_R4</span><span class="sxs-lookup"><span data-stu-id="2e8f4-173">VT_R4</span></span>|<xref:System.Single>|  
|<span data-ttu-id="2e8f4-174">VT_R8</span><span class="sxs-lookup"><span data-stu-id="2e8f4-174">VT_R8</span></span>|<xref:System.Double>|  
|<span data-ttu-id="2e8f4-175">VT_NULL</span><span class="sxs-lookup"><span data-stu-id="2e8f4-175">VT_NULL</span></span>|`null`|  
|<span data-ttu-id="2e8f4-176">VT_STREAMED_OBJECT</span><span class="sxs-lookup"><span data-stu-id="2e8f4-176">VT_STREAMED_OBJECT</span></span>|<span data-ttu-id="2e8f4-177">`IPersistStream` (OLE) <xref:System.Object></span><span class="sxs-lookup"><span data-stu-id="2e8f4-177">`IPersistStream` (OLE) <xref:System.Object></span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e8f4-178">要序列化的对象既不是基元类型，也不是实现 OLE <see langword="IPersistStream" /> 接口的流对象。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-178">The object to serialize is neither a primitive nor a streamed object that implements the OLE <see langword="IPersistStream" /> interface.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e8f4-179"><paramref name="message" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2e8f4-179">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b59956e2fc95a3f161b2f47961286704ce56662a" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70358660" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f31ea-101">提供用于管理线程工作项队列的服务。</span><span class="sxs-lookup"><span data-stu-id="f31ea-101">Provides services for managing the queue of work items for a thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-102"><xref:System.Windows.Threading.Dispatcher>维护特定线程的工作项的优先顺序队列。</span><span class="sxs-lookup"><span data-stu-id="f31ea-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="f31ea-103">在线程上创建时，即使<xref:System.Windows.Threading.Dispatcher>关闭，它也将变为可与线程关联的唯一<xref:System.Windows.Threading.Dispatcher>。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="f31ea-104">如果尝试获取当前线程的<xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> ， <xref:System.Windows.Threading.Dispatcher>并且没有与线程关联，则将创建一个<xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="f31ea-105">当<xref:System.Windows.Threading.Dispatcher> 你<xref:System.Windows.Threading.DispatcherObject>创建时，还会创建一个。</span><span class="sxs-lookup"><span data-stu-id="f31ea-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="f31ea-106">如果<xref:System.Windows.Threading.Dispatcher>在后台线程上创建，请确保在退出该线程前关闭调度程序。</span><span class="sxs-lookup"><span data-stu-id="f31ea-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="f31ea-107"><xref:System.Windows.Threading.Dispatcher>如果关闭，则无法重启它。</span><span class="sxs-lookup"><span data-stu-id="f31ea-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="f31ea-108">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中<xref:System.Windows.Threading.DispatcherObject> ，<xref:System.Windows.Threading.Dispatcher>只能由与相关联的来访问。</span><span class="sxs-lookup"><span data-stu-id="f31ea-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="f31ea-109">例如，后台线程无法<xref:System.Windows.Controls.Button> <xref:System.Windows.Threading.Dispatcher>在[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]线程上更新与关联的的内容。</span><span class="sxs-lookup"><span data-stu-id="f31ea-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="f31ea-110">为了让后台线程<xref:System.Windows.Controls.ContentControl.Content%2A>访问的<xref:System.Windows.Controls.Button>属性，后台线程必须将工作委托[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]给与线程关联的<xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="f31ea-111">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f31ea-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-113">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-114">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.DispatcherOperation>对已关闭的调用，则返回的状态属性设置为<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="f31ea-115">除之外<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>的所有方法均为自由线程。</span><span class="sxs-lookup"><span data-stu-id="f31ea-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="f31ea-116">派生自<xref:System.Windows.Threading.DispatcherObject>的对象具有线程关联。</span><span class="sxs-lookup"><span data-stu-id="f31ea-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="f31ea-117">从<xref:System.Windows.Freezable>派生的对象在被冻结时是自由线程的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="f31ea-118">有关详细信息，请参阅 [Freezable 对象概述](~/docs/framework/wpf/advanced/freezable-objects-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="f31ea-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f31ea-119">下面的示例演示如何在<xref:System.Windows.Threading.Dispatcher>上放置操作。</span><span class="sxs-lookup"><span data-stu-id="f31ea-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="f31ea-120">有关此示例的完整源代码，请参阅[具有长时间运行计算的单线程应用程序示例](https://go.microsoft.com/fwlink/?LinkID=160038)。</span><span class="sxs-lookup"><span data-stu-id="f31ea-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="f31ea-121">首先，创建了不接受任何参数的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="f31ea-122">接下来<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> ，调用。</span><span class="sxs-lookup"><span data-stu-id="f31ea-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="f31ea-123">此调用<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>使用两个参数：设置为<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>的优先级，以及通过委托`NextPrimeDelegate`的实例传入的回调。</span><span class="sxs-lookup"><span data-stu-id="f31ea-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="f31ea-124">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="f31ea-124">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f31ea-125">在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-125">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-126">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-126">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f31ea-127">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-127">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f31ea-128">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-128">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f31ea-129">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-129">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f31ea-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-131">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-131">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f31ea-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返回一个<xref:System.Windows.Threading.DispatcherOperation>对象，该对象可用于在委托位于事件队列中时与委托交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="f31ea-134"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返回的<xref:System.Windows.Threading.DispatcherOperation>对象可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="f31ea-134">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f31ea-135"><xref:System.Windows.Threading.DispatcherPriority>更改委托的，因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="f31ea-135">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-136">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-136">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-137">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="f31ea-137">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f31ea-138">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="f31ea-138">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f31ea-139">如果在<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>同一<xref:System.Windows.Threading.DispatcherPriority>位置进行多个调用，则它们将按调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="f31ea-139">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="f31ea-140">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.DispatcherOperation>对已关闭的调用，则返回的状态属性设置为<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-140">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f31ea-141">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-141">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="f31ea-142">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="f31ea-142">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f31ea-143">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-143">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f31ea-144">用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程的指定参数异步执行指定委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-144">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="f31ea-145">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-145">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-146"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返回的<xref:System.Windows.Threading.DispatcherOperation>对象可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="f31ea-146">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f31ea-147"><xref:System.Windows.Threading.DispatcherPriority>更改委托的，因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="f31ea-147">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-148">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-148">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-149">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="f31ea-149">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f31ea-150">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="f31ea-150">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f31ea-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f31ea-152">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-152">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f31ea-153">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-153">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f31ea-154">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-154">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f31ea-155">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-155">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f31ea-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f31ea-157">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-157">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-158">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.DispatcherOperation>对已关闭的调用，则返回的状态属性设置为<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-158">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-159">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-159">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f31ea-160">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-160">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="f31ea-161">按指定的优先级在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-161">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-162">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-162">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-163">如果在<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>同一<xref:System.Windows.Threading.DispatcherPriority>位置进行多个调用，则它们将按调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="f31ea-163">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="f31ea-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返回一个<xref:System.Windows.Threading.DispatcherOperation>对象，该对象可用于在委托位于事件队列中时与委托交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="f31ea-165"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返回的<xref:System.Windows.Threading.DispatcherOperation>对象可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="f31ea-165">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f31ea-166"><xref:System.Windows.Threading.DispatcherPriority>更改委托的，因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="f31ea-166">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-167">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-167">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-168">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="f31ea-168">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f31ea-169">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="f31ea-169">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f31ea-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f31ea-171">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-171">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f31ea-172">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-172">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f31ea-173">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-173">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f31ea-174">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-174">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f31ea-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-176">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-176">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-177">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.DispatcherOperation>对已关闭的调用，则返回的状态属性设置为<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-177">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f31ea-178">下面的示例演示如何在<xref:System.Windows.Threading.Dispatcher>上放置操作。</span><span class="sxs-lookup"><span data-stu-id="f31ea-178">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="f31ea-179">有关此示例的完整源代码，请参阅[具有长时间运行计算的单线程应用程序示例](https://go.microsoft.com/fwlink/?LinkID=160038)。</span><span class="sxs-lookup"><span data-stu-id="f31ea-179">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="f31ea-180">首先，创建了不接受任何参数的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-180">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="f31ea-181">接下来<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> ，调用。</span><span class="sxs-lookup"><span data-stu-id="f31ea-181">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="f31ea-182">由于每<xref:System.Windows.Threading.DispatcherObject>个都有一个属性， <xref:System.Windows.Threading.Dispatcher>该属性返回与之关联的<xref:System.Windows.Threading.Dispatcher> ，因此，所需<xref:System.Windows.Threading.DispatcherObject>的通过查询来获得<xref:System.Windows.Controls.Button> ， `startStopButton`在此示例中为一个名为的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-182">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="f31ea-183">调用<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29>将使用两个参数：设置为<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>的优先级，以及通过委托`NextPrimeDelegate`的实例传入的回调。</span><span class="sxs-lookup"><span data-stu-id="f31ea-183">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f31ea-184"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-184"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f31ea-185"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-185"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="f31ea-186">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="f31ea-186">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f31ea-187">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-187">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-188">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-188">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="f31ea-189">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="f31ea-189">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f31ea-190">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-190">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f31ea-191">用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上的指定参数，按指定优先级异步执行指定委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-191">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="f31ea-192">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-192">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-193"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返回的<xref:System.Windows.Threading.DispatcherOperation>对象可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="f31ea-193">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f31ea-194"><xref:System.Windows.Threading.DispatcherPriority>更改委托的，因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="f31ea-194">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-195">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-195">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-196">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="f31ea-196">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f31ea-197">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="f31ea-197">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f31ea-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f31ea-199">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-199">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f31ea-200">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-200">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f31ea-201">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-201">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f31ea-202">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-202">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f31ea-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f31ea-204">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-204">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-205">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.DispatcherOperation>对已关闭的调用，则返回的状态属性设置为<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-205">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-206">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-206">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f31ea-207">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-207">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f31ea-208">作为参数传递到指定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-208">The object to pass as an argument to the specified method.</span></span></param>
        <summary><span data-ttu-id="f31ea-209">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-209">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-210">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-210">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-211">`Arg`如果不`null`需要参数，则可以为。</span><span class="sxs-lookup"><span data-stu-id="f31ea-211">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="f31ea-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返回一个<xref:System.Windows.Threading.DispatcherOperation>对象，该对象可用于在委托位于事件队列中时与委托交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="f31ea-213"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返回的<xref:System.Windows.Threading.DispatcherOperation>对象可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="f31ea-213">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f31ea-214"><xref:System.Windows.Threading.DispatcherPriority>更改委托的，因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="f31ea-214">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-215">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-215">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-216">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="f31ea-216">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f31ea-217">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="f31ea-217">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f31ea-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f31ea-219">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-219">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f31ea-220">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-220">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f31ea-221">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-221">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f31ea-222">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-222">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f31ea-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-224">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-224">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-225">如果在<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>同一<xref:System.Windows.Threading.DispatcherPriority>位置进行多个调用，则它们将按调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="f31ea-225">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="f31ea-226">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.DispatcherOperation>对已关闭的调用，则返回的状态属性设置为<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-226">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f31ea-227">下面的示例演示如何在<xref:System.Windows.Threading.Dispatcher>上放置操作。</span><span class="sxs-lookup"><span data-stu-id="f31ea-227">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="f31ea-228">首先，创建一个接受一个参数（在本例中为字符串）的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-228">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="f31ea-229">接下来<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> ，调用。</span><span class="sxs-lookup"><span data-stu-id="f31ea-229">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="f31ea-230">由于每<xref:System.Windows.Threading.DispatcherObject>个都有一个属性， <xref:System.Windows.Threading.Dispatcher>该属性返回与之关联的<xref:System.Windows.Threading.Dispatcher> ，因此，所需<xref:System.Windows.Threading.DispatcherObject>的通过查询来获得<xref:System.Windows.Controls.Grid> ， `tomorrowsWeather`在此示例中为一个名为的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-230">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="f31ea-231">对的调用<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29>采用三个参数：优先级设置为<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; 通过委托`OneArgDelegate`的实例传入的回调; 以及一个名`weather`为的字符串，它是回调的参数。</span><span class="sxs-lookup"><span data-stu-id="f31ea-231">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f31ea-232"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-232"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f31ea-233"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-233"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="f31ea-234">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="f31ea-234">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-235">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-235">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f31ea-236">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-236">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f31ea-237">作为参数传递到指定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-237">The object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="f31ea-238">作为指定方法的参数传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="f31ea-238">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="f31ea-239">按指定的优先级并使用指定的参数数组在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-239">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-240">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-240">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-241">如果`arg`不需要任何`null`参数，则该参数可以为。</span><span class="sxs-lookup"><span data-stu-id="f31ea-241">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="f31ea-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返回一个<xref:System.Windows.Threading.DispatcherOperation>对象，该对象可用于在委托位于事件队列中时与委托交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="f31ea-243"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返回的<xref:System.Windows.Threading.DispatcherOperation>对象可通过多种方式用于与指定的委托交互，例如：</span><span class="sxs-lookup"><span data-stu-id="f31ea-243">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f31ea-244"><xref:System.Windows.Threading.DispatcherPriority>更改委托的，因为它在事件队列中挂起执行。</span><span class="sxs-lookup"><span data-stu-id="f31ea-244">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-245">从事件队列中删除委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-245">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f31ea-246">正在等待委托返回。</span><span class="sxs-lookup"><span data-stu-id="f31ea-246">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f31ea-247">获取委托在执行后返回的值。</span><span class="sxs-lookup"><span data-stu-id="f31ea-247">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f31ea-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>是异步的;因此，控件在调用后立即返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f31ea-249">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-249">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f31ea-250">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-250">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f31ea-251">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-251">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f31ea-252">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-252">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f31ea-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-254">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-254">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-255">如果在<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>同一<xref:System.Windows.Threading.DispatcherPriority>位置进行多个调用，则它们将按调用的顺序执行。</span><span class="sxs-lookup"><span data-stu-id="f31ea-255">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="f31ea-256">如果<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> <xref:System.Windows.Threading.DispatcherOperation>对已关闭的调用，则返回的状态属性设置为<xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-256">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f31ea-257"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-257"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f31ea-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="f31ea-259">具有长时间运行计算的单线程应用程序示例</span><span class="sxs-lookup"><span data-stu-id="f31ea-259">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-260">将按其开始关闭调度程序的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-260">The priority at which to begin shutting down the dispatcher.</span></span></param>
        <summary><span data-ttu-id="f31ea-261">异步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭。</span><span class="sxs-lookup"><span data-stu-id="f31ea-261">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A>要求无限制的 UI 权限。</span><span class="sxs-lookup"><span data-stu-id="f31ea-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="f31ea-263">当开始关闭时<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> ，将引发事件，并<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>将设置为`true`。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-263">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-264">在<xref:System.Windows.Threading.Dispatcher>事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="f31ea-264">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f31ea-265">当调度程序完成关闭时， <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>将引发事件， <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>并将属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-265">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-266">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="f31ea-266">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f31ea-267">用于关闭调度程序。</span><span class="sxs-lookup"><span data-stu-id="f31ea-267">for shutting down the dispatcher.</span></span>  <span data-ttu-id="f31ea-268">关联的枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f31ea-268">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f31ea-269">确定调用线程是否为与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</span><span class="sxs-lookup"><span data-stu-id="f31ea-269">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <returns><span data-ttu-id="f31ea-270">如果调用线程是与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-270"><see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-271"><xref:System.Windows.Threading.Dispatcher> 只有在上创建<xref:System.Windows.Threading.DispatcherObject>的可以访问对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-271">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="f31ea-272">使用<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>从其他线程访问对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-272">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="f31ea-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>可以从任何线程调用。</span><span class="sxs-lookup"><span data-stu-id="f31ea-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="f31ea-274">与<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> <xref:System.Windows.Threading.Dispatcher>之间的差异将返回一个布尔值，该值指示调用线程是否有权访问<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>并引发异常。 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A></span><span class="sxs-lookup"><span data-stu-id="f31ea-274">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f31ea-275">下面的示例使用<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>来确定线程是否有权访问。 <xref:System.Windows.Controls.Button></span><span class="sxs-lookup"><span data-stu-id="f31ea-275">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="f31ea-276">调用与<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 关联的的方法来验证对<xref:System.Windows.Controls.Button>线程的访问。</span><span class="sxs-lookup"><span data-stu-id="f31ea-276">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="f31ea-277">如果调用<xref:System.Windows.Threading.Dispatcher>线程具有对的访问权限<xref:System.Windows.Controls.Button> ，则将通过<xref:System.Windows.Controls.Button>访问的成员进行更新; <xref:System.Windows.Controls.Button>否则，会将接受作为参数的委托置于上<xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="f31ea-277">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="f31ea-278">将委托更新的工作<xref:System.Windows.Controls.Button> <xref:System.Windows.Threading.Dispatcher> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-278">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f31ea-279">获取当前正在执行的线程的 <see cref="T:System.Windows.Threading.Dispatcher" />，并在该线程没有关联的调度程序时创建一个新的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-279">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span></span></summary>
        <value><span data-ttu-id="f31ea-280">与当前线程关联的调度程序。</span><span class="sxs-lookup"><span data-stu-id="f31ea-280">The dispatcher associated with the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-281">如果与当前线程不关联，则将创建一个新<xref:System.Windows.Threading.Dispatcher>的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-281">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="f31ea-282">这不同于使用 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 方法的情况。</span><span class="sxs-lookup"><span data-stu-id="f31ea-282">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="f31ea-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A>如果没有`null`与指定线程关联的调度程序，将返回。</span><span class="sxs-lookup"><span data-stu-id="f31ea-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f31ea-284">禁用对 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列的处理。</span><span class="sxs-lookup"><span data-stu-id="f31ea-284">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></summary>
        <returns><span data-ttu-id="f31ea-285">一个用于重新启用调度程序处理的结构。</span><span class="sxs-lookup"><span data-stu-id="f31ea-285">A structure used to re-enable dispatcher processing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-286">禁用调度程序处理是一种用于消除不相关的重入机会的高级方法。</span><span class="sxs-lookup"><span data-stu-id="f31ea-286">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="f31ea-287">禁用处理的影响如下：</span><span class="sxs-lookup"><span data-stu-id="f31ea-287">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="f31ea-288">CLR 锁不会在内部抽取消息。</span><span class="sxs-lookup"><span data-stu-id="f31ea-288">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="f31ea-289"><xref:System.Windows.Threading.DispatcherFrame>不允许推送对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-289"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="f31ea-290">不允许消息处理。</span><span class="sxs-lookup"><span data-stu-id="f31ea-290">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="f31ea-291">调用<xref:System.Windows.Threading.DispatcherProcessingDisabled>时返回<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>的结构可用于重新启用调度程序处理。</span><span class="sxs-lookup"><span data-stu-id="f31ea-291">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="f31ea-292">对<xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>结构调用<xref:System.Windows.Threading.DispatcherProcessingDisabled>将重新启用处理。</span><span class="sxs-lookup"><span data-stu-id="f31ea-292">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="f31ea-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>只能在与关联的线程<xref:System.Windows.Threading.Dispatcher>上调用。</span><span class="sxs-lookup"><span data-stu-id="f31ea-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f31ea-294">下面的示例演示如何禁用调度程序处理并重新启用调度程序处理。</span><span class="sxs-lookup"><span data-stu-id="f31ea-294">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="f31ea-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>在**using**语句中调用。</span><span class="sxs-lookup"><span data-stu-id="f31ea-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="f31ea-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>返回一个<xref:System.Windows.Threading.DispatcherProcessingDisabled>结构，该结构用作在**使用**块完成时要释放的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="f31ea-297">在<xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> 结构<xref:System.Windows.Threading.DispatcherProcessingDisabled>上调用时，将重新启用调度程序处理。</span><span class="sxs-lookup"><span data-stu-id="f31ea-297">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f31ea-298">请求退出所有帧，包括嵌套的帧。</span><span class="sxs-lookup"><span data-stu-id="f31ea-298">Requests that all frames exit, including nested frames.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f31ea-299">用于调用此方法。</span><span class="sxs-lookup"><span data-stu-id="f31ea-299">for calling this method.</span></span> <span data-ttu-id="f31ea-300">关联的枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f31ea-300">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><span data-ttu-id="f31ea-301">要从中获取 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程。</span><span class="sxs-lookup"><span data-stu-id="f31ea-301">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span></span></param>
        <summary><span data-ttu-id="f31ea-302">获取指定线程的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-302">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span></span></summary>
        <returns><span data-ttu-id="f31ea-303"><paramref name="thread" /> 的调度程序。</span><span class="sxs-lookup"><span data-stu-id="f31ea-303">The dispatcher for <paramref name="thread" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-304">如果调度程序不可用于指定的线程， `null`则将返回。</span><span class="sxs-lookup"><span data-stu-id="f31ea-304">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="f31ea-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A>不会<xref:System.Windows.Threading.Dispatcher>在不具有的<xref:System.Windows.Threading.Dispatcher>线程上创建。</span><span class="sxs-lookup"><span data-stu-id="f31ea-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="f31ea-306">尝试使用<xref:System.Windows.Threading.Dispatcher> 属性<xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> <xref:System.Windows.Threading.Dispatcher> 获取<xref:System.Windows.Threading.Dispatcher>时，将在尚未具有的线程上创建新的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-306">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f31ea-307">确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否已经完成关闭。</span><span class="sxs-lookup"><span data-stu-id="f31ea-307">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span></span></summary>
        <value><span data-ttu-id="f31ea-308">如果调度程序已经完成关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-308"><see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-309">当开始关闭时<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> ，将引发事件，并<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>将设置为`true`。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-309">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-310">在<xref:System.Windows.Threading.Dispatcher>事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="f31ea-310">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f31ea-311">当调度程序完成关闭时， <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>将引发事件， <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>并将属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-311">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-312">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="f31ea-312">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f31ea-313">确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否正在关闭。</span><span class="sxs-lookup"><span data-stu-id="f31ea-313">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span></span></summary>
        <value><span data-ttu-id="f31ea-314">如果 <see cref="T:System.Windows.Threading.Dispatcher" /> 已经开始关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-314"><see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-315">当开始关闭时<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> ，将引发事件，并<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>将设置为`true`。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-315">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-316">在<xref:System.Windows.Threading.Dispatcher>事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="f31ea-316">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f31ea-317">当调度程序完成关闭时， <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>将引发事件， <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>并将属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-317">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-318">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="f31ea-318">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f31ea-319">获取提供有关 <see cref="T:System.Windows.Threading.Dispatcher" /> 的其他事件信息的挂钩集合。</span><span class="sxs-lookup"><span data-stu-id="f31ea-319">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <value><span data-ttu-id="f31ea-320">与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的挂钩。</span><span class="sxs-lookup"><span data-stu-id="f31ea-320">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-321">类提供有关的<xref:System.Windows.Threading.Dispatcher>其他事件信息<xref:System.Windows.Threading.Dispatcher> ，例如当处于非活动状态或操作成功时。 <xref:System.Windows.Threading.DispatcherHooks></span><span class="sxs-lookup"><span data-stu-id="f31ea-321">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f31ea-322">获取此属性的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-322">for getting this property.</span></span>  <span data-ttu-id="f31ea-323">关联的枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f31ea-323">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f31ea-324">在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-324">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-325">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-325">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f31ea-326">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-326">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f31ea-327">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-327">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f31ea-328">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-328">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f31ea-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-330">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-330">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f31ea-332">下面的示例使用<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>将委托放到中<xref:System.Windows.Threading.DispatcherPriority.Normal>的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-332">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f31ea-333">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-333">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="f31ea-334">在与 <see cref="T:System.Action" /> 关联的线程上同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-334">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f31ea-335">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-335">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-336">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-336">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="f31ea-337">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-337">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f31ea-338">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-338">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="f31ea-339">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="f31ea-339">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f31ea-340">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-340">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f31ea-341">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数同步执行指定委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-341">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-342">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-342">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-343">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-343">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f31ea-344">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-344">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f31ea-345">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-345">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f31ea-346">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-346">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f31ea-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f31ea-348">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-348">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-350">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-350">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f31ea-351">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-351">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="f31ea-352">按指定的优先级在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-352">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-353">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-353">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-354">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-354">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f31ea-355">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-355">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f31ea-356">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-356">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f31ea-357">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-357">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f31ea-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-359">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-359">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f31ea-361">下面的示例使用<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>将委托放到中<xref:System.Windows.Threading.DispatcherPriority.Normal>的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-361">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f31ea-362"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-362"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f31ea-363"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-363"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f31ea-364"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-364"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f31ea-365">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-365">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-366">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-366">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f31ea-367">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-367">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="f31ea-368">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-368">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f31ea-369">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-369">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="f31ea-370">等待操作完成的最长时间。</span><span class="sxs-lookup"><span data-stu-id="f31ea-370">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="args"><span data-ttu-id="f31ea-371">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="f31ea-371">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f31ea-372">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-372">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f31ea-373">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-373">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-374">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-374">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-375">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-375">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f31ea-376">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-376">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f31ea-377">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-377">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f31ea-378">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-378">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f31ea-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f31ea-380">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-380">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f31ea-382">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-382">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-383">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-383">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="f31ea-384">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="f31ea-384">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f31ea-385">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-385">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f31ea-386">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-386">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-387">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-387">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-388">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-388">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f31ea-389">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-389">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f31ea-390">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-390">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f31ea-391">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-391">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f31ea-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f31ea-393">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-393">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-395">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-395">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f31ea-396">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-396">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f31ea-397">作为参数传递到给定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-397">An object to pass as an argument to the given method.</span></span></param>
        <summary><span data-ttu-id="f31ea-398">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-398">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-399">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-399">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-400">`Arg`如果不`null`需要参数，则可以为</span><span class="sxs-lookup"><span data-stu-id="f31ea-400">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="f31ea-401">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-401">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f31ea-402">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-402">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f31ea-403">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-403">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f31ea-404">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-404">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f31ea-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-406">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-406">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f31ea-408"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-408"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f31ea-409"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-409"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f31ea-410"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-410"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-411">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-411">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="f31ea-412">用于等待操作完成的最长时间。</span><span class="sxs-lookup"><span data-stu-id="f31ea-412">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="f31ea-413">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-413">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="f31ea-414">按指定的优先级并使用指定的超时值在创建 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-414">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span></span></summary>
        <returns><span data-ttu-id="f31ea-415">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-415">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-416">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-416">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f31ea-417">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-417">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f31ea-418">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-418">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f31ea-419">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-419">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f31ea-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-421">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-421">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f31ea-423">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-423">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-424">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-424">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f31ea-425">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-425">An object that indicates whether to cancel the action.</span></span></param>
        <param name="timeout"><span data-ttu-id="f31ea-426">等待操作启动的最长时间。</span><span class="sxs-lookup"><span data-stu-id="f31ea-426">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="f31ea-427">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-427">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f31ea-428">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-428">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="f31ea-429">等待操作完成的最长时间。</span><span class="sxs-lookup"><span data-stu-id="f31ea-429">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-430">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-430">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="f31ea-431">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="f31ea-431">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f31ea-432">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-432">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f31ea-433">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-433">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-434">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-434">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-435">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-435">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f31ea-436">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-436">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f31ea-437">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-437">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f31ea-438">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-438">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f31ea-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f31ea-440">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-440">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-442">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-442">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f31ea-443">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-443">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f31ea-444">作为参数传递到给定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-444">An object to pass as an argument to the given method.</span></span></param>
        <param name="args"><span data-ttu-id="f31ea-445">作为给定方法的自变量传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="f31ea-445">An array of objects to pass as arguments to the given method.</span></span></param>
        <summary><span data-ttu-id="f31ea-446">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-446">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-447">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-447">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-448">`Arg`如果不`null`需要参数，则可以为</span><span class="sxs-lookup"><span data-stu-id="f31ea-448">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="f31ea-449">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-449">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f31ea-450">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-450">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f31ea-451">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-451">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f31ea-452">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-452">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f31ea-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-454">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-454">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f31ea-456"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-456"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f31ea-457"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-457"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f31ea-458"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-458"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-459">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-459">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="f31ea-460">用于等待操作完成的最长时间。</span><span class="sxs-lookup"><span data-stu-id="f31ea-460">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="f31ea-461">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-461">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f31ea-462">作为参数传递到给定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-462">An object to pass as an argument to the given method.</span></span> <span data-ttu-id="f31ea-463">如果不需要自变量，则可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-463">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="f31ea-464">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-464">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-465">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-465">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-466">`Arg`如果不`null`需要参数，则可以为</span><span class="sxs-lookup"><span data-stu-id="f31ea-466">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="f31ea-467">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-467">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f31ea-468">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-468">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f31ea-469">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-469">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f31ea-470">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-470">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f31ea-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-472">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-472">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f31ea-474"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-474"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f31ea-475"><paramref name="priority" /> 不是有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-475"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f31ea-476"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-476"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-477">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</span><span class="sxs-lookup"><span data-stu-id="f31ea-477">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="f31ea-478">用于等待操作完成的最长时间。</span><span class="sxs-lookup"><span data-stu-id="f31ea-478">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="f31ea-479">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-479">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f31ea-480">作为参数传递到指定方法中的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-480">An object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="f31ea-481">作为指定方法的参数传递的对象数组。</span><span class="sxs-lookup"><span data-stu-id="f31ea-481">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="f31ea-482">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-482">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-483">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-483">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-484">`Arg`如果不`null`需要参数，则可以为。</span><span class="sxs-lookup"><span data-stu-id="f31ea-484">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="f31ea-485">在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，只有创建的<xref:System.Windows.Threading.DispatcherObject>线程才能访问该对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-485">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f31ea-486">例如，从主 ui 线程旋转的后台线程无法更新在 ui 线程上创建的的内容<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-486">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f31ea-487">为了让后台线程访问的<xref:System.Windows.Controls.Button>内容属性，后台线程必须将工作委托给与 UI 线程关联的。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-487">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f31ea-488">这可以<xref:System.Windows.Threading.Dispatcher.Invoke%2A>通过使用或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>来完成。</span><span class="sxs-lookup"><span data-stu-id="f31ea-488">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f31ea-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步的<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ，并且是异步的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f31ea-490">操作将添加到指定<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority>的的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-490">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f31ea-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A>是同步操作;因此，在回调返回后，控件才会返回到调用对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f31ea-492"><paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-492"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f31ea-493"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-493"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f31ea-494"><paramref name="method" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-494"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f31ea-495">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="f31ea-495">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f31ea-496">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-496">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="f31ea-497">在与 <see cref="T:System.Func`1" /> 关联的线程上同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-497">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-498">返回的值`callback`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-498">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f31ea-499">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="f31ea-499">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f31ea-500">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-500">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-501">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-501">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="f31ea-502">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-502">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-503">返回的值`callback`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-503">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f31ea-504">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="f31ea-504">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f31ea-505">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-505">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-506">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-506">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f31ea-507">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-507">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="f31ea-508">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-508">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-509">返回的值`callback`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-509">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f31ea-510">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="f31ea-510">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f31ea-511">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-511">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-512">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-512">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f31ea-513">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-513">An object that indicates whether to cancel the operation.</span></span></param>
        <param name="timeout"><span data-ttu-id="f31ea-514">等待操作启动的最长时间。</span><span class="sxs-lookup"><span data-stu-id="f31ea-514">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="f31ea-515">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-515">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-516">返回的值`callback`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-516">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f31ea-517">在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-517">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f31ea-518">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-518">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="f31ea-519">在与 <see cref="T:System.Action" /> 关联的线程上异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-519">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-520">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f31ea-521">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-521">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-522">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="f31ea-523">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-523">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-524">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-524">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f31ea-525">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-525">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-526">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-526">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f31ea-527">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-527">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="f31ea-528">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-528">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-529">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f31ea-530">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="f31ea-530">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f31ea-531">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-531">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="f31ea-532">在与 <see cref="T:System.Func`1" /> 关联的线程上异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-532">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-533">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-533">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f31ea-534">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="f31ea-534">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f31ea-535">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-535">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-536">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-536">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="f31ea-537">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-537">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-538">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-538">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f31ea-539">指定委托的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="f31ea-539">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f31ea-540">要通过调度程序调用的委托。</span><span class="sxs-lookup"><span data-stu-id="f31ea-540">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f31ea-541">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-541">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f31ea-542">指示是否取消操作的对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-542">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="f31ea-543">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-543">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f31ea-544">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</span><span class="sxs-lookup"><span data-stu-id="f31ea-544">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f31ea-545">同步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭过程。</span><span class="sxs-lookup"><span data-stu-id="f31ea-545">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A>要求无限制的 UI 权限。</span><span class="sxs-lookup"><span data-stu-id="f31ea-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="f31ea-547">当开始关闭时<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> ，将引发事件，并<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>将设置为`true`。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-547">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-548">在<xref:System.Windows.Threading.Dispatcher>事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="f31ea-548">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f31ea-549">当调度程序完成关闭时， <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>将引发事件， <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>并将属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-549">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-550">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="f31ea-550">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f31ea-551">用于关闭调度程序。</span><span class="sxs-lookup"><span data-stu-id="f31ea-551">for shutting down the dispatcher.</span></span>  <span data-ttu-id="f31ea-552">关联的枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f31ea-552">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame"><span data-ttu-id="f31ea-553">调度程序要处理的帧。</span><span class="sxs-lookup"><span data-stu-id="f31ea-553">The frame for the dispatcher to process.</span></span></param>
        <summary><span data-ttu-id="f31ea-554">进入执行循环。</span><span class="sxs-lookup"><span data-stu-id="f31ea-554">Enters an execute loop.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-555"><xref:System.Windows.Threading.DispatcherFrame>表示处理挂起工作项的循环。</span><span class="sxs-lookup"><span data-stu-id="f31ea-555">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="f31ea-556">调度程序在循环中处理工作项队列。</span><span class="sxs-lookup"><span data-stu-id="f31ea-556">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="f31ea-557">循环称为 "帧"。</span><span class="sxs-lookup"><span data-stu-id="f31ea-557">The loop is referred to as a frame.</span></span>  <span data-ttu-id="f31ea-558">初始循环通常由应用程序通过调用<xref:System.Windows.Threading.Dispatcher.Run%2A>来启动。</span><span class="sxs-lookup"><span data-stu-id="f31ea-558">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="f31ea-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A>输入由参数`frame`表示的循环。</span><span class="sxs-lookup"><span data-stu-id="f31ea-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="f31ea-560">循环的每次迭代时， <xref:System.Windows.Threading.Dispatcher>将<xref:System.Windows.Threading.DispatcherFrame.Continue%2A>检查<xref:System.Windows.Threading.DispatcherFrame>类的属性以确定循环应继续还是应停止。</span><span class="sxs-lookup"><span data-stu-id="f31ea-560">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="f31ea-561"><xref:System.Windows.Threading.DispatcherFrame>允许显式设置<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> <xref:System.Windows.Threading.Dispatcher>属性，并且该属性遵循中<xref:System.Windows.Threading.DispatcherFrame.Continue%2A>的属性。</span><span class="sxs-lookup"><span data-stu-id="f31ea-561"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="f31ea-562">这意味着当<xref:System.Windows.Threading.Dispatcher>开始关闭时，使用默认<xref:System.Windows.Threading.DispatcherFrame>实现的帧将退出，这将使所有嵌套帧退出。</span><span class="sxs-lookup"><span data-stu-id="f31ea-562">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f31ea-563">下面的示例演示如何使用<xref:System.Windows.Threading.DispatcherFrame>来实现与<xref:System.Windows.Forms.Application.DoEvents%2A>方法类似的结果[!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-563">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f31ea-564"><paramref name="frame" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-564"><paramref name="frame" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f31ea-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> 为 <see langword="true" /></span><span class="sxs-lookup"><span data-stu-id="f31ea-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span></span>  
  
<span data-ttu-id="f31ea-566">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f31ea-566">-or-</span></span> 
 <span data-ttu-id="f31ea-567"><paramref name="frame" /> 在不同的 <see cref="T:System.Windows.Threading.Dispatcher" /> 中运行。</span><span class="sxs-lookup"><span data-stu-id="f31ea-567"><paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span>  
  
<span data-ttu-id="f31ea-568">或</span><span class="sxs-lookup"><span data-stu-id="f31ea-568">-or-</span></span> 
<span data-ttu-id="f31ea-569">已禁用对调度程序的处理。</span><span class="sxs-lookup"><span data-stu-id="f31ea-569">Dispatcher processing has been disabled.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f31ea-570">用于推送执行帧。</span><span class="sxs-lookup"><span data-stu-id="f31ea-570">for pushing an execution frame.</span></span>  <span data-ttu-id="f31ea-571">关联的枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f31ea-571">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f31ea-572">将主执行帧推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 的事件队列中。</span><span class="sxs-lookup"><span data-stu-id="f31ea-572">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-573">在循环中处理事件队列。 <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-573">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="f31ea-574">循环称为 "帧"。</span><span class="sxs-lookup"><span data-stu-id="f31ea-574">The loop is referred to as a frame.</span></span>  <span data-ttu-id="f31ea-575">初始循环通常由应用程序通过调用<xref:System.Windows.Threading.Dispatcher.Run%2A>来启动。</span><span class="sxs-lookup"><span data-stu-id="f31ea-575">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="f31ea-576">主执行帧将继续运行，直到<xref:System.Windows.Threading.Dispatcher>关闭。</span><span class="sxs-lookup"><span data-stu-id="f31ea-576">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownFinished As EventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f31ea-577">当 <see cref="T:System.Windows.Threading.Dispatcher" /> 完成关闭时发生。</span><span class="sxs-lookup"><span data-stu-id="f31ea-577">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-578">启动的关闭<xref:System.Windows.Threading.Dispatcher>过程后<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> ，将引发事件，并<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>将设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-578">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-579">在<xref:System.Windows.Threading.Dispatcher>事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="f31ea-579">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f31ea-580">当调度程序完成关闭时， <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>将引发事件， <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>并将属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-580">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-581">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="f31ea-581">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownStarted As EventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f31ea-582">当 <see cref="T:System.Windows.Threading.Dispatcher" /> 开始关闭时发生。</span><span class="sxs-lookup"><span data-stu-id="f31ea-582">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-583">启动的关闭<xref:System.Windows.Threading.Dispatcher>过程后<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> ，将引发事件，并<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>将设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-583">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-584">在<xref:System.Windows.Threading.Dispatcher>事件队列展开之前，不会完全关闭。</span><span class="sxs-lookup"><span data-stu-id="f31ea-584">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f31ea-585">当调度程序完成关闭时， <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>将引发事件， <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>并将属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="f31ea-585">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f31ea-586">关闭进程开始后，将中止队列中所有挂起的工作项。</span><span class="sxs-lookup"><span data-stu-id="f31ea-586">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f31ea-587">获取与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</span><span class="sxs-lookup"><span data-stu-id="f31ea-587">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="f31ea-588">线程。</span><span class="sxs-lookup"><span data-stu-id="f31ea-588">The thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f31ea-589">在通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</span><span class="sxs-lookup"><span data-stu-id="f31ea-589">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-590">如果未捕获到委托<xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>执行过程中引发的异常，则会引发此事件。</span><span class="sxs-lookup"><span data-stu-id="f31ea-590">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="f31ea-591">处理程序可以将异常标记为已处理，这将阻止调用内部异常处理程序。</span><span class="sxs-lookup"><span data-stu-id="f31ea-591">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="f31ea-592">必须谨慎编写此事件的事件处理程序，以避免创建辅助异常并捕获发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="f31ea-592">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="f31ea-593">建议避免在处理程序中分配内存或执行任何资源密集型操作。</span><span class="sxs-lookup"><span data-stu-id="f31ea-593">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="f31ea-594">事件提供了不<xref:System.Windows.Threading.Dispatcher.UnhandledException>引发事件的方法。 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter></span><span class="sxs-lookup"><span data-stu-id="f31ea-594">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="f31ea-595"><xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> `false` <xref:System.Windows.Threading.Dispatcher.UnhandledException>首先引发<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>事件，如果上的设置为，则不会引发事件。 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter></span><span class="sxs-lookup"><span data-stu-id="f31ea-595">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f31ea-596">当在筛选阶段通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</span><span class="sxs-lookup"><span data-stu-id="f31ea-596">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-597">此事件在筛选阶段中引发，该异常在通过<xref:System.Windows.Threading.Dispatcher.Invoke%2A>或<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>的委托执行过程中引发的异常被捕获。</span><span class="sxs-lookup"><span data-stu-id="f31ea-597">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="f31ea-598">此时不展开调用堆栈（第一次出现异常）。</span><span class="sxs-lookup"><span data-stu-id="f31ea-598">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="f31ea-599">必须谨慎编写此事件的事件处理程序，以避免创建辅助异常并捕获发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="f31ea-599">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="f31ea-600">建议避免在处理程序中分配内存或执行任何资源密集型操作。</span><span class="sxs-lookup"><span data-stu-id="f31ea-600">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="f31ea-601">事件提供了不<xref:System.Windows.Threading.Dispatcher.UnhandledException>引发事件的方法。 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter></span><span class="sxs-lookup"><span data-stu-id="f31ea-601">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="f31ea-602"><xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> `false` <xref:System.Windows.Threading.Dispatcher.UnhandledException>首先引发<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>事件，如果上的设置为，则不会引发事件。 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter></span><span class="sxs-lookup"><span data-stu-id="f31ea-602">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f31ea-603">用于添加或删除此事件的处理程序。</span><span class="sxs-lookup"><span data-stu-id="f31ea-603">for adding or removing a handler for this event.</span></span>  <span data-ttu-id="f31ea-604">关联的枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f31ea-604">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-605">要检查的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-605">The priority to check.</span></span></param>
        <param name="parameterName"><span data-ttu-id="f31ea-606">将由优先级无效时发生的异常返回的字符串。</span><span class="sxs-lookup"><span data-stu-id="f31ea-606">A string that will be returned by the exception that occurs if the priority is invalid.</span></span></param>
        <summary><span data-ttu-id="f31ea-607">确定指定的 <see cref="T:System.Windows.Threading.DispatcherPriority" /> 是否为有效的优先级。</span><span class="sxs-lookup"><span data-stu-id="f31ea-607">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f31ea-608"><paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-608"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f31ea-609">确定调用线程是否可以访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-609">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-610">只有在上创建<xref:System.Windows.Threading.Dispatcher>的线程可以<xref:System.Windows.Threading.Dispatcher>访问。</span><span class="sxs-lookup"><span data-stu-id="f31ea-610">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="f31ea-611">此方法是公共的;因此，任何线程都可以检查它是否有权访问<xref:System.Windows.Threading.Dispatcher>。</span><span class="sxs-lookup"><span data-stu-id="f31ea-611">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="f31ea-612"><xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>如果调用线程无权访问<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> ，则和将返回一个布尔值，并引发异常。 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> <xref:System.Windows.Threading.Dispatcher></span><span class="sxs-lookup"><span data-stu-id="f31ea-612">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f31ea-613">下面的示例使用<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>来确定线程是否有权访问在上创建的线程<xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="f31ea-613">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="f31ea-614">方法采用对象作为参数，该参数强制转换为<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="f31ea-614">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="f31ea-615">调用的的<xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 方法<xref:System.Windows.Controls.Button>来验证对线程的访问。</span><span class="sxs-lookup"><span data-stu-id="f31ea-615">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="f31ea-616">如果调用线程具有对的<xref:System.Windows.Threading.Dispatcher>访问权限<xref:System.Windows.Controls.Button> ，则只需<xref:System.Windows.Controls.Button>访问的成员即可更新。</span><span class="sxs-lookup"><span data-stu-id="f31ea-616">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="f31ea-617">如果调用线程没有访问权限， <xref:System.InvalidOperationException>则会引发。</span><span class="sxs-lookup"><span data-stu-id="f31ea-617">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="f31ea-618">此示例捕获异常并将接受<xref:System.Windows.Controls.Button>作为参数的委托推送<xref:System.Windows.Threading.Dispatcher>到<xref:System.Windows.Controls.Button>的。</span><span class="sxs-lookup"><span data-stu-id="f31ea-618">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="f31ea-619">这<xref:System.Windows.Threading.Dispatcher>将执行<xref:System.Windows.Controls.Button>更新操作。</span><span class="sxs-lookup"><span data-stu-id="f31ea-619">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f31ea-620">调用线程不能访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</span><span class="sxs-lookup"><span data-stu-id="f31ea-620">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f31ea-621">创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-621">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f31ea-622">创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-622">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
        <returns><span data-ttu-id="f31ea-623">异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-623">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-624">此方法提供了一种方法，用于将执行控制临时发布到当前调度程序，以便它可以执行其他工作，如处理其他事件。</span><span class="sxs-lookup"><span data-stu-id="f31ea-624">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="f31ea-625">使用、或`Await`在 Visual Basic 中，对返回值使用运算符，以将控制权返回给当前调度程序。 `await`</span><span class="sxs-lookup"><span data-stu-id="f31ea-625">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="f31ea-626">如果希望应用程序在 UI 线程上执行大量工作时能够处理事件，则可使用此方法。</span><span class="sxs-lookup"><span data-stu-id="f31ea-626">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="f31ea-627">例如，可以在更新控件的长时间运行的循环中使用此方法。</span><span class="sxs-lookup"><span data-stu-id="f31ea-627">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="f31ea-628">此方法等效于调用<xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29>方法并<xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>传入。</span><span class="sxs-lookup"><span data-stu-id="f31ea-628">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f31ea-629">安排延续的优先级别。</span><span class="sxs-lookup"><span data-stu-id="f31ea-629">The priority at which to schedule the continuation.</span></span></param>
        <summary><span data-ttu-id="f31ea-630">创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-630">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span>  <span data-ttu-id="f31ea-631">当控件返回等待此方法的结果的代码按指定的优先级计划时，发生的操作。</span><span class="sxs-lookup"><span data-stu-id="f31ea-631">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span></span></summary>
        <returns><span data-ttu-id="f31ea-632">异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</span><span class="sxs-lookup"><span data-stu-id="f31ea-632">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f31ea-633">此方法提供了一种方法，用于将执行控制临时发布到当前调度程序，以便它可以执行其他工作，如处理其他事件。</span><span class="sxs-lookup"><span data-stu-id="f31ea-633">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="f31ea-634">使用、或`Await`在 Visual Basic 中，对返回值使用运算符，以将控制权返回给当前调度程序。 `await`</span><span class="sxs-lookup"><span data-stu-id="f31ea-634">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="f31ea-635">如果希望应用程序在 UI 线程上执行大量工作时能够处理事件，则可使用此方法。</span><span class="sxs-lookup"><span data-stu-id="f31ea-635">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="f31ea-636">例如，可以在更新控件的长时间运行的循环中使用此方法。</span><span class="sxs-lookup"><span data-stu-id="f31ea-636">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

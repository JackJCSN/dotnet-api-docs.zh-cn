<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c2245419dca31dcc8fa93f103a021ddcfb28d779" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63890717" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>使您可以用其他源的数据有效批量加载 SQL Server 表。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server 包含名为的常用命令提示符实用工具**bcp**将数据从一个表移到另一个，无论它们是在单个服务器或服务器之间。 <xref:System.Data.SqlClient.SqlBulkCopy>类允许你编写托管的代码解决方案，其中提供类似的功能。 还有其他方法将数据加载到 SQL Server 表 （INSERT 语句，例如），但<xref:System.Data.SqlClient.SqlBulkCopy>提供性能优势明显超过它们。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> 类只能用于向 SQL Server 表中写入数据。 但是，数据源不是局限于 SQL Server;可以使用任何数据源，只要可以将数据加载到<xref:System.Data.DataTable>实例，或浏览器进行<xref:System.Data.IDataReader>实例。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> 失败时执行大容量加载<xref:System.Data.DataTable>类型的列<xref:System.Data.SqlTypes.SqlDateTime>SQL Server 2008 中的类型为日期/时间类型的一个列添加到 SQL Server。  
  
   
  
## Examples  
 以下控制台应用程序演示如何使用 <xref:System.Data.SqlClient.SqlBulkCopy> 类加载数据。 在此示例中，<xref:System.Data.SqlClient.SqlDataReader>用于复制的数据**Production.Product**表中的 SQL Server **AdventureWorks**到同一个数据库中类似表的数据库。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">将用于执行批量复制操作的已经打开的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 实例。 如果连接字符串不使用 <see langword="Integrated Security = true" />，可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来通过用户 ID 和密码比在连接字符串的文本中指定用户 ID 和密码更安全。</param>
        <summary>使用 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 的指定打开实例初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为连接已打开<xref:System.Data.SqlClient.SqlBulkCopy>初始化实例，则连接将保持打开后<xref:System.Data.SqlClient.SqlBulkCopy>实例已关闭。  
  
 如果`connection`参数为 null，<xref:System.ArgumentNullException>引发。  
  
   
  
## Examples  
 以下控制台应用程序演示如何大容量加载数据使用已打开的连接。 在此示例中，<xref:System.Data.SqlClient.SqlDataReader>用于复制的数据**Production.Product**表中的 SQL Server **AdventureWorks**到同一个数据库中类似表的数据库。 此示例只为了方便本文演示。 您不会使用`SqlBulkCopy`将数据从一个表移到另一个在生产应用程序在同一数据库中。 请注意，源数据不需要位于 SQL Server;可以使用可以读取到任何数据源<xref:System.Data.IDataReader>或加载到<xref:System.Data.DataTable>。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">定义将打开的且由 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例使用的连接的字符串。 如果连接字符串不使用 <see langword="Integrated Security = true" />，可以使用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 或 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 和 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来通过用户 ID 和密码比在连接字符串的文本中指定用户 ID 和密码更安全。</param>
        <summary>基于提供的 <paramref name="connectionString" /> 初始化和打开 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的新实例。 此构造函数使用 <see cref="T:System.Data.SqlClient.SqlConnection" /> 来初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大容量复制操作结束时自动关闭连接。  
  
 如果`connectionString`为 null，<xref:System.ArgumentNullException>引发。 如果`connectionString`为空字符串，<xref:System.ArgumentException>引发。  
  
   
  
## Examples  
 以下控制台应用程序演示如何使用连接字符串形式指定大容量加载数据。 连接会自动关闭时<xref:System.Data.SqlClient.SqlBulkCopy>实例已关闭。  
  
 在此示例中，源数据首先读取到的 SQL Server 表<xref:System.Data.SqlClient.SqlDataReader>实例。 源数据不需要位于 SQL Server;可以使用可以读取到任何数据源<xref:System.Data.IDataReader>或加载到<xref:System.Data.DataTable>。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">SQL Server 中的批量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">定义将打开的且由 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例使用的连接的字符串。 如果连接字符串不使用 <see langword="Integrated Security = true" />，可以使用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 或 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 和 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来通过用户 ID 和密码比在连接字符串的文本中指定用户 ID 和密码更安全。</param>
        <param name="copyOptions"><see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 枚举中的值的组合，可确定将哪些数据源行复制到目标表中。</param>
        <summary>基于提供的 <paramref name="connectionString" /> 初始化和打开 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的新实例。 此构造函数使用此 <see cref="T:System.Data.SqlClient.SqlConnection" /> 来初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。 <see cref="T:System.Data.SqlClient.SqlConnection" /> 实例的行为取决于 <paramref name="copyOptions" /> 参数中提供的选项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以获取有关中的所有大容量复制选项的详细的信息<xref:System.Data.SqlClient.SqlBulkCopyOptions>主题。  
  
   
  
## Examples  
 以下控制台应用程序演示如何通过使用指定为字符串的连接执行大容量加载。 选项设置为时加载目标表的标识列的源表中使用的值。 在此示例中，源数据首先读取到的 SQL Server 表<xref:System.Data.SqlClient.SqlDataReader>实例。 源表和目标表中每个包含的标识列。 默认情况下，新的值**标识**添加每个行的目标表中生成列。 在此示例中，打开连接时强制执行大容量加载进程要使用的设置选项**标识**改为源表中的值。 若要查看此选项如何改变大容量加载的工作方式，使用运行此示例**dbo。BulkCopyDemoMatchingColumns**表为空。 从源中加载的所有行。 然后再次运行示例而不清空表。 引发异常和代码将消息写入控制台通知您由于主键约束冲突而未添加行。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">将用于执行批量复制操作的已经打开的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 实例。 如果连接字符串不使用 <see langword="Integrated Security = true" />，可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来通过用户 ID 和密码比在连接字符串的文本中指定用户 ID 和密码更安全。</param>
        <param name="copyOptions"><see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 枚举中的值的组合，可确定将哪些数据源行复制到目标表中。</param>
        <param name="externalTransaction">现有的 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 实例，批量复制操作将在该实例下进行。</param>
        <summary>使用提供的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 的现有打开实例初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类的新实例。 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例的行为取决于 <paramref name="copyOptions" /> 参数中提供的选项。 如果提供非空 <see cref="T:System.Data.SqlClient.SqlTransaction" />，则复制操作将在该事务中执行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果选项包括`UseInternalTransaction`并`externalTransaction`参数不为 null， **InvalidArgumentException**引发。  
  
 有关示例演示如何使用`SqlBulkCopy`在事务中，请参阅[事务和大容量复制操作](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>每一批次中的行数。 在每一批次结束时，将该批次中的行发送到服务器。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> 属性的整数值；或者如果未设置任何值，则为零。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当批已完成<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>行被处理或没有更多的行发送到目标数据源。  
  
 零 （默认值），每个表示<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作是单个批次。  
  
 如果<xref:System.Data.SqlClient.SqlBulkCopy>实例已经声明，但<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>选项有效时，将行发送到服务器<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>执行时间，但不与事务相关的操作的行。 如果<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>有效时，是作为单独的事务插入的行的每个批。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>属性可以设置在任何时间。 如果大容量复制已在进行中，当前批处理的大小根据上一批大小。 后续批处理都将使用新的大小。 如果<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>最初为零的和已更改时<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作已在进行中，操作将作为单个批处理数据加载。 任何后续<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>上相同的操作<xref:System.Data.SqlClient.SqlBulkCopy>实例使用的新<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>。  
  
   
  
## Examples  
 以下控制台应用程序演示如何大容量的 50 行批量加载数据。 示例说明如何<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>适用于事务，请参阅[事务和大容量复制操作](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)。  
  
 在此示例中，源数据首先读取到的 SQL Server 表<xref:System.Data.SqlClient.SqlDataReader>实例。 源数据不需要位于 SQL Server;可以使用可以读取到任何数据源<xref:System.Data.IDataReader>或加载到<xref:System.Data.DataTable>。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">SQL Server 中的批量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>超时之前操作完成所允许的秒数。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> 属性的整数值。 默认值为 30 秒。 值 0 指示没有限制；批量复制将无限期等待。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该操作会超时，事务已提交并不从目标表中删除所有复制的行。  
  
   
  
## Examples  
 以下控制台应用程序演示了如何修改为 60 秒的超时值时大容量加载数据。  
  
 在此示例中，源数据首先读取到的 SQL Server 表<xref:System.Data.SqlClient.SqlDataReader>实例。 源数据不需要位于 SQL Server;可以使用可以读取到任何数据源<xref:System.Data.IDataReader>或加载到<xref:System.Data.DataTable>。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用[!INCLUDE[tsql](~/includes/tsql-md.md)]`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用后<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>上<xref:System.Data.SqlClient.SqlBulkCopy>对象，任何其他操作将会成功。 调用<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>方法将引发<xref:System.InvalidOperationException>。  
  
 调用<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>方法从<xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>事件会导致<xref:System.InvalidOperationException>引发。  
  
 请注意，打开<xref:System.Data.SqlClient.SqlBulkCopy>实例的结尾处隐式关闭`using`块。  
  
   
  
## Examples  
 下面的示例使用相同<xref:System.Data.SqlClient.SqlBulkCopy>实例将销售订单和其关联的详细信息添加到两个目标表。 因为**AdventureWorks**销售订单表很大，示例读取仅发出的某一特定帐号的订单并大容量将这些订单和详细信息复制到目标表。 <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>只有这两个大容量复制操作完成之后才能使用方法。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 项的集合。 列映射定义数据源中的列和目标中的列之间的关系。</summary>
        <value>列映射集合。 默认情况下为空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当数据源和目标表具有相同数目的列，且数据源中每个源列的序号位置匹配的相应目标列的序号位置<xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>是不必要的集合。 但是，如果列计数不同，或不一致的序号位置，则必须使用<xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>以确保数据复制到正确的列。  
  
 在大容量复制操作的执行期间可以访问此集合，但不能更改。 任何尝试对其进行更改会引发<xref:System.InvalidOperationException>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>服务器上目标表的名称。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性的字符串值；或者如果未提供任何值，则为 null。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>尚未设置何时<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>调用时，<xref:System.ArgumentNullException>引发。  
  
 如果<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>被修改时<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作正在运行，更改不会影响当前操作。 新<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>值使用下一次<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>调用方法。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 是由三部分名称 (`<database>.<owningschema>.<name>`)。 如果愿意，可以限定表名的数据库和所属架构。 但是，如果表名称使用下划线 ("_") 或任何其他特殊字符，则必须转义使用方括号中的名称 (`[<database>.<owningschema>.<name_01>]`)。 有关详细信息，请参阅[数据库标识符](/sql/relational-databases/databases/database-identifiers)。  
  
 通过使用一个值，如可以将数据大容量复制到临时表`tempdb..#table`或`tempdb.<owner>.#table`为<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>属性。  
  
   
  
## Examples  
 以下控制台应用程序演示如何大容量加载数据使用已打开的连接。 目标表是中的表**AdventureWorks**数据库。  
  
 在此示例中，使用的连接是首先从到的 SQL Server 表中读取数据<xref:System.Data.SqlClient.SqlDataReader>实例。 源数据不需要位于 SQL Server;可以使用可以读取到任何数据源<xref:System.Data.IDataReader>或加载到<xref:System.Data.DataTable>。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>启用或禁用 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象，传输 <see cref="T:System.Data.IDataReader" /> 对象的数据。</summary>
        <value>如果 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象可以对 <see cref="T:System.Data.IDataReader" /> 对象的数据进行流处理，则为 <see langword="true" />；否则，为 false。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A>是`true`，<xref:System.Data.SqlClient.SqlBulkCopy>从读取<xref:System.Data.IDataReader>对象使用<xref:System.Data.CommandBehavior.SequentialAccess>，通过优化内存使用情况<xref:System.Data.IDataReader>流式传输功能。 当设置为 false，<xref:System.Data.SqlClient.SqlBulkCopy>类将返回的所有数据都加载<xref:System.Data.IDataReader>到内存中之前将其发送到 SQL Server 或 SQL Azure 的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>定义在生成通知事件之前要处理的行数。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 属性的整数值，或者如果未设置该属性，则为零。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性用于说明大容量复制操作的进度的用户界面组件。 它指示要在生成通知事件之前要处理的行数。 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>大容量复制操作正在进行时甚至可以在任何时候，设置属性。 下一步通知之后，大容量复制操作期间所做的更改才会生效。 新的设置适用于在同一实例上的所有后续操作。  
  
 如果<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>已设为的数字小于零，则<xref:System.ArgumentOutOfRangeException>引发。  
  
   
  
## Examples  
 以下控制台应用程序演示如何大容量加载数据使用已打开的连接。 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>属性设置，以便复制到表中每个 50 行后调用的事件处理程序。  
  
 在此示例中，使用的连接是首先从到的 SQL Server 表中读取数据<xref:System.Data.SqlClient.SqlDataReader>实例。 然后，会打开第二个连接用于大容量复制数据。 请注意，源数据不需要位于 SQL Server;可以使用可以读取到任何数据源<xref:System.Data.IDataReader>或加载到<xref:System.Data.DataTable>。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在每次处理完 <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 属性指定的行数时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请注意，设置<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>和<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>无关。 接收的<xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>事件并不意味着已发送到服务器或已提交的任何行。  
  
 不能调用 SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) 或 SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) 来自此事件。 执行此操作将导致<xref:System.InvalidOperationException>抛出，和<xref:System.Data.SqlClient.SqlBulkCopy>对象状态不会更改。 如果用户想要取消事件，从操作<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>属性的<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs>可用。 (请参阅[事务和大容量复制操作](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)有关示例，请使用<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>属性。)  
  
 大容量复制操作，在执行期间在连接中支持没有操作，如事务活动，并且建议不使用相同的连接过程中使用<xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>事件。 但是，可以打开不同的连接。  
  
   
  
## Examples  
 以下控制台应用程序演示如何大容量加载数据使用已打开的连接。 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>属性设置，以便复制到表中每个 50 行后调用的事件处理程序。  
  
 在此示例中，使用的连接是首先从到的 SQL Server 表中读取数据<xref:System.Data.SqlClient.SqlDataReader>实例。 请注意，源数据不需要位于 SQL Server;可以使用可以读取到任何数据源<xref:System.Data.IDataReader>或加载到<xref:System.Data.DataTable>。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的当前实例所使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 `Dispose` 后，应调用 <xref:System.Data.SqlClient.SqlBulkCopy>。 `Dispose` 方法使 <xref:System.Data.SqlClient.SqlBulkCopy> 处于不可用状态。 在调用`Dispose`，必须释放对所有引用<xref:System.Data.SqlClient.SqlBulkCopy>这样垃圾回收器才能收回内存的<xref:System.Data.SqlClient.SqlBulkCopy>占用。  
  
 有关详细信息，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  每次释放对 `Dispose` 的最后一个引用前，均应调用 <xref:System.Data.SqlClient.SqlBulkCopy>。 否则，在垃圾回收器调用 <xref:System.Data.SqlClient.SqlBulkCopy> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将所有行从数据源复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果多个活动结果集 (MARS) 已禁用，<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>建立连接正忙。 如果启用了 MARS，你可以交错调用<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>与同一个连接中的其他命令。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.Common.DbDataReader" />，它的行将被复制到目标表中。</param>
        <summary>将所提供的 <see cref="T:System.Data.Common.DbDataReader" /> 数组中的所有行复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
        <summary>将所提供的 <see cref="T:System.Data.DataRow" /> 数组中的所有行复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大容量复制操作正在进行，关联的目标时<xref:System.Data.SqlClient.SqlConnection>是繁忙的服务，并可以在连接上执行任何其他操作。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合将映射从<xref:System.Data.DataRow>到目标数据库表的列。  
  
   
  
## Examples  
 以下控制台应用程序演示如何大容量加载数据从<xref:System.Data.DataRow>数组。 目标表是中的表**AdventureWorks**数据库。  
  
 在此示例中，<xref:System.Data.DataTable>在运行时创建。 从选择的单个行<xref:System.Data.DataTable>将复制到目标表。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
        <summary>将所提供的 <see cref="T:System.Data.DataTable" /> 中的所有行复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的所有行<xref:System.Data.DataTable>复制到目标表中除已被删除。  
  
 大容量复制操作正在进行，关联的目标时<xref:System.Data.SqlClient.SqlConnection>是繁忙的服务，并可以在连接上执行任何其他操作。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合将映射从<xref:System.Data.DataTable>到目标数据库表的列。  
  
   
  
## Examples  
 以下控制台应用程序演示如何大容量加载数据从<xref:System.Data.DataTable>。 目标表是中的表**AdventureWorks**数据库。  
  
 在此示例中，<xref:System.Data.DataTable>在运行时创建和源的`SqlBulkCopy`操作。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，它的行将被复制到目标表中。</param>
        <summary>将所提供的 <see cref="T:System.Data.IDataReader" /> 中的所有行复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 复制操作开始于读取器中的下一个可用行。 大多数情况下，只需返回的读取器<xref:System.Data.IDbCommand.ExecuteReader%2A>或类似的调用，因此下一个可用行是第一行。 若要处理多个结果，请调用<xref:System.Data.IDataReader.NextResult%2A>上的数据读取器和调用<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>试。  
  
 请注意，使用<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>修改的读取器的状态。 该方法将调用<xref:System.Data.IDataReader.Read%2A>直到它返回 false，中止操作，或发生错误。 这意味着数据读取器将在不同的状态下，可能的结果集末尾时<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作已完成。  
  
 大容量复制操作正在进行，关联的目标时<xref:System.Data.SqlClient.SqlConnection>是繁忙的服务，并可以在连接上执行任何其他操作。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合从数据读取器将列映射到目标数据库表。  
  
   
  
## Examples  
 以下控制台应用程序演示如何大容量加载数据从<xref:System.Data.SqlClient.SqlDataReader>。 目标表是中的表**AdventureWorks**数据库。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 枚举中的一个值。 只有与行状态匹配的行才会被复制到目标表中。</param>
        <summary>只将与所提供 <see cref="T:System.Data.DataTable" /> 中所提供行状态匹配的行复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅在行<xref:System.Data.DataTable>中所示的状态`rowState`参数，并且不删除复制到目标表。  
  
> [!NOTE]
>  如果<xref:System.Data.DataRowState.Deleted>指定，则任何<xref:System.Data.DataRowState.Unchanged>， <xref:System.Data.DataRowState.Added>，和<xref:System.Data.DataRowState.Modified>行也将被复制到服务器。 将引发异常。  
  
 大容量复制操作正在进行，关联的目标时<xref:System.Data.SqlClient.SqlConnection>是繁忙的服务，并可以在连接上执行任何其他操作。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合将映射从<xref:System.Data.DataTable>到目标数据库表的列。  
  
   
  
## Examples  
 以下控制台应用程序演示了如何进行大容量加载中的行<xref:System.Data.DataTable>匹配指定的状态。 在这种情况下，仅不变的行已添加。 目标表是中的表**AdventureWorks**数据库。  
  
 在此示例中，<xref:System.Data.DataTable>创建在运行的时和三个行添加到其中。 之前<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>执行方法，这些行之一编辑。 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>与调用方法`DataRowState.Unchanged``rowState`参数，因此，只有两个不变的行是大容量复制到目标。  
  
> [!IMPORTANT]
>  此示例将不运行，除非你已创建的工作表中所述[大容量复制示例设置](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)。 提供此代码演示了使用语法**SqlBulkCopy**仅。 如果源和目标表位于同一个 SQL Server 实例，则更容易且更快速地使用 Transact SQL`INSERT … SELECT`语句复制数据。  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">执行大容量复制操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 概述</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" /> 的异步版本，将数据源中的所有行都复制到目标表中。该目标表由 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 指定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果多个活动结果集 (MARS) 已禁用，<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>建立连接正忙。 如果启用了 MARS，你可以交错调用<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>与同一个连接中的其他命令。  
  
 当其中一个出现故障时回滚的行数取决于多项操作：  
  
-   如果<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>指定。  
  
-   如果你有自己的事务。  
  
-   <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 的值。  
  
 将数据发送到服务器，当前批处理时出现错误时 (根据<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) 将被回滚。 如果<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>未指定，并且具有自己的事务，则整个事务将回滚 （其中包括所有以前批）。  
  
 使用<xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>要知道多少行已复制到服务器。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.Common.DbDataReader" />，它的行将被复制到目标表中。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> 的异步版本，将 <see cref="T:System.Data.Common.DbDataReader" /> 数组中提供的所有行都复制到由 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 的异步版本，将 <see cref="T:System.Data.DataRow" /> 数组中提供的所有行都复制到由 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />。  
  
在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。  
  
在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 执行期间，连接中断或在数据检索期间已关闭。  
  
在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。  
  
在任务对象中返回，出现连接池超时。  
  
在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> 的异步版本，将 <see cref="T:System.Data.DataTable" /> 中提供的所有行都复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。  
  
在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。  
  
在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 执行期间，连接中断或在数据检索期间已关闭。  
  
在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。  
  
在任务对象中返回，出现连接池超时。  
  
在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，它的行将被复制到目标表中。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> 的异步版本，将 <see cref="T:System.Data.IDataReader" /> 中提供的所有行都复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />。  
  
在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。  
  
在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 执行期间，连接中断或在数据检索期间已关闭。  
  
在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。  
  
在任务对象中返回，出现连接池超时。  
  
在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。  
  
在 <see cref="T:System.Data.IDataReader" /> 返回之前， <see cref="T:System.Threading.Tasks.Task" /> 已关闭。  
  
在 <see cref="T:System.Data.IDataReader" /> 返回之前，与 <see cref="T:System.Threading.Tasks.Task" /> 相关的连接已关闭。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.Common.DbDataReader" />，它的行将被复制到目标表中。</param>
        <param name="cancellationToken">取消指示。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值让方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> 的异步版本，将 <see cref="T:System.Data.Common.DbDataReader" /> 数组中提供的所有行都复制到由 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
        <param name="cancellationToken">取消指示。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值让方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 的异步版本，将 <see cref="T:System.Data.DataRow" /> 数组中提供的所有行都复制到由 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。  
  
取消标记可用于在命令超时超过前请求放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />。  
  
在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。  
  
在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 执行期间，连接中断或在数据检索期间已关闭。  
  
在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。  
  
在任务对象中返回，出现连接池超时。  
  
在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 枚举中的一个值。 只有与行状态匹配的行才会被复制到目标表中。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> 的异步版本，之间与 <see cref="T:System.Data.DataTable" /> 中所提供行状态匹配的行复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性中指定的目标表中。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />。  
  
在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。  
  
在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 执行期间，连接中断或在数据检索期间已关闭。  
  
在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。  
  
在任务对象中返回，出现连接池超时。  
  
在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
        <param name="cancellationToken">取消指示。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值让方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> 的异步版本，将 <see cref="T:System.Data.DataTable" /> 中提供的所有行都复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。  
  
取消标记可用于在命令超时超过前请求放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。  
  
在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。  
  
在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 执行期间，连接中断或在数据检索期间已关闭。  
  
在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。  
  
在任务对象中返回，出现连接池超时。  
  
在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，它的行将被复制到目标表中。</param>
        <param name="cancellationToken">取消指示。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值让方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> 的异步版本，将 <see cref="T:System.Data.IDataReader" /> 中提供的所有行都复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性指定的目标表中。  
  
取消标记可用于在命令超时超过前请求放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />。  
  
在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。  
  
在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 执行期间，连接中断或在数据检索期间已关闭。  
  
在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。  
  
在任务对象中返回，出现连接池超时。  
  
在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。  
  
在 <see cref="T:System.Data.IDataReader" /> 返回之前， <see cref="T:System.Threading.Tasks.Task" /> 已关闭。  
  
在 <see cref="T:System.Data.IDataReader" /> 返回之前，与 <see cref="T:System.Threading.Tasks.Task" /> 相关的连接已关闭。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 枚举中的一个值。 只有与行状态匹配的行才会被复制到目标表中。</param>
        <param name="cancellationToken">取消指示。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值让方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> 的异步版本，之间与 <see cref="T:System.Data.DataTable" /> 中所提供行状态匹配的行复制到 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 对象的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 属性中指定的目标表中。  
  
取消标记可用于在命令超时超过前请求放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的.NET Framework 数据提供程序中异步编程的详细信息，请参阅[异步编程](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />。  
  
在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。  
  
在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 执行期间，连接中断或在数据检索期间已关闭。  
  
在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。  
  
在任务对象中返回，出现连接池超时。  
  
在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
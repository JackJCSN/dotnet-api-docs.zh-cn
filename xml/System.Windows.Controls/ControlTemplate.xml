<Type Name="ControlTemplate" FullName="System.Windows.Controls.ControlTemplate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a90fe349d6b28b1824b657a0bd6d4818d45c16a" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67242861" /></Metadata><TypeSignature Language="C#" Value="public class ControlTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ControlTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type ControlTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定 <see cref="T:System.Windows.Controls.Control" /> 的可在其多个实例之间共享的可视结构和行为方面。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ControlTemplate>允许您指定控件的可视结构。 控件作者可以定义默认值<xref:System.Windows.Controls.ControlTemplate>和应用程序作者可以重写<xref:System.Windows.Controls.ControlTemplate>重新构造该控件的可视结构。  
  
 控件模板化是通过提供的众多功能之一[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]样式和模板化模型。 样式和模板化模型提供了很大的灵活性，在许多情况下不需要编写自己的控件。 如果您是想要更改您的控件的可视化效果或替换应用程序作者<xref:System.Windows.Controls.ControlTemplate>的现有控件，请参阅[样式和模板化](~/docs/framework/wpf/controls/styling-and-templating.md)有关示例和深入讨论的主题。  
  
 如果你正在编写您自己的控件，请参阅"创建自定义控件"[控件创作概述](~/docs/framework/wpf/controls/control-authoring-overview.md)。  
  
 一个<xref:System.Windows.Controls.ControlTemplate>旨在作为实现详细信息，看不到外部用户和对象，其中包括一个独立的单元。 操作的控件模板的内容的唯一方法是在同一个控件模板。  
  
<a name="xamlObjectElementUsage_VisualTree"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```xaml
<ControlTemplate>  
  <VisualTreeRootNode>
    VisualTreeNodeContents  
  </VisualTreeRootNode>  
</ControlTemplate>  
```  
  
<a name="xamlValues_VisualTree"></a>   
## <a name="xaml-values"></a>XAML 值  
 *ControlTemplate*  
 对象元素<xref:System.Windows.Controls.ControlTemplate>或派生的类。  
  
 *VisualTreeRootNode*  
 将单个[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]元素的直接子作为<xref:System.Windows.Controls.ControlTemplate>（或派生的类）。 模板必须具有单个根节点。 若要生成有用的模板，为所选的元素*VisualTreeRootNode*应该支持有自己的内容模型通常支持多个子元素的模型。  
  
 *VisualTreeNodeContents*  
 完成预期的模板的一个或多个元素。 如果选择作为元素*VisualTreeRootNode*仅支持单个子级，然后那里可以仅将一个元素声明为*VisualTreeNodeContents*。 此外，还可以 （尽管不常见） 可提供文本内容，如果所选*VisualTreeRootNode*支持的文本内容属性。  
  
   
  
## Examples  
 如下所示<xref:System.Windows.Controls.Button> <xref:System.Windows.Style> ，用于设置<xref:System.Windows.Controls.ControlTemplate>的<xref:System.Windows.Controls.Button>:  
  
 [!code-xaml[StylingIntroSample_snippet#ButtonCT](~/samples/snippets/csharp/VS_Snippets_Wpf/StylingIntroSample_snippet/CSharp/Window1.xaml#buttonct)]     
  
 在应用它后，<xref:System.Windows.Controls.Button>显示为<xref:System.Windows.Shapes.Ellipse>:  
  
 ![按钮 ControlTemplate 示例](~/add/media/stylingintro-buttoncontroltemplate.png "按钮 ControlTemplate 示例")  
  
 当您将设置<xref:System.Windows.Controls.Control.Template%2A>的属性<xref:System.Windows.Controls.Control>到一个新<xref:System.Windows.Controls.ControlTemplate>要如上述示例中，替换整个模板。 什么<xref:System.Windows.Controls.Button>看起来像它处于活动状态，或按下是要替换的按钮的默认外观的一部分时。 因此，具体取决于您的需要，你可能想要将放在你的按钮应如下所示按时，你定义，依此类推，如以下示例所示：  
  
 [!code-xaml[ControlTemplateExamples#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/button.xaml#1)]  
  
 请注意，此示例引用未在此处显示的资源。 有关完整示例，请参阅[使用 ControlTemplates 设置样式示例](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)。 该示例为许多控件提供控件模板的示例，您可以开始创建控件模板的最佳方式。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Style" />
    <altmember cref="T:System.Windows.DataTemplate" />
    <altmember cref="T:System.Windows.Controls.ContentPresenter" />
    <altmember cref="T:System.Windows.Controls.ItemsPresenter" />
    <altmember cref="T:System.Windows.TemplateBindingExtension" />
    <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">样式设置和模板化示例简介</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.ControlTemplate" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.ControlTemplate" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ControlTemplate : Type -&gt; System.Windows.Controls.ControlTemplate" Usage="new System.Windows.Controls.ControlTemplate targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">此模板的目标类型。</param>
        <summary>使用指定的目标类型初始化 <see cref="T:System.Windows.Controls.ControlTemplate" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Windows.Controls.ControlTemplate" /> 所针对的类型。</summary>
        <value>默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你有独立<xref:System.Windows.Controls.ControlTemplate>中的资源部分<xref:System.Windows.Controls.ControlTemplate.TargetType%2A>属性设置为一种类型，<xref:System.Windows.Controls.ControlTemplate>不会应用到该类型自动。 相反，您需要指定`x:Key`和显式应用该模板。  
  
 另请注意，<xref:System.Windows.Controls.ControlTemplate.TargetType%2A>上需要属性<xref:System.Windows.Controls.ControlTemplate>如果模板定义中包含<xref:System.Windows.Controls.ContentPresenter>。  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a>XAML 值  
 *typeName*  
 类的类型名称。 来指代<xref:System.Type>的类，使用名称[标记扩展和 WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)。  
  
   
  
## Examples  
 下面的示例演示如何将此属性：  
  
 [!code-xaml[ControlTemplateExamples#Label](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/label.xaml#label)]  
  
 上面的示例使用以下资源：  
  
  
  
 有关完整示例，请参阅[使用 ControlTemplates 设置样式示例](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">如果模板定义中包含 <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" />，则 <see cref="T:System.Windows.Controls.ContentPresenter" /> 属性不能为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">指定的类型无效。 <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> 的 <see cref="T:System.Windows.Controls.ControlTemplate" /> 必须是 <see cref="T:System.Windows.Controls.Control" />、<see cref="T:System.Windows.Controls.Page" /> 或 <see cref="T:System.Windows.Navigation.PageFunctionBase" /> 或从其继承。</exception>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取根据指定条件应用属性更改或执行操作的 <see cref="T:System.Windows.TriggerBase" /> 对象的集合。</summary>
        <value><see cref="T:System.Windows.TriggerBase" /> 对象的集合。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>XAML 值  
 *oneOrMoreTriggers*  
 一个或多个<xref:System.Windows.TriggerBase>对象 (通常为<xref:System.Windows.Trigger>)。  
  
   
  
## Examples  
 下面的示例演示如何将此属性：  
  
 [!code-xaml[ControlTemplateExamples#ToolTip](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/tooltip.xaml#tooltip)]  
  
 上面的示例中使用的以下资源：  
  
  
  
  
 有关完整示例，请参阅[使用 ControlTemplates 设置样式示例](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">样式设置和模板化示例简介</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="controlTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">要应用此模板的元素。</param>
        <summary>根据一组规则检查模板化父级。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该方法使用以下规则：  
  
 1. `templatedParent`类型不能是<xref:System.Windows.FrameworkContentElement>。  
  
 2. `templatedParent`不能是类型<xref:System.Windows.FrameworkElement>不是<xref:System.Windows.Controls.Control>。  
  
 3. `templatedParent`不能<xref:System.Windows.Controls.Control>未与关联<xref:System.Windows.Controls.ControlTemplate>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="templatedParent" /> 不能为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">在将 <see cref="T:System.Windows.Controls.ControlTemplate" /> 用于 <see cref="T:System.Windows.Controls.Control" /> 之前，必须通过设置 <see cref="P:System.Windows.Controls.Control.Template" /> 属性来将 <see cref="T:System.Windows.Controls.ControlTemplate" /> 与 <see cref="T:System.Windows.Controls.Control" /> 相关联。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
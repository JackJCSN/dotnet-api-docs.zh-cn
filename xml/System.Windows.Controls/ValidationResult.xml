<Type Name="ValidationResult" FullName="System.Windows.Controls.ValidationResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="25c8e3d3a7cc2ff776e3f991c615dd5b2e044f2f" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64276212" /></Metadata><TypeSignature Language="C#" Value="public class ValidationResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ValidationResult extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ValidationResult" />
  <TypeSignature Language="VB.NET" Value="Public Class ValidationResult" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValidationResult" />
  <TypeSignature Language="F#" Value="type ValidationResult = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示从 <see cref="T:System.Windows.Controls.ValidationRule" />.<see cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" /> 返回的结果 方法指示选中值是否通过 <see cref="T:System.Windows.Controls.ValidationRule" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]数据绑定模型使您可以将相关联<xref:System.Windows.Data.Binding.ValidationRules%2A>与你<xref:System.Windows.Data.Binding>或<xref:System.Windows.Data.MultiBinding>对象。 可以通过子类化来创建自定义规则<xref:System.Windows.Controls.ValidationRule>类和实现<xref:System.Windows.Controls.ValidationRule.Validate%2A>方法。 <xref:System.Windows.Controls.ValidationRule.Validate%2A>方法将返回<xref:System.Windows.Controls.ValidationResult>对象来报告指示选中的值是否有效。  
  
 验证过程的详细讨论，请参阅"数据验证"中[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
   
  
## Examples  
 下面的示例演示将标记为无效，如果它包含非数字字符或外部下限和上限的输入的值的验证规则的实现。 如果值是无效的<xref:System.Windows.Controls.ValidationResult.ErrorContent%2A>属性和<xref:System.Windows.Controls.ValidationResult.IsValid%2A>所返回的属性<xref:System.Windows.Controls.ValidationResult>设置为相应的错误消息和`false`分别。  
  
 有关完整的示例，请参阅[如何：实现绑定验证](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)。  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValidationResult (bool isValid, object errorContent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isValid, object errorContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.#ctor(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isValid As Boolean, errorContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ValidationResult(bool isValid, System::Object ^ errorContent);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ValidationResult : bool * obj -&gt; System.Windows.Controls.ValidationResult" Usage="new System.Windows.Controls.ValidationResult (isValid, errorContent)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="isValid" Type="System.Boolean" />
        <Parameter Name="errorContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="isValid">根据 <see cref="T:System.Windows.Controls.ValidationRule" />，选中值是否有效。</param>
        <param name="errorContent">有关无效性的信息。</param>
        <summary>初始化 <see cref="T:System.Windows.Controls.ValidationResult" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]数据绑定模型使您可以将相关联<xref:System.Windows.Data.Binding.ValidationRules%2A>与你<xref:System.Windows.Data.Binding>或<xref:System.Windows.Data.MultiBinding>对象。 可以通过子类化来创建自定义规则<xref:System.Windows.Controls.ValidationRule>类和实现<xref:System.Windows.Controls.ValidationRule.Validate%2A>方法。 <xref:System.Windows.Controls.ValidationRule.Validate%2A>方法将返回<xref:System.Windows.Controls.ValidationResult>对象来报告指示选中的值是否有效。  
  
 验证过程的详细讨论，请参阅"数据验证"中[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
   
  
## Examples  
 下面的示例演示将标记为无效，如果它包含非数字字符或外部下限和上限的输入的值的验证规则的实现。 如果值是无效的<xref:System.Windows.Controls.ValidationResult.ErrorContent%2A>属性和<xref:System.Windows.Controls.ValidationResult.IsValid%2A>所返回的属性<xref:System.Windows.Controls.ValidationResult>设置为相应的错误消息和`false`分别。  
  
 有关完整的示例，请参阅[如何：实现绑定验证](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)。  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="validationResult.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要比较的 <see cref="T:System.Windows.Controls.ValidationResult" /> 实例。</param>
        <summary>将指定实例与当前的 <see cref="T:System.Windows.Controls.ValidationResult" /> 实例比较值是否相等。</summary>
        <returns>如果 <paramref name="obj" /> 与 <see cref="T:System.Windows.Controls.ValidationResult" /> 的此实例具有相同的值，则为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 运算符重写调用此方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorContent">
      <MemberSignature Language="C#" Value="public object ErrorContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ErrorContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.ErrorContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorContent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ErrorContent { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorContent : obj" Usage="System.Windows.Controls.ValidationResult.ErrorContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取提供有关无效性的附加信息的对象。</summary>
        <value>一个提供有关无效性的附加信息的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]数据绑定模型使您可以将相关联<xref:System.Windows.Data.Binding.ValidationRules%2A>与你<xref:System.Windows.Data.Binding>或<xref:System.Windows.Data.MultiBinding>对象。 可以通过子类化来创建自定义规则<xref:System.Windows.Controls.ValidationRule>类和实现<xref:System.Windows.Controls.ValidationRule.Validate%2A>方法。 <xref:System.Windows.Controls.ValidationRule.Validate%2A>方法将返回<xref:System.Windows.Controls.ValidationResult>对象来报告指示选中的值是否有效。  
  
 验证过程的详细讨论，请参阅"数据验证"中[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
   
  
## Examples  
 下面的示例演示将标记为无效，如果它包含非数字字符或外部下限和上限的输入的值的验证规则的实现。 如果值是无效的<xref:System.Windows.Controls.ValidationResult.ErrorContent%2A>属性和<xref:System.Windows.Controls.ValidationResult.IsValid%2A>所返回的属性<xref:System.Windows.Controls.ValidationResult>设置为相应的错误消息和`false`分别。  
  
 有关完整的示例，请参阅[如何：实现绑定验证](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)。  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="validationResult.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回该 <see cref="T:System.Windows.Controls.ValidationResult" /> 的哈希代码。</summary>
        <returns>此 <see cref="T:System.Windows.Controls.ValidationResult" /> 的哈希代码。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Windows.Controls.ValidationResult.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示根据 <see cref="T:System.Windows.Controls.ValidationRule" />，选中值是否有效。</summary>
        <value>如果该值有效，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]数据绑定模型使您可以将相关联<xref:System.Windows.Data.Binding.ValidationRules%2A>与你<xref:System.Windows.Data.Binding>或<xref:System.Windows.Data.MultiBinding>对象。 可以通过子类化来创建自定义规则<xref:System.Windows.Controls.ValidationRule>类和实现<xref:System.Windows.Controls.ValidationRule.Validate%2A>方法。 <xref:System.Windows.Controls.ValidationRule.Validate%2A>方法将返回<xref:System.Windows.Controls.ValidationResult>对象来报告指示选中的值是否有效。  
  
 验证过程的详细讨论，请参阅"数据验证"中[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
   
  
## Examples  
 下面的示例演示将标记为无效，如果它包含非数字字符或外部下限和上限的输入的值的验证规则的实现。 如果值是无效的<xref:System.Windows.Controls.ValidationResult.ErrorContent%2A>属性和<xref:System.Windows.Controls.ValidationResult.IsValid%2A>所返回的属性<xref:System.Windows.Controls.ValidationResult>设置为相应的错误消息和`false`分别。  
  
 有关完整的示例，请参阅[如何：实现绑定验证](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)。  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Controls.ValidationResult left, class System.Windows.Controls.ValidationResult right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.op_Equality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ValidationResult, right As ValidationResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Controls::ValidationResult ^ left, System::Windows::Controls::ValidationResult ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Controls.ValidationResult * System.Windows.Controls.ValidationResult -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Controls.ValidationResult" />
        <Parameter Name="right" Type="System.Windows.Controls.ValidationResult" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个实例。</param>
        <param name="right">要比较的第二个实例。</param>
        <summary>比较两个 <see cref="T:System.Windows.Controls.ValidationResult" /> 对象的值是否相等。</summary>
        <returns>如果两个对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Controls.ValidationResult left, class System.Windows.Controls.ValidationResult right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.op_Inequality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ValidationResult, right As ValidationResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Controls::ValidationResult ^ left, System::Windows::Controls::ValidationResult ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Controls.ValidationResult * System.Windows.Controls.ValidationResult -&gt; bool" Usage="System.Windows.Controls.ValidationResult.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Controls.ValidationResult" />
        <Parameter Name="right" Type="System.Windows.Controls.ValidationResult" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个实例。</param>
        <param name="right">要比较的第二个实例。</param>
        <summary>比较两个 <see cref="T:System.Windows.Controls.ValidationResult" /> 对象的值是否不相等。</summary>
        <returns>如果值不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidResult">
      <MemberSignature Language="C#" Value="public static System.Windows.Controls.ValidationResult ValidResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Controls.ValidationResult ValidResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.ValidResult" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ValidResult As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Controls::ValidationResult ^ ValidResult { System::Windows::Controls::ValidationResult ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidResult : System.Windows.Controls.ValidationResult" Usage="System.Windows.Controls.ValidationResult.ValidResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Controls.ValidationResult" /> 的有效实例。</summary>
        <value><see cref="T:System.Windows.Controls.ValidationResult" /> 的有效实例。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="MenuCommandService" FullName="System.ComponentModel.Design.MenuCommandService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="26dfea945a3ba697efae1e3824c6a0ccf1f06a96" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63898599" /></Metadata><TypeSignature Language="C#" Value="public class MenuCommandService : IDisposable, System.ComponentModel.Design.IMenuCommandService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MenuCommandService extends System.Object implements class System.ComponentModel.Design.IMenuCommandService, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.MenuCommandService" />
  <TypeSignature Language="VB.NET" Value="Public Class MenuCommandService&#xA;Implements IDisposable, IMenuCommandService" />
  <TypeSignature Language="C++ CLI" Value="public ref class MenuCommandService : IDisposable, System::ComponentModel::Design::IMenuCommandService" />
  <TypeSignature Language="F#" Value="type MenuCommandService = class&#xA;    interface IMenuCommandService&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IMenuCommandService</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="37755-101">实现 <see cref="T:System.ComponentModel.Design.IMenuCommandService" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="37755-101">Implements the <see cref="T:System.ComponentModel.Design.IMenuCommandService" /> interface.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-102"><xref:System.ComponentModel.Design.MenuCommandService>类实现<xref:System.ComponentModel.Design.IMenuCommandService>接口，这是用于为菜单命令添加处理程序以及定义谓词的托管的接口。</span><span class="sxs-lookup"><span data-stu-id="37755-102">The <xref:System.ComponentModel.Design.MenuCommandService> class implements the <xref:System.ComponentModel.Design.IMenuCommandService> interface, which is the managed interface used to add handlers for menu commands and to define verbs.</span></span>  
  
 <span data-ttu-id="37755-103"><xref:System.ComponentModel.Design.MenuCommandService>要提供整个程序包，全局命令的程序包类自动提供类，它也提供了`Microsoft.VisualStudio.Shell.WindowPane`类提供当前窗口的命令。</span><span class="sxs-lookup"><span data-stu-id="37755-103">The <xref:System.ComponentModel.Design.MenuCommandService> class is automatically offered by the package class to offer global commands for an entire package, and it is also offered by the `Microsoft.VisualStudio.Shell.WindowPane` class to offer commands for the current window.</span></span> <span data-ttu-id="37755-104">此产品/服务始终是通过服务容器，因此任何人都派生自包或窗口窗格类可以删除或替换的默认实现<xref:System.ComponentModel.Design.IMenuCommandService>接口。</span><span class="sxs-lookup"><span data-stu-id="37755-104">This offering is always done through the service container, so anyone deriving from the package or window pane classes can remove or replace the default implementation of the <xref:System.ComponentModel.Design.IMenuCommandService> interface.</span></span>  
  
 <span data-ttu-id="37755-105"><xref:System.ComponentModel.Design.MenuCommandService>类利用多个其他服务。</span><span class="sxs-lookup"><span data-stu-id="37755-105">The <xref:System.ComponentModel.Design.MenuCommandService> class utilizes several other services.</span></span> <span data-ttu-id="37755-106">所有这些服务都是可选的因此行为<xref:System.ComponentModel.Design.MenuCommandService>类会降低，如果一个或多个服务缺失。</span><span class="sxs-lookup"><span data-stu-id="37755-106">All of these services are optional, so the behavior of the <xref:System.ComponentModel.Design.MenuCommandService> class degrades if one or more services are missing.</span></span> <span data-ttu-id="37755-107">下表显示了使用的服务及其用途。</span><span class="sxs-lookup"><span data-stu-id="37755-107">The following table shows which services are used and for what purpose.</span></span>  
  
|<span data-ttu-id="37755-108">服务</span><span class="sxs-lookup"><span data-stu-id="37755-108">Service</span></span>|<span data-ttu-id="37755-109">目标</span><span class="sxs-lookup"><span data-stu-id="37755-109">Purpose</span></span>|  
|-------------|-------------|  
|<xref:System.ComponentModel.Design.ISelectionService>|<span data-ttu-id="37755-110">用于发现当前所选内容以获取由当前所选的设计器提供的谓词。</span><span class="sxs-lookup"><span data-stu-id="37755-110">Used to discover the current selection in order to obtain verbs offered by the currently selected designer.</span></span>|  
|<xref:System.ComponentModel.Design.IDesignerHost>|<span data-ttu-id="37755-111">用于获取有关当前所选组件，设计器如果有的话。</span><span class="sxs-lookup"><span data-stu-id="37755-111">Used to obtain the designer for the currently selected component, if any.</span></span>|  
|`Microsoft.VisualStudio.Shell.Interop.IVsUIShell`|<span data-ttu-id="37755-112">用于通知的命令状态已更改的 Visual Studio。</span><span class="sxs-lookup"><span data-stu-id="37755-112">Used to notify Visual Studio that the command status has changed.</span></span>|  
|`Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager`|<span data-ttu-id="37755-113">用于显示上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="37755-113">Used to show context menus.</span></span>|  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
    <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
    <altmember cref="T:System.ComponentModel.Design.CommandID" />
    <altmember cref="T:System.IServiceProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuCommandService (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuCommandService(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.MenuCommandService : IServiceProvider -&gt; System.ComponentModel.Design.MenuCommandService" Usage="new System.ComponentModel.Design.MenuCommandService serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider"><span data-ttu-id="37755-114">此服务用于获取其他服务的服务提供程序。</span><span class="sxs-lookup"><span data-stu-id="37755-114">The service provider that this service uses to obtain other services.</span></span></param>
        <summary><span data-ttu-id="37755-115">初始化 <see cref="T:System.ComponentModel.Design.MenuCommandService" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="37755-115">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.MenuCommandService" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-116">如果要与设计器中，使用的服务`serviceProvider`参数应为设计器中，服务提供程序，使用这种情况<xref:System.ComponentModel.Design.DesignSurface>。</span><span class="sxs-lookup"><span data-stu-id="37755-116">If the service is being used with a designer, the `serviceProvider` parameter should be the service provider for the designer, as is the case with <xref:System.ComponentModel.Design.DesignSurface>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="AddCommand">
      <MemberSignature Language="C#" Value="public virtual void AddCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddCommand : System.ComponentModel.Design.MenuCommand -&gt; unit&#xA;override this.AddCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="menuCommandService.AddCommand command" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="37755-117">要添加的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</span><span class="sxs-lookup"><span data-stu-id="37755-117">The <see cref="T:System.ComponentModel.Design.MenuCommand" /> to add.</span></span></param>
        <summary><span data-ttu-id="37755-118">将命令处理程序添加到菜单命令服务。</span><span class="sxs-lookup"><span data-stu-id="37755-118">Adds a command handler to the menu command service.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-119"><xref:System.ComponentModel.Design.MenuCommandService.AddCommand%2A>方法将命令处理程序添加到菜单命令服务。</span><span class="sxs-lookup"><span data-stu-id="37755-119">The <xref:System.ComponentModel.Design.MenuCommandService.AddCommand%2A> method adds a command handler to the menu command service.</span></span> <span data-ttu-id="37755-120">命令处理程序未定义文本、 快捷键或菜单项的位置。</span><span class="sxs-lookup"><span data-stu-id="37755-120">Command handlers do not define the text, shortcut, or placement of a menu item.</span></span> <span data-ttu-id="37755-121">相反，如果单击项定义菜单项的行为。</span><span class="sxs-lookup"><span data-stu-id="37755-121">Rather, they define the menu item's behavior if the item is clicked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="37755-122"><paramref name="command" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="37755-122"><paramref name="command" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="37755-123"><paramref name="command" /> 命令处理程序已存在。</span><span class="sxs-lookup"><span data-stu-id="37755-123">A command handler <paramref name="command" /> already exists.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public virtual void AddVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member AddVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit&#xA;override this.AddVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="menuCommandService.AddVerb verb" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb"><span data-ttu-id="37755-124">要添加的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</span><span class="sxs-lookup"><span data-stu-id="37755-124">The <see cref="T:System.ComponentModel.Design.DesignerVerb" /> to add.</span></span></param>
        <summary><span data-ttu-id="37755-125">将谓词添加到 <see cref="T:System.ComponentModel.Design.MenuCommandService" /> 的谓词表中。</span><span class="sxs-lookup"><span data-stu-id="37755-125">Adds a verb to the verb table of the <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-126">此谓词是无论当前选择何种设计。</span><span class="sxs-lookup"><span data-stu-id="37755-126">This verb is available regardless of what designer is currently selected.</span></span> <span data-ttu-id="37755-127">与菜单命令不同谓词可以定义将向用户显示的文本，但它们不定义实际菜单上的命令的位置。</span><span class="sxs-lookup"><span data-stu-id="37755-127">Unlike menu commands, verbs can define the text that is displayed to the user, but they do not define the placement of the command on the actual menu.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="37755-128"><paramref name="verb" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="37755-128"><paramref name="verb" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37755-129">释放由 <see cref="T:System.ComponentModel.Design.MenuCommandService" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="37755-129">Releases all resources used by the <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="menuCommandService.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37755-130">释放由 <see cref="T:System.ComponentModel.Design.MenuCommandService" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="37755-130">Releases all resources used by the <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-131">在完成使用 <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> 后，应调用 <xref:System.ComponentModel.Design.MenuCommandService>。</span><span class="sxs-lookup"><span data-stu-id="37755-131">Call <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> when you are finished using the <xref:System.ComponentModel.Design.MenuCommandService>.</span></span> <span data-ttu-id="37755-132"><xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> 方法使 <xref:System.ComponentModel.Design.MenuCommandService> 处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="37755-132">The <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> method leaves the <xref:System.ComponentModel.Design.MenuCommandService> in an unusable state.</span></span> <span data-ttu-id="37755-133">在调用<xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A>，必须释放对所有引用<xref:System.ComponentModel.Design.MenuCommandService>这样垃圾回收器才能收回内存的<xref:System.ComponentModel.Design.MenuCommandService>占用。</span><span class="sxs-lookup"><span data-stu-id="37755-133">After calling <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A>, you must release all references to the <xref:System.ComponentModel.Design.MenuCommandService> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Design.MenuCommandService> was occupying.</span></span> <span data-ttu-id="37755-134">有关详细信息，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="37755-134">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="37755-135">每次释放对 <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.ComponentModel.Design.MenuCommandService>。</span><span class="sxs-lookup"><span data-stu-id="37755-135">Always call <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> before you release your last reference to the <xref:System.ComponentModel.Design.MenuCommandService>.</span></span> <span data-ttu-id="37755-136">否则，在垃圾回收器调用 <xref:System.ComponentModel.Design.MenuCommandService> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="37755-136">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Design.MenuCommandService> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="menuCommandService.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="37755-137">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="37755-137"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="37755-138">释放由 <see cref="T:System.ComponentModel.Design.MenuCommandService" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="37755-138">Releases all resources used by the <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-139">调用此方法由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="37755-139">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="37755-140">`Dispose()` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="37755-140">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="37755-141"><xref:System.Object.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="37755-141"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="37755-142">当`disposing`参数为 true 时，此方法释放任何托管对象所持有的所有资源，此<xref:System.ComponentModel.Design.MenuCommandService>的引用。</span><span class="sxs-lookup"><span data-stu-id="37755-142">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.MenuCommandService> references.</span></span> <span data-ttu-id="37755-143">此方法调用每个引用对象的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="37755-143">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="37755-144">
            <see langword="Dispose" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="37755-144">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="37755-145">重写时<see langword="Dispose(Boolean)" />小心不要引用已经释放的早期调用中的对象<see langword="Dispose" />。</span><span class="sxs-lookup"><span data-stu-id="37755-145">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="37755-146">有关如何实现详细信息<see langword="Dispose(Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="37755-146">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="37755-147">有关详细信息<see langword="Dispose" />并<see cref="M:System.Object.Finalize" />，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="37755-147">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EnsureVerbs">
      <MemberSignature Language="C#" Value="protected void EnsureVerbs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void EnsureVerbs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.EnsureVerbs" />
      <MemberSignature Language="VB.NET" Value="Protected Sub EnsureVerbs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void EnsureVerbs();" />
      <MemberSignature Language="F#" Value="member this.EnsureVerbs : unit -&gt; unit" Usage="menuCommandService.EnsureVerbs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="37755-148">确保已经创建谓词列表。</span><span class="sxs-lookup"><span data-stu-id="37755-148">Ensures that the verb list has been created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-149"><xref:System.ComponentModel.Design.MenuCommandService.EnsureVerbs%2A>方法创建谓词列表，如果尚未创建。</span><span class="sxs-lookup"><span data-stu-id="37755-149">The <xref:System.ComponentModel.Design.MenuCommandService.EnsureVerbs%2A> method creates the verb list if it has not already been created.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindCommand">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37755-150">搜索与给定命令 ID 关联的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</span><span class="sxs-lookup"><span data-stu-id="37755-150">Searches for the <see cref="T:System.ComponentModel.Design.MenuCommand" /> associated with the given command ID.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand&#xA;override this.FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand" Usage="menuCommandService.FindCommand commandID" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID"><span data-ttu-id="37755-151">要查找的 <see cref="T:System.ComponentModel.Design.CommandID" />。</span><span class="sxs-lookup"><span data-stu-id="37755-151">The <see cref="T:System.ComponentModel.Design.CommandID" /> to find.</span></span></param>
        <summary><span data-ttu-id="37755-152">搜索与给定命令 ID 关联的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</span><span class="sxs-lookup"><span data-stu-id="37755-152">Searches for the <see cref="T:System.ComponentModel.Design.MenuCommand" /> associated with the given command ID.</span></span></summary>
        <returns><span data-ttu-id="37755-153">与给定命令关联的 <see cref="T:System.ComponentModel.Design.MenuCommand" />；如果找不到命令，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="37755-153">The <see cref="T:System.ComponentModel.Design.MenuCommand" /> associated with the given command; otherwise, <see langword="null" /> if the command is not found.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="protected System.ComponentModel.Design.MenuCommand FindCommand (Guid guid, int id);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.ComponentModel.Design.MenuCommand FindCommand(valuetype System.Guid guid, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.FindCommand(System.Guid,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::ComponentModel::Design::MenuCommand ^ FindCommand(Guid guid, int id);" />
      <MemberSignature Language="F#" Value="member this.FindCommand : Guid * int -&gt; System.ComponentModel.Design.MenuCommand" Usage="menuCommandService.FindCommand (guid, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.Guid" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="guid"><span data-ttu-id="37755-154">命令的 GUID。</span><span class="sxs-lookup"><span data-stu-id="37755-154">The GUID of the command.</span></span></param>
        <param name="id"><span data-ttu-id="37755-155">命令的 ID。</span><span class="sxs-lookup"><span data-stu-id="37755-155">The ID of the command.</span></span></param>
        <summary><span data-ttu-id="37755-156">搜索与给定命令关联的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</span><span class="sxs-lookup"><span data-stu-id="37755-156">Searches for the <see cref="T:System.ComponentModel.Design.MenuCommand" /> associated with the given command.</span></span></summary>
        <returns><span data-ttu-id="37755-157">与给定命令关联的 <see cref="T:System.ComponentModel.Design.MenuCommand" />；如果找不到命令，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="37755-157">The <see cref="T:System.ComponentModel.Design.MenuCommand" /> associated with the given command; otherwise, <see langword="null" /> if the command is not found.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetCommandList">
      <MemberSignature Language="C#" Value="protected System.Collections.ICollection GetCommandList (Guid guid);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Collections.ICollection GetCommandList(valuetype System.Guid guid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.GetCommandList(System.Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Collections::ICollection ^ GetCommandList(Guid guid);" />
      <MemberSignature Language="F#" Value="member this.GetCommandList : Guid -&gt; System.Collections.ICollection" Usage="menuCommandService.GetCommandList guid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="guid"><span data-ttu-id="37755-158">命令列表的 GUID。</span><span class="sxs-lookup"><span data-stu-id="37755-158">The GUID of the command list.</span></span></param>
        <summary><span data-ttu-id="37755-159">获取给定 GUID 的命令列表。</span><span class="sxs-lookup"><span data-stu-id="37755-159">Gets the command list for a given GUID.</span></span></summary>
        <returns><span data-ttu-id="37755-160">命令的 <see cref="T:System.Collections.ICollection" />。</span><span class="sxs-lookup"><span data-stu-id="37755-160">An <see cref="T:System.Collections.ICollection" /> of commands.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetService : Type -&gt; obj" Usage="menuCommandService.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="37755-161">要检索的服务的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="37755-161">The <see cref="T:System.Type" /> of the service to retrieve.</span></span></param>
        <summary><span data-ttu-id="37755-162">获取对所请求服务的引用。</span><span class="sxs-lookup"><span data-stu-id="37755-162">Gets a reference to the requested service.</span></span></summary>
        <returns><span data-ttu-id="37755-163">对 <paramref name="serviceType" /> 的引用；如果找不到服务，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="37755-163">A reference to <paramref name="serviceType" />; otherwise, <see langword="null" /> if the service is not found.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="37755-164"><paramref name="serviceType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="37755-164"><paramref name="serviceType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GlobalInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37755-165">在本地窗体上或在全局环境中调用命令。</span><span class="sxs-lookup"><span data-stu-id="37755-165">Invokes a command on the local form or in the global environment.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public virtual bool GlobalInvoke (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member GlobalInvoke : System.ComponentModel.Design.CommandID -&gt; bool&#xA;override this.GlobalInvoke : System.ComponentModel.Design.CommandID -&gt; bool" Usage="menuCommandService.GlobalInvoke commandID" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID"><span data-ttu-id="37755-166">要调用的命令。</span><span class="sxs-lookup"><span data-stu-id="37755-166">The command to invoke.</span></span></param>
        <summary><span data-ttu-id="37755-167">在本地窗体上或全局环境中调用给定命令。</span><span class="sxs-lookup"><span data-stu-id="37755-167">Invokes the given command on the local form or in the global environment.</span></span></summary>
        <returns><span data-ttu-id="37755-168">如果找到了命令，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="37755-168"><see langword="true" />, if the command was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-169">在本地窗体第一次搜索给定的命令 id。</span><span class="sxs-lookup"><span data-stu-id="37755-169">The local form is first searched for the given command ID.</span></span> <span data-ttu-id="37755-170">如果找到，则调用它。</span><span class="sxs-lookup"><span data-stu-id="37755-170">If it is found, it is invoked.</span></span> <span data-ttu-id="37755-171">否则，命令 ID 将传递到全局环境命令处理程序中，如果有可用。</span><span class="sxs-lookup"><span data-stu-id="37755-171">Otherwise, the command ID is passed to the global environment command handler, if one is available.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public virtual bool GlobalInvoke (System.ComponentModel.Design.CommandID commandId, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandId, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandId, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="abstract member GlobalInvoke : System.ComponentModel.Design.CommandID * obj -&gt; bool&#xA;override this.GlobalInvoke : System.ComponentModel.Design.CommandID * obj -&gt; bool" Usage="menuCommandService.GlobalInvoke (commandId, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandId" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="commandId"><span data-ttu-id="37755-172">要调用的命令。</span><span class="sxs-lookup"><span data-stu-id="37755-172">The command to invoke.</span></span></param>
        <param name="arg"><span data-ttu-id="37755-173">调用的参数。</span><span class="sxs-lookup"><span data-stu-id="37755-173">A parameter for the invocation.</span></span></param>
        <summary><span data-ttu-id="37755-174">在本地窗体上或全局环境中调用具有给定参数的给定命令。</span><span class="sxs-lookup"><span data-stu-id="37755-174">Invokes the given command with the given parameter on the local form or in the global environment.</span></span></summary>
        <returns><span data-ttu-id="37755-175">如果找到了命令，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="37755-175"><see langword="true" />, if the command was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-176">在本地窗体第一次搜索给定的命令 id。</span><span class="sxs-lookup"><span data-stu-id="37755-176">The local form is first searched for the given command ID.</span></span> <span data-ttu-id="37755-177">如果找到，则调用它。</span><span class="sxs-lookup"><span data-stu-id="37755-177">If it is found, it is invoked.</span></span> <span data-ttu-id="37755-178">否则，命令 ID 将传递到全局环境命令处理程序中，如果有可用。</span><span class="sxs-lookup"><span data-stu-id="37755-178">Otherwise, the command ID is passed to the global environment command handler, if one is available.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="MenuCommandsChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.Design.MenuCommandsChangedEventHandler MenuCommandsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.Design.MenuCommandsChangedEventHandler MenuCommandsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MenuCommandsChanged As MenuCommandsChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::Design::MenuCommandsChangedEventHandler ^ MenuCommandsChanged;" />
      <MemberSignature Language="F#" Value="member this.MenuCommandsChanged : System.ComponentModel.Design.MenuCommandsChangedEventHandler " Usage="member this.MenuCommandsChanged : System.ComponentModel.Design.MenuCommandsChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommandsChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="37755-179">当菜单命令的状态更改时发生。</span><span class="sxs-lookup"><span data-stu-id="37755-179">Occurs when the status of a menu command has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-180">有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="37755-180">For more information about how to handle events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCommandsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCommandsChanged (System.ComponentModel.Design.MenuCommandsChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCommandsChanged(class System.ComponentModel.Design.MenuCommandsChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCommandsChanged (e As MenuCommandsChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCommandsChanged(System::ComponentModel::Design::MenuCommandsChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCommandsChanged : System.ComponentModel.Design.MenuCommandsChangedEventArgs -&gt; unit&#xA;override this.OnCommandsChanged : System.ComponentModel.Design.MenuCommandsChangedEventArgs -&gt; unit" Usage="menuCommandService.OnCommandsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Design.MenuCommandsChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="37755-181">包含事件数据的 <see cref="T:System.ComponentModel.Design.MenuCommandsChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="37755-181">A <see cref="T:System.ComponentModel.Design.MenuCommandsChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="37755-182">引发 <see cref="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="37755-182">Raises the <see cref="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-183"><xref:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged%2A>其状态已更改时，菜单命令调用方法。</span><span class="sxs-lookup"><span data-stu-id="37755-183">The <xref:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged%2A> method is called by a menu command when its status has changed.</span></span>  
  
 <span data-ttu-id="37755-184">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="37755-184">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="37755-185">有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="37755-185">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="37755-186"><xref:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。</span><span class="sxs-lookup"><span data-stu-id="37755-186">The <xref:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="37755-187">这是在派生类中处理事件的首选技术。</span><span class="sxs-lookup"><span data-stu-id="37755-187">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="37755-188">重写时<see cref="M:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)" />方法，以便已注册的委托接收事件。</span><span class="sxs-lookup"><span data-stu-id="37755-188">When overriding <see cref="M:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)" /> in a derived class, be sure to call the base class' <see cref="M:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCommand">
      <MemberSignature Language="C#" Value="public virtual void RemoveCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member RemoveCommand : System.ComponentModel.Design.MenuCommand -&gt; unit&#xA;override this.RemoveCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="menuCommandService.RemoveCommand command" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="37755-189">要移除的命令。</span><span class="sxs-lookup"><span data-stu-id="37755-189">The command to remove.</span></span></param>
        <summary><span data-ttu-id="37755-190">从文档中移除给定的菜单命令。</span><span class="sxs-lookup"><span data-stu-id="37755-190">Removes the given menu command from the document.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-191">如果命令组中有没有更多命令，则删除该组。</span><span class="sxs-lookup"><span data-stu-id="37755-191">If there are no more commands in the command group, the group is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="37755-192"><paramref name="command" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="37755-192"><paramref name="command" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="RemoveVerb">
      <MemberSignature Language="C#" Value="public virtual void RemoveVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member RemoveVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit&#xA;override this.RemoveVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="menuCommandService.RemoveVerb verb" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb"><span data-ttu-id="37755-193">要移除的谓词。</span><span class="sxs-lookup"><span data-stu-id="37755-193">The verb to remove.</span></span></param>
        <summary><span data-ttu-id="37755-194">从文档中移除给定谓词。</span><span class="sxs-lookup"><span data-stu-id="37755-194">Removes the given verb from the document.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="37755-195"><paramref name="verb" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="37755-195"><paramref name="verb" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenu">
      <MemberSignature Language="C#" Value="public virtual void ShowContextMenu (System.ComponentModel.Design.CommandID menuID, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowContextMenu(class System.ComponentModel.Design.CommandID menuID, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ShowContextMenu (menuID As CommandID, x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ShowContextMenu(System::ComponentModel::Design::CommandID ^ menuID, int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenu : System.ComponentModel.Design.CommandID * int * int -&gt; unit&#xA;override this.ShowContextMenu : System.ComponentModel.Design.CommandID * int * int -&gt; unit" Usage="menuCommandService.ShowContextMenu (menuID, x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuID" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="menuID"><span data-ttu-id="37755-196">要显示的快捷菜单。</span><span class="sxs-lookup"><span data-stu-id="37755-196">The shortcut menu to display.</span></span></param>
        <param name="x"><span data-ttu-id="37755-197">快捷菜单位置的 x 坐标。</span><span class="sxs-lookup"><span data-stu-id="37755-197">The x-coordinate of the shortcut menu's location.</span></span></param>
        <param name="y"><span data-ttu-id="37755-198">快捷菜单位置的 y 坐标。</span><span class="sxs-lookup"><span data-stu-id="37755-198">The y-coordinate of the shortcut menu's location.</span></span></param>
        <summary><span data-ttu-id="37755-199">在给定位置显示带有给定的命令 ID 的快捷菜单。</span><span class="sxs-lookup"><span data-stu-id="37755-199">Shows the shortcut menu with the given command ID at the given location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-200">默认实现不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="37755-200">The default implementation does nothing.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.Design.DesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.MenuCommandService.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Verbs As DesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::Design::DesignerVerbCollection ^ Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Verbs : System.ComponentModel.Design.DesignerVerbCollection" Usage="System.ComponentModel.Design.MenuCommandService.Verbs" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.Design.IMenuCommandService.Verbs</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="37755-201">获取当前可用的设计器谓词的集合。</span><span class="sxs-lookup"><span data-stu-id="37755-201">Gets a collection of the designer verbs that are currently available.</span></span></summary>
        <value><span data-ttu-id="37755-202">当前可用的设计器谓词的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</span><span class="sxs-lookup"><span data-stu-id="37755-202">A <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> of the designer verbs that are currently available.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37755-203"><xref:System.ComponentModel.Design.MenuCommandService.Verbs%2A>属性提供谓词的集合。</span><span class="sxs-lookup"><span data-stu-id="37755-203">The <xref:System.ComponentModel.Design.MenuCommandService.Verbs%2A> property provides a collection of verbs.</span></span> <span data-ttu-id="37755-204">这些谓词来自两个位置：</span><span class="sxs-lookup"><span data-stu-id="37755-204">These verbs come from two places:</span></span>  
  
-   <span data-ttu-id="37755-205">通过添加的动词<xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A>方法的<xref:System.ComponentModel.Design.MenuCommandService.Verbs%2A>。</span><span class="sxs-lookup"><span data-stu-id="37755-205">Verbs added through the <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A> method of <xref:System.ComponentModel.Design.MenuCommandService.Verbs%2A>.</span></span>  
  
-   <span data-ttu-id="37755-206">由当前所选的设计器提供的谓词。</span><span class="sxs-lookup"><span data-stu-id="37755-206">Verbs offered by the currently selected designer.</span></span>  
  
 <span data-ttu-id="37755-207">谓词添加到此服务<xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A>方法称为全局谓词，因为它们是全局到此服务，但通常没有此服务为每个工具或文档窗口的一个实例。</span><span class="sxs-lookup"><span data-stu-id="37755-207">Verbs added to this service through the <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A> method are called global verbs because they are global to this service, but generally there is one instance of this service for each tool or document window.</span></span> <span data-ttu-id="37755-208">通过查询的服务提供程序获得设计器谓词<xref:System.ComponentModel.Design.IDesignerHost>和<xref:System.ComponentModel.Design.ISelectionService>。</span><span class="sxs-lookup"><span data-stu-id="37755-208">Designer verbs are obtained by querying the service provider for <xref:System.ComponentModel.Design.IDesignerHost> and <xref:System.ComponentModel.Design.ISelectionService>.</span></span> <span data-ttu-id="37755-209">如果设计器可以获取有关从所选内容和所选内容服务提供的主选择<xref:System.ComponentModel.Design.IDesignerHost>，在设计器谓词添加到此列表。</span><span class="sxs-lookup"><span data-stu-id="37755-209">If the selection service offers a primary selection, and a designer can be obtained for that selection from <xref:System.ComponentModel.Design.IDesignerHost>, the designer's verbs are added to this list.</span></span> <span data-ttu-id="37755-210">如果与设计器谓词的名称冲突的全局谓词名称，提供设计器设计器谓词优先。</span><span class="sxs-lookup"><span data-stu-id="37755-210">If the name of a global verb conflicts with the name of a designer verb, the designer-provided designer verb takes precedence.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
  </Members>
</Type>
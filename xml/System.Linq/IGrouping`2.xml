<Type Name="IGrouping&lt;TKey,TElement&gt;" FullName="System.Linq.IGrouping&lt;TKey,TElement&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0009a7c656756e5407d2df23857fa218eebbbafd" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69277822" /></Metadata><TypeSignature Language="C#" Value="public interface IGrouping&lt;out TKey,out TElement&gt; : System.Collections.Generic.IEnumerable&lt;out TElement&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IGrouping`2&lt;+ TKey, + TElement&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IGrouping`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IGrouping(Of Out TKey, Out TElement)&#xA;Implements IEnumerable(Of Out TElement)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TElement&gt;&#xA;public interface class IGrouping : System::Collections::Generic::IEnumerable&lt;TElement&gt;" />
  <TypeSignature Language="F#" Value="type IGrouping&lt;'Key, 'Element&gt; = interface&#xA;    interface seq&lt;'Element&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TElement">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TElement&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey"><see cref="T:System.Linq.IGrouping`2" /> 的键的类型。</typeparam>
    <typeparam name="TElement"><see cref="T:System.Linq.IGrouping`2" /> 的值的类型。</typeparam>
    <summary>表示具有公共键的对象的集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IGrouping%602> 为,<xref:System.Collections.Generic.IEnumerable%601>此外还有一个键。 键表示对中<xref:System.Linq.IGrouping%602>的每个值都通用的属性。  
  
 在访问的元素<xref:System.Linq.IGrouping%602> <xref:System.Collections.Generic.IEnumerable%601>时, 访问的值很多。 例如`foreach` , 可以通过在 Visual C#或`For Each` Visual Basic 循环中使用来访问这些值, 以便循环访问<xref:System.Linq.IGrouping%602>对象。 "示例" 部分包含的代码示例演示如何访问<xref:System.Linq.IGrouping%602>对象的键和值。  
  
 类型由标准查询运算符方法使用, 该方法返回类型<xref:System.Linq.IGrouping%602>的元素的序列。 <xref:System.Linq.Enumerable.GroupBy%2A> <xref:System.Linq.IGrouping%602>  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Linq.IGrouping%602>对象。  
  
 在此示例中<xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> , 在返回<xref:System.Type.GetMembers%2A>的<xref:System.Reflection.MemberInfo>对象数组上调用。 <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>根据对象的<xref:System.Reflection.MemberInfo.MemberType%2A>属性值对这些对象进行分组。 <xref:System.Reflection.MemberInfo.MemberType%2A> <xref:System.Linq.IGrouping%602> <xref:System.Reflection.MemberInfo> <xref:System.Linq.IGrouping%602>对象数组中的每个唯一值都成为新对象的键, 具有该键的对象将形成对象的值序列。 <xref:System.Reflection.MemberInfo>  
  
 最后, <xref:System.Linq.Enumerable.First%2A>对<xref:System.Linq.IGrouping%602>对象序列调用方法以仅获取第一个<xref:System.Linq.IGrouping%602>对象。  
  
 然后, 该示例输出对象的键<xref:System.Linq.IGrouping%602> <xref:System.Reflection.MemberInfo.Name%2A>和<xref:System.Linq.IGrouping%602>对象的值序列中每个值的属性。 请注意, 若要<xref:System.Linq.IGrouping%602>访问对象的值序列, 只需<xref:System.Linq.IGrouping%602>使用变量本身。  
  
 [!code-csharp[System.Linq.IGrouping#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IGrouping/CS/igrouping.cs#1)]
 [!code-vb[System.Linq.IGrouping#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IGrouping/VB/IGrouping.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public TKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TKey Key" />
      <MemberSignature Language="DocId" Value="P:System.Linq.IGrouping`2.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As TKey" />
      <MemberSignature Language="F#" Value="member this.Key : 'Key" Usage="System.Linq.IGrouping&lt;'Key, 'Element&gt;.Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TKey Key { TKey get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Linq.IGrouping`2" /> 的键。</summary>
        <value><see cref="T:System.Linq.IGrouping`2" /> 的键。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 的键<xref:System.Linq.IGrouping%602>表示对中的<xref:System.Linq.IGrouping%602>每个值都通用的属性。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Linq.IGrouping%602.Key%2A>属性来标记对象序列中的<xref:System.Linq.IGrouping%602>每个<xref:System.Linq.IGrouping%602>对象。 方法用于获取<xref:System.Linq.IGrouping%602>对象的序列。 <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> 然后`foreach` , Visual C#或`For Each` in Visual Basic 循环中的将循环<xref:System.Linq.IGrouping%602>访问每个对象, 并输出其键以及它所包含的值的数目。  
  
 [!code-csharp[System.Linq.IGrouping#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IGrouping/CS/igrouping.cs#2)]
 [!code-vb[System.Linq.IGrouping#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IGrouping/VB/IGrouping.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

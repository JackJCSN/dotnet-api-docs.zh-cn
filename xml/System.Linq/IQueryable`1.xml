<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ccde6b6dea6124df4d2707d9caf57d0392b3c9b7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69277693" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">数据源中数据的类型。</typeparam>
    <summary>提供对数据类型已知的特定数据源的查询进行计算的功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IQueryable%601>接口旨在由查询提供程序实现。  
  
 此接口继承<xref:System.Collections.Generic.IEnumerable%601>接口, 因此, 如果它表示一个查询, 则可以枚举该查询的结果。 枚举强制执行与某个<xref:System.Linq.IQueryable%601>对象关联的表达式树。 调用<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>方法时, 将执行不返回可枚举结果的查询。  
  
 "执行表达式树" 的定义特定于查询提供程序。 例如, 它可能涉及将表达式树转换为适用于基础数据源的查询语言。  
  
 <xref:System.Linq.IQueryable%601>接口使查询成为多态查询。 也就是说, 因为针对`IQueryable`数据源的查询表示为表达式树, 所以它可以针对不同类型的数据源执行。  
  
 在`static`类`Shared` <xref:System.Linq.Queryable.ThenByDescending%2A> <xref:System.Linq.Queryable.AsQueryable%2A> <xref:System.Linq.Queryable.ThenBy%2A>中定义的 (在 Visual Basic) 方法(<xref:System.Linq.IQueryable%601> 、和除外) 扩展实现接口的类型的对象。 <xref:System.Linq.Queryable>  
  
 有关如何创建自己的 linq 提供程序的详细信息, 请[参阅 linq:在 MSDN 博客上](https://go.microsoft.com/fwlink/?LinkID=112370)构建 IQueryable 提供程序。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>

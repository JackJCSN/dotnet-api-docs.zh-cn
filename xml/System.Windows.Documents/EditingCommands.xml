<Type Name="EditingCommands" FullName="System.Windows.Documents.EditingCommands">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e548e08b556eb3bea554b24d86bbc3a1cc4dbe43" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69208811" /></Metadata><TypeSignature Language="C#" Value="public static class EditingCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EditingCommands extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.EditingCommands" />
  <TypeSignature Language="VB.NET" Value="Public Class EditingCommands" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditingCommands abstract sealed" />
  <TypeSignature Language="F#" Value="type EditingCommands = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="896d9-101">提供一组标准的与编辑相关的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-101">Provides a standard set of editing related commands.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-102">下表显示了编辑命令和关联的默认键笔势 (包含<xref:System.Windows.Input.Key>和<xref:System.Windows.Input.ModifierKeys>枚举中的键名)。</span><span class="sxs-lookup"><span data-stu-id="896d9-102">The following table shows the editing commands and the associated default key gestures (with key names from the <xref:System.Windows.Input.Key> and <xref:System.Windows.Input.ModifierKeys> enumerations).</span></span>  
  
|<span data-ttu-id="896d9-103">编辑命令</span><span class="sxs-lookup"><span data-stu-id="896d9-103">Editing command</span></span>|<span data-ttu-id="896d9-104">默认键笔势</span><span class="sxs-lookup"><span data-stu-id="896d9-104">Default key gesture</span></span>|  
|---------------------|-------------------------|  
|<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|  
|<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|  
|<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|  
|<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|<span data-ttu-id="896d9-105">无默认键笔势</span><span class="sxs-lookup"><span data-stu-id="896d9-105">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|<span data-ttu-id="896d9-106">无默认键笔势</span><span class="sxs-lookup"><span data-stu-id="896d9-106">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|  
  
 <span data-ttu-id="896d9-107">脱字号移动命令和选择扩展命令共享一组通用的默认键笔势, 一般差别在于添加<xref:System.Windows.Input.ModifierKeys.Shift>密钥来区分来自插入符号移动命令的选择命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-107">Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the <xref:System.Windows.Input.ModifierKeys.Shift> key to differentiate selection commands from caret movement commands.</span></span>  <span data-ttu-id="896d9-108">例如, <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>命令的默认键<xref:System.Windows.Input.ModifierKeys.Shift> <xref:System.Windows.Input.Key.Left>笔势为, 并且相应<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>的命令具有的默认键笔势+。 <xref:System.Windows.Input.Key.Left></span><span class="sxs-lookup"><span data-stu-id="896d9-108">For example, the <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.Key.Left>, and the corresponding <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.ModifierKeys.Shift>+<xref:System.Windows.Input.Key.Left>.</span></span>  
  
 <span data-ttu-id="896d9-109">通常, <xref:System.Windows.Documents.EditingCommands>类提供的命令定义不使用命令参数 ( <xref:System.Windows.Input.ICommand.Execute%2A>方法所需的`parameter`参数)。</span><span class="sxs-lookup"><span data-stu-id="896d9-109">In general, the command definitions provided by the <xref:System.Windows.Documents.EditingCommands> class do not make use of command parameters (the `parameter` parameter expected by the <xref:System.Windows.Input.ICommand.Execute%2A> method).</span></span>  
  
 <span data-ttu-id="896d9-110">有关命令和命令的详细信息, 请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="896d9-110">For more information on commands and commanding, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896d9-111">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-111">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-112">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-112">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-113">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-113">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-114"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-114">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-115">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-115">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-116">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-116">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-117">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-117">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-118">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-118">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MediaCommands" />
    <altmember cref="T:System.Windows.Input.ApplicationCommands" />
    <altmember cref="T:System.Windows.Input.ComponentCommands" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
    <altmember cref="T:System.Windows.Input.NavigationCommands" />
  </Docs>
  <Members>
    <Member MemberName="AlignCenter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignCenter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignCenter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignCenter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignCenter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignCenter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-119">表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> 命令，该命令请求将当前段落或选中的段落居中。</span><span class="sxs-lookup"><span data-stu-id="896d9-119">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> command, which requests that the current paragraph or a selection of paragraphs be centered.</span></span></summary>
        <value><span data-ttu-id="896d9-120">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-120">The requested command.</span></span>  <span data-ttu-id="896d9-121">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="E" /></span><span class="sxs-lookup"><span data-stu-id="896d9-121">The default key gesture for this command is <see langword="Ctrl" />+<see langword="E" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-122">此命令在<xref:System.Windows.Documents.Paragraph>级别运行。</span><span class="sxs-lookup"><span data-stu-id="896d9-122">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="896d9-123">如果对某个段落中的部分内容选择调用此命令 (包括一个段落中插入符号的空选定内容), 则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="896d9-123">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="896d9-124">如果对跨多个段落的选定内容调用此命令, 则会将效果应用于参与选定内容的每个段落的全部内容。</span><span class="sxs-lookup"><span data-stu-id="896d9-124">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="896d9-125">下图显示了一个居中内容的示例。</span><span class="sxs-lookup"><span data-stu-id="896d9-125">The following figure shows an example of centered content.</span></span>  
  
 <span data-ttu-id="896d9-126">![图]中心(~/add/media/flowdoc-textalign-center.png "屏幕截图的 \"文本对齐\" 属性值:Center 的文本对齐属性值")</span><span class="sxs-lookup"><span data-stu-id="896d9-126">![Screenshot: TextAlign property value of Center](~/add/media/flowdoc-textalign-center.png "Screenshot: TextAlign property value of Center")</span></span>  
  
 <span data-ttu-id="896d9-127">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-127">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignCenter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-128">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-128">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignCenter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-129">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-129">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-130">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-130">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-131">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-131">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-132"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-132">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-133">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-133">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-134">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-134">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-135">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-135">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-136">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-136">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignJustify">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignJustify { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignJustify" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignJustify As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignJustify { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignJustify : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-137">表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> 命令，该命令请求将当前段落或选中的段落两端对齐。</span><span class="sxs-lookup"><span data-stu-id="896d9-137">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> command, which requests that the current paragraph or a selection of paragraphs be justified.</span></span></summary>
        <value><span data-ttu-id="896d9-138">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-138">The requested command.</span></span>  <span data-ttu-id="896d9-139">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="J" /></span><span class="sxs-lookup"><span data-stu-id="896d9-139">The default key gesture for this command is <see langword="Ctrl" />+<see langword="J" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-140">此命令在<xref:System.Windows.Documents.Paragraph>级别运行。</span><span class="sxs-lookup"><span data-stu-id="896d9-140">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="896d9-141">如果对某个段落中的部分内容选择调用此命令 (包括一个段落中插入符号的空选定内容), 则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="896d9-141">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="896d9-142">如果对跨多个段落的选定内容调用此命令, 则会将效果应用于所选内容中的所有段落。</span><span class="sxs-lookup"><span data-stu-id="896d9-142">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to all the paragraphs in the selection.</span></span>  
  
 <span data-ttu-id="896d9-143">对齐内容时, 将调整每个内容行内的水平间距, 以使对齐的行的宽度相等或接近相等。</span><span class="sxs-lookup"><span data-stu-id="896d9-143">When content is justified, the horizontal spacing within each line of content is adjusted so that the justified lines are of equal or near-equal width.</span></span>  <span data-ttu-id="896d9-144">内容通常对齐, 以在内容的侧面创建平滑边缘。</span><span class="sxs-lookup"><span data-stu-id="896d9-144">Content is typically justified to create smooth edges on the sides of the content.</span></span>  
  
 <span data-ttu-id="896d9-145">由于它通常比其余部分更短, 因此, 在调用此命令后, 段落中的最后一行可能仍然对齐。</span><span class="sxs-lookup"><span data-stu-id="896d9-145">Because it is often shorter than the rest, the last line in a paragraph may remain unjustified after this command is invoked.</span></span>  
  
 <span data-ttu-id="896d9-146">下图显示了对齐 (左对齐) 内容。</span><span class="sxs-lookup"><span data-stu-id="896d9-146">The following figure shows unjustified (left-aligned) content.</span></span>  
  
 <span data-ttu-id="896d9-147">![图内容是对齐](~/add/media/content-unjustified.png "的屏幕快照:内容为对齐")</span><span class="sxs-lookup"><span data-stu-id="896d9-147">![Screenshot: Content is unjustified](~/add/media/content-unjustified.png "Screenshot: Content is unjustified")</span></span>  
  
 <span data-ttu-id="896d9-148">下图显示了两端的相同内容。</span><span class="sxs-lookup"><span data-stu-id="896d9-148">The following figure shows the same content after it has been justified.</span></span>  
  
 <span data-ttu-id="896d9-149">![内容调整文本的屏幕截图](~/add/media/content-justified.png "内容调整文本的屏幕截图")</span><span class="sxs-lookup"><span data-stu-id="896d9-149">![Screenshot of content justified text](~/add/media/content-justified.png "Screenshot of content justified text")</span></span>  
  
 <span data-ttu-id="896d9-150">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-150">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-151">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-151">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignJustify"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-152">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-152">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignJustify"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-153">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-153">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-154">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-154">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-155">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-155">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-156"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-156">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-157">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-157">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-158">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-158">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-159">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-159">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-160">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-160">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignLeft">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignLeft As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignLeft { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignLeft : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-161">表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> 命令，该命令请求将所选内容左对齐。</span><span class="sxs-lookup"><span data-stu-id="896d9-161">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> command, which requests that a selection of content be aligned left.</span></span></summary>
        <value><span data-ttu-id="896d9-162">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-162">The requested command.</span></span>  <span data-ttu-id="896d9-163">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="L" /></span><span class="sxs-lookup"><span data-stu-id="896d9-163">The default key gesture for this command is <see langword="Ctrl" />+<see langword="L" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-164">此命令在<xref:System.Windows.Documents.Paragraph>级别运行。</span><span class="sxs-lookup"><span data-stu-id="896d9-164">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="896d9-165">如果对某个段落中的部分内容选择调用此命令 (包括一个段落中插入符号的空选定内容), 则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="896d9-165">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="896d9-166">如果对跨多个段落的选定内容调用此命令, 则会将效果应用于参与选定内容的每个段落的全部内容。</span><span class="sxs-lookup"><span data-stu-id="896d9-166">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="896d9-167">下图显示了左对齐内容的示例。</span><span class="sxs-lookup"><span data-stu-id="896d9-167">The following figure shows an example of left-aligned content.</span></span>  
  
 <span data-ttu-id="896d9-168">![图]左(~/add/media/flowdoc-textalign-left.png "屏幕截图的 \"文本对齐\" 属性值:左对齐属性值")</span><span class="sxs-lookup"><span data-stu-id="896d9-168">![Screenshot: TextAlign property value of Left](~/add/media/flowdoc-textalign-left.png "Screenshot: TextAlign property value of Left")</span></span>  
  
 <span data-ttu-id="896d9-169">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-169">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-170">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-170">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignLeft"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-171">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-171">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignLeft"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-172">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-172">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-173">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-173">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-174">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-174">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-175"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-175">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-176">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-176">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-177">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-177">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-178">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-178">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-179">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-179">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignRight">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignRight As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignRight { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignRight : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-180">表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> 命令，该命令请求将所选内容右对齐。</span><span class="sxs-lookup"><span data-stu-id="896d9-180">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> command, which requests that a selection of content be aligned right.</span></span></summary>
        <value><span data-ttu-id="896d9-181">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-181">The requested command.</span></span>  <span data-ttu-id="896d9-182">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="R" /></span><span class="sxs-lookup"><span data-stu-id="896d9-182">The default key gesture for this command is <see langword="Ctrl" />+<see langword="R" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-183">此命令在<xref:System.Windows.Documents.Paragraph>级别运行。</span><span class="sxs-lookup"><span data-stu-id="896d9-183">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="896d9-184">如果对某个段落中的部分内容选择调用此命令 (包括一个段落中插入符号的空选定内容), 则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="896d9-184">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="896d9-185">如果对跨多个段落的选定内容调用此命令, 则会将效果应用于参与选定内容的每个段落的全部内容。</span><span class="sxs-lookup"><span data-stu-id="896d9-185">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="896d9-186">下图显示了右对齐内容的示例。</span><span class="sxs-lookup"><span data-stu-id="896d9-186">The following figure shows an example of right-aligned content.</span></span>  
  
 <span data-ttu-id="896d9-187">![图]右(~/add/media/flowdoc-textalign-right.png "屏幕截图的 \"文本对齐\" 值:右对齐值")</span><span class="sxs-lookup"><span data-stu-id="896d9-187">![Screenshot: TextAlign value of Right](~/add/media/flowdoc-textalign-right.png "Screenshot: TextAlign value of Right")</span></span>  
  
 <span data-ttu-id="896d9-188">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-188">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-189">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-189">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignRight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-190">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-190">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignRight"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-191">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-191">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-192">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-192">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-193">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-193">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-194"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-194">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-195">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-195">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-196">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-196">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-197">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-197">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-198">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-198">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="Backspace">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Backspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Backspace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Backspace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Backspace As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Backspace { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Backspace : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Backspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-199">表示 <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> 命令，该命令请求在当前位置或当前所选内容上输入一个退格。</span><span class="sxs-lookup"><span data-stu-id="896d9-199">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> command, which requests that a backspace be entered at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="896d9-200">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-200">The requested command.</span></span>  <span data-ttu-id="896d9-201">此命令的默认键笔势为 <see langword="Backspace" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-201">The default key gesture for this command is <see langword="Backspace" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-202">对空选定内容调用时, 此命令将删除插入符号前的字符或段落分隔符。</span><span class="sxs-lookup"><span data-stu-id="896d9-202">When invoked on an empty selection, this command deletes the character or paragraph separator just before the caret.</span></span> <span data-ttu-id="896d9-203">在非空选择上调用时, 此命令将删除选择。</span><span class="sxs-lookup"><span data-stu-id="896d9-203">When invoked on a non-empty selection, this command deletes the selection.</span></span>  
  
 <span data-ttu-id="896d9-204">此命令将保留在调用此命令后立即插入到同一位置的内容的已删除选择内容中的任何格式。</span><span class="sxs-lookup"><span data-stu-id="896d9-204">This command retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  <span data-ttu-id="896d9-205">与<xref:System.Windows.Documents.EditingCommands.Delete%2A>命令相反, 它不会保留以前的格式设置。</span><span class="sxs-lookup"><span data-stu-id="896d9-205">Contrast with the <xref:System.Windows.Documents.EditingCommands.Delete%2A> command, which does not retain previous formatting.</span></span>  
  
 <span data-ttu-id="896d9-206">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-206">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-207"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-207">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Backspace"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-208">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-208">XAML Attribute Usage</span></span>  
  
```  
<object property="Backspace"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-209">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-209">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-210">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-210">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-211">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-211">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-212"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-212">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-213">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-213">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-214">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-214">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-215">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-215">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-216">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-216">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CorrectSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand CorrectSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrectSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ CorrectSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CorrectSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-217">表示 <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> 命令，该命令请求更正当前位置任何拼写错误的单词。</span><span class="sxs-lookup"><span data-stu-id="896d9-217">Represents the <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> command, which requests that any misspelled word at the current position be corrected.</span></span></summary>
        <value><span data-ttu-id="896d9-218">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-218">The requested command.</span></span>  <span data-ttu-id="896d9-219">此命令无默认键笔势。</span><span class="sxs-lookup"><span data-stu-id="896d9-219">This command has no default key gesture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-220">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-220">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_CorrectSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-221">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-221">XAML Attribute Usage</span></span>  
  
```  
<object property="CorrectSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-222">表示 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> 命令，该命令请求将当前所选内容的字号缩小 1 磅。</span><span class="sxs-lookup"><span data-stu-id="896d9-222">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> command, which requests that the font size for the current selection be decreased by 1 point.</span></span></summary>
        <value><span data-ttu-id="896d9-223">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-223">The requested command.</span></span>  <span data-ttu-id="896d9-224">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="OemOpenBrackets" /></span><span class="sxs-lookup"><span data-stu-id="896d9-224">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemOpenBrackets" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-225">如果对插入点所在的空选定内容调用此命令, 则将自动展开所选内容, 将该命令应用于整个单词。</span><span class="sxs-lookup"><span data-stu-id="896d9-225">If this command is invoked on an empty selection where the caret is within a word, the selection is automatically expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="896d9-226">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-226">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-227">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-227">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-228">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-228">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-229">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-229">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-230">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-230">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-231">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-231">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-232"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-232">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-233">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-233">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-234">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-234">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-235">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-235">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-236">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-236">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-237">表示 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> 命令，该命令请求将当前段落的缩进减少一个制表位。</span><span class="sxs-lookup"><span data-stu-id="896d9-237">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> command, which requests that indentation for the current paragraph be decreased by one tab stop.</span></span></summary>
        <value><span data-ttu-id="896d9-238">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-238">The requested command.</span></span>  <span data-ttu-id="896d9-239">此命令的默认键笔势为<see langword="Ctrl" />。 <see langword="Shift" /> + + <see langword="T" /></span><span class="sxs-lookup"><span data-stu-id="896d9-239">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="T" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-240">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-240">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-241">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-241">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="896d9-242">除非文本元素的<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>属性设置为`true`, 否则此命令对文本元素不起作用。</span><span class="sxs-lookup"><span data-stu-id="896d9-242">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-243">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-243">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-244">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-244">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-245">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-245">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-246">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-246">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-247"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-247">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-248">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-248">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-249">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-249">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-250">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-250">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-251">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-251">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Delete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Delete" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Delete As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Delete { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Delete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-252">表示 <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> 命令，该命令请求删除当前所选内容。</span><span class="sxs-lookup"><span data-stu-id="896d9-252">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> command, which requests that the current selection be deleted.</span></span></summary>
        <value><span data-ttu-id="896d9-253">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-253">The requested command.</span></span>  <span data-ttu-id="896d9-254">此命令的默认键笔势为 <see langword="Delete" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-254">The default key gesture for this command is <see langword="Delete" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-255">此命令从删除的选定内容中丢弃任何格式设置。</span><span class="sxs-lookup"><span data-stu-id="896d9-255">This command discards any formatting from the deleted selection.</span></span>  <span data-ttu-id="896d9-256">与<xref:System.Windows.Documents.EditingCommands.Backspace%2A>命令相反, 它会在调用此命令后, 保留从已删除的内容中立即插入到同一位置的内容的任何格式设置。</span><span class="sxs-lookup"><span data-stu-id="896d9-256">Contrast with the <xref:System.Windows.Documents.EditingCommands.Backspace%2A> command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  
  
 <span data-ttu-id="896d9-257">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-257">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-258"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-258">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Delete"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-259">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-259">XAML Attribute Usage</span></span>  
  
```  
<object property="Delete"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-260">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-260">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-261">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-261">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-262">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-262">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-263"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-263">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-264">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-264">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-265">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-265">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-266">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-266">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-267">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-267">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNextWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeleteNextWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeleteNextWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeleteNextWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteNextWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-268">表示 <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> 命令，该命令请求删除下一单词（相对于当前位置而言）。</span><span class="sxs-lookup"><span data-stu-id="896d9-268">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> command, which requests that the next word (relative to a current position) be deleted.</span></span></summary>
        <value><span data-ttu-id="896d9-269">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-269">The requested command.</span></span>  <span data-ttu-id="896d9-270">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="Delete" /></span><span class="sxs-lookup"><span data-stu-id="896d9-270">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Delete" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-271">如果插入符号位于某个单词中, 则将删除当前位置与单词末尾之间的单词的其余部分。</span><span class="sxs-lookup"><span data-stu-id="896d9-271">If the caret is within a word, the remainder of the word between the current position and the end of the word is deleted.</span></span>  
  
 <span data-ttu-id="896d9-272">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-272">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-273"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-273">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeleteNextWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-274">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-274">XAML Attribute Usage</span></span>  
  
```  
<object property="DeleteNextWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-275">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-275">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-276">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-276">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-277">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-277">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-278"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-278">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-279">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-279">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-280">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-280">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-281">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-281">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-282">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-282">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="DeletePreviousWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeletePreviousWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeletePreviousWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeletePreviousWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeletePreviousWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-283">表示 <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> 命令，该命令请求删除上一单词（相对于当前位置而言）。</span><span class="sxs-lookup"><span data-stu-id="896d9-283">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> command, which requests that the previous word (relative to a current position) be deleted.</span></span></summary>
        <value><span data-ttu-id="896d9-284">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-284">The requested command.</span></span>  <span data-ttu-id="896d9-285">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="Backspace" /></span><span class="sxs-lookup"><span data-stu-id="896d9-285">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Backspace" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-286">如果插入符号位于某个单词中, 则将删除当前位置与单词开头之间的单词的其余部分。</span><span class="sxs-lookup"><span data-stu-id="896d9-286">If the caret is within a word, the remainder of the word between the current position and the beginning of the word is deleted.</span></span>  
  
 <span data-ttu-id="896d9-287">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-287">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-288"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-288">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeletePreviousWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-289">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-289">XAML Attribute Usage</span></span>  
  
```  
<object property="DeletePreviousWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-290">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-290">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-291">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-291">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-292">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-292">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-293"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-293">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-294">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-294">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-295">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-295">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-296">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-296">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-297">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-297">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="EnterLineBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterLineBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterLineBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterLineBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterLineBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-298">表示 <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> 命令，该命令请求在当前位置或当前所选内容上插入一个换行符。</span><span class="sxs-lookup"><span data-stu-id="896d9-298">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> command, which requests that a line break be inserted at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="896d9-299">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-299">The requested command.</span></span>  <span data-ttu-id="896d9-300">此命令的默认键笔势为<see langword="Shift" />。 + <see langword="Enter" /></span><span class="sxs-lookup"><span data-stu-id="896d9-300">The default key gesture for this command is <see langword="Shift" />+<see langword="Enter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-301">对于支持流内容的编辑器 (如<xref:System.Windows.Controls.RichTextBox>), 此命令<xref:System.Windows.Documents.LineBreak>会导致在当前位置插入元素。</span><span class="sxs-lookup"><span data-stu-id="896d9-301">For editors that support flow content, such as <xref:System.Windows.Controls.RichTextBox>, this command causes a <xref:System.Windows.Documents.LineBreak> element to be inserted at the current position.</span></span>  
  
 <span data-ttu-id="896d9-302">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-302">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-303"><xref:System.Windows.Controls.RichTextBox> 和<xref:System.Windows.Controls.TextBox>本身都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-303">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_EnterLineBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-304">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-304">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterLineBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-305">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-305">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-306">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-306">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-307">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-307">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-308"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-308">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-309">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-309">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-310">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-310">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-311">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-311">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-312">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-312">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      </Docs>
    </Member>
    <Member MemberName="EnterParagraphBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterParagraphBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterParagraphBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterParagraphBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterParagraphBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-313">表示 <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> 命令，该命令请求在当前位置或当前所选内容上插入一个分段符。</span><span class="sxs-lookup"><span data-stu-id="896d9-313">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> command, which requests that a paragraph break be inserted at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="896d9-314">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-314">The requested command.</span></span>  <span data-ttu-id="896d9-315">此命令的默认键笔势为 <see langword="Enter" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-315">The default key gesture for this command is <see langword="Enter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-316">此命令等效于用户按下 ENTER 键。</span><span class="sxs-lookup"><span data-stu-id="896d9-316">This command is equivalent to the user pressing the ENTER key.</span></span>  
  
 <span data-ttu-id="896d9-317">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-317">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-318"><xref:System.Windows.Controls.RichTextBox>和(<xref:System.Windows.Controls.TextBox> 属性为`true`) 本机支持此命令。 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A></span><span class="sxs-lookup"><span data-stu-id="896d9-318">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property is `true`).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="896d9-319">除非文本元素的<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>属性设置为`true`, 否则此命令对文本元素不起作用。</span><span class="sxs-lookup"><span data-stu-id="896d9-319">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_EnterParagraphBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-320">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-320">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterParagraphBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-321">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-321">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-322">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-322">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-323">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-323">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-324"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-324">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-325">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-325">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-326">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-326">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-327">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-327">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-328">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-328">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IgnoreSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IgnoreSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IgnoreSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-329">表示 <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> 命令，该命令请求忽略当前位置或当前所选内容中任何拼写错误的单词的实例。</span><span class="sxs-lookup"><span data-stu-id="896d9-329">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.</span></span></summary>
        <value><span data-ttu-id="896d9-330">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-330">The requested command.</span></span>  <span data-ttu-id="896d9-331">此命令无默认键笔势。</span><span class="sxs-lookup"><span data-stu-id="896d9-331">This command has no default key gesture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-332">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-332">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_IgnoreSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-333">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-333">XAML Attribute Usage</span></span>  
  
```  
<object property="IgnoreSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-334">表示 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> 命令，该命令请求将当前所选内容的字号增加 1 磅。</span><span class="sxs-lookup"><span data-stu-id="896d9-334">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> command, which requests that the font size for the current selection be increased by 1 point.</span></span></summary>
        <value><span data-ttu-id="896d9-335">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-335">The requested command.</span></span>  <span data-ttu-id="896d9-336">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="OemCloseBrackets" /></span><span class="sxs-lookup"><span data-stu-id="896d9-336">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemCloseBrackets" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-337">如果对插入点所在的空选定内容调用此命令, 则将展开所选内容以将该命令应用于整个单词。</span><span class="sxs-lookup"><span data-stu-id="896d9-337">If this command is invoked on an empty selection where the caret is within a word, the selection is expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="896d9-338">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-338">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-339">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-339">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-340">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-340">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-341">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-341">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-342">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-342">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-343">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-343">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-344"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-344">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-345">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-345">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-346">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-346">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-347">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-347">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-348">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-348">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-349">表示 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> 命令，该命令请求将当前段落的缩进增加一个制表位。</span><span class="sxs-lookup"><span data-stu-id="896d9-349">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> command, which requests that indentation for the current paragraph be increased by one tab stop.</span></span></summary>
        <value><span data-ttu-id="896d9-350">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-350">The requested command.</span></span>  <span data-ttu-id="896d9-351">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="T" /></span><span class="sxs-lookup"><span data-stu-id="896d9-351">The default key gesture for this command is <see langword="Ctrl" />+<see langword="T" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-352">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-352">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-353">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-353">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="896d9-354">除非文本元素的<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>属性设置为`true`, 否则此命令对文本元素不起作用。</span><span class="sxs-lookup"><span data-stu-id="896d9-354">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-355">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-355">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-356">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-356">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-357">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-357">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-358">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-358">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-359"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-359">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-360">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-360">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-361">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-361">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-362">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-362">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-363">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-363">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-364">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> 命令，该命令请求将插入符号向下移动一行。</span><span class="sxs-lookup"><span data-stu-id="896d9-364">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> command, which requests that the caret move down by one line.</span></span></summary>
        <value><span data-ttu-id="896d9-365">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-365">The requested command.</span></span>  <span data-ttu-id="896d9-366">此命令的默认键笔势为 <see langword="Down" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-366">The default key gesture for this command is <see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-367">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-367">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-368"><xref:System.Windows.Controls.RichTextBox> 和<xref:System.Windows.Controls.TextBox>本身都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-368">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-369">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-369">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-370">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-370">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-371">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-371">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-372">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-372">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-373"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-373">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-374">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-374">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-375">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-375">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-376">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-376">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-377">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-377">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-378">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> 命令，该命令请求将插入符号向下移动一页。</span><span class="sxs-lookup"><span data-stu-id="896d9-378">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> command, which requests that the caret move down by one page.</span></span></summary>
        <value><span data-ttu-id="896d9-379">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-379">The requested command.</span></span>  <span data-ttu-id="896d9-380">此命令的默认键笔势为 <see langword="PageDown" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-380">The default key gesture for this command is <see langword="PageDown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-381">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-381">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-382"><xref:System.Windows.Controls.RichTextBox> 和<xref:System.Windows.Controls.TextBox>本身都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-382">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-383">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-383">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-384">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-384">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-385">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-385">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-386">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-386">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-387"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-387">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-388">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-388">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-389">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-389">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-390">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-390">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-391">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-391">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-392">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> 命令，该命令请求将插入符号向下移动一个段落。</span><span class="sxs-lookup"><span data-stu-id="896d9-392">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> command, which requests that the caret move down by one paragraph.</span></span></summary>
        <value><span data-ttu-id="896d9-393">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-393">The requested command.</span></span>  <span data-ttu-id="896d9-394">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="Down" /></span><span class="sxs-lookup"><span data-stu-id="896d9-394">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-395">此命令将插入符号定位到下一段落的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-395">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="896d9-396">此命令的行为<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>类似于在上<xref:System.Windows.Controls.TextBox>调用时的行为。</span><span class="sxs-lookup"><span data-stu-id="896d9-396">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="896d9-397">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-397">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-398"><xref:System.Windows.Controls.RichTextBox> 和<xref:System.Windows.Controls.TextBox>本身都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-398">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-399">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-399">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-400">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-400">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-401">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-401">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-402">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-402">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-403"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-403">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-404">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-404">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-405">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-405">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-406">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-406">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-407">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-407">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-408">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> 命令，该命令请求将插入符号向左移动一个字符。</span><span class="sxs-lookup"><span data-stu-id="896d9-408">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> command, which requests that the caret move one character left.</span></span></summary>
        <value><span data-ttu-id="896d9-409">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-409">The requested command.</span></span>  <span data-ttu-id="896d9-410">此命令的默认键笔势为 <see langword="Left" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-410">The default key gesture for this command is <see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-411">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-411">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-412"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-412">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-413">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-413">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-414">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-414">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-415">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-415">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-416">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-416">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-417"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-417">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-418">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-418">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-419">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-419">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-420">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-420">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-421">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-421">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-422">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> 命令，该命令请求将插入符号向左移动一个单词。</span><span class="sxs-lookup"><span data-stu-id="896d9-422">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> command, which requests that the caret move one word left.</span></span></summary>
        <value><span data-ttu-id="896d9-423">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-423">The requested command.</span></span>  <span data-ttu-id="896d9-424">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="Left" /></span><span class="sxs-lookup"><span data-stu-id="896d9-424">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-425">如果插入符号位于某个单词中, 则此命令会将插入符号移动到该单词的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-425">If the caret is within a word, this command moves the caret to the beginning of that word.</span></span>  <span data-ttu-id="896d9-426">否则, 此命令会将插入符号移动到上一个词的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-426">Otherwise, this command moves the caret to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="896d9-427">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-427">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-428"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-428">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-429">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-429">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-430">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-430">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-431">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-431">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-432">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-432">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-433"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-433">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-434">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-434">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-435">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-435">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-436">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-436">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-437">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-437">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-438">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> 命令，该命令请求将插入符号向右移动一个字符。</span><span class="sxs-lookup"><span data-stu-id="896d9-438">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> command, which requests that the caret move one character right.</span></span></summary>
        <value><span data-ttu-id="896d9-439">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-439">The requested command.</span></span>  <span data-ttu-id="896d9-440">此命令的默认键笔势为 <see langword="Right" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-440">The default key gesture for this command is <see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-441">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-441">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-442"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-442">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-443">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-443">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-444">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-444">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-445">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-445">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-446">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-446">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-447"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-447">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-448">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-448">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-449">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-449">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-450">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-450">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-451">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-451">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-452">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> 命令，该命令请求将插入符号向右移动一个单词。</span><span class="sxs-lookup"><span data-stu-id="896d9-452">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> command, which requests that the caret move right by one word.</span></span></summary>
        <value><span data-ttu-id="896d9-453">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-453">The requested command.</span></span>  <span data-ttu-id="896d9-454">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="Right" /></span><span class="sxs-lookup"><span data-stu-id="896d9-454">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-455">如果插入符号位于某个单词内, 此命令会将插入符号移动到该单词的结尾。</span><span class="sxs-lookup"><span data-stu-id="896d9-455">If the caret is within a word, this command moves the caret to the end of that word.</span></span>  <span data-ttu-id="896d9-456">否则, 此命令会将插入符号移动到下一个单词的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-456">Otherwise, this command moves the caret to the beginning of the next word.</span></span>  
  
 <span data-ttu-id="896d9-457">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-457">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-458"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-458">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-459">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-459">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-460">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-460">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-461">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-461">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-462">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-462">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-463"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-463">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-464">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-464">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-465">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-465">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-466">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-466">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-467">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-467">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-468">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> 命令，该命令请求将插入符号移至内容的末尾。</span><span class="sxs-lookup"><span data-stu-id="896d9-468">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> command, which requests that the caret move to the very end of content.</span></span></summary>
        <value><span data-ttu-id="896d9-469">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-469">The requested command.</span></span>  <span data-ttu-id="896d9-470">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="End" /></span><span class="sxs-lookup"><span data-stu-id="896d9-470">The default key gesture for this command is <see langword="Ctrl" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-471">*文本容器*是构成手头内容最终边框的元素。</span><span class="sxs-lookup"><span data-stu-id="896d9-471">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="896d9-472"><xref:System.Windows.Controls.TextBlock>和<xref:System.Windows.Documents.FlowDocument>是文本容器的示例。</span><span class="sxs-lookup"><span data-stu-id="896d9-472"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="896d9-473">文本容器内包含的内容统称为*文档*。</span><span class="sxs-lookup"><span data-stu-id="896d9-473">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="896d9-474">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-474">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-475"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-475">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-476">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-476">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-477">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-477">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-478">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-478">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-479">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-479">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-480"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-480">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-481">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-481">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-482">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-482">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-483">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-483">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-484">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-484">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-485">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> 命令，该命令请求将插入符号移至内容的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-485">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> command, which requests that the caret move to the very beginning of content.</span></span></summary>
        <value><span data-ttu-id="896d9-486">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-486">The requested command.</span></span>  <span data-ttu-id="896d9-487">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="Home" /></span><span class="sxs-lookup"><span data-stu-id="896d9-487">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-488">*文本容器*是构成手头内容最终边框的元素。</span><span class="sxs-lookup"><span data-stu-id="896d9-488">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="896d9-489"><xref:System.Windows.Controls.TextBlock>和<xref:System.Windows.Documents.FlowDocument>是文本容器的示例。</span><span class="sxs-lookup"><span data-stu-id="896d9-489"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="896d9-490">文本容器内包含的内容统称为*文档*。</span><span class="sxs-lookup"><span data-stu-id="896d9-490">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="896d9-491">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-491">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-492"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-492">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-493">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-493">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-494">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-494">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-495">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-495">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-496">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-496">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-497"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-497">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-498">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-498">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-499">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-499">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-500">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-500">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-501">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-501">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-502">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> 命令，该命令请求将插入符号移至当前行的末尾。</span><span class="sxs-lookup"><span data-stu-id="896d9-502">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> command, which requests that the caret move to the end of the current line.</span></span></summary>
        <value><span data-ttu-id="896d9-503">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-503">The requested command.</span></span>  <span data-ttu-id="896d9-504">此命令的默认键笔势为 <see langword="End" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-504">The default key gesture for this command is <see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-505">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-505">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-506"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-506">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-507">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-507">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-508">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-508">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-509">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-509">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-510">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-510">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-511"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-511">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-512">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-512">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-513">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-513">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-514">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-514">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-515">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-515">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-516">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> 命令，该命令请求将插入符号移至当前行的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-516">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> command, which requests that the caret move to the beginning of the current line.</span></span></summary>
        <value><span data-ttu-id="896d9-517">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-517">The requested command.</span></span>  <span data-ttu-id="896d9-518">此命令的默认键笔势为 <see langword="Home" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-518">The default key gesture for this command is <see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-519">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-519">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-520"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-520">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-521">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-521">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-522">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-522">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-523">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-523">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-524">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-524">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-525"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-525">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-526">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-526">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-527">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-527">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-528">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-528">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-529">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-529">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-530">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> 命令，该命令请求将插入符号向上移动一行。</span><span class="sxs-lookup"><span data-stu-id="896d9-530">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> command, which requests that the caret move up by one line.</span></span></summary>
        <value><span data-ttu-id="896d9-531">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-531">The requested command.</span></span>  <span data-ttu-id="896d9-532">此命令的默认键笔势为 <see langword="Up" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-532">The default key gesture for this command is <see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-533">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-533">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-534"><xref:System.Windows.Controls.RichTextBox> 和<xref:System.Windows.Controls.TextBox>本身都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-534">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-535">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-535">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-536">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-536">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-537">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-537">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-538">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-538">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-539"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-539">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-540">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-540">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-541">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-541">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-542">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-542">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-543">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-543">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-544">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> 命令，该命令请求将插入符号向上移动一页。</span><span class="sxs-lookup"><span data-stu-id="896d9-544">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> command, which requests that the caret move up by one page.</span></span></summary>
        <value><span data-ttu-id="896d9-545">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-545">The requested command.</span></span>  <span data-ttu-id="896d9-546">此命令的默认键笔势为 <see langword="PageUp" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-546">The default key gesture for this command is <see langword="PageUp" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-547">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-547">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-548"><xref:System.Windows.Controls.RichTextBox> 和<xref:System.Windows.Controls.TextBox>本身都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-548">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-549">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-549">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-550">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-550">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-551">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-551">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-552">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-552">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-553"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-553">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-554">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-554">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-555">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-555">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-556">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-556">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-557">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-557">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-558">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> 命令，该命令请求将插入符号向上移动一个段落。</span><span class="sxs-lookup"><span data-stu-id="896d9-558">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> command, which requests that the caret move up by one paragraph.</span></span></summary>
        <value><span data-ttu-id="896d9-559">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-559">The requested command.</span></span>  <span data-ttu-id="896d9-560">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="Up" /></span><span class="sxs-lookup"><span data-stu-id="896d9-560">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-561">此命令将插入符号定位到下一段落的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-561">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="896d9-562">此命令的行为<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>类似于在上<xref:System.Windows.Controls.TextBox>调用时的行为。</span><span class="sxs-lookup"><span data-stu-id="896d9-562">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="896d9-563">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-563">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-564"><xref:System.Windows.Controls.RichTextBox> 和<xref:System.Windows.Controls.TextBox>本身都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-564">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-565">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-565">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-566">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-566">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-567">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-567">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-568">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-568">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-569"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-569">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-570">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-570">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-571">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-571">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-572">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-572">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-573">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-573">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-574">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> 命令，该命令请求将当前选择范围向下扩展一行。</span><span class="sxs-lookup"><span data-stu-id="896d9-574">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> command, which requests that the current selection be expanded down by one line.</span></span></summary>
        <value><span data-ttu-id="896d9-575">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-575">The requested command.</span></span>  <span data-ttu-id="896d9-576">此命令的默认键笔势为<see langword="Shift" />。 + <see langword="Down" /></span><span class="sxs-lookup"><span data-stu-id="896d9-576">The default key gesture for this command is <see langword="Shift" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-577">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-577">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-578"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-578">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-579">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-579">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-580">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-580">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-581">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-581">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-582">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-582">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-583"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-583">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-584">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-584">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-585">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-585">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-586">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-586">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-587">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-587">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-588">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> 命令，该命令请求将当前选择范围向下扩展一页。</span><span class="sxs-lookup"><span data-stu-id="896d9-588">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> command, which requests that the current selection be expanded down by one page.</span></span></summary>
        <value><span data-ttu-id="896d9-589">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-589">The requested command.</span></span>  <span data-ttu-id="896d9-590">此命令的默认键笔势为<see langword="Shift" />。 + <see langword="PageDown" /></span><span class="sxs-lookup"><span data-stu-id="896d9-590">The default key gesture for this command is <see langword="Shift" />+<see langword="PageDown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-591">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-591">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-592"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-592">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-593">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-593">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-594">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-594">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-595">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-595">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-596">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-596">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-597"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-597">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-598">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-598">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-599">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-599">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-600">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-600">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-601">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-601">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-602">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> 命令，该命令请求将当前选择范围向下扩展一段。</span><span class="sxs-lookup"><span data-stu-id="896d9-602">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> command, which requests that the current selection be expanded down by one paragraph.</span></span></summary>
        <value><span data-ttu-id="896d9-603">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-603">The requested command.</span></span>  <span data-ttu-id="896d9-604">此命令的默认键笔势为<see langword="Ctrl" />。 <see langword="Shift" /> + + <see langword="Down" /></span><span class="sxs-lookup"><span data-stu-id="896d9-604">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-605">此命令将所选内容扩展到下一段落的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-605">This command expands the selection to the beginning of the next paragraph.</span></span>  <span data-ttu-id="896d9-606">否则, 此命令会将选定内容扩展到当前段的末尾。</span><span class="sxs-lookup"><span data-stu-id="896d9-606">Otherwise, this command expands the selection to the end of the current paragraph.</span></span>  <span data-ttu-id="896d9-607">展开的选定内容包括用于标记段落末尾的段落分隔符。</span><span class="sxs-lookup"><span data-stu-id="896d9-607">The expanded selection includes the paragraph break that marks the end of the paragraph.</span></span>  
  
 <span data-ttu-id="896d9-608">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-608">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-609"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-609">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-610">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-610">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-611">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-611">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-612">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-612">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-613">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-613">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-614"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-614">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-615">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-615">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-616">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-616">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-617">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-617">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-618">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-618">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-619">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> 命令，该命令请求将当前选择范围向左扩展一个字符。</span><span class="sxs-lookup"><span data-stu-id="896d9-619">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> command, which requests that the current selection be expanded left by one character.</span></span></summary>
        <value><span data-ttu-id="896d9-620">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-620">The requested command.</span></span>  <span data-ttu-id="896d9-621">此命令的默认键笔势为<see langword="Shift" />。 + <see langword="Left" /></span><span class="sxs-lookup"><span data-stu-id="896d9-621">The default key gesture for this command is <see langword="Shift" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-622">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-622">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-623"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-623">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-624">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-624">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-625">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-625">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-626">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-626">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-627">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-627">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-628"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-628">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-629">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-629">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-630">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-630">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-631">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-631">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-632">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-632">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-633">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> 命令，该命令请求将当前选择范围向左扩展一个单词。</span><span class="sxs-lookup"><span data-stu-id="896d9-633">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> command, which requests that the current selection be expanded left by one word.</span></span></summary>
        <value><span data-ttu-id="896d9-634">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-634">The requested command.</span></span>  <span data-ttu-id="896d9-635">此命令的默认键笔势为<see langword="Ctrl" />。 <see langword="Shift" /> + + <see langword="Left" /></span><span class="sxs-lookup"><span data-stu-id="896d9-635">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-636">如果插入符号位于某个单词中, 则此命令会将选定内容扩展到该单词的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-636">If the caret is within a word, this command expands the selection to the beginning of that word.</span></span>  <span data-ttu-id="896d9-637">否则, 此命令会将选定内容扩展到上一个词的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-637">Otherwise, this command expands the selection to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="896d9-638">扩展的选择不包含单词分隔符。</span><span class="sxs-lookup"><span data-stu-id="896d9-638">The expanded selection does not include the word delimiter.</span></span>  <span data-ttu-id="896d9-639">与<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>比较, 它在展开的选定内容中包含单词分隔符。</span><span class="sxs-lookup"><span data-stu-id="896d9-639">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, which does include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="896d9-640">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-640">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-641"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-641">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-642">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-642">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-643">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-643">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-644">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-644">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-645">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-645">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-646"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-646">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-647">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-647">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-648">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-648">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-649">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-649">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-650">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-650">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-651">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> 命令，该命令请求将当前选择范围向右扩展一个字符。</span><span class="sxs-lookup"><span data-stu-id="896d9-651">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> command, which requests that the current selection be expanded right by one character.</span></span></summary>
        <value><span data-ttu-id="896d9-652">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-652">The requested command.</span></span>  <span data-ttu-id="896d9-653">此命令的默认键笔势为<see langword="Shift" />。 + <see langword="Right" /></span><span class="sxs-lookup"><span data-stu-id="896d9-653">The default key gesture for this command is <see langword="Shift" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-654">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-654">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-655"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-655">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-656">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-656">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-657">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-657">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-658">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-658">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-659">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-659">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-660"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-660">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-661">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-661">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-662">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-662">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-663">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-663">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-664">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-664">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-665">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> 命令，该命令请求将当前选择范围向右扩展一个单词。</span><span class="sxs-lookup"><span data-stu-id="896d9-665">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> command, which requests that the current selection be expanded right by one word.</span></span></summary>
        <value><span data-ttu-id="896d9-666">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-666">The requested command.</span></span>  <span data-ttu-id="896d9-667">此命令的默认键笔势为<see langword="Ctrl" />。 <see langword="Shift" /> + + <see langword="Right" /></span><span class="sxs-lookup"><span data-stu-id="896d9-667">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-668">如果插入符号位于某个单词中, 则此命令会将选定内容扩展到该单词的结尾。</span><span class="sxs-lookup"><span data-stu-id="896d9-668">If the caret is within a word, this command expands the selection to the end of that word.</span></span>  <span data-ttu-id="896d9-669">否则, 此命令会将选定内容扩展到下一个单词的结尾。</span><span class="sxs-lookup"><span data-stu-id="896d9-669">Otherwise, this command expands the selection to the end of the next word.</span></span>  
  
 <span data-ttu-id="896d9-670">扩展的选择包含单词分隔符。</span><span class="sxs-lookup"><span data-stu-id="896d9-670">The expanded selection includes the word delimiter.</span></span>  <span data-ttu-id="896d9-671">相比之下, <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>它在展开的选定内容中不包含单词分隔符。</span><span class="sxs-lookup"><span data-stu-id="896d9-671">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> which does not include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="896d9-672">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-672">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-673"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-673">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-674">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-674">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-675">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-675">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-676">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-676">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-677">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-677">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-678"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-678">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-679">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-679">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-680">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-680">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-681">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-681">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-682">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-682">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-683">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> 命令，该命令请求将当前选择范围扩展到内容末尾处。</span><span class="sxs-lookup"><span data-stu-id="896d9-683">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> command, which requests that the current selection be expanded to the very end of content.</span></span></summary>
        <value><span data-ttu-id="896d9-684">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-684">The requested command.</span></span>  <span data-ttu-id="896d9-685">此命令的默认键笔势为<see langword="Ctrl" />。 <see langword="Shift" /> + + <see langword="End" /></span><span class="sxs-lookup"><span data-stu-id="896d9-685">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-686">*文本容器*是构成手头内容最终边框的元素。</span><span class="sxs-lookup"><span data-stu-id="896d9-686">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="896d9-687"><xref:System.Windows.Controls.TextBlock>和<xref:System.Windows.Documents.FlowDocument>是文本容器的示例。</span><span class="sxs-lookup"><span data-stu-id="896d9-687"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="896d9-688">文本容器内包含的内容统称为*文档*。</span><span class="sxs-lookup"><span data-stu-id="896d9-688">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="896d9-689">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-689">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-690"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-690">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-691">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-691">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-692">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-692">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-693">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-693">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-694">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-694">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-695"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-695">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-696">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-696">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-697">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-697">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-698">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-698">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-699">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-699">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-700">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> 命令，该命令请求将当前选择范围扩展到内容开头处。</span><span class="sxs-lookup"><span data-stu-id="896d9-700">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> command, which requests that the current selection be expanded to the very beginning of content.</span></span></summary>
        <value><span data-ttu-id="896d9-701">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-701">The requested command.</span></span>  <span data-ttu-id="896d9-702">此命令的默认键笔势为<see langword="Ctrl" />。 <see langword="Shift" /> + + <see langword="Home" /></span><span class="sxs-lookup"><span data-stu-id="896d9-702">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-703">*文本容器*是构成手头内容最终边框的元素。</span><span class="sxs-lookup"><span data-stu-id="896d9-703">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="896d9-704"><xref:System.Windows.Controls.TextBlock>和<xref:System.Windows.Documents.FlowDocument>是文本容器的示例。</span><span class="sxs-lookup"><span data-stu-id="896d9-704"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="896d9-705">文本容器内包含的内容统称为*文档*。</span><span class="sxs-lookup"><span data-stu-id="896d9-705">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="896d9-706">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-706">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-707"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-707">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-708">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-708">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-709">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-709">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-710">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-710">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-711">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-711">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-712"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-712">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-713">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-713">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-714">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-714">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-715">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-715">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-716">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-716">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-717">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> 命令，该命令请求将当前选择范围扩展到当前行的末尾。</span><span class="sxs-lookup"><span data-stu-id="896d9-717">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> command, which requests that the current selection be expanded to the end of the current line.</span></span></summary>
        <value><span data-ttu-id="896d9-718">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-718">The requested command.</span></span>  <span data-ttu-id="896d9-719">此命令的默认键笔势为<see langword="Shift" />。 + <see langword="End" /></span><span class="sxs-lookup"><span data-stu-id="896d9-719">The default key gesture for this command is <see langword="Shift" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-720">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-720">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-721"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-721">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-722">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-722">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-723">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-723">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-724">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-724">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-725">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-725">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-726"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-726">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-727">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-727">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-728">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-728">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-729">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-729">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-730">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-730">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-731">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> 命令，该命令请求将当前选择范围扩展到当前行的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-731">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> command, which requests that the current selection be expanded to the beginning of the current line.</span></span></summary>
        <value><span data-ttu-id="896d9-732">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-732">The requested command.</span></span>  <span data-ttu-id="896d9-733">此命令的默认键笔势为<see langword="Shift" />。 + <see langword="Home" /></span><span class="sxs-lookup"><span data-stu-id="896d9-733">The default key gesture for this command is <see langword="Shift" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-734">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-734">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-735"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-735">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-736">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-736">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-737">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-737">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-738">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-738">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-739">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-739">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-740"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-740">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-741">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-741">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-742">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-742">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-743">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-743">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-744">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-744">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-745">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> 命令，该命令请求将当前选择范围向上扩展一行。</span><span class="sxs-lookup"><span data-stu-id="896d9-745">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> command, which requests that the current selection be expanded up by one line.</span></span></summary>
        <value><span data-ttu-id="896d9-746">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-746">The requested command.</span></span>  <span data-ttu-id="896d9-747">此命令的默认键笔势为<see langword="Shift" />。 + <see langword="Up" /></span><span class="sxs-lookup"><span data-stu-id="896d9-747">The default key gesture for this command is <see langword="Shift" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-748">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-748">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-749"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-749">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-750">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-750">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-751">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-751">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-752">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-752">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-753">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-753">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-754"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-754">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-755">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-755">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-756">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-756">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-757">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-757">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-758">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-758">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-759">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> 命令，该命令请求将当前选择范围向上扩展一页。</span><span class="sxs-lookup"><span data-stu-id="896d9-759">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> command, which requests that the current selection be expanded  up by one page.</span></span></summary>
        <value><span data-ttu-id="896d9-760">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-760">The requested command.</span></span>  <span data-ttu-id="896d9-761">此命令的默认键笔势为<see langword="Shift" />。 + <see langword="PageUp" /></span><span class="sxs-lookup"><span data-stu-id="896d9-761">The default key gesture for this command is <see langword="Shift" />+<see langword="PageUp" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-762">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-762">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-763"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-763">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-764">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-764">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-765">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-765">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-766">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-766">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-767">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-767">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-768"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-768">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-769">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-769">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-770">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-770">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-771">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-771">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-772">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-772">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-773">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> 命令，该命令请求将当前选择范围向上扩展一段。</span><span class="sxs-lookup"><span data-stu-id="896d9-773">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> command, which requests that the current selection be expanded up by one paragraph.</span></span></summary>
        <value><span data-ttu-id="896d9-774">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-774">The requested command.</span></span>  <span data-ttu-id="896d9-775">此命令的默认键笔势为<see langword="Ctrl" />。 <see langword="Shift" /> + + <see langword="Up" /></span><span class="sxs-lookup"><span data-stu-id="896d9-775">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-776">如果插入点位于段落的开头, 则此命令将所选内容扩展到上一段落的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-776">If the caret is at the beginning of a paragraph, this command expands the selection to the beginning of the previous paragraph.</span></span>  <span data-ttu-id="896d9-777">否则, 此命令会将选定内容扩展到当前段落的开头。</span><span class="sxs-lookup"><span data-stu-id="896d9-777">Otherwise, this command expands the selection to the beginning of the current paragraph.</span></span>  
  
 <span data-ttu-id="896d9-778">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-778">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-779"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-779">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-780">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-780">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-781">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-781">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-782">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-782">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-783">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-783">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-784"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-784">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-785">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-785">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-786">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-786">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-787">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-787">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-788">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-788">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="TabBackward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabBackward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabBackward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabBackward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabBackward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabBackward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-789">表示 <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> 命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-789">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> command.</span></span></summary>
        <value><span data-ttu-id="896d9-790">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-790">The requested command.</span></span>  <span data-ttu-id="896d9-791">此命令的默认键笔势为<see langword="Shift" />。 + <see langword="Tab" /></span><span class="sxs-lookup"><span data-stu-id="896d9-791">The default key gesture for this command is <see langword="Shift" />+<see langword="Tab" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-792">此命令的行为取决于当前所选内容。</span><span class="sxs-lookup"><span data-stu-id="896d9-792">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="896d9-793">如果选定内容不为空, 则此命令等效于<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>。</span><span class="sxs-lookup"><span data-stu-id="896d9-793">If the selection is non-empty, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>.</span></span> <span data-ttu-id="896d9-794">如果插入符号位于表格单元格中 (由<xref:System.Windows.Documents.TableCell>元素表示), 则此命令会将插入符号移动到上一个单元格。</span><span class="sxs-lookup"><span data-stu-id="896d9-794">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the previous cell.</span></span> <span data-ttu-id="896d9-795">否则, 将在当前位置插入一个制表符。</span><span class="sxs-lookup"><span data-stu-id="896d9-795">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="896d9-796">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-796">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-797"><xref:System.Windows.Controls.RichTextBox>和(<xref:System.Windows.Controls.TextBox> 属性为`true`) 本机支持此命令。 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A></span><span class="sxs-lookup"><span data-stu-id="896d9-797">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabBackward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-798">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-798">XAML Attribute Usage</span></span>  
  
```  
<object property="TabBackward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-799">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-799">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-800">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-800">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-801">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-801">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-802"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-802">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-803">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-803">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-804">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-804">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-805">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-805">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-806">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-806">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabForward" />
      </Docs>
    </Member>
    <Member MemberName="TabForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabForward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabForward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabForward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabForward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-807">表示 <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> 命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-807">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> command.</span></span></summary>
        <value><span data-ttu-id="896d9-808">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-808">The requested command.</span></span>  <span data-ttu-id="896d9-809">此命令的默认键笔势为 <see langword="Tab" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-809">The default key gesture for this command is <see langword="Tab" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-810">此命令的行为取决于当前所选内容。</span><span class="sxs-lookup"><span data-stu-id="896d9-810">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="896d9-811">如果选定内容为非空, 或者如果选择为空, 且当前的插入符号位置位于段落的开头, 则此命令等效于<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>。</span><span class="sxs-lookup"><span data-stu-id="896d9-811">If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>.</span></span> <span data-ttu-id="896d9-812">如果插入符号位于表格单元格中 (由<xref:System.Windows.Documents.TableCell>元素表示), 则此命令会将插入符号移动到下一个单元格。</span><span class="sxs-lookup"><span data-stu-id="896d9-812">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the next cell.</span></span> <span data-ttu-id="896d9-813">如果插入符号位于表的最后一个单元格中, 则此命令将使新行追加到表中, 插入符号定位在新行的第一个单元格中。</span><span class="sxs-lookup"><span data-stu-id="896d9-813">If the caret is in the last cell of a table, this command causes a new row to be appended to the table, with the caret positioned in the first cell of the new row.</span></span>  <span data-ttu-id="896d9-814">否则, 将在当前位置插入一个制表符。</span><span class="sxs-lookup"><span data-stu-id="896d9-814">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="896d9-815">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-815">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-816"><xref:System.Windows.Controls.RichTextBox>和(<xref:System.Windows.Controls.TextBox> 属性为`true`) 本机支持此命令。 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A></span><span class="sxs-lookup"><span data-stu-id="896d9-816">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabForward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-817">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-817">XAML Attribute Usage</span></span>  
  
```  
<object property="TabForward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-818">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-818">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-819">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-819">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-820">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-820">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-821"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-821">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-822">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-822">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-823">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-823">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-824">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-824">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-825">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-825">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabBackward" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBold">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBold" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBold As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBold { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBold : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-826">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Bold" /> 格式切换。</span><span class="sxs-lookup"><span data-stu-id="896d9-826">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> command, which requests that <see cref="T:System.Windows.Documents.Bold" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="896d9-827">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-827">The requested command.</span></span>  <span data-ttu-id="896d9-828">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="B" /></span><span class="sxs-lookup"><span data-stu-id="896d9-828">The default key gesture for this command is <see langword="Ctrl" />+<see langword="B" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-829">如果当前所选内容的范围介于<xref:System.Windows.FontWeights.SemiBold%2A>到之间<xref:System.Windows.FontWeights.Thin%2A> , <xref:System.Windows.FontWeights.Bold%2A>则应用于当前选定内容。 <xref:System.Windows.FontWeight></span><span class="sxs-lookup"><span data-stu-id="896d9-829">If the <xref:System.Windows.FontWeight> for the current selection is in the range from <xref:System.Windows.FontWeights.Thin%2A> to <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> is applied to the current selection.</span></span>  <span data-ttu-id="896d9-830">否则, <xref:System.Windows.FontWeights.Normal%2A>将应用。</span><span class="sxs-lookup"><span data-stu-id="896d9-830">Otherwise, <xref:System.Windows.FontWeights.Normal%2A> is applied.</span></span>  <span data-ttu-id="896d9-831">有关<xref:System.Windows.FontWeight>值的比较列表, 请参阅<xref:System.Windows.FontWeights>。</span><span class="sxs-lookup"><span data-stu-id="896d9-831">For a comparative list of <xref:System.Windows.FontWeight> values, see <xref:System.Windows.FontWeights>.</span></span>  
  
 <span data-ttu-id="896d9-832">当所选内容为空且插入符号在某个单词内时, 将展开所选内容以包含整个单词。</span><span class="sxs-lookup"><span data-stu-id="896d9-832">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="896d9-833">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-833">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-834">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-834">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBold"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-835">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-835">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBold"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-836">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-836">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-837">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-837">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-838">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-838">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-839"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-839">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-840">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-840">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-841">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-841">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-842">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-842">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-843">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-843">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBullets">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBullets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBullets As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBullets { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBullets : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-844">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> 命令，该命令请求对当前所选内容进行无序列表（也称为项目符号列表）格式切换。</span><span class="sxs-lookup"><span data-stu-id="896d9-844">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="896d9-845">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-845">The requested command.</span></span>  <span data-ttu-id="896d9-846">此命令的默认键笔势为<see langword="Ctrl" />。 <see langword="Shift" /> + + <see langword="L" /></span><span class="sxs-lookup"><span data-stu-id="896d9-846">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="L" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-847">此命令在<xref:System.Windows.Documents.Paragraph>级别运行。</span><span class="sxs-lookup"><span data-stu-id="896d9-847">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="896d9-848">如果对某个段落中的部分内容选择调用此命令 (包括一个段落中插入符号的空选定内容), 则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="896d9-848">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="896d9-849">如果对跨多个段落的选定内容调用此命令, 则会将效果应用于参与选定内容的每个段落的全部内容。</span><span class="sxs-lookup"><span data-stu-id="896d9-849">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="896d9-850">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-850">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-851">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-851">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBullets"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-852">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-852">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBullets"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-853">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-853">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-854">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-854">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-855">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-855">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-856"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-856">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-857">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-857">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-858">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-858">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-859">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-859">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-860">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-860">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      </Docs>
    </Member>
    <Member MemberName="ToggleInsert">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleInsert" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleInsert As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleInsert { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleInsert : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-861">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> 命令，该命令用于切换“插入”和“改写”键入模式。</span><span class="sxs-lookup"><span data-stu-id="896d9-861">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> command, which toggles the typing mode between Insert and Overtype.</span></span></summary>
        <value><span data-ttu-id="896d9-862">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-862">The requested command.</span></span>  <span data-ttu-id="896d9-863">此命令的默认键笔势为 <see langword="Insert" />。</span><span class="sxs-lookup"><span data-stu-id="896d9-863">The default key gesture for this command is <see langword="Insert" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-864">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-864">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-865"><xref:System.Windows.Controls.RichTextBox> 、<xref:System.Windows.Controls.TextBox>和本身<xref:System.Windows.Controls.PasswordBox>都支持此命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-865">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleInsert"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-866">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-866">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleInsert"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-867">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-867">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-868">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-868">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-869">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-869">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-870"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-870">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-871">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-871">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-872">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-872">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-873">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-873">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-874">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-874">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleItalic">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleItalic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleItalic As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleItalic { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleItalic : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-875">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Italic" /> 格式切换。</span><span class="sxs-lookup"><span data-stu-id="896d9-875">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> command, which requests that <see cref="T:System.Windows.Documents.Italic" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="896d9-876">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-876">The requested command.</span></span>  <span data-ttu-id="896d9-877">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="I" /></span><span class="sxs-lookup"><span data-stu-id="896d9-877">The default key gesture for this command is <see langword="Ctrl" />+<see langword="I" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-878">如果当前<xref:System.Windows.FontStyle> 所选<xref:System.Windows.FontStyles.Italic%2A>内容的为,则应用于当前选定内容。<xref:System.Windows.FontStyles.Normal%2A></span><span class="sxs-lookup"><span data-stu-id="896d9-878">If the <xref:System.Windows.FontStyle> for the current selection is <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> is applied to the current selection.</span></span>  <span data-ttu-id="896d9-879">否则, <xref:System.Windows.FontStyles.Normal%2A>将应用。</span><span class="sxs-lookup"><span data-stu-id="896d9-879">Otherwise, <xref:System.Windows.FontStyles.Normal%2A> is applied.</span></span>  
  
 <span data-ttu-id="896d9-880">当所选内容为空且插入符号在某个单词内时, 将展开所选内容以包含整个单词。</span><span class="sxs-lookup"><span data-stu-id="896d9-880">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="896d9-881">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-881">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-882">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-882">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleItalic"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-883">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-883">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleItalic"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-884">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-884">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-885">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-885">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-886">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-886">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-887"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-887">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-888">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-888">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-889">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-889">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-890">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-890">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-891">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-891">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleNumbering">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleNumbering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleNumbering As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleNumbering { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleNumbering : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-892">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> 命令，该命令请求对当前所选内容进行排序列表（也称为编号列表）格式切换。</span><span class="sxs-lookup"><span data-stu-id="896d9-892">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="896d9-893">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-893">The requested command.</span></span>  <span data-ttu-id="896d9-894">此命令的默认键笔势为<see langword="Ctrl" />。 <see langword="Shift" /> + + <see langword="N" /></span><span class="sxs-lookup"><span data-stu-id="896d9-894">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="N" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-895">此命令在<xref:System.Windows.Documents.Paragraph>级别运行。</span><span class="sxs-lookup"><span data-stu-id="896d9-895">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="896d9-896">如果对某个段落中的部分内容选择调用此命令 (包括一个段落中插入符号的空选定内容), 则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="896d9-896">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="896d9-897">如果对跨多个段落的选定内容调用此命令, 则会将效果应用于参与选定内容的每个段落的全部内容。</span><span class="sxs-lookup"><span data-stu-id="896d9-897">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="896d9-898">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-898">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-899">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-899">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleNumbering"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-900">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-900">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleNumbering"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-901">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-901">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-902">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-902">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-903">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-903">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-904"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-904">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-905">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-905">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-906">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-906">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-907">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-907">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-908">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-908">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSubscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSubscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSubscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSubscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSubscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-909">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> 命令，该命令请求对当前所选内容进行下标格式切换。</span><span class="sxs-lookup"><span data-stu-id="896d9-909">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> command, which requests that subscript formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="896d9-910">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-910">The requested command.</span></span>  <span data-ttu-id="896d9-911">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="OemPlus" /></span><span class="sxs-lookup"><span data-stu-id="896d9-911">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemPlus" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-912">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-912">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSubscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-913">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-913">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSubscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-914">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-914">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-915">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-915">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-916">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-916">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-917"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-917">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-918">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-918">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-919">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-919">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-920">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-920">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-921">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-921">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSuperscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSuperscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSuperscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSuperscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSuperscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-922">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> 命令，该命令请求对当前所选内容进行上标格式切换。</span><span class="sxs-lookup"><span data-stu-id="896d9-922">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> command, which requests that superscript formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="896d9-923">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-923">The requested command.</span></span>  <span data-ttu-id="896d9-924">此命令的默认键笔势为<see langword="Ctrl" />。 <see langword="Shift" /> + + <see langword="OemPlus" /></span><span class="sxs-lookup"><span data-stu-id="896d9-924">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="OemPlus" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-925">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-925">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSuperscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-926">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-926">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSuperscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-927">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-927">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-928">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-928">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-929">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-929">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-930"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-930">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-931">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-931">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-932">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-932">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-933">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-933">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-934">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-934">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleUnderline">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleUnderline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleUnderline As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleUnderline { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleUnderline : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896d9-935">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Underline" /> 格式切换。</span><span class="sxs-lookup"><span data-stu-id="896d9-935">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> command, which requests that <see cref="T:System.Windows.Documents.Underline" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="896d9-936">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-936">The requested command.</span></span>  <span data-ttu-id="896d9-937">此命令的默认键笔势为<see langword="Ctrl" />。 + <see langword="U" /></span><span class="sxs-lookup"><span data-stu-id="896d9-937">The default key gesture for this command is <see langword="Ctrl" />+<see langword="U" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896d9-938">当所选内容为空且插入符号在某个单词内时, 将展开所选内容以包含整个单词。</span><span class="sxs-lookup"><span data-stu-id="896d9-938">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="896d9-939">在任何给定的对象上, 都不一定是响应此命令的实际实现;在许多情况下, 响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="896d9-939">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="896d9-940">此命令由<xref:System.Windows.Controls.RichTextBox>本机支持。</span><span class="sxs-lookup"><span data-stu-id="896d9-940">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleUnderline"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="896d9-941">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="896d9-941">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleUnderline"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="896d9-942">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-942">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="896d9-943">在<xref:System.Windows.Controls.RichTextBox>此示例中, 用作命令目标。</span><span class="sxs-lookup"><span data-stu-id="896d9-943">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="896d9-944">请注意, <xref:System.Windows.IInputElement> <xref:System.Windows.FrameworkElement>实现接口 (继承自), 并且它包括对许多编辑命令的本机支持。 <xref:System.Windows.Controls.RichTextBox></span><span class="sxs-lookup"><span data-stu-id="896d9-944">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="896d9-945"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法的第一个参数是命令参数。</span><span class="sxs-lookup"><span data-stu-id="896d9-945">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="896d9-946">大多数编辑命令忽略 command 参数;通常, 此参数应该`null`用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-946">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="896d9-947">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="896d9-947">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="896d9-948">此对象必须实现<xref:System.Windows.IInputElement>接口, 并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="896d9-948">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="896d9-949">通常, 在不处理命令的对象上调用命令时, 将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="896d9-949">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
  </Members>
</Type>

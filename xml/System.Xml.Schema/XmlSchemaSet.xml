<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f30f1db21188a7eac7a5e558ed97c529a2799eae" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67245681" /></Metadata><TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <TypeSignature Language="F#" Value="type XmlSchemaSet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含 XML 架构定义语言 (XSD) 架构的缓存。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   不要使用来自未知或不受信任的源或位置的架构。 执行此操作将影响你的代码的安全性。  
> -   XML 架构 （包括内联架构） 是本质上是容易受到拒绝服务攻击;不接受不受信任的方案中。  
> -   架构验证错误消息和异常可能会公开的内容模型的架构文件的 URI 路径的敏感信息。 请注意不公开此信息向不受信任调用方。  
> -   "安全注意事项"部分中介绍的其他安全注意事项。  
  
 <xref:System.Xml.Schema.XmlSchemaSet> 缓存或库可以在其中存储 XML 架构定义语言 (XSD) 架构。 <xref:System.Xml.Schema.XmlSchemaSet> 通过将架构缓存在内存中，而不是从文件或 URL 访问架构，从而提高性能。 每个架构由命名空间 URI 和架构添加到集时指定了的位置。 您使用<xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType>要分配属性<xref:System.Xml.Schema.XmlSchemaSet>对象的 XML 读取器应使用的数据验证。  
  
## <a name="security-considerations"></a>安全注意事项  
  
-   不要使用来自未知或不受信任的源架构。 执行此操作将影响你的代码的安全性。 外部命名空间或位置中引用包含，导入和重新定义元素的架构进行解析的基 URI 的架构的包含或导入这些方面。 例如，如果包括或导入架构的基 URI 为空或`null`，外部位置来解析相对于当前目录。 <xref:System.Xml.XmlUrlResolver>类用于解析外部架构默认情况下。 若要禁用解析导入、 包括和重新定义架构的元素，设置<xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType>属性设置为`null`。  
  
-   <xref:System.Xml.Schema.XmlSchemaSet>类使用<xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType>类来分析和匹配 XML 架构中的正则表达式。 使用 XML 架构中的正则表达式模式方面的验证可能涉及到更高的 CPU 使用情况，应避免在高可用性方案。  
  
-   由于使用而引发的异常<xref:System.Xml.Schema.XmlSchemaSet>类，如<xref:System.Xml.Schema.XmlSchemaException>类可能包含不应在不受信任的方案中公开的敏感信息。 例如，<xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>属性的<xref:System.Xml.Schema.XmlSchemaException>返回导致异常的架构文件的 URI 路径。 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>不应在不受信任的情况下公开属性。 应正确处理异常，以便在不受信任的情况下不公开此敏感信息。  
  
   
  
## Examples  
 以下示例使用 <xref:System.Xml.Schema.XmlSchemaSet> 中存储的架构验证 XML 文件。 XML 文件 `urn:bookstore-schema` 中的命名空间标识 <xref:System.Xml.Schema.XmlSchemaSet> 中要用于验证的架构。 示例输出所示的 XML 文件具有两个架构冲突：

 - 第一个\<书籍 > 元素包含\<作者 > 元素，但没有\<标题 > 或\<价格 > 元素。

 - \<作者 > 中最后一个元素\<书籍 > 元素缺少\<名字 > 和\<最后一个名称 > 元素，而是具有无效\<名称 > 元素。   
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>输入  
 示例使用下列两个输入文件。  
  
 **booksSchemaFail.xml:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **books.xsd:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaSet : System.Xml.XmlNameTable -&gt; System.Xml.Schema.XmlSchemaSet" Usage="new System.Xml.Schema.XmlSchemaSet nameTable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">要使用的 <see cref="T:System.Xml.XmlNameTable" /> 对象。</param>
        <summary>使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.XmlNameTable" /> 对象为 <see langword="null" />。</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将给定的 XML 架构定义语言 (XSD) 架构添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</param>
        <summary>将指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <returns>如果架构有效，则为 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。 如果架构无效且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，则将返回 <see langword="null" /> 并引发适当的验证事件。 否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Xml.Schema.XmlSchema>中已存在对象<xref:System.Xml.Schema.XmlSchemaSet>，则<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法不执行任何操作。  
  
 此方法的功能是相同的<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">该架构无效。</exception>
        <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xmlSchemaSet.Add schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。</param>
        <summary>将给定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的所有 XML 架构定义语言 (XSD) 架构添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以将架构添加到之前<xref:System.Xml.Schema.XmlSchemaSet>，它必须成功进行预处理。 预处理执行以下基本任务。  
  
1.  架构检查的结构根据 W3C XML 架构的规则的有效性，但不是完全验证的架构。  
  
2.  对内部和外部架构组件的引用进行解析。 已成功检索到任何导入或包含架构也会添加到<xref:System.Xml.Schema.XmlSchemaSet>。 导入的架构添加作为单独<xref:System.Xml.Schema.XmlSchema>对象和包括的架构所做的包括一部分<xref:System.Xml.Schema.XmlSchema>。  
  
 如果<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>的属性<xref:System.Xml.Schema.XmlSchemaSet>若要将添加`true`中的所有架构<xref:System.Xml.Schema.XmlSchemaSet>若要添加将添加到<xref:System.Xml.Schema.XmlSchemaSet>。 如果<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>的属性<xref:System.Xml.Schema.XmlSchemaSet>若要将添加`false`，添加每个架构在添加之前进行预处理。 如果在新添加的架构的任何<xref:System.Xml.Schema.XmlSchemaSet>失败进行预处理，不添加任何架构; 相反，<xref:System.Xml.Schema.XmlSchemaException>引发。 因此，下面的两个代码示例并不等效。  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 前面的两个代码示例并不等效。 在第一个示例中，如果了无效的架构中存在`schemaSet1`并将其<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为`false`，没有架构添加到`schemaSet`。 在第二个示例中，大量的架构可以添加到`schemaSet`之前遇到了无效的架构，将引发异常。  
  
   
  
## Examples  
 下面的代码示例演示了添加到架构<xref:System.Xml.Schema.XmlSchemaSet>，然后添加<xref:System.Xml.Schema.XmlSchemaSet>到一个新<xref:System.Xml.Schema.XmlSchemaSet>使用<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的架构无效。</exception>
        <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">架构的 <paramref name="targetNamespace" /> 属性或 <see langword="null" /> 以使用架构中指定的 <paramref name="targetNamespace" />。</param>
        <param name="schemaUri">指定要加载的架构的 URL。</param>
        <summary>将位于指定 URL 的 XML 架构定义语言 (XSD) 架构添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <returns>如果架构有效，则为 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。 如果架构无效且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，则将返回 <see langword="null" /> 并引发适当的验证事件。 否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以将架构添加到之前<xref:System.Xml.Schema.XmlSchemaSet>，它必须成功进行预处理。 预处理执行以下基本任务。  
  
1.  架构检查的结构根据 W3C XML 架构的规则的有效性，但不是完全验证的架构。  
  
2.  对内部和外部架构组件的引用进行解析。 已成功检索到任何导入或包含架构也会添加到<xref:System.Xml.Schema.XmlSchemaSet>。 导入的架构添加作为单独<xref:System.Xml.Schema.XmlSchema>对象和包括的架构所做的包括一部分<xref:System.Xml.Schema.XmlSchema>。  
  
 以下是使用时要考虑的重要说明<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
-   添加到架构<xref:System.Xml.Schema.XmlSchemaSet>具有相同目标命名空间和架构位置 URL 作为架构已包含在内<xref:System.Xml.Schema.XmlSchemaSet>将返回原始架构对象。  
  
-   当新的架构已成功添加到<xref:System.Xml.Schema.XmlSchemaSet>，则<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>的属性<xref:System.Xml.Schema.XmlSchemaSet>设置为`false`。  
  
-   时，在 XML 架构中遇到任何包含或导入元素将解析<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>调用方法。 无法解析包含和导入元素导致架构验证警告，如果没有<xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>已为指定<xref:System.Xml.Schema.XmlSchemaSet>对象，这些警告将不会报告。  
  
-   如果具有中已存在的架构相同的目标命名空间的架构<xref:System.Xml.Schema.XmlSchemaSet>添加到<xref:System.Xml.Schema.XmlSchemaSet>，这两个架构将添加。  
  
    > [!NOTE]
    >  此行为不同于已过时<xref:System.Xml.Schema.XmlSchemaCollection>对象。  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法<xref:System.Xml.Schema.XmlSchemaSet>能够使用目标命名空间定义的架构中，而无需为参数指定的目标命名空间时<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>调用方法。 指定`null`中`targetNamespace`的参数<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法指示<xref:System.Xml.Schema.XmlSchemaSet>若要使用的架构中定义的目标命名空间，如下面的代码示例中所示。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 在上面的代码示例`null`指定为`targetNamespace`参数<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。 因此，`targetNamespace`定义 books.xml 中使用文件。 在此情况下，调用的结果<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>将是相同的方法如果http://www.contoso.com/books必须指定为`targetNamespace`参数。  
  
-   W3C XML 架构允许没有目标命名空间定义的目标命名空间与要包含在架构中的架构。 在这种情况下，没有目标命名空间定义的架构是强制转换为包含架构的目标命名空间。 包含的架构被视为如同它具有定义该目标命名空间。 同样，没有目标命名空间的架构可以添加到<xref:System.Xml.Schema.XmlSchemaSet>强制转换后到指定的目标命名空间和<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法，如下面的示例中所示。  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 如果上面的架构添加到<xref:System.Xml.Schema.XmlSchemaSet>目标命名空间http://www.contoso.com/new/targetnamespace（如下面的代码所示），它被视为就像在架构中声明的目标命名空间是`http://www.contoso.com/new/targetnamespace`。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 下面的代码示例将添加http://www.contoso.com/books.xsd具有目标命名空间的架构http://www.contoso.com/books到<xref:System.Xml.Schema.XmlSchemaSet>。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 示例使用 `books.xsd` 文件作为输入。  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">该架构无效。</exception>
        <exception cref="T:System.ArgumentNullException">作为参数传递的 URL 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberSignature Language="F#" Value="member this.Add : string * System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">架构的 <paramref name="targetNamespace" /> 属性或 <see langword="null" /> 以使用架构中指定的 <paramref name="targetNamespace" />。</param>
        <param name="schemaDocument"><see cref="T:System.Xml.XmlReader" /> 对象。</param>
        <summary>将 <see cref="T:System.Xml.XmlReader" /> 中包含的 XML 架构定义语言 (XSD) 架构添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <returns>如果架构有效，则为 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。 如果架构无效且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，则将返回 <see langword="null" /> 并引发适当的验证事件。 否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以将架构添加到之前<xref:System.Xml.Schema.XmlSchemaSet>，它必须成功进行预处理。 预处理执行以下基本任务。  
  
1.  架构检查的结构根据 W3C XML 架构的规则的有效性，但不是完全验证的架构。  
  
2.  对内部和外部架构组件的引用进行解析。 已成功检索到任何导入或包含架构也会添加到<xref:System.Xml.Schema.XmlSchemaSet>。 导入的架构添加作为单独<xref:System.Xml.Schema.XmlSchema>对象和包括的架构所做的包括一部分<xref:System.Xml.Schema.XmlSchema>。  
  
 以下是使用时要考虑的重要说明<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
-   已成功检索的架构导入或加入由中包含的架构<xref:System.Xml.XmlReader>也会添加到<xref:System.Xml.Schema.XmlSchemaSet>。  
  
-   如果<xref:System.Xml.XmlReader>未定位在根元素上<xref:System.Xml.Schema.XmlSchemaException>引发除非当前项是一个元素。 如果当前项`xs:schema`元素中，架构文档读取到<xref:System.Xml.Schema.XmlSchemaSet>; 否则为<xref:System.Xml.Schema.XmlSchemaException>因为架构不是有效引发。  
  
-   如果<xref:System.Xml.XmlReader>定位通过 XML 节点的序列，添加仅在序列中的第一个节点。  
  
-   如果从已创建的架构<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法调用、 的值<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>属性被忽略，因为内联架构处理不应用于 W3C XML 架构文档。  
  
-   <xref:System.Xml.XmlResolver>属性的<xref:System.Xml.XmlReader>不用于解析命名空间或架构中的位置引用包含和导入元素。 相反，<xref:System.Xml.XmlResolver>属性的<xref:System.Xml.Schema.XmlSchemaSet>使用。  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法<xref:System.Xml.Schema.XmlSchemaSet>能够使用目标命名空间定义的架构中，而无需为参数指定的目标命名空间时<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>调用方法。 指定`null`或<xref:System.String.Empty?displayProperty=nameWithType>到<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法指示<xref:System.Xml.Schema.XmlSchemaSet>使用架构中定义的目标命名空间。 此行为的示例，请参阅<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
 此方法的剩余功能是相同的<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
   
  
## Examples  
 下面的代码示例添加中包含的 books.xsd 架构<xref:System.Xml.XmlTextReader>使用的目标命名空间http://www.contoso.com/books到<xref:System.Xml.Schema.XmlSchemaSet>。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">该架构无效。</exception>
        <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.XmlReader" /> 对象为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationSettings : System.Xml.Schema.XmlSchemaCompilationSettings with get, set" Usage="System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 默认为 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 属性设置为 <see langword="true" /> 的 <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> 实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaCompilationSettings>类指定唯一粒子归属 (UPA) 的验证选项<xref:System.Xml.Schema.XmlSchemaSet>。 有关启用 UPA 验证检查的详细信息，请参阅<xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; unit" Usage="xmlSchemaSet.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD) 架构编译成一个逻辑架构。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 需要验证时自动调用此方法和<xref:System.Xml.Schema.XmlSchemaSet>尚未以前编译-例如，当<xref:System.Xml.Schema.XmlSchemaSet>作为输入用于创建<xref:System.Xml.XmlReader>对象中<xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>属性<xref:System.Xml.XmlReaderSettings>对象。 如果<xref:System.Xml.Schema.XmlSchemaSet>是已在已编译状态下，此方法不会重新编译架构。 如果此方法成功执行，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为`true`。  
  
 以前编译的架构<xref:System.Xml.Schema.XmlSchemaSet>不重新编译。 但是，使用已编译的架构<xref:System.Xml.Schema.XmlSchemaSet.Compile%2A>方法的<xref:System.Xml.Schema.XmlSchema>将重新编译。  
  
> [!NOTE]
>  您需要调用<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法，如果已将其添加到后更改架构 （或其的包括/导入之一） <xref:System.Xml.Schema.XmlSchemaSet>。 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法将检查架构的结构根据 W3C XML 架构的规则的有效性。 但是，它不会执行完整的验证检查。 它还会解析到内部和外部架构组件的引用。 已成功检索到任何导入或包含架构也会添加到<xref:System.Xml.Schema.XmlSchemaSet>。 导入的架构添加作为单独<xref:System.Xml.Schema.XmlSchema>对象时包括架构所做的包括一部分<xref:System.Xml.Schema.XmlSchema>。 如果要重新处理的调用成功，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为 false。  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">当验证和编译 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的架构时发生错误。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指示 XML 架构定义语言 (XSD) 架构是否位于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="xmlSchemaSet.Contains targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">架构 <paramref name="targetNamespace" /> 属性。</param>
        <summary>指示具有指定目标命名空间 URI 的 XML 架构定义语言 (XSD) 架构是否位于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <returns>如果具有指定目标命名空间 URI 的架构位于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 间接地添加到的架构<xref:System.Xml.Schema.XmlSchemaSet>检测到的<xref:System.Xml.Schema.XmlSchemaSet.Contains%2A>方法; 例如，导入的架构。 因此，如果架构http://www.contoso.com/retail导入的架构命名空间http://www.contoso.com/books命名空间添加到<xref:System.Xml.Schema.XmlSchemaSet>，则调用<xref:System.Xml.Schema.XmlSchemaSet.Contains%2A>与`http://www.contoso.com/books`作为参数，它将返回`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.Contains schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</param>
        <summary>指示指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> 对象是否位于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <returns>如果 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Xml.Schema.XmlSchema[] * int -&gt; unit" Usage="xmlSchemaSet.CopyTo (schemas, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">要向其复制对象的数组。</param>
        <param name="index">数组中开始复制处的索引。</param>
        <summary>将 <see cref="T:System.Xml.Schema.XmlSchema" /> 中的所有 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象复制到起始位置为给定索引的给定数组中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 以下示例将复制所有<xref:System.Xml.Schema.XmlSchema>中的对象<xref:System.Xml.Schema.XmlSchemaSet>指向数组的<xref:System.Xml.Schema.XmlSchema>对象。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中逻辑 XML 架构定义语言 (XSD) 架构的数量。</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的逻辑架构数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果有两个架构的命名空间`http://www.contoso.com`中<xref:System.Xml.Schema.XmlSchemaSet>，则<xref:System.Xml.Schema.XmlSchemaSet.Count%2A>属性将返回 1，因为这些架构将被视为单个逻辑架构用于验证的目的。 但是，如果在命名空间的架构`http://www.contoso.com/retail`导入的架构`http://www.contoso.com/books`命名空间的值<xref:System.Xml.Schema.XmlSchemaSet.Count%2A>属性将为 2。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAttributes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 架构定义语言 (XSD) 架构的所有全局特性。</summary>
        <value>全局特性的集合。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalElements : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 架构定义语言 (XSD) 架构的所有全局元素。</summary>
        <value>全局子元素的集合。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalTypes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 架构定义语言 (XSD) 架构的所有全局简单和复杂类型。</summary>
        <value>全局简单和复杂类型的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A>属性始终返回一个表示类型`xs:anyType`复杂类型。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值指示 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XML 架构定义语言 (XSD) 架构是否已编译的值。</summary>
        <value>如果 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的架构自上次在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中添加或移除以来已被编译，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果架构在 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 中编辑，<xref:System.Xml.Schema.XmlSchemaSet> 属性不受影响。 不跟踪对 <xref:System.Xml.Schema.XmlSchemaSet> 中各个架构的更新。 因此，只要 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 中没有添加或移除任何架构，即使 `true` 中包含的一个架构已更改，<xref:System.Xml.Schema.XmlSchemaSet> 属性也可以为 <xref:System.Xml.Schema.XmlSchemaSet>。  
  
   
  
## Examples  
 有关的示例<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性，请参阅<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取加载新的 XML 架构定义语言 (XSD) 架构时 <see cref="T:System.Xml.XmlNameTable" /> 使用的默认 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <value>原子化字符串对象表。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Remove schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">要从 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。</param>
        <summary>从 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 移除指定的 XML 架构定义语言 (XSD) 架构。</summary>
        <returns>从 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，或如果在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中未找到该架构，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 删除从架构<xref:System.Xml.Schema.XmlSchemaSet>设置<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为`false`。  
  
   
  
## Examples  
 下面的示例演示了添加到多个架构<xref:System.Xml.Schema.XmlSchemaSet>，然后删除其中一个架构使用<xref:System.Xml.Schema.XmlSchemaSet.Remove%2A>方法。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">此架构不是有效的架构。</exception>
        <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchema" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveRecursive : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.RemoveRecursive schemaToRemove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">要从 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。</param>
        <summary>从 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中移除指定的 XML 架构定义语言 (XSD) 架构和它导入的所有架构。</summary>
        <returns>如果已成功移除 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象和其导入的所有内容，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>方法中删除指定的架构和它中导入的所有架构<xref:System.Xml.Schema.XmlSchemaSet>，只要在该架构或其导入的架构上没有依赖项。 是否有架构或其导入的架构中的依赖项<xref:System.Xml.Schema.XmlSchemaSet>，没有删除任何内容并<xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>返回`false`。 如果`false`返回和<xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>是定义，描述依赖项的事件处理程序发送一条警告。  
  
 如果指定的架构将其他架构导入，并且以前已移除指定的架构<xref:System.Xml.Schema.XmlSchemaSet.Remove%2A>方法，<xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>方法将不会删除导入的架构，并将返回`false`。 例如，如果`parentSchema`导入`childSchema1`并`childSchema2`下面的代码只会删除`parentSchema`，但未导入`childSchema1`和`childSchema2`架构：  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 下面的代码将删除`parentSchema`和导入的架构：  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>方法不起作用的状态<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示了添加到多个架构<xref:System.Xml.Schema.XmlSchemaSet>，然后删除其中一个架构和它导入使用的所有架构<xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>方法。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchema" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Reprocess : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Reprocess schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">要重新处理的架构。</param>
        <summary>重新处理已经存在于 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XML 架构定义语言 (XSD) 架构。</summary>
        <returns>如果架构有效，则为 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。 如果架构无效且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，则将返回 <see langword="null" /> 并引发适当的验证事件。 否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新处理架构执行对架构执行的所有预处理步骤时<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>调用方法。 如果在调用<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>是否成功，请<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为`false`。  
  
 中的架构之后，应使用重新处理方法<xref:System.Xml.Schema.XmlSchemaSet>已被修改，之后<xref:System.Xml.Schema.XmlSchemaSet>执行编译。  
  
> [!NOTE]
>  您需要调用<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法，如果已将其添加到后更改架构 （或其的包括/导入之一） <xref:System.Xml.Schema.XmlSchemaSet>。 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法将检查架构的结构根据 W3C XML 架构的规则的有效性。 但是，它不会执行完整的验证检查。 它还会解析到内部和外部架构组件的引用。 已成功检索到任何导入或包含架构也会添加到<xref:System.Xml.Schema.XmlSchemaSet>。 导入的架构添加作为单独<xref:System.Xml.Schema.XmlSchema>对象时包括架构所做的包括一部分<xref:System.Xml.Schema.XmlSchema>。 如果要重新处理的调用成功，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为 false。  
  
   
  
## Examples  
 下面的示例演示如何重新处理架构添加到<xref:System.Xml.Schema.XmlSchemaSet>。 后<xref:System.Xml.Schema.XmlSchemaSet>使用编译<xref:System.Xml.Schema.XmlSchemaSet.Compile%2A>方法，并添加到架构<xref:System.Xml.Schema.XmlSchemaSet>修改<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性将设置为`true`，即使在架构<xref:System.Xml.Schema.XmlSchemaSet>已被修改。 调用<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法执行由执行的所有预处理<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法和集<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为`false`。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">该架构无效。</exception>
        <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象并不存在于 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中 XML 架构定义语言 (XSD) 架构的集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberSignature Language="F#" Value="member this.Schemas : unit -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 架构定义语言 (XSD) 架构的集合。</summary>
        <returns><see cref="T:System.Collections.ICollection" /> 对象，它包含已添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的所有架构。 如果没有架构添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，则返回空的 <see cref="T:System.Collections.ICollection" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回的间接添加到架构<xref:System.Xml.Schema.XmlSchemaSet>因为它们已导入。  
  
> [!NOTE]
>  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>方法等效于<xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A>方法的已过时<xref:System.Xml.Schema.XmlSchemaCollection>。  
  
   
  
## Examples  
 下面的示例演示如何循环访问中的所有架构<xref:System.Xml.Schema.XmlSchemaSet>。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Schemas : string -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">架构 <paramref name="targetNamespace" /> 属性。</param>
        <summary>返回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中属于给定命名空间的所有 XML 架构定义语言 (XSD) 架构的集合。</summary>
        <returns><see cref="T:System.Collections.ICollection" /> 对象，它包含已添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的中的属于给定命名空间的所有架构。 如果没有架构添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，则返回空的 <see cref="T:System.Collections.ICollection" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`targetNamespace`参数是`null`或<xref:System.String.Empty>，则返回所有没有命名空间的架构。  
  
 此方法返回的间接添加到架构<xref:System.Xml.Schema.XmlSchemaSet>因为它们已导入。  
  
> [!NOTE]
>  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>方法等效于<xref:System.Xml.Schema.XmlSchemaCollection.Item%2A>方法的已过时<xref:System.Xml.Schema.XmlSchemaCollection>。  
  
   
  
## Examples  
 下面的示例演示如何循环访问中的所有架构http://www.contoso.com/books命名空间中的<xref:System.Xml.Schema.XmlSchemaSet>。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定一个事件处理程序，用于接收有关 XML 架构定义语言 (XSD) 架构验证错误的信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置接收架构验证错误的相关信息的事件处理程序时<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>或<xref:System.Xml.Schema.XmlSchemaSet.Compile%2A>方法的<xref:System.Xml.Schema.XmlSchemaSet>调用。  
  
 如果未定义的事件处理程序，则<xref:System.Xml.Schema.XmlSchemaException>上的任何验证错误引发位置<xref:System.Xml.Schema.XmlSeverityType>是<xref:System.Xml.Schema.XmlSeverityType.Error>。 验证错误不会引发异常<xref:System.Xml.Schema.XmlSeverityType>的<xref:System.Xml.Schema.XmlSeverityType.Warning>。  
  
   
  
## Examples  
 下面的代码示例演示了添加<xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>来验证 XML 文档的架构时捕获错误和警告。  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 该示例使用 books.xml 文件作为输入。  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 该示例使用 books.xsd 文件作为输入。  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置用于解析在架构的包含和导入元素中引用的命名空间或位置的 <see cref="T:System.Xml.XmlResolver" />。</summary>
        <value><see cref="T:System.Xml.XmlResolver" />，用于解析在架构的包含和导入元素中引用的命名空间或位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver>的<xref:System.Xml.Schema.XmlSchemaSet>用于解析命名空间或位置中引用包含和导入元素的架构，架构将添加使用任何时间<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>或<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法。  
  
> [!IMPORTANT]
>  外部命名空间或位置中引用包含，导入和重新定义元素的架构进行解析的基 URI 的架构的包含或导入这些方面。 例如，如果包括或导入架构的基 URI 为空或`null`，外部位置来解析相对于当前目录。 <xref:System.Xml.XmlUrlResolver>类用于解析外部架构默认情况下。 若要禁用解析导入、 包括和重新定义架构的元素，设置<xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A>属性设置为`null`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IXamlNameResolver" FullName="System.Xaml.IXamlNameResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="314f8938eb885657afa66593d61c25f5593412a0" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64288347" /></Metadata><TypeSignature Language="C#" Value="public interface IXamlNameResolver" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IXamlNameResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.IXamlNameResolver" />
  <TypeSignature Language="VB.NET" Value="Public Interface IXamlNameResolver" />
  <TypeSignature Language="C++ CLI" Value="public interface class IXamlNameResolver" />
  <TypeSignature Language="F#" Value="type IXamlNameResolver = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="49793-101">描述可返回 XAML 名称所指定对象的服务，或者返回推迟名称解析的标记。</span><span class="sxs-lookup"><span data-stu-id="49793-101">Describes a service that can return objects that are specified by XAML name, or alternatively, returns a token that defers name resolution.</span></span> <span data-ttu-id="49793-102">该服务还可返回 XAML 名称范围中所有命名对象的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="49793-102">The service can also return an enumerable set of all named objects that are in the XAML namescope.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49793-103">此接口不适合外部实现的典型 XAML 方案，因为它是一项服务。</span><span class="sxs-lookup"><span data-stu-id="49793-103">This interface is not intended for external implementation of typical XAML scenarios because it is a service.</span></span> <span data-ttu-id="49793-104">此服务，标记扩展和类型转换器将 XAML 名称解析为其他对象相同的 XAML 源中进行时仍在 XAML 节点表示形式。</span><span class="sxs-lookup"><span data-stu-id="49793-104">This service enables markup extensions and type converters to resolve XAML names to other objects from the same XAML source while they are still in a XAML node representation.</span></span> <span data-ttu-id="49793-105">该服务可用于解析依赖于 XAML 名称到周围的 XAML 生产的非线性访问任何机制的前向引用。</span><span class="sxs-lookup"><span data-stu-id="49793-105">The service can be used to resolve forward references for any mechanism that relies on XAML names for nonlinear access to the surrounding XAML production.</span></span> <span data-ttu-id="49793-106">有关详细信息，请参阅[Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="49793-106">For more information, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md).</span></span>  
  
 <span data-ttu-id="49793-107">类型转换器和标记扩展可以查询<xref:System.Xaml.IXamlNameResolver>作为 XAML 对象编写器调用值转换行为时，XAML 对象编写器提供的服务上下文上的服务。</span><span class="sxs-lookup"><span data-stu-id="49793-107">Type converters and markup extensions can query for <xref:System.Xaml.IXamlNameResolver> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior.</span></span> <span data-ttu-id="49793-108">有关详细信息，请参阅[Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)并[Service Contexts Available to 类型转换器和标记扩展](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)。</span><span class="sxs-lookup"><span data-stu-id="49793-108">For more information, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) and [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).</span></span>  
  
 <span data-ttu-id="49793-109">此服务公开一个 API，可以延迟名称解析。</span><span class="sxs-lookup"><span data-stu-id="49793-109">This service exposes an API that can defer name resolution.</span></span> <span data-ttu-id="49793-110">由服务实现的隐喻是应存储和用于创建链接地址信息令牌不能针对部分的名称-对象图的第一轮中解析的名称。</span><span class="sxs-lookup"><span data-stu-id="49793-110">The metaphor implemented by the service is that names that cannot be resolved in a first pass against a partial name-object graph should be stored and used to create the fixup token.</span></span> <span data-ttu-id="49793-111">中的默认行为，在第二个阶段的另一个解决方法尝试提交所有此类名称。</span><span class="sxs-lookup"><span data-stu-id="49793-111">In the default behavior, all such names are submitted for another resolution attempt on a second pass.</span></span> <span data-ttu-id="49793-112">在第二步，整个名称对象图完成，且链接地址信息的所有令牌都都能够解析。</span><span class="sxs-lookup"><span data-stu-id="49793-112">On the second pass, the overall name-object graph is complete, and all the fixup tokens are able to resolve.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49793-113">即使它们所允许的特定实现，在 XAML 中的前向引用不可避免地会对性能产生影响。</span><span class="sxs-lookup"><span data-stu-id="49793-113">Even if they are permitted by a particular implementation, forward references in XAML inevitably have performance consequences.</span></span> <span data-ttu-id="49793-114">避免在生产质量 XAML 的最佳做法，只要有可能的前向引用。</span><span class="sxs-lookup"><span data-stu-id="49793-114">As a best practice for production-quality XAML, avoid forward references whenever possible.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
    <altmember cref="T:System.Windows.NameScope" />
  </Docs>
  <Members>
    <Member MemberName="GetAllNamesAndValuesInScope">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; GetAllNamesAndValuesInScope ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; GetAllNamesAndValuesInScope() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllNamesAndValuesInScope () As IEnumerable(Of KeyValuePair(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ GetAllNamesAndValuesInScope();" />
      <MemberSignature Language="F#" Value="abstract member GetAllNamesAndValuesInScope : unit -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;" Usage="iXamlNameResolver.GetAllNamesAndValuesInScope " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49793-115">返回 XAML 名称范围中所有命名对象的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="49793-115">Returns an enumerable set of all named objects in the XAML namescope.</span></span></summary>
        <returns><span data-ttu-id="49793-116"><see cref="T:System.Collections.Generic.KeyValuePair`2" /> 对象的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="49793-116">An enumerable set of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> objects.</span></span> <span data-ttu-id="49793-117">对于每个 <see cref="T:System.Collections.Generic.KeyValuePair`2" />，<see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 组件为字符串，<see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> 组件为在 XAML 名称范围中使用 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 名称的对象。</span><span class="sxs-lookup"><span data-stu-id="49793-117">For each <see cref="T:System.Collections.Generic.KeyValuePair`2" />, the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> component is a string, and the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> component is the object that uses the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> name in the XAML namescope.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFixupToken">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="49793-118">返回一个对象，该对象可针对生成前向引用的某些标记模式进行修正。</span><span class="sxs-lookup"><span data-stu-id="49793-118">Returns an object that can correct for certain markup patterns that produce forward references.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFixupToken">
      <MemberSignature Language="C#" Value="public object GetFixupToken (System.Collections.Generic.IEnumerable&lt;string&gt; names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFixupToken(class System.Collections.Generic.IEnumerable`1&lt;string&gt; names) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFixupToken (names As IEnumerable(Of String)) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFixupToken(System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ names);" />
      <MemberSignature Language="F#" Value="abstract member GetFixupToken : seq&lt;string&gt; -&gt; obj" Usage="iXamlNameResolver.GetFixupToken names" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="names"><span data-ttu-id="49793-119">可能转发引用的名称的集合。</span><span class="sxs-lookup"><span data-stu-id="49793-119">A collection of names that are possible forward references.</span></span></param>
        <summary><span data-ttu-id="49793-120">返回一个对象，该对象可针对生成前向引用的某些标记模式进行修正。</span><span class="sxs-lookup"><span data-stu-id="49793-120">Returns an object that can correct for certain markup patterns that produce forward references.</span></span></summary>
        <returns><span data-ttu-id="49793-121">一个为要稍后计算的查找行为提供标记的对象。</span><span class="sxs-lookup"><span data-stu-id="49793-121">An object that provides a token for lookup behavior to be evaluated later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49793-122">现有的内部服务提供程序，可用在标记扩展的架构上下文和类型转换器可以实现此服务;但是，它们返回仅现有 XAML 编写器工作默认 XAML 架构上下文可以处理的内部类型。</span><span class="sxs-lookup"><span data-stu-id="49793-122">Existing internal service providers that are available in schema contexts for markup extensions and type converters can implement this service; however, they return an internal type that only the existing XAML writers that work under the default XAML schema context can process.</span></span>  
  
 <span data-ttu-id="49793-123">解析所有前向引用的名称时，调用用户代码以重新分析每个列表中的名称。</span><span class="sxs-lookup"><span data-stu-id="49793-123">When all the forward referenced names are resolvable, the user code is called to reparse each name in the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFixupToken">
      <MemberSignature Language="C#" Value="public object GetFixupToken (System.Collections.Generic.IEnumerable&lt;string&gt; names, bool canAssignDirectly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFixupToken(class System.Collections.Generic.IEnumerable`1&lt;string&gt; names, bool canAssignDirectly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFixupToken (names As IEnumerable(Of String), canAssignDirectly As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFixupToken(System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ names, bool canAssignDirectly);" />
      <MemberSignature Language="F#" Value="abstract member GetFixupToken : seq&lt;string&gt; * bool -&gt; obj" Usage="iXamlNameResolver.GetFixupToken (names, canAssignDirectly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="canAssignDirectly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="names"><span data-ttu-id="49793-124">可能转发引用的名称的集合。</span><span class="sxs-lookup"><span data-stu-id="49793-124">A collection of names that are possible forward references.</span></span></param>
        <param name="canAssignDirectly"><span data-ttu-id="49793-125">如果为 <see langword="true" />，则立即将已解析的名称引用指派给目标属性。</span><span class="sxs-lookup"><span data-stu-id="49793-125"><see langword="true" /> to immediately assign the resolved name reference to the target property.</span></span> <span data-ttu-id="49793-126">如果为 <see langword="false" />，则调用用户代码进行重新分析。</span><span class="sxs-lookup"><span data-stu-id="49793-126"><see langword="false" /> to call the user code for a reparse.</span></span> <span data-ttu-id="49793-127">默认行为是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="49793-127">The default behavior is <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="49793-128">返回一个对象，该对象可针对生成前向引用的某些标记模式进行修正。</span><span class="sxs-lookup"><span data-stu-id="49793-128">Returns an object that can correct for certain markup patterns that produce forward references.</span></span></summary>
        <returns><span data-ttu-id="49793-129">一个为要稍后计算的查找行为提供标记的对象。</span><span class="sxs-lookup"><span data-stu-id="49793-129">An object that provides a token for lookup behavior to be evaluated later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49793-130">现有的内部服务提供程序，可用在标记扩展的架构上下文和类型转换器实现此服务;但是，它们返回仅可由工作默认 XAML 架构上下文的现有 XAML 编写器处理的内部类型。</span><span class="sxs-lookup"><span data-stu-id="49793-130">Existing internal service providers that are available in schema contexts for markup extensions and type converters implement this service; however, they return an internal type that can only be processed by the existing XAML writers that work under the default XAML schema context.</span></span>  
  
 <span data-ttu-id="49793-131">如果`canAssignDirectly`是`false`，当所有前向引用的名称都是可解析，用户代码调用以重新分析每个列表中的名称。</span><span class="sxs-lookup"><span data-stu-id="49793-131">If `canAssignDirectly` is `false`, when all the forward referenced names are resolvable, the user code is called to reparse each name in the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFixupTokenAvailable">
      <MemberSignature Language="C#" Value="public bool IsFixupTokenAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixupTokenAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFixupTokenAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFixupTokenAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixupTokenAvailable : bool" Usage="System.Xaml.IXamlNameResolver.IsFixupTokenAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49793-132">获取一个值，该值确定是否可调用 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />，以便将名称解析为前向解析的标记。</span><span class="sxs-lookup"><span data-stu-id="49793-132">Gets a value that determines whether calling <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> is available in order to resolve a name into a token for forward resolution.</span></span></summary>
        <value><span data-ttu-id="49793-133">如果提供了 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> 作为可为前向解析返回有用标记的实现，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="49793-133"><see langword="true" /> if <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> is available as an implementation that returns a useful token for forward resolution; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49793-134">此属性返回`false`时<xref:System.Xaml.IXamlNameResolver.GetFixupToken%2A>不会返回一个令牌，因为<xref:System.Xaml.Schema.XamlValueConverter%601>所涉及的现有令牌上的第二个过程。</span><span class="sxs-lookup"><span data-stu-id="49793-134">This property returns `false` when <xref:System.Xaml.IXamlNameResolver.GetFixupToken%2A> does not return a token because a <xref:System.Xaml.Schema.XamlValueConverter%601> is involved in the second pass on an existing token.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNameScopeInitializationComplete">
      <MemberSignature Language="C#" Value="event EventHandler OnNameScopeInitializationComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler OnNameScopeInitializationComplete" />
      <MemberSignature Language="DocId" Value="E:System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Event OnNameScopeInitializationComplete As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ OnNameScopeInitializationComplete;" />
      <MemberSignature Language="F#" Value="member this.OnNameScopeInitializationComplete : EventHandler " Usage="member this.OnNameScopeInitializationComplete : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49793-135">在 XAML 处理器已向支持 XAML 名称范围注册了所有相关名称时发生。</span><span class="sxs-lookup"><span data-stu-id="49793-135">Occurs when a XAML processor has registered all the relevant names to the backing XAML namescope.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Resolve">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="49793-136">从名称引用解析对象。</span><span class="sxs-lookup"><span data-stu-id="49793-136">Resolves an object from a name reference.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public object Resolve (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Resolve(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IXamlNameResolver.Resolve(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Resolve (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Resolve(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member Resolve : string -&gt; obj" Usage="iXamlNameResolver.Resolve name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="49793-137">要解析的名称引用。</span><span class="sxs-lookup"><span data-stu-id="49793-137">The name reference to resolve.</span></span></param>
        <summary><span data-ttu-id="49793-138">从名称引用解析对象。</span><span class="sxs-lookup"><span data-stu-id="49793-138">Resolves an object from a name reference.</span></span></summary>
        <returns><span data-ttu-id="49793-139">解析的对象；或者为 null。</span><span class="sxs-lookup"><span data-stu-id="49793-139">The resolved object; or null.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49793-140">如果返回值为`null`，可能存在的前向引用。</span><span class="sxs-lookup"><span data-stu-id="49793-140">If a value is returned as `null`, a forward reference might exist.</span></span> <span data-ttu-id="49793-141">想要支持前向引用的实现可以使用`FixupToken`通过模式<xref:System.Xaml.IXamlNameResolver.GetFixupToken%2A>和<xref:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable%2A>Api。</span><span class="sxs-lookup"><span data-stu-id="49793-141">Implementations that want to support forward references can use the `FixupToken` pattern through the <xref:System.Xaml.IXamlNameResolver.GetFixupToken%2A> and <xref:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable%2A> APIs.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public object Resolve (string name, out bool isFullyInitialized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Resolve(string name, [out] bool&amp; isFullyInitialized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IXamlNameResolver.Resolve(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Resolve (name As String, ByRef isFullyInitialized As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Resolve(System::String ^ name, [Runtime::InteropServices::Out] bool % isFullyInitialized);" />
      <MemberSignature Language="F#" Value="abstract member Resolve : string *  -&gt; obj" Usage="iXamlNameResolver.Resolve (name, isFullyInitialized)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="isFullyInitialized" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="49793-142">要解析的名称引用。</span><span class="sxs-lookup"><span data-stu-id="49793-142">The name reference to resolve.</span></span></param>
        <param name="isFullyInitialized"><span data-ttu-id="49793-143">当此方法返回时，如果返回的对象在未解析引用上有任何依赖项，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="49793-143">When this method returns, <see langword="true" /> if the returned object has any dependencies on unresolved references; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="49793-144">从名称引用解析对象，并提供一个跟踪值，该值报告是否为建立对象图而完全初始化对象。</span><span class="sxs-lookup"><span data-stu-id="49793-144">Resolves an object from a name reference, and provides a tracking value that reports whether the object is fully initialized for object graph purposes.</span></span></summary>
        <returns><span data-ttu-id="49793-145">一个为要稍后计算的查找行为提供标记的对象。</span><span class="sxs-lookup"><span data-stu-id="49793-145">An object that provides a token for lookup behavior to be evaluated later.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
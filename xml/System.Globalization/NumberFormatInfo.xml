<Type Name="NumberFormatInfo" FullName="System.Globalization.NumberFormatInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fdf061b2c2fe21c546a3a5eff63f17302c177d53" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53391493" /></Metadata><TypeSignature Language="C#" Value="public sealed class NumberFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit NumberFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.NumberFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NumberFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class NumberFormatInfo sealed : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type NumberFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供用于对数字值进行格式设置和分析的区域性特定信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo>类包含格式化和分析数字值时所使用的区域性特定信息。 此信息包括货币符号、 十进制符号、 组分隔符符号和正和负号的符号。  
  
-   [实例化 NumberFormatInfo 对象](#Instantiating)  
  
    -   [为当前区域性](#Instantiating_Current)  
  
    -   [用于固定区域性](#Instantiating_Invariant)  
  
    -   [针对特定区域性](#Instantiating_Specific)  
  
    -   [对于非特定区域性](#Instantiating_Neutral)  
  
-   [NumberFormatInfo 和动态数据](#dynamic)  
  
-   [IFormatProvider、 NumberFormatInfo，和数值格式设置](#formatProvider)  
  
-   [格式字符串和 NumberFormatInfo 属性](#properties)  
  
-   [修改 NumberFormatInfo 属性](#modifying)  
  
    -   [修改的货币符号和模式](#currency)  
  
    -   [格式设置国家/地区标识号](#id)  
  
-   [分析数值字符串](#parsing)  
  
    -   [分析用户字符串](#ParseUser)  
  
    -   [序列化和反序列化的数值数据](#ParseSerial)  
  
<a name="Instantiating"></a>   
## <a name="instantiating-a-numberformatinfo-object"></a>实例化 NumberFormatInfo 对象  
 可以实例化<xref:System.Globalization.NumberFormatInfo>对象，表示当前区域性、 固定区域性，特定区域性或非特定区域性的格式设置约定。  
  
<a name="Instantiating_Current"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-current-culture"></a>实例化 NumberFormatInfo 对象为当前区域性  
 可以实例化<xref:System.Globalization.NumberFormatInfo>处于以下任一当前线程区域性的对象。 每种情况下，返回<xref:System.Globalization.NumberFormatInfo>对象是只读的。  
  
-   通过检索<xref:System.Globalization.CultureInfo>对象，表示从当前线程区域性<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>属性，并检索<xref:System.Globalization.CultureInfo>对象从其<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>属性。  
  
-   通过检索<xref:System.Globalization.NumberFormatInfo>返回的对象`static`(`Shared`在 Visual Basic 中)<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>属性。  
  
-   通过调用<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>方法替换<xref:System.Globalization.CultureInfo>对象，表示当前区域性。  
  
 下面的示例使用以下三种方式创建<xref:System.Globalization.NumberFormatInfo>对象表示当前区域性的格式设置约定。 它还会检索的值<xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>属性来说明每个对象是只读的。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate1.vb#1)]  
  
 您可以创建可写<xref:System.Globalization.NumberFormatInfo>对象，表示当前线程区域性的约定中的任何以下方式：  
  
-   通过检索<xref:System.Globalization.NumberFormatInfo>对象中的任何方式在前面的代码示例所示，然后调用<xref:System.Globalization.NumberFormatInfo.Clone%2A>对返回<xref:System.Globalization.NumberFormatInfo>对象。 这将创建一份原始<xref:System.Globalization.NumberFormatInfo>对象，不同之处在于其<xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>属性是`false`。  
  
-   通过调用<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>方法来创建<xref:System.Globalization.CultureInfo>对象，表示当前区域性，然后使用其<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>属性来检索<xref:System.Globalization.NumberFormatInfo>对象。  
  
 下面的示例阐释了两个方法的实例化<xref:System.Globalization.NumberFormatInfo>对象，并显示的值及其<xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>属性来说明该对象不是只读的。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate2.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate2.vb#2)]  
  
 请注意，Windows 操作系统允许用户重写的一些<xref:System.Globalization.NumberFormatInfo>属性值中数值的格式设置和分析操作通过使用**地区和语言**控制面板中的项。 例如，其区域性为英语 （美国） 的用户可能选择货币值显示为 1.1 美元，而不是默认值为 $1.1。 <xref:System.Globalization.NumberFormatInfo>中所述的方法检索的对象以前所有反映这些用户重写。 如果这是不可取，则可以创建<xref:System.Globalization.NumberFormatInfo>不会反映用户重写的对象 (并且也是读/写而不是只读的) 通过调用<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>构造函数，并提供的值`false`为`useUserOverride`自变量。 下面的示例提供一个系统的当前区域性为英语 （美国） 和其货币符号已从默认值为 $ 更改为美元。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate3.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate3.vb#3)]  
  
 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>属性设置为`true`，属性<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>， <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>，和<xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType>还检索从用户设置。 如果用户设置与不兼容与关联的区域性<xref:System.Globalization.CultureInfo>对象 (例如，如果在所选的日历不是按列出的日历之一<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>属性)，则结果的方法和属性的值是未定义。  
  
<a name="Instantiating_Invariant"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-invariant-culture"></a>实例化用于固定区域性 NumberFormatInfo 对象  
 固定的区域性表示是不区分区域性的区域性。 它基于英语语言，但不是用于任何特定说英语的国家/地区。 尽管特定区域性的数据可以是动态和可以更改以反映新的区域性约定或用户首选项，固定区域性的数据不会更改。 一个<xref:System.Globalization.NumberFormatInfo>对象，表示固定区域性的格式设置约定可以由区域性使用的格式设置的操作中的结果字符串应不会有所不同。  
  
 可以实例化<xref:System.Globalization.NumberFormatInfo>对象，表示固定区域性的格式设置约定按以下方式：  
  
-   通过检索的值<xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>属性。 返回<xref:System.Globalization.NumberFormatInfo>对象是只读的。  
  
-   通过检索的值<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>属性从<xref:System.Globalization.CultureInfo>返回的对象<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>属性。 返回<xref:System.Globalization.NumberFormatInfo>对象是只读的。  
  
-   通过调用无参数<xref:System.Globalization.NumberFormatInfo.%23ctor%2A>类构造函数。 返回<xref:System.Globalization.NumberFormatInfo>对象是读/写。  
  
 下面的示例使用两种方法来实例化<xref:System.Globalization.NumberFormatInfo>表示固定区域性的对象。 它然后指示对象是只读的  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate4.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate4.vb#4)]  
  
<a name="Instantiating_Specific"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-specific-culture"></a>实例化特定区域性 NumberFormatInfo 对象  
 特定区域性表示特定国家/地区中讲述的语言。 例如，EN-US 表示美国，所使用的英语语言的特定区域性，en CA 是表示在加拿大所使用的英语语言的特定区域性。 可以实例化<xref:System.Globalization.NumberFormatInfo>对象，表示特定区域性的格式设置约定按以下方式：  
  
-   通过调用<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType>方法，并检索所返回的值<xref:System.Globalization.CultureInfo>对象的<xref:System.Globalization.CultureInfo.NumberFormat%2A>属性。 返回<xref:System.Globalization.NumberFormatInfo>对象是只读的。  
  
-   通过传递<xref:System.Globalization.CultureInfo>表示区域性的对象的<xref:System.Globalization.NumberFormatInfo>对象想要检索对静态<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>方法。 返回<xref:System.Globalization.NumberFormatInfo>对象是读/写。  
  
-   通过调用<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>方法，并检索所返回的值<xref:System.Globalization.CultureInfo>对象的<xref:System.Globalization.CultureInfo.NumberFormat%2A>属性。 返回<xref:System.Globalization.NumberFormatInfo>对象是读/写。  
  
-   通过调用之一<xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>类构造函数和检索所返回的值<xref:System.Globalization.CultureInfo>对象的<xref:System.Globalization.CultureInfo.NumberFormat%2A>属性。 返回<xref:System.Globalization.NumberFormatInfo>对象是读/写。  
  
 下面的示例使用以下四种方式创建<xref:System.Globalization.NumberFormatInfo>反映了印度尼西亚语 （印度尼西亚） 区域性的格式设置约定的对象。 它还指示每个对象是只读的。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate5.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate5.vb#5)]  
  
<a name="Instantiating_Neutral"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-neutral-culture"></a>实例化一个非特定区域性的 NumberFormatInfo 对象  
 表示非特定区域性的区域性或语言无关的国家/地区。 它通常是一个或多个特定区域性的父级。 例如，fr 是非特定区域性的法语语言和 FR-FR 区域性的父级。 您创建<xref:System.Globalization.NumberFormatInfo>对象，在您创建的相同方式表示非特定区域性的格式设置约定<xref:System.Globalization.NumberFormatInfo>对象，表示特定区域性的格式设置约定。  
  
> [!NOTE]
>  在中[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]及更早版本，尝试检索<xref:System.Globalization.NumberFormatInfo>反映了一个非特定区域性的格式设置约定的对象将引发<xref:System.NotSupportedException>异常。  
  
 但是，因为它是独立于特定的国家/地区，非特定区域性缺少区域性特定格式设置信息。 而不是填充<xref:System.Globalization.NumberFormatInfo>.NET Framework 返回泛型值对象<xref:System.Globalization.NumberFormatInfo>反映了特定的格式设置约定的区域性的对象是非特定区域性的子级。 例如，<xref:System.Globalization.NumberFormatInfo>对象的非特定 en 区域性反映 EN-US 区域性的格式设置约定和<xref:System.Globalization.NumberFormatInfo>对象的 fr 区域性反映 FR-FR 区域性的格式设置约定。  
  
 可以使用如下所示的代码来确定每个非特定区域性表示的特定区域性的格式设置约定。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate6c.vb#6)]  
  
<a name="dynamic"></a>   
## <a name="numberformatinfo-and-dynamic-data"></a>NumberFormatInfo 和动态数据  
 用于格式化数值的值由提供特定于区域性的数据<xref:System.Globalization.NumberFormatInfo>类是动态的就像通过提供的区域性数据<xref:System.Globalization.CultureInfo>类。 不应造成稳定性的值的任何假设<xref:System.Globalization.NumberFormatInfo>关联的对象与特定<xref:System.Globalization.CultureInfo>对象。 仅提供固定区域性和其关联的数据<xref:System.Globalization.NumberFormatInfo>是稳定的对象。 其他数据可以更改应用程序会话之间或甚至在单个会话中，原因如下：  
  
-   **系统更新。** 随着时间的推移更改货币符号或货币格式等区域首选项。 在此情况下，Windows 更新包括对更改<xref:System.Globalization.NumberFormatInfo>特定区域性的属性值。  
  
-   **替换区域性。** <xref:System.Globalization.CultureAndRegionInfoBuilder>类可用于替换现有的区域性的数据。  
  
-   **对属性值的级联更改。** 多个区域性相关的属性可以更改在运行时，这又会导致<xref:System.Globalization.NumberFormatInfo>要更改的数据。 例如，可以更改当前区域性，以编程方式或通过用户操作。 在此情况下，<xref:System.Globalization.NumberFormatInfo>返回对象<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>属性更改为与当前区域性关联的对象。  
  
-   **用户首选项。** 应用程序的用户可能会重写一些与通过控制面板中的区域和语言选项的当前系统区域性关联的值。 例如，用户可能选择不同的货币符号或不同的小数分隔符符号。 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>属性设置为`true`（其默认值） 的属性<xref:System.Globalization.NumberFormatInfo>从用户设置还检索对象。  
  
 从.NET Framework 2.0 的所有用户可重写属性<xref:System.Globalization.NumberFormatInfo>对象创建对象时进行初始化。 就仍有可能导致不一致，因为既不对象创建，也不用户重写过程是原子操作，并在对象创建期间可能会更改的相关值。 但是，这些不一致情况应该极少。  
  
 您可以控制用户重写会反映在<xref:System.Globalization.NumberFormatInfo>对象表示与当前线程区域性相同的区域性。 下表列出了在其中的方式<xref:System.Globalization.NumberFormatInfo>对象可以检索，指示生成的对象是否反映用户重写。  
  
|CultureInfo 和 NumberFormatInfo 对象数据源|反映用户替代|  
|-------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.NumberFormat` 属性|是|  
|<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> 属性|是|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法|是|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> 方法|No|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> 构造函数|是|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 构造函数|取决于值`useUserOverride`参数|  
  
 除非有其他人信服的理由，否则当你使用时应遵守用户重写<xref:System.Globalization.NumberFormatInfo>进行格式化和分析用户输入或显示数值数据的客户端应用程序中的对象。 对于服务器应用程序或无人参与的应用程序，您应遵从用户重写。 但是，如果使用的<xref:System.Globalization.NumberFormatInfo>对象是显式或隐式要持久保存以字符串形式的数值数据，您都应使用<xref:System.Globalization.NumberFormatInfo>应该指定反映固定区域性，或者您的格式设置约定的对象无论区域性使用的自定义数字格式字符串。  
  
<a name="formatProvider"></a>   
## <a name="iformatprovider-numberformatinfo-and-numeric-formatting"></a>IFormatProvider、 NumberFormatInfo，和数值格式设置  
 一个<xref:System.Globalization.NumberFormatInfo>对象在所有的数字格式设置操作中使用隐式或显式。 其中包括对以下方法的调用：  
  
-   所有数字格式设置方法，如<xref:System.Int32.ToString%2A?displayProperty=nameWithType>， <xref:System.Double.ToString%2A?displayProperty=nameWithType>，和<xref:System.Convert.ToString%28System.Int32%29?displayProperty=nameWithType>。  
  
-   主要的复合格式设置方法， <xref:System.String.Format%2A?displayProperty=nameWithType>。  
  
-   格式设置方法，如其他复合<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>和<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。  
  
 使所有数值的格式设置操作的使用<xref:System.IFormatProvider>实现。 <xref:System.IFormatProvider>接口包含一个方法， <xref:System.IFormatProvider.GetFormat%28System.Type%29>。 这是一种回调方法传递<xref:System.Type>表示提供格式设置信息所需的类型的对象。 该方法负责返回该类型的实例或`null`，如果它不能提供的类型的实例。 .NET Framework 提供了两个<xref:System.IFormatProvider>设置数字格式的实现：  
  
-   <xref:System.Globalization.CultureInfo>类，该类表示特定区域性 （或特定国家/地区中的特定语言）。 在格式设置操作中，数字<xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType>方法将返回<xref:System.Globalization.NumberFormatInfo>与关联的对象及其<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>属性。  
  
-   <xref:System.Globalization.NumberFormatInfo>类，该类提供的格式设置约定及其关联的区域性的信息。 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A?displayProperty=nameWithType>方法返回自身的实例。  
  
 如果<xref:System.IFormatProvider>实现未提供格式设置方法显式<xref:System.Globalization.CultureInfo>对象返回的<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>使用表示当前线程区域性的属性。  
  
 下面的示例说明之间的关系<xref:System.IFormatProvider>接口和<xref:System.Globalization.NumberFormatInfo>中通过定义一个自定义格式设置操作的类<xref:System.IFormatProvider>实现。 其<xref:System.IFormatProvider.GetFormat%2A>方法显示请求的格式设置操作的对象的类型名称。 如果请求该接口<xref:System.Globalization.NumberFormatInfo>对象，此方法提供<xref:System.Globalization.NumberFormatInfo>当前线程区域性的对象。 如示例所示，输出<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法请求<xref:System.Globalization.NumberFormatInfo>对象提供格式设置信息，而<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法请求<xref:System.Globalization.NumberFormatInfo>并<xref:System.Globalization.DateTimeFormatInfo>对象以及<xref:System.ICustomFormatter>实现。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/formatprovider1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/formatprovider1.vb#1)]  
  
 如果<xref:System.IFormatProvider>数字格式设置方法调用，方法调用中未显式提供实现`CultureInfo.CurrentCulture.GetFormat`方法，它返回<xref:System.Globalization.NumberFormatInfo>对应于当前线程区域性的对象。  
  
<a name="properties"></a>   
## <a name="format-strings-and-numberformatinfo-properties"></a>格式字符串和 NumberFormatInfo 属性  
 每个格式设置操作使用标准或自定义数字格式字符串来生成大量的结果字符串。 在某些情况下，要生成的结果字符串的格式字符串的使用是显式的如以下示例所示。 此代码将调用<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法将<xref:System.Decimal>为通过使用 EN-US 区域性的格式设置约定的不同的字符串表示形式的数字值。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties1.vb#2)]  
  
 在其他情况下，使用格式字符串是隐式的。 例如，在下面的方法调用为默认值或无参数<xref:System.Decimal.ToString?displayProperty=nameWithType>方法、 的值<xref:System.Decimal>使用常规 ("G") 格式说明符，并在这种情况下的当前区域性的约定格式化实例EN-US 区域性。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties2.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties2.vb#3)]  
  
 每个标准数字格式字符串使用一个或多个<xref:System.Globalization.NumberFormatInfo>属性以确定该模式或结果字符串中使用的符号。 同样，每个自定义数字格式说明符"0"和"#"由定义结果字符串中插入符号但<xref:System.Globalization.NumberFormatInfo>属性。 下表列出了标准和自定义数字格式说明符和其关联<xref:System.Globalization.NumberFormatInfo>属性。  若要更改特定区域性的结果字符串的外观，请参阅[修改 NumberFormatInfo 属性](#modifying)部分。 有关详细信息，有关使用这些格式说明符，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)并[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
|格式说明符|关联的属性|  
|----------------------|---------------------------|  
|"C"或者"c"（货币格式说明符）|<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>可以定义默认的小数位数。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>若要定义的小数分隔符符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>若要定义的组或千位分隔符。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>若要定义整型组的大小。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>若要定义的模式的负货币值。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>若要定义的模式的正货币值。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>若要定义货币符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>若要定义负号符号。|  
|"D"或者"d"（十进制格式说明符）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>若要定义负号符号。|  
|"E"或者"e"（指数或科学记数法格式说明符）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>以负号符号定义中的尾数和指数。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>若要定义的小数分隔符符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>若要在指数中定义的正号符号。|  
|"F"或者"f"（定点格式说明符）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>若要定义负号符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>可以定义默认的小数位数。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>若要定义的小数分隔符符号。|  
|"G"或者"g"（常规格式说明符）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>若要定义负号符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>若要定义的小数分隔符符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>若要在指数格式中定义的正号符号的结果字符串。|  
|"N"或者"n"（数字格式说明符）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>若要定义负号符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>可以定义默认的小数位数。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>若要定义的小数分隔符符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>定义组分隔符 （千为单位）。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>若要在组中定义的整数位的数量。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>定义负值的格式。|  
|"P"或者"p"（百分比格式说明符）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>若要定义负号符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>可以定义默认的小数位数。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>若要定义的小数分隔符符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>定义组分隔符符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>若要在组中定义的整数位的数量。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>定义百分比符号和负号负值的位置。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>定义正值的百分比符号的位置。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>若要定义百分比符号。|  
|"R"或者"r"（往返格式说明符）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>若要定义负号符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>若要定义的小数分隔符符号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>若要在指数中定义的正号符号。|  
|"X"或"x"（十六进制格式说明符）|无。|  
|"."（小数点自定义格式说明符）|<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>若要定义的小数分隔符符号。|  
|"，"（组分隔符自定义格式说明符）|<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>定义组 （千） 分隔符符号。|  
|"%"（百分比占位符自定义格式说明符）|<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>若要定义百分比符号。|  
|"‰"（每千分比占位符自定义格式说明符）|<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>定义千分比符号。|  
|"E"（指数记数法自定义格式说明符）|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>以负号符号定义中的尾数和指数。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>若要在指数中定义的正号符号。|  
  
 请注意，<xref:System.Globalization.NumberFormatInfo>类包括<xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>属性，它指定特定区域性使用的十进制数字。 在格式设置操作; 但是，不使用属性基本拉丁文数字 0 (U + 0030-u) 到 9 (U + 0039) 结果字符串中使用。 此外，对于<xref:System.Single>并<xref:System.Double>的值`NaN`， `PositiveInfinity`，并`NegativeInfinity`，结果字符串包含以独占方式通过定义的符号<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>， <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>，和<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>属性分别。  
  
<a name="modifying"></a>   
## <a name="modifying-numberformatinfo-properties"></a>修改 NumberFormatInfo 属性  
 可以修改的属性<xref:System.Globalization.NumberFormatInfo>数字格式设置操作中生成自定义结果字符串的对象。 具体方法为：  
  
1.  创建的读/写副本<xref:System.Globalization.NumberFormatInfo>对象想要修改其格式设置约定。 有关详细信息，请参阅[NumberFormatInfo 对象进行实例化](#Instantiating)部分。  
  
2.  修改属性或用于生成所需的结果字符串的属性。 有关如何格式设置方法使用<xref:System.Globalization.NumberFormatInfo>属性以定义结果字符串，请参阅[格式字符串和 NumberFormatInfo 属性](#properties)部分。  
  
3.  使用自定义<xref:System.Globalization.NumberFormatInfo>对象作为<xref:System.IFormatProvider>对格式设置方法的调用中的参数。  
  
> [!NOTE]
>  而不是每次启动应用程序时动态修改区域性的属性值，可以使用<xref:System.Globalization.CultureAndRegionInfoBuilder>类来定义自定义区域性 （区域性具有唯一的名称和补充现有区域性） 或替换（一个使用而不是特定区域性） 的区域性。  
  
 以下部分提供一些示例。  
  
<a name="currency"></a>   
### <a name="modifying-the-currency-symbol-and-pattern"></a>修改的货币符号和模式  
 下面的示例修改<xref:System.Globalization.NumberFormatInfo>对象，表示 EN-US 区域性的格式设置约定。 它将分配到的 ISO 4217 货币符号<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>属性和定义包含后, 跟一个空格和数字值的货币符号对于货币值的模式。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_currency1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_currency1.vb#1)]  
  
<a name="id"></a>   
### <a name="formatting-a-national-identification-number"></a>格式设置国家/地区标识号  
 许多国民身份证号以独占方式由数字组成，因此可轻松地进行格式设置由修改的属性<xref:System.Globalization.NumberFormatInfo>对象。 例如，在美国社会安全号码包含，如下所示排列的 9 位数： `XXX-XX-XXXX`。 下面的示例假定社会安全号码存储为整数值，并将其设置适当的格式。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_ssn1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_ssn1.vb#2)]  
  
<a name="parsing"></a>   
## <a name="parsing-numeric-strings"></a>分析数值字符串  
 分析包括将数字的字符串表示形式转换为数字。 .NET Framework 中的每个数值类型包括两个重载的分析方法：`Parse`和`TryParse`。 `Parse`方法将字符串转换为数字，并将引发异常，如果转换失败。 `TryParse`方法将字符串转换为数字，将分配到数字`out`自变量，并返回<xref:System.Boolean>值，该值指示转换是否成功。  
  
 分析方法隐式或显式使用<xref:System.Globalization.NumberStyles>枚举值，以确定哪些样式元素 （如组分隔符、 十进制分隔符或货币符号） 可出现在字符串，如果分析操作将成功。 如果<xref:System.Globalization.NumberStyles>值是未提供在方法调用中，默认值是<xref:System.Globalization.NumberStyles>值，包括该值<xref:System.Globalization.NumberStyles.Float>和<xref:System.Globalization.NumberStyles.AllowThousands>标志，指定所分析的字符串可以包括组符号、 十进制分隔符、 负号，和空白字符，也可以是指数记数法的数字的字符串表示形式。  
  
 分析方法还将隐式或显式使用<xref:System.Globalization.NumberFormatInfo>对象，用于定义特定符号和模式，可在要分析的字符串中出现。 如果<xref:System.Globalization.NumberFormatInfo>未提供对象，则默认为<xref:System.Globalization.NumberFormatInfo>当前线程区域性。 有关分析的详细信息，请参阅单独的分析方法，如<xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType>， <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>， <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>， <xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType>， <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29?displayProperty=nameWithType>，并<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29?displayProperty=nameWithType>。  
  
 下面的示例说明了分析字符串的区分区域性的性质。 它会尝试分析一个字符串，包括千位分隔符使用 EN-US、 FR-FR 和固定区域性的约定。 因为无法分析在 FR-FR 区域性，小数分隔符作为组分隔符和段包含逗号的字符串和包含 white space 作为组分隔符和使用逗号作为小数分隔符的字符串无法分析在 EN-US 和固定区域性。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parse1.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parse1.vb#4)]  
  
 分析通常发生在两个上下文中：  
  
-   操作，旨在将用户输入转换为数字值。  
  
-   操作而设计的形式保存/还原数值;也就是说，要反序列化之前序列化为字符串的数字值。  
  
 以下各节讨论中更详细地介绍这两个操作。  
  
<a name="ParseUser"></a>   
### <a name="parsing-user-strings"></a>分析用户字符串  
 分析数值字符串由用户输入时始终应实例化<xref:System.Globalization.NumberFormatInfo>反映用户的区域性设置的对象。 有关如何实例化<xref:System.Globalization.NumberFormatInfo>对象，它反映了用户自定义设置，请参阅[NumberFormatInfo 和动态数据](#dynamic)部分。  
  
 下面的示例演示的分析操作中反映了用户的区域性设置和一个不之间的差异。 在这种情况下，默认系统区域性为 EN-US，但用户已定义"，"作为小数符号和"。"作为在控件面板中，组分隔符**区域和语言**。 通常，这些符号会反转默认 EN-US 区域性中。 当用户输入的字符串，用于反映用户设置，并通过分析的字符串<xref:System.Globalization.NumberFormatInfo>对象，它也反映了用户设置 （覆盖），在分析操作返回正确结果。 但是，将字符串分析通过<xref:System.Globalization.NumberFormatInfo>对象，它反映了标准的 EN-US 区域性设置，其错误的逗号符号的组分隔符并返回不正确的结果。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parseuser1.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parseuser1.vb#5)]  
  
<a name="ParseSerial"></a>   
### <a name="serializing-and-deserializing-numeric-data"></a>序列化和反序列化的数值数据  
 数值数据是以字符串格式序列化和更高版本反序列化和分析时，应生成并通过使用固定区域性的约定分析字符串。 格式设置和分析操作应永远不会反映特定区域性的约定。 如果使用特定于区域性的设置，则数据的可移植性是严格限制;它可以是线程的仅在其特定于区域性的设置是线程的与依据其进行序列化相同的线程上成功反序列化。 在某些情况下，这意味着，即使数据不能是依据其进行序列化的同一系统上成功反序列化。  
  
 下面的示例说明了当违反此原则会发生什么。 数组中的浮点值转换为字符串时的当前线程使用 EN-US 区域性的特定于区域性的设置。 使用 EN 区域性的特定于区域性的设置的线程，然后分析数据。 在这种情况下，虽然每个分析操作成功，数据不支持往返成功和发生数据损坏。 在其他情况下，分析操作可能会失败并<xref:System.FormatException>可能引发异常。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parsepersisted.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parsepersisted.vb#6)]  
  
   
  
## Examples  
 下面的示例演示如何检索<xref:System.Globalization.NumberFormatInfo>为相应对象<xref:System.Globalization.CultureInfo>对象，并使用检索到的对象查询的数字格式设置特定区域性的信息。  
  
 [!code-cpp[NumberFormatInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberFormatInfo/cpp/NumberFormatInfo.cpp#1)]
 [!code-csharp[NumberFormatInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberFormatInfo/CS/NumberFormatInfo.cs#1)]
 [!code-vb[NumberFormatInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberFormatInfo/vb/numberformatinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.IFormatProvider" />
    <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">自定义数字格式字符串</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NumberFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NumberFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化不依赖于区域性的（固定的）<see cref="T:System.Globalization.NumberFormatInfo" /> 类的新可写实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果应用程序需要用户定义的格式设置，可以修改属性的新实例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="numberFormatInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象的浅表副本。</summary>
        <returns>从原始 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象复制的新对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 克隆是可写即使原始<xref:System.Globalization.NumberFormatInfo>对象是只读的。 因此，可以使用用户定义的模式修改克隆的属性。  
  
 一个对象的浅表副本是仅对象的副本。 如果此对象包含对其他对象的引用，浅表副本将不创建所引用对象的副本。 它将改为引用原始对象。 但是，对象的深层副本创建的对象的副本和所有内容直接或间接引用该对象的副本。 情况下<xref:System.Globalization.NumberFormatInfo>对象的浅表副本足以满足复制实例的所有属性，因为返回的对象引用的所有属性都都`static`(`Shared`在 Visual Basic 中)。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Globalization.NumberFormatInfo.Clone%2A>方法创建的读/写副本<xref:System.Globalization.NumberFormatInfo>对象，表示数字格式设置当前线程区域性的约定。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalDigits">
      <MemberSignature Language="C#" Value="public int CurrencyDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在货币值中使用的小数位数。</summary>
        <value>要在货币值中使用的小数位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为 2。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>属性用于不带精度说明符数字格式设置操作中的"C"标准格式字符串。 它定义默认的小数分隔符后的显示的小数位数。 如果精度说明符重写此值。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>属性。  
  
 [!code-cpp[CurrencyDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalDigits/CPP/currencydecimaldigits.cpp#1)]
 [!code-csharp[CurrencyDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalDigits/CS/currencydecimaldigits.cs#1)]
 [!code-vb[CurrencyDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalDigits/VB/currencydecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 99 的值。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在货币值中用作小数分隔符的字符串。</summary>
        <value>要在货币值中用作小数分隔符的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“.”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的初始值派生自中的设置**区域和语言**控制面板中的项。  
  
 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>属性用于与"C"标准格式字符串定义与小数位分隔整数的符号。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>属性。  
  
 [!code-cpp[CurrencyDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalSeparator/CPP/currencydecimalseparator.cpp#1)]
 [!code-csharp[CurrencyDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalSeparator/CS/currencydecimalseparator.cs#1)]
 [!code-vb[CurrencyDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalSeparator/VB/currencydecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <exception cref="T:System.ArgumentException">该属性被设置为空字符串。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在货币值中隔开小数点左边的位数组的字符串。</summary>
        <value>在货币值中隔开小数点左边的位数组的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“,”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的初始值派生自中的设置**区域和语言**控制面板中的项。  
  
 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>属性用于与"C"标准格式字符串定义符号的整数位组分隔。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>属性。  
  
 [!code-cpp[CurrencyGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSeparator/CPP/currencygroupseparator.cpp#1)]
 [!code-csharp[CurrencyGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSeparator/CS/currencygroupseparator.cs#1)]
 [!code-vb[CurrencyGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSeparator/VB/currencygroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSizes">
      <MemberSignature Language="C#" Value="public int[] CurrencyGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] CurrencyGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ CurrencyGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置货币值中小数点左边每一组的位数。</summary>
        <value>货币值中小数点左边每一组的位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>属性与"C"标准格式字符串使用整数的组中定义的显示的位数。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 一维数组中的每个元素必须是从 1 到 9 的整数。 最后一个元素可以为 0。  
  
 数组的第一个元素的左侧的数字的最低有效位组中定义的元素数<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>。 每个后续元素引用左侧的上一组位的下一步重大组。 如果数组的最后一个元素是不为 0，剩余的数字进行分组基于数组的最后一个元素。 如果最后一个元素为 0，其余位未分组。  
  
 例如，如果数组包含 {3，4，5}，数字进行分组类似于"$55,55555,55555,55555,4444,333.00"。 如果数组包含 {3，4，0}，数字进行分组类似于"$55555555555555555,4444,333.00"。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>属性。  
  
 [!code-cpp[CurrencyGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSizes/CPP/currencygroupsizes.cpp#1)]
 [!code-csharp[CurrencyGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSizes/CS/currencygroupsizes.cs#1)]
 [!code-vb[CurrencyGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSizes/VB/currencygroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">设置了该属性，但数组包含一个小于 0 或大于 9 的项。  
  
- 或 - 
设置了该属性，但数组包含一个设置为 0 的项（最后一项除外）。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyNegativePattern">
      <MemberSignature Language="C#" Value="public int CurrencyNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置负货币值的格式模式。</summary>
        <value>负货币值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，它表示“($n)”，其中“$”是 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />，<paramref name="n" /> 是一个数字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>属性用于与"C"标准格式字符串定义的模式的负货币值。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 此属性在下表中具有的值之一。 "$"符号是<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>，该符号"-"是<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>，和`n`是一个数字。  
  
|值|相关的模式|  
|-----------|------------------------|  
|0|($n)|  
|1|-$n|  
|2|$ n|  
|3|$n-|  
|4|（n $）|  
|5|-n $|  
|6|n $|  
|7|n$-|  
|8|-n $|  
|9|-$ n|  
|10|n $-|  
|11|$ n-|  
|12|$ n|  
|13|n-$|  
|14|($ n)|  
|15|（n $）|  
  
   
  
## Examples  
 下面的示例演示如何将<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>属性定义的负货币值的格式。  检索主机计算机上定义，并显示每个区域性的所有特定区域性<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>属性值、 其关联的模式和数字格式设置为货币值。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/cs/currencynegativepattern1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/vb/currencynegativepattern1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 15 的值。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyPositivePattern">
      <MemberSignature Language="C#" Value="public int CurrencyPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置正货币值的格式模式。</summary>
        <value>正货币值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，它表示“$n”，其中“$”是 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />，<paramref name="n" /> 是一个数字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>属性用于与"C"标准格式字符串定义的正货币值的模式。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 此属性在下表中具有的值之一。 "$"符号是<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>和`n`是一个数字。  
  
|值|相关的模式|  
|-----------|------------------------|  
|0|$n|  
|1|n$|  
|2|$ n|  
|3|n $|  
  
 请注意，该模式不支持正号。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 3 的值。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencySymbol">
      <MemberSignature Language="C#" Value="public string CurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用作货币符号的字符串。</summary>
        <value>用作货币符号的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“¤”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将字符串分配给<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>与"C"格式的数字值时，结果字符串中包含的属性[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 以下示例显示当前区域性的货币符号，并使用"C"标准数字格式字符串设置格式的货币值。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/cs/currencysymbolex1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/vb/currencysymbolex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ CurrentInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取基于当前区域性对值进行格式设置的只读的 <see cref="T:System.Globalization.NumberFormatInfo" />。</summary>
        <value>基于当前线程的区域性的只读的 <see cref="T:System.Globalization.NumberFormatInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 检索<xref:System.Globalization.NumberFormatInfo>对象从<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>属性等同于检索<xref:System.Globalization.NumberFormatInfo>对象从`CultureInfo.CurrentCulture.NumberFormat`属性。  
  
   
  
## Examples  
 下面的示例演示返回的对象<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>和`CultureInfo.CurrentCulture.NumberFormat`属性是完全相同。 它然后使用反射来显示的属性值<xref:System.Globalization.NumberFormatInfo>返回对象<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>当前区域性为 EN-US 的系统上的属性。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/cs/currentinfo1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/vb/currentinfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DigitSubstitution">
      <MemberSignature Language="C#" Value="public System.Globalization.DigitShapes DigitSubstitution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.DigitShapes DigitSubstitution" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitSubstitution As DigitShapes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DigitShapes DigitSubstitution { System::Globalization::DigitShapes get(); void set(System::Globalization::DigitShapes value); };" />
      <MemberSignature Language="F#" Value="member this.DigitSubstitution : System.Globalization.DigitShapes with get, set" Usage="System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DigitShapes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定图形用户界面如何显示数字形状的值。</summary>
        <value>指定区域性特定的数字形状的枚举值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Globalization.NumberFormatInfo.DigitSubstitution%2A>属性保留供将来使用。 目前，不使用在分析或格式设置为当前操作<xref:System.Globalization.NumberFormatInfo>对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <exception cref="T:System.ArgumentException">设置操作中的值不是有效的 <see cref="T:System.Globalization.DigitShapes" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="numberFormatInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">所需格式化服务的 <see cref="T:System.Type" />。</param>
        <summary>获取提供数字格式化服务的指定类型的对象。</summary>
        <returns>如果 <paramref name="formatType" /> 与当前 <see cref="T:System.Globalization.NumberFormatInfo" /> 的类型相同，则为当前 <see cref="T:System.Globalization.NumberFormatInfo" />；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Format(String, IFormatProvider)`支持的基本数据类型方法调用此方法时当前<xref:System.Globalization.NumberFormatInfo>作为传递<xref:System.IFormatProvider>参数。 此方法实现 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo GetInstance (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo GetInstance(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (formatProvider As IFormatProvider) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ GetInstance(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.GetInstance formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">用于获取 <see cref="T:System.Globalization.NumberFormatInfo" /> 的 <see cref="T:System.IFormatProvider" />。  
  
或 
 要获取 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" /> 的 <see langword="null" />。</param>
        <summary>获取与指定 <see cref="T:System.Globalization.NumberFormatInfo" /> 关联的 <see cref="T:System.IFormatProvider" />。</summary>
        <returns>与指定 <see cref="T:System.Globalization.NumberFormatInfo" /> 关联的 <see cref="T:System.IFormatProvider" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>方法`formatProvider`使用<xref:System.Globalization.NumberFormatInfo>作为类型参数。 如果`formatProvider`是`null`或者如果<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>返回`null`，此方法返回<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>。  
  
 你的应用程序获取<xref:System.Globalization.NumberFormatInfo>对象针对特定区域性使用以下方法之一：  
  
-   通过<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>属性。  
  
-   通过<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>方法，`provider`是<xref:System.Globalization.CultureInfo>。  
  
 一个<xref:System.Globalization.NumberFormatInfo>只能用于固定区域性或特定区域性，不能为非特定区域性创建对象。 有关固定区域性、 特定区域性和非特定区域性的详细信息，请参阅<xref:System.Globalization.CultureInfo>类。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ InvariantInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取不依赖于区域性的（固定）只读的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</summary>
        <value>不依赖于区域性的（固定的）默认只读对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这<xref:System.Globalization.NumberFormatInfo>此属性返回的对象不会更改，而不考虑当前区域性。 它表示固定区域性，这是与英语语言，但不能与任何国家/地区相关联的文化的格式设置约定。 在格式设置的操作依赖于区域性的或的生成结果字符串适用于显示跨多个区域性使用固定区域性。  
  
   
  
## Examples  
 下面的示例显示的默认属性值<xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>。  
  
 [!code-cpp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CPP/invariantinfo.cpp#1)]
 [!code-csharp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CS/invariantinfo.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/VB/invariantinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象是否为只读。</summary>
        <value>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Globalization.NumberFormatInfo" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尝试执行的一个只读的属性赋值<xref:System.Globalization.NumberFormatInfo>导致<xref:System.InvalidOperationException>。  
  
 您可以调用<xref:System.Globalization.NumberFormatInfo.Clone%2A>方法来创建一个读/写<xref:System.Globalization.NumberFormatInfo>对象从一个只读的对象，如以下示例所示。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="NaNSymbol">
      <MemberSignature Language="C#" Value="public string NaNSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NaNSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NaNSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NaNSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NaNSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示 IEEE NaN（非数字）值的字符串。</summary>
        <value>表示 IEEE NaN（非数字）值的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“NaN”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 NaN 值的详细信息，请参阅<xref:System.Double>或<xref:System.Single>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      </Docs>
    </Member>
    <Member MemberName="NativeDigits">
      <MemberSignature Language="C#" Value="public string[] NativeDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] NativeDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NativeDigits As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ NativeDigits { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NativeDigits : string[] with get, set" Usage="System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与西文数字 0 到 9 等同的本机数字的字符串数组。</summary>
        <value>包含与西文数字 0 到 9 等同的本机数字的字符串数组。 默认值是包含元素“0”、“1”、“2”、“3”、“4”、“5”、“6”、“7”、“8”和“9”的一个数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  由指定的字符集<xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>属性对分析或格式设置操作无效。 基本拉丁文数字 0 (U + 0030-u) 到 9 (U + 0039) 格式设置或分析的数值或日期和时间值时使用。  
  
   
  
## Examples  
 下面的示例演示<xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>属性。  
  
 [!code-cpp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cpp/nd.cpp#1)]
 [!code-csharp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cs/nd.cs#1)]
 [!code-vb[sys.glob.NFI.nativeDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/vb/nd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <exception cref="T:System.ArgumentNullException">在集运算中，值为 <see langword="null" />。  
  
- 或 - 
在集运算中，值数组的元素是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">在集运算中，值数组不包含 10 个元素。  
  
或 
在集运算中，值数组的元素不包含单个 <see cref="T:System.Char" /> 对象或一对构成代理项对的 <see cref="T:System.Char" /> 对象。  
  
- 或 - 
在集运算中，值数组的元素不是由 [Unicode 标准](https://go.microsoft.com/fwlink/?linkid=37123)定义的数字。 即，数组元素中的数字不具有 Unicode <see langword="Number, Decimal Digit" /> (Nd) 常规类别值。  
  
- 或 - 
在集运算中，值数组中的元素的数值不对应数组中元素的位置。 也就是说，位于索引 0 的元素（数组的第一个元素）不具有数值 0，或位于索引 1 处的元素不具有数值 1。</exception>
        <altmember cref="T:System.Globalization.DigitShapes" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinitySymbol">
      <MemberSignature Language="C#" Value="public string NegativeInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示负无穷大的字符串。</summary>
        <value>表示负无穷大的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“Infinity”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 负无穷大的详细信息，请参阅<xref:System.Double>或<xref:System.Single>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="NegativeSign">
      <MemberSignature Language="C#" Value="public string NegativeSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示关联数字是负值的字符串。</summary>
        <value>表示关联数字是负值的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“-”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在格式设置和分析操作中使用此属性。 在格式设置操作中使用的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)并[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)主题。  
  
   
  
## Examples  
 下面的示例实例化一个读写<xref:System.Globalization.CultureInfo>对象，表示固定区域性并将上划线字符 (U + 203E) 分配给其<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>属性。 然后，它使用此<xref:System.Globalization.CultureInfo>要设置格式的负浮点数数组对象。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/cs/negativesign1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/vb/negativesign1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalDigits">
      <MemberSignature Language="C#" Value="public int NumberDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在数值中使用的小数位数。</summary>
        <value>在数值中使用的小数位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为 2。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>属性用于不带精度说明符数字格式设置操作中的"F"和"N"标准格式字符串。 它定义默认的小数分隔符后的显示的小数位数。 如果精度说明符重写此值。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>属性。  
  
 [!code-cpp[NumberDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalDigits/CPP/numberdecimaldigits.cpp#1)]
 [!code-csharp[NumberDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalDigits/CS/numberdecimaldigits.cs#1)]
 [!code-vb[NumberDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalDigits/VB/numberdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 99 的值。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalSeparator">
      <MemberSignature Language="C#" Value="public string NumberDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在数值中用作小数分隔符的字符串。</summary>
        <value>在数值中用作小数分隔符的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“.”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>属性的"E"、"F"、"G"、"N"和"R"标准格式字符串来替换用于定义与小数位分隔整数的符号。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
 此属性的初始值派生自中的设置**区域和语言**控制面板中的项。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>属性。  
  
 [!code-cpp[NumberDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalSeparator/CPP/numberdecimalseparator.cpp#1)]
 [!code-csharp[NumberDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalSeparator/CS/numberdecimalseparator.cs#1)]
 [!code-vb[NumberDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalSeparator/VB/numberdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <exception cref="T:System.ArgumentException">该属性被设置为空字符串。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSeparator">
      <MemberSignature Language="C#" Value="public string NumberGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在数值中隔开小数点左边的位数组的字符串。</summary>
        <value>在数值中隔开小数点左边的位数组的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“,”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>属性用于使用"N"标准格式字符串定义符号的整数位组分隔。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
 此属性的初始值派生自中的设置**区域和语言**控制面板中的项。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>属性。  
  
 [!code-cpp[NumberGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSeparator/CPP/numbergroupseparator.cpp#1)]
 [!code-csharp[NumberGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSeparator/CS/numbergroupseparator.cs#1)]
 [!code-vb[NumberGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSeparator/VB/numbergroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSizes">
      <MemberSignature Language="C#" Value="public int[] NumberGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] NumberGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ NumberGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数值中小数点左边每一组的位数。</summary>
        <value>数值中小数点左边每一组的位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>属性会影响通过使用"N"格式的数字值的结果。 如果自定义数字格式字符串或其他标准数字格式字符串会使用，则<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>属性将被忽略。  
  
 一维数组中的每个元素必须是从 1 到 9 的整数。 最后一个元素可以为 0。  
  
 数组的第一个元素的左侧的数字的最低有效位组中定义的元素数<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>。 每个后续元素引用左侧的上一组位的下一步重大组。 如果数组的最后一个元素是不为 0，剩余的数字进行分组基于数组的最后一个元素。 如果最后一个元素为 0，其余位未分组。  
  
 例如，如果数组包含 {3，4，5}，数字进行分组类似于"55,55555,55555,55555,4444,333.00"。 如果数组包含 {3，4，0}，数字进行分组类似于"55555555555555555,4444,333.00"。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>属性。  
  
 [!code-cpp[NumberGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSizes/CPP/numbergroupsizes.cpp#1)]
 [!code-csharp[NumberGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSizes/CS/numbergroupsizes.cs#1)]
 [!code-vb[NumberGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSizes/VB/numbergroupsizes.vb#1)]  
  
 下面的示例将使用不同值打印<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>数组。  
  
 [!code-cpp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">设置了该属性，但数组包含一个小于 0 或大于 9 的项。  
  
- 或 - 
设置了该属性，但数组包含一个设置为 0 的项（最后一项除外）。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="NumberNegativePattern">
      <MemberSignature Language="C#" Value="public int NumberNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置负数值的格式模式。</summary>
        <value>负数值的格式模式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>属性定义使用"N"标准数字格式字符串格式化的负值的格式。 此属性在下表中具有的值之一。 符号"-"是<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>和`n`是一个数字。  
  
|值|相关的模式|  
|-----------|------------------------|  
|0|(n)|  
|1|-n|  
|2|- n|  
|3|n-|  
|4|n -|  
  
 返回的固定区域性的默认值<xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>属性为 1，表示"-n"，其中*n*是一个数字。  
  
   
  
## Examples  
 下面的示例显示使用不同的值<xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>模式。  
  
 [!code-cpp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 4 的值。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalDigits">
      <MemberSignature Language="C#" Value="public int PercentDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在百分比值中使用的小数位数。</summary>
        <value>要在百分比值中使用的小数位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为 2。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>属性用于不带精度说明符数字格式设置操作中的"P"标准格式字符串。 它定义默认的小数分隔符后的显示的小数位数。 如果精度说明符重写此值。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>属性。  
  
 [!code-cpp[PercentDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalDigits/CPP/percentdecimaldigits.cpp#1)]
 [!code-csharp[PercentDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalDigits/CS/percentdecimaldigits.cs#1)]
 [!code-vb[PercentDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalDigits/VB/percentdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 99 的值。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalSeparator">
      <MemberSignature Language="C#" Value="public string PercentDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在百分比值中用作小数点分隔符的字符串。</summary>
        <value>在百分比值中用作小数分隔符的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“.”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>属性用于"P"标准格式字符串来定义与小数位分隔整数的符号。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>属性。  
  
 [!code-cpp[PercentDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalSeparator/CPP/percentdecimalseparator.cpp#1)]
 [!code-csharp[PercentDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalSeparator/CS/percentdecimalseparator.cs#1)]
 [!code-vb[PercentDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalSeparator/VB/percentdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <exception cref="T:System.ArgumentException">该属性被设置为空字符串。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSeparator">
      <MemberSignature Language="C#" Value="public string PercentGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在百分比值中隔离小数点左边数字组的字符串。</summary>
        <value>在百分比值中隔开小数点左边的位数组的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“,”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>属性用于与"P"标准格式字符串定义符号的整数进行分组。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>属性。  
  
 [!code-cpp[PercentGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSeparator/CPP/percentgroupseparator.cpp#1)]
 [!code-csharp[PercentGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSeparator/CS/percentgroupseparator.cs#1)]
 [!code-vb[PercentGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSeparator/VB/percentgroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSizes">
      <MemberSignature Language="C#" Value="public int[] PercentGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] PercentGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ PercentGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在百分比值中小数点左边每一组的位数。</summary>
        <value>百分比值中小数点左边的每一组的位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>属性用于"P"标准格式字符串可以定义整型组中显示的位数。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 一维数组中的每个元素必须是从 1 到 9 的整数。 最后一个元素可以为 0。  
  
 数组的第一个元素的左侧的数字的最低有效位组中定义的元素数<xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>。 每个后续元素引用左侧的上一组位的下一步重大组。 如果数组的最后一个元素是不为 0，剩余的数字进行分组基于数组的最后一个元素。 如果最后一个元素为 0，其余位未分组。  
  
 例如，如果数组包含 {3，4，5}，则数字进行分组类似于"55,55555,55555,55555,4444,333.00%"。 如果数组包含 {3，4，0}，则数字进行分组类似于"55555555555555555,4444,333.00%"。  
  
   
  
## Examples  
 下面的示例演示了更改的效果<xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>属性。  
  
 [!code-cpp[PercentGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSizes/CPP/percentgroupsizes.cpp#1)]
 [!code-csharp[PercentGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSizes/CS/percentgroupsizes.cs#1)]
 [!code-vb[PercentGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSizes/VB/percentgroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">设置了该属性，但数组包含一个小于 0 或大于 9 的项。  
  
- 或 - 
设置了该属性，但数组包含一个设置为 0 的项（最后一项除外）。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="PercentNegativePattern">
      <MemberSignature Language="C#" Value="public int PercentNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置负百分比值的格式模式。</summary>
        <value>负百分比值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，它表示“-n %”，其中“%”是 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，<paramref name="n" /> 是一个数字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>属性用于"P"标准格式字符串来定义负百分比值的模式。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 此属性在下表中具有的值之一。 符号"%"是<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>，该符号"-"是<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>，和`n`是一个数字。 值 3 11 在.NET Framework 2.0 中引入，并且不能在早期版本中使用。  
  
|值|相关的模式|  
|-----------|------------------------|  
|0|-n %|  
|1|-n%|  
|2|-%n|  
|3|%n|  
|4|%n-|  
|5|n-%|  
|6|n%-|  
|7|-% n|  
|8|n %-|  
|9|%n-|  
|10|%n|  
|11|n-%|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 11 的值。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentPositivePattern">
      <MemberSignature Language="C#" Value="public int PercentPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置正百分比值的格式模式。</summary>
        <value>正百分比值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，它表示“n %”，其中“%”是 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，<paramref name="n" /> 是一个数字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>属性用于"P"标准格式字符串来定义正百分比值的模式。 有关详细信息，请参阅[标准数值格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。 此属性在下表中具有的值之一。 符号"%"是<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>和`n`是一个数字。  
  
|值|相关的模式|  
|-----------|------------------------|  
|0|n %|  
|1|n%|  
|2|%n|  
|3|%n|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 3 的值。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentSymbol">
      <MemberSignature Language="C#" Value="public string PercentSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用作百分比符号的字符串。</summary>
        <value>用作百分比符号的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“%”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将字符串分配给<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>"P"或包含"%"的格式字符串格式化的数字值时，结果字符串中包含的属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PerMilleSymbol">
      <MemberSignature Language="C#" Value="public string PerMilleSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PerMilleSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PerMilleSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PerMilleSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PerMilleSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用作千分比符号的字符串。</summary>
        <value>用作千分比符号的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“‰”，它是 Unicode 字符 U+2030。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将字符串分配给<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>时使用包含"‰"的格式字符串格式化的数字值，结果字符串中包含的属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinitySymbol">
      <MemberSignature Language="C#" Value="public string PositiveInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示正无穷大的字符串。</summary>
        <value>表示正无穷大的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“Infinity”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正无穷大的详细信息，请参阅<xref:System.Double>或<xref:System.Single>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveSign">
      <MemberSignature Language="C#" Value="public string PositiveSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示关联数字是正值的字符串。</summary>
        <value>指示关联数字是正值的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“+”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅用于分析数字字符串，不进行格式化。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在设置操作中，要分配的值为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo ReadOnly (System.Globalization.NumberFormatInfo nfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo ReadOnly(class System.Globalization.NumberFormatInfo nfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (nfi As NumberFormatInfo) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ ReadOnly(System::Globalization::NumberFormatInfo ^ nfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.NumberFormatInfo -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.ReadOnly nfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nfi" Type="System.Globalization.NumberFormatInfo" />
      </Parameters>
      <Docs>
        <param name="nfi">要包装的 <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
        <summary>返回只读的 <see cref="T:System.Globalization.NumberFormatInfo" /> 包装。</summary>
        <returns><paramref name="nfi" /> 周围的只读 <see cref="T:System.Globalization.NumberFormatInfo" /> 包装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此包装器可防止对进行任何修改`nfi`。  
  
 尝试执行的一个只读的属性赋值<xref:System.Globalization.NumberFormatInfo>导致<xref:System.InvalidOperationException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="nfi" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      </Docs>
    </Member>
  </Members>
</Type>
